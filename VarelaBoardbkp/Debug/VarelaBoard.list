
VarelaBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007254  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080073dc  080073dc  000173dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007420  08007420  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08007420  08007420  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007420  08007420  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007420  08007420  00017420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007424  08007424  00017424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000084  080074ac  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  080074ac  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162b3  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027aa  00000000  00000000  00036367  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001480  00000000  00000000  00038b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001348  00000000  00000000  00039f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029b92  00000000  00000000  0003b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f498  00000000  00000000  00064e72  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00105a22  00000000  00000000  0007430a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00179d2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b24  00000000  00000000  00179da8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080073c4 	.word	0x080073c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	080073c4 	.word	0x080073c4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4a:	2003      	movs	r0, #3
 8000b4c:	f001 ff36 	bl	80029bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b50:	2000      	movs	r0, #0
 8000b52:	f000 f80d 	bl	8000b70 <HAL_InitTick>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d002      	beq.n	8000b62 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	e001      	b.n	8000b66 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b62:	f005 fef7 	bl	8006954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_InitTick+0x68>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d022      	beq.n	8000bca <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_InitTick+0x6c>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <HAL_InitTick+0x68>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 ff36 	bl	8002a0a <HAL_SYSTICK_Config>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d10f      	bne.n	8000bc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b0f      	cmp	r3, #15
 8000ba8:	d809      	bhi.n	8000bbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000baa:	2200      	movs	r2, #0
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb2:	f001 ff0e 	bl	80029d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_InitTick+0x70>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	e007      	b.n	8000bce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e004      	b.n	8000bce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
 8000bc8:	e001      	b.n	8000bce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000004 	.word	0x20000004
 8000bdc:	2000000c 	.word	0x2000000c
 8000be0:	20000000 	.word	0x20000000

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x1c>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x20>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <HAL_IncTick+0x1c>)
 8000bf4:	6013      	str	r3, [r2, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	2000013c 	.word	0x2000013c
 8000c04:	20000004 	.word	0x20000004

08000c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	2000013c 	.word	0x2000013c

08000c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff ffee 	bl	8000c08 <HAL_GetTick>
 8000c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c38:	d004      	beq.n	8000c44 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_Delay+0x40>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4413      	add	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c44:	bf00      	nop
 8000c46:	f7ff ffdf 	bl	8000c08 <HAL_GetTick>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d8f7      	bhi.n	8000c46 <HAL_Delay+0x26>
  {
  }
}
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000004 	.word	0x20000004

08000c64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ccc:	b490      	push	{r4, r7}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	3360      	adds	r3, #96	; 0x60
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000ce8:	6822      	ldr	r2, [r4, #0]
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <LL_ADC_SetOffset+0x40>)
 8000cec:	4013      	ands	r3, r2
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000cf4:	683a      	ldr	r2, [r7, #0]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cfe:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc90      	pop	{r4, r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	03fff000 	.word	0x03fff000

08000d10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d10:	b490      	push	{r4, r7}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3360      	adds	r3, #96	; 0x60
 8000d1e:	461a      	mov	r2, r3
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d28:	6823      	ldr	r3, [r4, #0]
 8000d2a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc90      	pop	{r4, r7}
 8000d36:	4770      	bx	lr

08000d38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d38:	b490      	push	{r4, r7}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3360      	adds	r3, #96	; 0x60
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000d52:	6823      	ldr	r3, [r4, #0]
 8000d54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc90      	pop	{r4, r7}
 8000d66:	4770      	bx	lr

08000d68 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d101      	bne.n	8000d80 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e000      	b.n	8000d82 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d8e:	b490      	push	{r4, r7}
 8000d90:	b084      	sub	sp, #16
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3330      	adds	r3, #48	; 0x30
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	0a1b      	lsrs	r3, r3, #8
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	f003 030c 	and.w	r3, r3, #12
 8000daa:	4413      	add	r3, r2
 8000dac:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000dae:	6822      	ldr	r2, [r4, #0]
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	f003 031f 	and.w	r3, r3, #31
 8000db6:	211f      	movs	r1, #31
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	0e9b      	lsrs	r3, r3, #26
 8000dc4:	f003 011f 	and.w	r1, r3, #31
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	f003 031f 	and.w	r3, r3, #31
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc90      	pop	{r4, r7}
 8000dde:	4770      	bx	lr

08000de0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000de0:	b490      	push	{r4, r7}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3314      	adds	r3, #20
 8000df0:	461a      	mov	r2, r3
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	0e5b      	lsrs	r3, r3, #25
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	4413      	add	r3, r2
 8000dfe:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000e00:	6822      	ldr	r2, [r4, #0]
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	0d1b      	lsrs	r3, r3, #20
 8000e06:	f003 031f 	and.w	r3, r3, #31
 8000e0a:	2107      	movs	r1, #7
 8000e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	401a      	ands	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	0d1b      	lsrs	r3, r3, #20
 8000e18:	f003 031f 	and.w	r3, r3, #31
 8000e1c:	6879      	ldr	r1, [r7, #4]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc90      	pop	{r4, r7}
 8000e2e:	4770      	bx	lr

08000e30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0318 	and.w	r3, r3, #24
 8000e52:	4908      	ldr	r1, [pc, #32]	; (8000e74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e54:	40d9      	lsrs	r1, r3
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	400b      	ands	r3, r1
 8000e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e66:	bf00      	nop
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	0007ffff 	.word	0x0007ffff

08000e78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f003 031f 	and.w	r3, r3, #31
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000ec0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	6093      	str	r3, [r2, #8]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ee8:	d101      	bne.n	8000eee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f38:	d101      	bne.n	8000f3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f60:	f043 0201 	orr.w	r2, r3, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f88:	f043 0202 	orr.w	r2, r3, #2
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d101      	bne.n	8000fb4 <LL_ADC_IsEnabled+0x18>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <LL_ADC_IsEnabled+0x1a>
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d101      	bne.n	8000fda <LL_ADC_IsDisableOngoing+0x18>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <LL_ADC_IsDisableOngoing+0x1a>
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ff8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ffc:	f043 0204 	orr.w	r2, r3, #4
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001020:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001024:	f043 0210 	orr.w	r2, r3, #16
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	2b04      	cmp	r3, #4
 800104a:	d101      	bne.n	8001050 <LL_ADC_REG_IsConversionOngoing+0x18>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800106e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001072:	f043 0220 	orr.w	r2, r3, #32
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b08      	cmp	r3, #8
 8001098:	d101      	bne.n	800109e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e134      	b.n	8001330 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d109      	bne.n	80010e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f005 fc61 	bl	800699c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fef1 	bl	8000ed4 <LL_ADC_IsDeepPowerDownEnabled>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d004      	beq.n	8001102 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fed7 	bl	8000eb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff0c 	bl	8000f24 <LL_ADC_IsInternalRegulatorEnabled>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d113      	bne.n	800113a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fef0 	bl	8000efc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800111c:	4b86      	ldr	r3, [pc, #536]	; (8001338 <HAL_ADC_Init+0x28c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	099b      	lsrs	r3, r3, #6
 8001122:	4a86      	ldr	r2, [pc, #536]	; (800133c <HAL_ADC_Init+0x290>)
 8001124:	fba2 2303 	umull	r2, r3, r2, r3
 8001128:	099b      	lsrs	r3, r3, #6
 800112a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800112c:	e002      	b.n	8001134 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	3b01      	subs	r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f9      	bne.n	800112e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fef0 	bl	8000f24 <LL_ADC_IsInternalRegulatorEnabled>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10d      	bne.n	8001166 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800114e:	f043 0210 	orr.w	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	f043 0201 	orr.w	r2, r3, #1
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff64 	bl	8001038 <LL_ADC_REG_IsConversionOngoing>
 8001170:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001176:	f003 0310 	and.w	r3, r3, #16
 800117a:	2b00      	cmp	r3, #0
 800117c:	f040 80cf 	bne.w	800131e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f040 80cb 	bne.w	800131e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800118c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001190:	f043 0202 	orr.w	r2, r3, #2
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fefd 	bl	8000f9c <LL_ADC_IsEnabled>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d115      	bne.n	80011d4 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011a8:	4865      	ldr	r0, [pc, #404]	; (8001340 <HAL_ADC_Init+0x294>)
 80011aa:	f7ff fef7 	bl	8000f9c <LL_ADC_IsEnabled>
 80011ae:	4604      	mov	r4, r0
 80011b0:	4864      	ldr	r0, [pc, #400]	; (8001344 <HAL_ADC_Init+0x298>)
 80011b2:	f7ff fef3 	bl	8000f9c <LL_ADC_IsEnabled>
 80011b6:	4603      	mov	r3, r0
 80011b8:	431c      	orrs	r4, r3
 80011ba:	4863      	ldr	r0, [pc, #396]	; (8001348 <HAL_ADC_Init+0x29c>)
 80011bc:	f7ff feee 	bl	8000f9c <LL_ADC_IsEnabled>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4323      	orrs	r3, r4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d105      	bne.n	80011d4 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4619      	mov	r1, r3
 80011ce:	485f      	ldr	r0, [pc, #380]	; (800134c <HAL_ADC_Init+0x2a0>)
 80011d0:	f7ff fd48 	bl	8000c64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7e5b      	ldrb	r3, [r3, #25]
 80011d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80011e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80011ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d106      	bne.n	8001210 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	3b01      	subs	r3, #1
 8001208:	045b      	lsls	r3, r3, #17
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001214:	2b00      	cmp	r3, #0
 8001216:	d009      	beq.n	800122c <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001224:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	4b47      	ldr	r3, [pc, #284]	; (8001350 <HAL_ADC_Init+0x2a4>)
 8001234:	4013      	ands	r3, r2
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	69b9      	ldr	r1, [r7, #24]
 800123c:	430b      	orrs	r3, r1
 800123e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fef7 	bl	8001038 <LL_ADC_REG_IsConversionOngoing>
 800124a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff18 	bl	8001086 <LL_ADC_INJ_IsConversionOngoing>
 8001256:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d13d      	bne.n	80012da <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d13a      	bne.n	80012da <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001268:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001270:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001280:	f023 0302 	bic.w	r3, r3, #2
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	69b9      	ldr	r1, [r7, #24]
 800128a:	430b      	orrs	r3, r1
 800128c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001294:	2b01      	cmp	r3, #1
 8001296:	d118      	bne.n	80012ca <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012a2:	f023 0304 	bic.w	r3, r3, #4
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012ae:	4311      	orrs	r1, r2
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80012b4:	4311      	orrs	r1, r2
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80012ba:	430a      	orrs	r2, r1
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0201 	orr.w	r2, r2, #1
 80012c6:	611a      	str	r2, [r3, #16]
 80012c8:	e007      	b.n	80012da <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0201 	bic.w	r2, r2, #1
 80012d8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d10c      	bne.n	80012fc <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	f023 010f 	bic.w	r1, r3, #15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	1e5a      	subs	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	631a      	str	r2, [r3, #48]	; 0x30
 80012fa:	e007      	b.n	800130c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 020f 	bic.w	r2, r2, #15
 800130a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001310:	f023 0303 	bic.w	r3, r3, #3
 8001314:	f043 0201 	orr.w	r2, r3, #1
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	655a      	str	r2, [r3, #84]	; 0x54
 800131c:	e007      	b.n	800132e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001322:	f043 0210 	orr.w	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800132e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3724      	adds	r7, #36	; 0x24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd90      	pop	{r4, r7, pc}
 8001338:	2000000c 	.word	0x2000000c
 800133c:	053e2d63 	.word	0x053e2d63
 8001340:	50040000 	.word	0x50040000
 8001344:	50040100 	.word	0x50040100
 8001348:	50040200 	.word	0x50040200
 800134c:	50040300 	.word	0x50040300
 8001350:	fff0c007 	.word	0xfff0c007

08001354 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800135c:	4857      	ldr	r0, [pc, #348]	; (80014bc <HAL_ADC_Start+0x168>)
 800135e:	f7ff fd8b 	bl	8000e78 <LL_ADC_GetMultimode>
 8001362:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fe65 	bl	8001038 <LL_ADC_REG_IsConversionOngoing>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	f040 809c 	bne.w	80014ae <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800137c:	2b01      	cmp	r3, #1
 800137e:	d101      	bne.n	8001384 <HAL_ADC_Start+0x30>
 8001380:	2302      	movs	r3, #2
 8001382:	e097      	b.n	80014b4 <HAL_ADC_Start+0x160>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 fdc5 	bl	8001f1c <ADC_Enable>
 8001392:	4603      	mov	r3, r0
 8001394:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001396:	7dfb      	ldrb	r3, [r7, #23]
 8001398:	2b00      	cmp	r3, #0
 800139a:	f040 8083 	bne.w	80014a4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013a6:	f023 0301 	bic.w	r3, r3, #1
 80013aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a42      	ldr	r2, [pc, #264]	; (80014c0 <HAL_ADC_Start+0x16c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d002      	beq.n	80013c2 <HAL_ADC_Start+0x6e>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	e000      	b.n	80013c4 <HAL_ADC_Start+0x70>
 80013c2:	4b40      	ldr	r3, [pc, #256]	; (80014c4 <HAL_ADC_Start+0x170>)
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d002      	beq.n	80013d2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d105      	bne.n	80013de <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013ea:	d106      	bne.n	80013fa <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f0:	f023 0206 	bic.w	r2, r3, #6
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	659a      	str	r2, [r3, #88]	; 0x58
 80013f8:	e002      	b.n	8001400 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	221c      	movs	r2, #28
 8001406:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a2a      	ldr	r2, [pc, #168]	; (80014c0 <HAL_ADC_Start+0x16c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d002      	beq.n	8001420 <HAL_ADC_Start+0xcc>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	e000      	b.n	8001422 <HAL_ADC_Start+0xce>
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <HAL_ADC_Start+0x170>)
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	4293      	cmp	r3, r2
 8001428:	d008      	beq.n	800143c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	2b05      	cmp	r3, #5
 8001434:	d002      	beq.n	800143c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	2b09      	cmp	r3, #9
 800143a:	d114      	bne.n	8001466 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001452:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fdc2 	bl	8000fe8 <LL_ADC_REG_StartConversion>
 8001464:	e025      	b.n	80014b2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <HAL_ADC_Start+0x16c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d002      	beq.n	8001482 <HAL_ADC_Start+0x12e>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	e000      	b.n	8001484 <HAL_ADC_Start+0x130>
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_ADC_Start+0x170>)
 8001484:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00f      	beq.n	80014b2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001496:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800149a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54
 80014a2:	e006      	b.n	80014b2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80014ac:	e001      	b.n	80014b2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014ae:	2302      	movs	r3, #2
 80014b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80014b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	50040300 	.word	0x50040300
 80014c0:	50040100 	.word	0x50040100
 80014c4:	50040000 	.word	0x50040000

080014c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <HAL_ADC_Stop+0x16>
 80014da:	2302      	movs	r3, #2
 80014dc:	e023      	b.n	8001526 <HAL_ADC_Stop+0x5e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80014e6:	2103      	movs	r1, #3
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 fc63 	bl	8001db4 <ADC_ConversionStop>
 80014ee:	4603      	mov	r3, r0
 80014f0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d111      	bne.n	800151c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fd69 	bl	8001fd0 <ADC_Disable>
 80014fe:	4603      	mov	r3, r0
 8001500:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d109      	bne.n	800151c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	f043 0201 	orr.w	r2, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800153a:	4862      	ldr	r0, [pc, #392]	; (80016c4 <HAL_ADC_PollForConversion+0x194>)
 800153c:	f7ff fc9c 	bl	8000e78 <LL_ADC_GetMultimode>
 8001540:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	2b08      	cmp	r3, #8
 8001548:	d102      	bne.n	8001550 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800154a:	2308      	movs	r3, #8
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	e02a      	b.n	80015a6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d005      	beq.n	8001562 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2b05      	cmp	r3, #5
 800155a:	d002      	beq.n	8001562 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2b09      	cmp	r3, #9
 8001560:	d111      	bne.n	8001586 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d007      	beq.n	8001580 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001574:	f043 0220 	orr.w	r2, r3, #32
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e09d      	b.n	80016bc <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001580:	2304      	movs	r3, #4
 8001582:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001584:	e00f      	b.n	80015a6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001586:	484f      	ldr	r0, [pc, #316]	; (80016c4 <HAL_ADC_PollForConversion+0x194>)
 8001588:	f7ff fc84 	bl	8000e94 <LL_ADC_GetMultiDMATransfer>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001596:	f043 0220 	orr.w	r2, r3, #32
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e08c      	b.n	80016bc <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80015a2:	2304      	movs	r3, #4
 80015a4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80015a6:	f7ff fb2f 	bl	8000c08 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015ac:	e01a      	b.n	80015e4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d016      	beq.n	80015e4 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80015b6:	f7ff fb27 	bl	8000c08 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d302      	bcc.n	80015cc <HAL_ADC_PollForConversion+0x9c>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10b      	bne.n	80015e4 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d0:	f043 0204 	orr.w	r2, r3, #4
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e06b      	b.n	80016bc <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0dd      	beq.n	80015ae <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fbb0 	bl	8000d68 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d01c      	beq.n	8001648 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7e5b      	ldrb	r3, [r3, #25]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d118      	bne.n	8001648 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b08      	cmp	r3, #8
 8001622:	d111      	bne.n	8001648 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001628:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d105      	bne.n	8001648 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	f043 0201 	orr.w	r2, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1e      	ldr	r2, [pc, #120]	; (80016c8 <HAL_ADC_PollForConversion+0x198>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d002      	beq.n	8001658 <HAL_ADC_PollForConversion+0x128>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	e000      	b.n	800165a <HAL_ADC_PollForConversion+0x12a>
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <HAL_ADC_PollForConversion+0x19c>)
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	4293      	cmp	r3, r2
 8001660:	d008      	beq.n	8001674 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2b05      	cmp	r3, #5
 800166c:	d002      	beq.n	8001674 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2b09      	cmp	r3, #9
 8001672:	d104      	bne.n	800167e <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	e00c      	b.n	8001698 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <HAL_ADC_PollForConversion+0x198>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d002      	beq.n	800168e <HAL_ADC_PollForConversion+0x15e>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	e000      	b.n	8001690 <HAL_ADC_PollForConversion+0x160>
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_ADC_PollForConversion+0x19c>)
 8001690:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	2b08      	cmp	r3, #8
 800169c:	d104      	bne.n	80016a8 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2208      	movs	r2, #8
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e008      	b.n	80016ba <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d103      	bne.n	80016ba <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	220c      	movs	r2, #12
 80016b8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	50040300 	.word	0x50040300
 80016c8:	50040100 	.word	0x50040100
 80016cc:	50040000 	.word	0x50040000

080016d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b0a6      	sub	sp, #152	; 0x98
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_ADC_ConfigChannel+0x22>
 800170a:	2302      	movs	r3, #2
 800170c:	e348      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x6b4>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fc8c 	bl	8001038 <LL_ADC_REG_IsConversionOngoing>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 8329 	bne.w	8001d7a <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d824      	bhi.n	800177a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	3b02      	subs	r3, #2
 8001736:	2b03      	cmp	r3, #3
 8001738:	d81b      	bhi.n	8001772 <HAL_ADC_ConfigChannel+0x86>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <HAL_ADC_ConfigChannel+0x54>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	08001751 	.word	0x08001751
 8001744:	08001759 	.word	0x08001759
 8001748:	08001761 	.word	0x08001761
 800174c:	08001769 	.word	0x08001769
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	220c      	movs	r2, #12
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	e011      	b.n	800177c <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	2212      	movs	r2, #18
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	e00d      	b.n	800177c <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2218      	movs	r2, #24
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	e009      	b.n	800177c <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	e004      	b.n	800177c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2206      	movs	r2, #6
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	e000      	b.n	800177c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800177a:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	f7ff fb00 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fc50 	bl	8001038 <LL_ADC_REG_IsConversionOngoing>
 8001798:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fc70 	bl	8001086 <LL_ADC_INJ_IsConversionOngoing>
 80017a6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f040 8148 	bne.w	8001a44 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f040 8143 	bne.w	8001a44 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	6819      	ldr	r1, [r3, #0]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	461a      	mov	r2, r3
 80017cc:	f7ff fb08 	bl	8000de0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	08db      	lsrs	r3, r3, #3
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d00a      	beq.n	8001808 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6818      	ldr	r0, [r3, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	6919      	ldr	r1, [r3, #16]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001802:	f7ff fa63 	bl	8000ccc <LL_ADC_SetOffset>
 8001806:	e11d      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fa7e 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10a      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x148>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fa73 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 800182a:	4603      	mov	r3, r0
 800182c:	0e9b      	lsrs	r3, r3, #26
 800182e:	f003 021f 	and.w	r2, r3, #31
 8001832:	e012      	b.n	800185a <HAL_ADC_ConfigChannel+0x16e>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fa68 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800184a:	fa93 f3a3 	rbit	r3, r3
 800184e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001850:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001852:	fab3 f383 	clz	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001862:	2b00      	cmp	r3, #0
 8001864:	d105      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x186>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	0e9b      	lsrs	r3, r3, #26
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	e00a      	b.n	8001888 <HAL_ADC_ConfigChannel+0x19c>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800187a:	fa93 f3a3 	rbit	r3, r3
 800187e:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	429a      	cmp	r2, r3
 800188a:	d106      	bne.n	800189a <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fa4f 	bl	8000d38 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2101      	movs	r1, #1
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fa35 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10a      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x1da>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2101      	movs	r1, #1
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fa2a 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	0e9b      	lsrs	r3, r3, #26
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	e010      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x1fc>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2101      	movs	r1, #1
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fa1f 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80018de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x214>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	0e9b      	lsrs	r3, r3, #26
 80018fa:	f003 031f 	and.w	r3, r3, #31
 80018fe:	e00a      	b.n	8001916 <HAL_ADC_ConfigChannel+0x22a>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001908:	fa93 f3a3 	rbit	r3, r3
 800190c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800190e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	429a      	cmp	r2, r3
 8001918:	d106      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2200      	movs	r2, #0
 8001920:	2101      	movs	r1, #1
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fa08 	bl	8000d38 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2102      	movs	r1, #2
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f9ee 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 8001934:	4603      	mov	r3, r0
 8001936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10a      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x268>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2102      	movs	r1, #2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff f9e3 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	0e9b      	lsrs	r3, r3, #26
 800194e:	f003 021f 	and.w	r2, r3, #31
 8001952:	e010      	b.n	8001976 <HAL_ADC_ConfigChannel+0x28a>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2102      	movs	r1, #2
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f9d8 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001966:	fa93 f3a3 	rbit	r3, r3
 800196a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800196c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800196e:	fab3 f383 	clz	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800197e:	2b00      	cmp	r3, #0
 8001980:	d105      	bne.n	800198e <HAL_ADC_ConfigChannel+0x2a2>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	0e9b      	lsrs	r3, r3, #26
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	e00a      	b.n	80019a4 <HAL_ADC_ConfigChannel+0x2b8>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800199c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d106      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2200      	movs	r2, #0
 80019ae:	2102      	movs	r1, #2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff f9c1 	bl	8000d38 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2103      	movs	r1, #3
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff f9a7 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10a      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x2f6>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2103      	movs	r1, #3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f99c 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	0e9b      	lsrs	r3, r3, #26
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	e010      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x318>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2103      	movs	r1, #3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff f991 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80019fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x330>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	0e9b      	lsrs	r3, r3, #26
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	e00a      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x346>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d106      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2103      	movs	r1, #3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f97a 	bl	8000d38 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff faa7 	bl	8000f9c <LL_ADC_IsEnabled>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f040 810c 	bne.w	8001c6e <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6819      	ldr	r1, [r3, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	461a      	mov	r2, r3
 8001a64:	f7ff f9e4 	bl	8000e30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4aad      	ldr	r2, [pc, #692]	; (8001d24 <HAL_ADC_ConfigChannel+0x638>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	f040 80fd 	bne.w	8001c6e <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10b      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x3b0>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0e9b      	lsrs	r3, r3, #26
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	2b09      	cmp	r3, #9
 8001a92:	bf94      	ite	ls
 8001a94:	2301      	movls	r3, #1
 8001a96:	2300      	movhi	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	e012      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x3d6>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa4:	fa93 f3a3 	rbit	r3, r3
 8001aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	2b09      	cmp	r3, #9
 8001aba:	bf94      	ite	ls
 8001abc:	2301      	movls	r3, #1
 8001abe:	2300      	movhi	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d064      	beq.n	8001b90 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d107      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x3f6>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	0e9b      	lsrs	r3, r3, #26
 8001ad8:	3301      	adds	r3, #1
 8001ada:	069b      	lsls	r3, r3, #26
 8001adc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ae0:	e00e      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x414>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	3301      	adds	r3, #1
 8001afa:	069b      	lsls	r3, r3, #26
 8001afc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d109      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x434>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	0e9b      	lsrs	r3, r3, #26
 8001b12:	3301      	adds	r3, #1
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	2101      	movs	r1, #1
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	e010      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x456>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b30:	fab3 f383 	clz	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	ea42 0103 	orr.w	r1, r2, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10a      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x47c>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0e9b      	lsrs	r3, r3, #26
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f003 021f 	and.w	r2, r3, #31
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	051b      	lsls	r3, r3, #20
 8001b66:	e011      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x4a0>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	fab3 f383 	clz	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	e069      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d107      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x4c0>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0e9b      	lsrs	r3, r3, #26
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	069b      	lsls	r3, r3, #26
 8001ba6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001baa:	e00e      	b.n	8001bca <HAL_ADC_ConfigChannel+0x4de>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	61fb      	str	r3, [r7, #28]
  return result;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	069b      	lsls	r3, r3, #26
 8001bc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x4fe>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	0e9b      	lsrs	r3, r3, #26
 8001bdc:	3301      	adds	r3, #1
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	2101      	movs	r1, #1
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	e010      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x520>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa93 f3a3 	rbit	r3, r3
 8001bf6:	617b      	str	r3, [r7, #20]
  return result;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	3301      	adds	r3, #1
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	ea42 0103 	orr.w	r1, r2, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10d      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x54c>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0e9b      	lsrs	r3, r3, #26
 8001c22:	3301      	adds	r3, #1
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b1e      	subs	r3, #30
 8001c30:	051b      	lsls	r3, r3, #20
 8001c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c36:	e014      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x576>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	60fb      	str	r3, [r7, #12]
  return result;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f003 021f 	and.w	r2, r3, #31
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b1e      	subs	r3, #30
 8001c5c:	051b      	lsls	r3, r3, #20
 8001c5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c62:	430b      	orrs	r3, r1
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	6892      	ldr	r2, [r2, #8]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7ff f8b9 	bl	8000de0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <HAL_ADC_ConfigChannel+0x63c>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 808c 	beq.w	8001d94 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c7c:	482b      	ldr	r0, [pc, #172]	; (8001d2c <HAL_ADC_ConfigChannel+0x640>)
 8001c7e:	f7ff f817 	bl	8000cb0 <LL_ADC_GetCommonPathInternalCh>
 8001c82:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a29      	ldr	r2, [pc, #164]	; (8001d30 <HAL_ADC_ConfigChannel+0x644>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d12b      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x5fc>
 8001c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d125      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a24      	ldr	r2, [pc, #144]	; (8001d34 <HAL_ADC_ConfigChannel+0x648>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d004      	beq.n	8001cb0 <HAL_ADC_ConfigChannel+0x5c4>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a23      	ldr	r2, [pc, #140]	; (8001d38 <HAL_ADC_ConfigChannel+0x64c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d16e      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cb8:	4619      	mov	r1, r3
 8001cba:	481c      	ldr	r0, [pc, #112]	; (8001d2c <HAL_ADC_ConfigChannel+0x640>)
 8001cbc:	f7fe ffe5 	bl	8000c8a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <HAL_ADC_ConfigChannel+0x650>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	099b      	lsrs	r3, r3, #6
 8001cc6:	4a1e      	ldr	r2, [pc, #120]	; (8001d40 <HAL_ADC_ConfigChannel+0x654>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	099a      	lsrs	r2, r3, #6
 8001cce:	4613      	mov	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001cd8:	e002      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f9      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ce6:	e052      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <HAL_ADC_ConfigChannel+0x658>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d12a      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x65c>
 8001cf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d124      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <HAL_ADC_ConfigChannel+0x648>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d004      	beq.n	8001d12 <HAL_ADC_ConfigChannel+0x626>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <HAL_ADC_ConfigChannel+0x64c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d13f      	bne.n	8001d92 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4803      	ldr	r0, [pc, #12]	; (8001d2c <HAL_ADC_ConfigChannel+0x640>)
 8001d1e:	f7fe ffb4 	bl	8000c8a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d22:	e036      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x6a6>
 8001d24:	407f0000 	.word	0x407f0000
 8001d28:	80080000 	.word	0x80080000
 8001d2c:	50040300 	.word	0x50040300
 8001d30:	c7520000 	.word	0xc7520000
 8001d34:	50040000 	.word	0x50040000
 8001d38:	50040200 	.word	0x50040200
 8001d3c:	2000000c 	.word	0x2000000c
 8001d40:	053e2d63 	.word	0x053e2d63
 8001d44:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a16      	ldr	r2, [pc, #88]	; (8001da8 <HAL_ADC_ConfigChannel+0x6bc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d120      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d11a      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a12      	ldr	r2, [pc, #72]	; (8001dac <HAL_ADC_ConfigChannel+0x6c0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d115      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d70:	4619      	mov	r1, r3
 8001d72:	480f      	ldr	r0, [pc, #60]	; (8001db0 <HAL_ADC_ConfigChannel+0x6c4>)
 8001d74:	f7fe ff89 	bl	8000c8a <LL_ADC_SetCommonPathInternalCh>
 8001d78:	e00c      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	f043 0220 	orr.w	r2, r3, #32
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001d8c:	e002      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d8e:	bf00      	nop
 8001d90:	e000      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d92:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d9c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3798      	adds	r7, #152	; 0x98
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	80000001 	.word	0x80000001
 8001dac:	50040000 	.word	0x50040000
 8001db0:	50040300 	.word	0x50040300

08001db4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f934 	bl	8001038 <LL_ADC_REG_IsConversionOngoing>
 8001dd0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f955 	bl	8001086 <LL_ADC_INJ_IsConversionOngoing>
 8001ddc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d103      	bne.n	8001dec <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8090 	beq.w	8001f0c <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d02a      	beq.n	8001e50 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7e5b      	ldrb	r3, [r3, #25]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d126      	bne.n	8001e50 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7e1b      	ldrb	r3, [r3, #24]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d122      	bne.n	8001e50 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001e0e:	e014      	b.n	8001e3a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	4a41      	ldr	r2, [pc, #260]	; (8001f18 <ADC_ConversionStop+0x164>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d90d      	bls.n	8001e34 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1c:	f043 0210 	orr.w	r2, r3, #16
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e06c      	b.n	8001f0e <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	3301      	adds	r3, #1
 8001e38:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e44:	2b40      	cmp	r3, #64	; 0x40
 8001e46:	d1e3      	bne.n	8001e10 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2240      	movs	r2, #64	; 0x40
 8001e4e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d014      	beq.n	8001e80 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f8ec 	bl	8001038 <LL_ADC_REG_IsConversionOngoing>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00c      	beq.n	8001e80 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f8a9 	bl	8000fc2 <LL_ADC_IsDisableOngoing>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d104      	bne.n	8001e80 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff f8c8 	bl	8001010 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d014      	beq.n	8001eb0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff f8fb 	bl	8001086 <LL_ADC_INJ_IsConversionOngoing>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff f891 	bl	8000fc2 <LL_ADC_IsDisableOngoing>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d104      	bne.n	8001eb0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff f8d7 	bl	800105e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d004      	beq.n	8001ec0 <ADC_ConversionStop+0x10c>
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d105      	bne.n	8001ec6 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001eba:	230c      	movs	r3, #12
 8001ebc:	617b      	str	r3, [r7, #20]
        break;
 8001ebe:	e005      	b.n	8001ecc <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	617b      	str	r3, [r7, #20]
        break;
 8001ec4:	e002      	b.n	8001ecc <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	617b      	str	r3, [r7, #20]
        break;
 8001eca:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001ecc:	f7fe fe9c 	bl	8000c08 <HAL_GetTick>
 8001ed0:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001ed2:	e014      	b.n	8001efe <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001ed4:	f7fe fe98 	bl	8000c08 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b05      	cmp	r3, #5
 8001ee0:	d90d      	bls.n	8001efe <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee6:	f043 0210 	orr.w	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	f043 0201 	orr.w	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e007      	b.n	8001f0e <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1e3      	bne.n	8001ed4 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	a33fffff 	.word	0xa33fffff

08001f1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff f837 	bl	8000f9c <LL_ADC_IsEnabled>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d146      	bne.n	8001fc2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <ADC_Enable+0xb0>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00d      	beq.n	8001f5e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	f043 0210 	orr.w	r2, r3, #16
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	f043 0201 	orr.w	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e032      	b.n	8001fc4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fff2 	bl	8000f4c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f68:	f7fe fe4e 	bl	8000c08 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f6e:	e021      	b.n	8001fb4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff f811 	bl	8000f9c <LL_ADC_IsEnabled>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d104      	bne.n	8001f8a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe ffe1 	bl	8000f4c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f8a:	f7fe fe3d 	bl	8000c08 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d90d      	bls.n	8001fb4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9c:	f043 0210 	orr.w	r2, r3, #16
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e007      	b.n	8001fc4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d1d6      	bne.n	8001f70 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	8000003f 	.word	0x8000003f

08001fd0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fff0 	bl	8000fc2 <LL_ADC_IsDisableOngoing>
 8001fe2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe ffd7 	bl	8000f9c <LL_ADC_IsEnabled>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d040      	beq.n	8002076 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d13d      	bne.n	8002076 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 030d 	and.w	r3, r3, #13
 8002004:	2b01      	cmp	r3, #1
 8002006:	d10c      	bne.n	8002022 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe ffb1 	bl	8000f74 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2203      	movs	r2, #3
 8002018:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800201a:	f7fe fdf5 	bl	8000c08 <HAL_GetTick>
 800201e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002020:	e022      	b.n	8002068 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f043 0210 	orr.w	r2, r3, #16
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e01c      	b.n	8002078 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800203e:	f7fe fde3 	bl	8000c08 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d90d      	bls.n	8002068 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	f043 0210 	orr.w	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	f043 0201 	orr.w	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e007      	b.n	8002078 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1e3      	bne.n	800203e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <LL_ADC_IsEnabled>:
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <LL_ADC_IsEnabled+0x18>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <LL_ADC_IsEnabled+0x1a>
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d101      	bne.n	80020be <LL_ADC_REG_IsConversionOngoing+0x18>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b09f      	sub	sp, #124	; 0x7c
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e08f      	b.n	800220a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a47      	ldr	r2, [pc, #284]	; (8002214 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d102      	bne.n	8002102 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80020fc:	4b46      	ldr	r3, [pc, #280]	; (8002218 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	e001      	b.n	8002106 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10b      	bne.n	8002124 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	f043 0220 	orr.w	r2, r3, #32
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e072      	b.n	800220a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ffbd 	bl	80020a6 <LL_ADC_REG_IsConversionOngoing>
 800212c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ffb7 	bl	80020a6 <LL_ADC_REG_IsConversionOngoing>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d154      	bne.n	80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800213e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002140:	2b00      	cmp	r3, #0
 8002142:	d151      	bne.n	80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002144:	4b35      	ldr	r3, [pc, #212]	; (800221c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002146:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d02c      	beq.n	80021aa <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002162:	035b      	lsls	r3, r3, #13
 8002164:	430b      	orrs	r3, r1
 8002166:	431a      	orrs	r2, r3
 8002168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800216c:	4829      	ldr	r0, [pc, #164]	; (8002214 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800216e:	f7ff ff87 	bl	8002080 <LL_ADC_IsEnabled>
 8002172:	4604      	mov	r4, r0
 8002174:	4828      	ldr	r0, [pc, #160]	; (8002218 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002176:	f7ff ff83 	bl	8002080 <LL_ADC_IsEnabled>
 800217a:	4603      	mov	r3, r0
 800217c:	431c      	orrs	r4, r3
 800217e:	4828      	ldr	r0, [pc, #160]	; (8002220 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002180:	f7ff ff7e 	bl	8002080 <LL_ADC_IsEnabled>
 8002184:	4603      	mov	r3, r0
 8002186:	4323      	orrs	r3, r4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d137      	bne.n	80021fc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800218c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002194:	f023 030f 	bic.w	r3, r3, #15
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	6811      	ldr	r1, [r2, #0]
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	6892      	ldr	r2, [r2, #8]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	431a      	orrs	r2, r3
 80021a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021a8:	e028      	b.n	80021fc <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80021aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021b6:	4817      	ldr	r0, [pc, #92]	; (8002214 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80021b8:	f7ff ff62 	bl	8002080 <LL_ADC_IsEnabled>
 80021bc:	4604      	mov	r4, r0
 80021be:	4816      	ldr	r0, [pc, #88]	; (8002218 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80021c0:	f7ff ff5e 	bl	8002080 <LL_ADC_IsEnabled>
 80021c4:	4603      	mov	r3, r0
 80021c6:	431c      	orrs	r4, r3
 80021c8:	4815      	ldr	r0, [pc, #84]	; (8002220 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021ca:	f7ff ff59 	bl	8002080 <LL_ADC_IsEnabled>
 80021ce:	4603      	mov	r3, r0
 80021d0:	4323      	orrs	r3, r4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d112      	bne.n	80021fc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021de:	f023 030f 	bic.w	r3, r3, #15
 80021e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021e4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021e6:	e009      	b.n	80021fc <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	f043 0220 	orr.w	r2, r3, #32
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80021fa:	e000      	b.n	80021fe <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002206:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800220a:	4618      	mov	r0, r3
 800220c:	377c      	adds	r7, #124	; 0x7c
 800220e:	46bd      	mov	sp, r7
 8002210:	bd90      	pop	{r4, r7, pc}
 8002212:	bf00      	nop
 8002214:	50040000 	.word	0x50040000
 8002218:	50040100 	.word	0x50040100
 800221c:	50040300 	.word	0x50040300
 8002220:	50040200 	.word	0x50040200

08002224 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0ed      	b.n	8002412 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d102      	bne.n	8002248 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f004 fc60 	bl	8006b08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0202 	bic.w	r2, r2, #2
 8002256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002258:	f7fe fcd6 	bl	8000c08 <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800225e:	e012      	b.n	8002286 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002260:	f7fe fcd2 	bl	8000c08 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b0a      	cmp	r3, #10
 800226c:	d90b      	bls.n	8002286 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2205      	movs	r2, #5
 800227e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e0c5      	b.n	8002412 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e5      	bne.n	8002260 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022a4:	f7fe fcb0 	bl	8000c08 <HAL_GetTick>
 80022a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022aa:	e012      	b.n	80022d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022ac:	f7fe fcac 	bl	8000c08 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b0a      	cmp	r3, #10
 80022b8:	d90b      	bls.n	80022d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2205      	movs	r2, #5
 80022ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e09f      	b.n	8002412 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0e5      	beq.n	80022ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7e1b      	ldrb	r3, [r3, #24]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d108      	bne.n	80022fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e007      	b.n	800230a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002308:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7e5b      	ldrb	r3, [r3, #25]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d108      	bne.n	8002324 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	e007      	b.n	8002334 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002332:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7e9b      	ldrb	r3, [r3, #26]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d108      	bne.n	800234e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0220 	orr.w	r2, r2, #32
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e007      	b.n	800235e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0220 	bic.w	r2, r2, #32
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	7edb      	ldrb	r3, [r3, #27]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d108      	bne.n	8002378 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0210 	bic.w	r2, r2, #16
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e007      	b.n	8002388 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0210 	orr.w	r2, r2, #16
 8002386:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7f1b      	ldrb	r3, [r3, #28]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d108      	bne.n	80023a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0208 	orr.w	r2, r2, #8
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e007      	b.n	80023b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0208 	bic.w	r2, r2, #8
 80023b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	7f5b      	ldrb	r3, [r3, #29]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d108      	bne.n	80023cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0204 	orr.w	r2, r2, #4
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e007      	b.n	80023dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0204 	bic.w	r2, r2, #4
 80023da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	ea42 0103 	orr.w	r1, r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	1e5a      	subs	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800241a:	b480      	push	{r7}
 800241c:	b087      	sub	sp, #28
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002430:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d003      	beq.n	8002440 <HAL_CAN_ConfigFilter+0x26>
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	2b02      	cmp	r3, #2
 800243c:	f040 80aa 	bne.w	8002594 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	2201      	movs	r2, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	43db      	mvns	r3, r3
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d123      	bne.n	80024c2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	43db      	mvns	r3, r3
 8002484:	401a      	ands	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800249c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3248      	adds	r2, #72	; 0x48
 80024a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024b8:	6979      	ldr	r1, [r7, #20]
 80024ba:	3348      	adds	r3, #72	; 0x48
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	440b      	add	r3, r1
 80024c0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d122      	bne.n	8002510 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3248      	adds	r2, #72	; 0x48
 80024f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002504:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002506:	6979      	ldr	r1, [r7, #20]
 8002508:	3348      	adds	r3, #72	; 0x48
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	440b      	add	r3, r1
 800250e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	43db      	mvns	r3, r3
 8002522:	401a      	ands	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800252a:	e007      	b.n	800253c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	431a      	orrs	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	43db      	mvns	r3, r3
 800254e:	401a      	ands	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002556:	e007      	b.n	8002568 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	431a      	orrs	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d107      	bne.n	8002580 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	431a      	orrs	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002586:	f023 0201 	bic.w	r2, r3, #1
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	e006      	b.n	80025a2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
  }
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d12e      	bne.n	8002620 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2202      	movs	r2, #2
 80025c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0201 	bic.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025da:	f7fe fb15 	bl	8000c08 <HAL_GetTick>
 80025de:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025e0:	e012      	b.n	8002608 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025e2:	f7fe fb11 	bl	8000c08 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b0a      	cmp	r3, #10
 80025ee:	d90b      	bls.n	8002608 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2205      	movs	r2, #5
 8002600:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e012      	b.n	800262e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1e5      	bne.n	80025e2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	e006      	b.n	800262e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
  }
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002636:	b480      	push	{r7}
 8002638:	b089      	sub	sp, #36	; 0x24
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 3020 	ldrb.w	r3, [r3, #32]
 800264a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002654:	7ffb      	ldrb	r3, [r7, #31]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d003      	beq.n	8002662 <HAL_CAN_AddTxMessage+0x2c>
 800265a:	7ffb      	ldrb	r3, [r7, #31]
 800265c:	2b02      	cmp	r3, #2
 800265e:	f040 80b8 	bne.w	80027d2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80a0 	beq.w	80027c2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	0e1b      	lsrs	r3, r3, #24
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d907      	bls.n	80026a2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e09e      	b.n	80027e0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80026a2:	2201      	movs	r2, #1
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	409a      	lsls	r2, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10d      	bne.n	80026d0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026be:	68f9      	ldr	r1, [r7, #12]
 80026c0:	6809      	ldr	r1, [r1, #0]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3318      	adds	r3, #24
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	440b      	add	r3, r1
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e00f      	b.n	80026f0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026da:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026e0:	68f9      	ldr	r1, [r7, #12]
 80026e2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80026e4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	3318      	adds	r3, #24
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	440b      	add	r3, r1
 80026ee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6819      	ldr	r1, [r3, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3318      	adds	r3, #24
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	440b      	add	r3, r1
 8002700:	3304      	adds	r3, #4
 8002702:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	7d1b      	ldrb	r3, [r3, #20]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d111      	bne.n	8002730 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3318      	adds	r3, #24
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	4413      	add	r3, r2
 8002718:	3304      	adds	r3, #4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	6811      	ldr	r1, [r2, #0]
 8002720:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	3318      	adds	r3, #24
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	440b      	add	r3, r1
 800272c:	3304      	adds	r3, #4
 800272e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3307      	adds	r3, #7
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	061a      	lsls	r2, r3, #24
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3306      	adds	r3, #6
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	041b      	lsls	r3, r3, #16
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3305      	adds	r3, #5
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	4313      	orrs	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	3204      	adds	r2, #4
 8002750:	7812      	ldrb	r2, [r2, #0]
 8002752:	4610      	mov	r0, r2
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	6811      	ldr	r1, [r2, #0]
 8002758:	ea43 0200 	orr.w	r2, r3, r0
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	440b      	add	r3, r1
 8002762:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002766:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3303      	adds	r3, #3
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	061a      	lsls	r2, r3, #24
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3302      	adds	r3, #2
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	041b      	lsls	r3, r3, #16
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3301      	adds	r3, #1
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	4313      	orrs	r3, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	7812      	ldrb	r2, [r2, #0]
 8002788:	4610      	mov	r0, r2
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	6811      	ldr	r1, [r2, #0]
 800278e:	ea43 0200 	orr.w	r2, r3, r0
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	440b      	add	r3, r1
 8002798:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800279c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	3318      	adds	r3, #24
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	4413      	add	r3, r2
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	6811      	ldr	r1, [r2, #0]
 80027b0:	f043 0201 	orr.w	r2, r3, #1
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3318      	adds	r3, #24
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	440b      	add	r3, r1
 80027bc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e00e      	b.n	80027e0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e006      	b.n	80027e0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
  }
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3724      	adds	r7, #36	; 0x24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027fe:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002800:	7afb      	ldrb	r3, [r7, #11]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d002      	beq.n	800280c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002806:	7afb      	ldrb	r3, [r7, #11]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d11d      	bne.n	8002848 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3301      	adds	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3301      	adds	r3, #1
 8002832:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	3301      	adds	r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002848:	68fb      	ldr	r3, [r7, #12]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002874:	4013      	ands	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288a:	4a04      	ldr	r2, [pc, #16]	; (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	60d3      	str	r3, [r2, #12]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <__NVIC_GetPriorityGrouping+0x18>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	f003 0307 	and.w	r3, r3, #7
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	db0a      	blt.n	80028e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	490c      	ldr	r1, [pc, #48]	; (8002908 <__NVIC_SetPriority+0x4c>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	440b      	add	r3, r1
 80028e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e4:	e00a      	b.n	80028fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4908      	ldr	r1, [pc, #32]	; (800290c <__NVIC_SetPriority+0x50>)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3b04      	subs	r3, #4
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	440b      	add	r3, r1
 80028fa:	761a      	strb	r2, [r3, #24]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f1c3 0307 	rsb	r3, r3, #7
 800292a:	2b04      	cmp	r3, #4
 800292c:	bf28      	it	cs
 800292e:	2304      	movcs	r3, #4
 8002930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3304      	adds	r3, #4
 8002936:	2b06      	cmp	r3, #6
 8002938:	d902      	bls.n	8002940 <NVIC_EncodePriority+0x30>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3b03      	subs	r3, #3
 800293e:	e000      	b.n	8002942 <NVIC_EncodePriority+0x32>
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	f04f 32ff 	mov.w	r2, #4294967295
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	401a      	ands	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002958:	f04f 31ff 	mov.w	r1, #4294967295
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43d9      	mvns	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	4313      	orrs	r3, r2
         );
}
 800296a:	4618      	mov	r0, r3
 800296c:	3724      	adds	r7, #36	; 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002988:	d301      	bcc.n	800298e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298a:	2301      	movs	r3, #1
 800298c:	e00f      	b.n	80029ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <SysTick_Config+0x40>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3b01      	subs	r3, #1
 8002994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002996:	210f      	movs	r1, #15
 8002998:	f04f 30ff 	mov.w	r0, #4294967295
 800299c:	f7ff ff8e 	bl	80028bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <SysTick_Config+0x40>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a6:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <SysTick_Config+0x40>)
 80029a8:	2207      	movs	r2, #7
 80029aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	e000e010 	.word	0xe000e010

080029bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ff47 	bl	8002858 <__NVIC_SetPriorityGrouping>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b086      	sub	sp, #24
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029e4:	f7ff ff5c 	bl	80028a0 <__NVIC_GetPriorityGrouping>
 80029e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	6978      	ldr	r0, [r7, #20]
 80029f0:	f7ff ff8e 	bl	8002910 <NVIC_EncodePriority>
 80029f4:	4602      	mov	r2, r0
 80029f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff5d 	bl	80028bc <__NVIC_SetPriority>
}
 8002a02:	bf00      	nop
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ffb0 	bl	8002978 <SysTick_Config>
 8002a18:	4603      	mov	r3, r0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a32:	e17f      	b.n	8002d34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2101      	movs	r1, #1
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	4013      	ands	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8171 	beq.w	8002d2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x38>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b12      	cmp	r3, #18
 8002a5a:	d123      	bne.n	8002aa4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	08da      	lsrs	r2, r3, #3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3208      	adds	r2, #8
 8002a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	220f      	movs	r2, #15
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	08da      	lsrs	r2, r3, #3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3208      	adds	r2, #8
 8002a9e:	6939      	ldr	r1, [r7, #16]
 8002aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	2203      	movs	r2, #3
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0203 	and.w	r2, r3, #3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d00b      	beq.n	8002af8 <HAL_GPIO_Init+0xd4>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d007      	beq.n	8002af8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aec:	2b11      	cmp	r3, #17
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b12      	cmp	r3, #18
 8002af6:	d130      	bne.n	8002b5a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b2e:	2201      	movs	r2, #1
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	f003 0201 	and.w	r2, r3, #1
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d118      	bne.n	8002b98 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	08db      	lsrs	r3, r3, #3
 8002b82:	f003 0201 	and.w	r2, r3, #1
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80ac 	beq.w	8002d2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd6:	4b5e      	ldr	r3, [pc, #376]	; (8002d50 <HAL_GPIO_Init+0x32c>)
 8002bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bda:	4a5d      	ldr	r2, [pc, #372]	; (8002d50 <HAL_GPIO_Init+0x32c>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6613      	str	r3, [r2, #96]	; 0x60
 8002be2:	4b5b      	ldr	r3, [pc, #364]	; (8002d50 <HAL_GPIO_Init+0x32c>)
 8002be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bee:	4a59      	ldr	r2, [pc, #356]	; (8002d54 <HAL_GPIO_Init+0x330>)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	220f      	movs	r2, #15
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c18:	d025      	beq.n	8002c66 <HAL_GPIO_Init+0x242>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a4e      	ldr	r2, [pc, #312]	; (8002d58 <HAL_GPIO_Init+0x334>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01f      	beq.n	8002c62 <HAL_GPIO_Init+0x23e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a4d      	ldr	r2, [pc, #308]	; (8002d5c <HAL_GPIO_Init+0x338>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d019      	beq.n	8002c5e <HAL_GPIO_Init+0x23a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a4c      	ldr	r2, [pc, #304]	; (8002d60 <HAL_GPIO_Init+0x33c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_GPIO_Init+0x236>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a4b      	ldr	r2, [pc, #300]	; (8002d64 <HAL_GPIO_Init+0x340>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00d      	beq.n	8002c56 <HAL_GPIO_Init+0x232>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a4a      	ldr	r2, [pc, #296]	; (8002d68 <HAL_GPIO_Init+0x344>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <HAL_GPIO_Init+0x22e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a49      	ldr	r2, [pc, #292]	; (8002d6c <HAL_GPIO_Init+0x348>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_GPIO_Init+0x22a>
 8002c4a:	2306      	movs	r3, #6
 8002c4c:	e00c      	b.n	8002c68 <HAL_GPIO_Init+0x244>
 8002c4e:	2307      	movs	r3, #7
 8002c50:	e00a      	b.n	8002c68 <HAL_GPIO_Init+0x244>
 8002c52:	2305      	movs	r3, #5
 8002c54:	e008      	b.n	8002c68 <HAL_GPIO_Init+0x244>
 8002c56:	2304      	movs	r3, #4
 8002c58:	e006      	b.n	8002c68 <HAL_GPIO_Init+0x244>
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e004      	b.n	8002c68 <HAL_GPIO_Init+0x244>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e002      	b.n	8002c68 <HAL_GPIO_Init+0x244>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_GPIO_Init+0x244>
 8002c66:	2300      	movs	r3, #0
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	f002 0203 	and.w	r2, r2, #3
 8002c6e:	0092      	lsls	r2, r2, #2
 8002c70:	4093      	lsls	r3, r2
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c78:	4936      	ldr	r1, [pc, #216]	; (8002d54 <HAL_GPIO_Init+0x330>)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	3302      	adds	r3, #2
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c86:	4b3a      	ldr	r3, [pc, #232]	; (8002d70 <HAL_GPIO_Init+0x34c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4013      	ands	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002caa:	4a31      	ldr	r2, [pc, #196]	; (8002d70 <HAL_GPIO_Init+0x34c>)
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002cb0:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <HAL_GPIO_Init+0x34c>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cd4:	4a26      	ldr	r2, [pc, #152]	; (8002d70 <HAL_GPIO_Init+0x34c>)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cda:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <HAL_GPIO_Init+0x34c>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <HAL_GPIO_Init+0x34c>)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d04:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <HAL_GPIO_Init+0x34c>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d28:	4a11      	ldr	r2, [pc, #68]	; (8002d70 <HAL_GPIO_Init+0x34c>)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	3301      	adds	r3, #1
 8002d32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f47f ae78 	bne.w	8002a34 <HAL_GPIO_Init+0x10>
  }
}
 8002d44:	bf00      	nop
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40010000 	.word	0x40010000
 8002d58:	48000400 	.word	0x48000400
 8002d5c:	48000800 	.word	0x48000800
 8002d60:	48000c00 	.word	0x48000c00
 8002d64:	48001000 	.word	0x48001000
 8002d68:	48001400 	.word	0x48001400
 8002d6c:	48001800 	.word	0x48001800
 8002d70:	40010400 	.word	0x40010400

08002d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	807b      	strh	r3, [r7, #2]
 8002d80:	4613      	mov	r3, r2
 8002d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d84:	787b      	ldrb	r3, [r7, #1]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d8a:	887a      	ldrh	r2, [r7, #2]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d90:	e002      	b.n	8002d98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d92:	887a      	ldrh	r2, [r7, #2]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e081      	b.n	8002eba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f003 fee0 	bl	8006b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2224      	movs	r2, #36	; 0x24
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002df4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d107      	bne.n	8002e1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	e006      	b.n	8002e2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d104      	bne.n	8002e3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	ea42 0103 	orr.w	r1, r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	021a      	lsls	r2, r3, #8
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69d9      	ldr	r1, [r3, #28]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1a      	ldr	r2, [r3, #32]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	817b      	strh	r3, [r7, #10]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	f040 80da 	bne.w	800309a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_I2C_Master_Transmit+0x30>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e0d3      	b.n	800309c <HAL_I2C_Master_Transmit+0x1d8>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002efc:	f7fd fe84 	bl	8000c08 <HAL_GetTick>
 8002f00:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2319      	movs	r3, #25
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f9e6 	bl	80032e0 <I2C_WaitOnFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0be      	b.n	800309c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2221      	movs	r2, #33	; 0x21
 8002f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2210      	movs	r2, #16
 8002f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	893a      	ldrh	r2, [r7, #8]
 8002f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2bff      	cmp	r3, #255	; 0xff
 8002f4e:	d90e      	bls.n	8002f6e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	22ff      	movs	r2, #255	; 0xff
 8002f54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	8979      	ldrh	r1, [r7, #10]
 8002f5e:	4b51      	ldr	r3, [pc, #324]	; (80030a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fb48 	bl	80035fc <I2C_TransferConfig>
 8002f6c:	e06c      	b.n	8003048 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	8979      	ldrh	r1, [r7, #10]
 8002f80:	4b48      	ldr	r3, [pc, #288]	; (80030a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fb37 	bl	80035fc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002f8e:	e05b      	b.n	8003048 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	6a39      	ldr	r1, [r7, #32]
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 f9e3 	bl	8003360 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e07b      	b.n	800309c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	781a      	ldrb	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d034      	beq.n	8003048 <HAL_I2C_Master_Transmit+0x184>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d130      	bne.n	8003048 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	2200      	movs	r2, #0
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f975 	bl	80032e0 <I2C_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e04d      	b.n	800309c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	2bff      	cmp	r3, #255	; 0xff
 8003008:	d90e      	bls.n	8003028 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	22ff      	movs	r2, #255	; 0xff
 800300e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	b2da      	uxtb	r2, r3
 8003016:	8979      	ldrh	r1, [r7, #10]
 8003018:	2300      	movs	r3, #0
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 faeb 	bl	80035fc <I2C_TransferConfig>
 8003026:	e00f      	b.n	8003048 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003036:	b2da      	uxtb	r2, r3
 8003038:	8979      	ldrh	r1, [r7, #10]
 800303a:	2300      	movs	r3, #0
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 fada 	bl	80035fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d19e      	bne.n	8002f90 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	6a39      	ldr	r1, [r7, #32]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f9c2 	bl	80033e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e01a      	b.n	800309c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2220      	movs	r2, #32
 800306c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_I2C_Master_Transmit+0x1e4>)
 800307a:	400b      	ands	r3, r1
 800307c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800309a:	2302      	movs	r3, #2
  }
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	80002000 	.word	0x80002000
 80030a8:	fe00e800 	.word	0xfe00e800

080030ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	461a      	mov	r2, r3
 80030b8:	460b      	mov	r3, r1
 80030ba:	817b      	strh	r3, [r7, #10]
 80030bc:	4613      	mov	r3, r2
 80030be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	f040 80db 	bne.w	8003284 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_I2C_Master_Receive+0x30>
 80030d8:	2302      	movs	r3, #2
 80030da:	e0d4      	b.n	8003286 <HAL_I2C_Master_Receive+0x1da>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030e4:	f7fd fd90 	bl	8000c08 <HAL_GetTick>
 80030e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	2319      	movs	r3, #25
 80030f0:	2201      	movs	r2, #1
 80030f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f8f2 	bl	80032e0 <I2C_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e0bf      	b.n	8003286 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2222      	movs	r2, #34	; 0x22
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2210      	movs	r2, #16
 8003112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	893a      	ldrh	r2, [r7, #8]
 8003126:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	2bff      	cmp	r3, #255	; 0xff
 8003136:	d90e      	bls.n	8003156 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	22ff      	movs	r2, #255	; 0xff
 800313c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	b2da      	uxtb	r2, r3
 8003144:	8979      	ldrh	r1, [r7, #10]
 8003146:	4b52      	ldr	r3, [pc, #328]	; (8003290 <HAL_I2C_Master_Receive+0x1e4>)
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fa54 	bl	80035fc <I2C_TransferConfig>
 8003154:	e06d      	b.n	8003232 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	b2da      	uxtb	r2, r3
 8003166:	8979      	ldrh	r1, [r7, #10]
 8003168:	4b49      	ldr	r3, [pc, #292]	; (8003290 <HAL_I2C_Master_Receive+0x1e4>)
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 fa43 	bl	80035fc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003176:	e05c      	b.n	8003232 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	6a39      	ldr	r1, [r7, #32]
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f96b 	bl	8003458 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e07c      	b.n	8003286 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d034      	beq.n	8003232 <HAL_I2C_Master_Receive+0x186>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d130      	bne.n	8003232 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	2200      	movs	r2, #0
 80031d8:	2180      	movs	r1, #128	; 0x80
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f880 	bl	80032e0 <I2C_WaitOnFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e04d      	b.n	8003286 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2bff      	cmp	r3, #255	; 0xff
 80031f2:	d90e      	bls.n	8003212 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	22ff      	movs	r2, #255	; 0xff
 80031f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	8979      	ldrh	r1, [r7, #10]
 8003202:	2300      	movs	r3, #0
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f9f6 	bl	80035fc <I2C_TransferConfig>
 8003210:	e00f      	b.n	8003232 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003220:	b2da      	uxtb	r2, r3
 8003222:	8979      	ldrh	r1, [r7, #10]
 8003224:	2300      	movs	r3, #0
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f9e5 	bl	80035fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d19d      	bne.n	8003178 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	6a39      	ldr	r1, [r7, #32]
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f8cd 	bl	80033e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e01a      	b.n	8003286 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2220      	movs	r2, #32
 8003256:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6859      	ldr	r1, [r3, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <HAL_I2C_Master_Receive+0x1e8>)
 8003264:	400b      	ands	r3, r1
 8003266:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	e000      	b.n	8003286 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003284:	2302      	movs	r3, #2
  }
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	80002400 	.word	0x80002400
 8003294:	fe00e800 	.word	0xfe00e800

08003298 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d103      	bne.n	80032b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2200      	movs	r2, #0
 80032b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d007      	beq.n	80032d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	619a      	str	r2, [r3, #24]
  }
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	4613      	mov	r3, r2
 80032ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032f0:	e022      	b.n	8003338 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f8:	d01e      	beq.n	8003338 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fa:	f7fd fc85 	bl	8000c08 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d302      	bcc.n	8003310 <I2C_WaitOnFlagUntilTimeout+0x30>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d113      	bne.n	8003338 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e00f      	b.n	8003358 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	4013      	ands	r3, r2
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	429a      	cmp	r2, r3
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	429a      	cmp	r2, r3
 8003354:	d0cd      	beq.n	80032f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800336c:	e02c      	b.n	80033c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f8dc 	bl	8003530 <I2C_IsAcknowledgeFailed>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e02a      	b.n	80033d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003388:	d01e      	beq.n	80033c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338a:	f7fd fc3d 	bl	8000c08 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	d302      	bcc.n	80033a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d113      	bne.n	80033c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e007      	b.n	80033d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d1cb      	bne.n	800336e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ec:	e028      	b.n	8003440 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f89c 	bl	8003530 <I2C_IsAcknowledgeFailed>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e026      	b.n	8003450 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003402:	f7fd fc01 	bl	8000c08 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	429a      	cmp	r2, r3
 8003410:	d302      	bcc.n	8003418 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d113      	bne.n	8003440 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341c:	f043 0220 	orr.w	r2, r3, #32
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e007      	b.n	8003450 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b20      	cmp	r3, #32
 800344c:	d1cf      	bne.n	80033ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003464:	e055      	b.n	8003512 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f860 	bl	8003530 <I2C_IsAcknowledgeFailed>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e053      	b.n	8003522 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b20      	cmp	r3, #32
 8003486:	d129      	bne.n	80034dc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b04      	cmp	r3, #4
 8003494:	d105      	bne.n	80034a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	e03f      	b.n	8003522 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2220      	movs	r2, #32
 80034a8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4b1d      	ldr	r3, [pc, #116]	; (800352c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80034b6:	400b      	ands	r3, r1
 80034b8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e022      	b.n	8003522 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034dc:	f7fd fb94 	bl	8000c08 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d302      	bcc.n	80034f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10f      	bne.n	8003512 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	f043 0220 	orr.w	r2, r3, #32
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e007      	b.n	8003522 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b04      	cmp	r3, #4
 800351e:	d1a2      	bne.n	8003466 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	fe00e800 	.word	0xfe00e800

08003530 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	2b10      	cmp	r3, #16
 8003548:	d151      	bne.n	80035ee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800354a:	e022      	b.n	8003592 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003552:	d01e      	beq.n	8003592 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003554:	f7fd fb58 	bl	8000c08 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	429a      	cmp	r2, r3
 8003562:	d302      	bcc.n	800356a <I2C_IsAcknowledgeFailed+0x3a>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d113      	bne.n	8003592 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	f043 0220 	orr.w	r2, r3, #32
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e02e      	b.n	80035f0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b20      	cmp	r3, #32
 800359e:	d1d5      	bne.n	800354c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2210      	movs	r2, #16
 80035a6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2220      	movs	r2, #32
 80035ae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f7ff fe71 	bl	8003298 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6859      	ldr	r1, [r3, #4]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <I2C_IsAcknowledgeFailed+0xc8>)
 80035c2:	400b      	ands	r3, r1
 80035c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f043 0204 	orr.w	r2, r3, #4
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	fe00e800 	.word	0xfe00e800

080035fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	607b      	str	r3, [r7, #4]
 8003606:	460b      	mov	r3, r1
 8003608:	817b      	strh	r3, [r7, #10]
 800360a:	4613      	mov	r3, r2
 800360c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	0d5b      	lsrs	r3, r3, #21
 8003618:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800361c:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <I2C_TransferConfig+0x58>)
 800361e:	430b      	orrs	r3, r1
 8003620:	43db      	mvns	r3, r3
 8003622:	ea02 0103 	and.w	r1, r2, r3
 8003626:	897b      	ldrh	r3, [r7, #10]
 8003628:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800362c:	7a7b      	ldrb	r3, [r7, #9]
 800362e:	041b      	lsls	r3, r3, #16
 8003630:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	431a      	orrs	r2, r3
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	431a      	orrs	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003646:	bf00      	nop
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	03ff63ff 	.word	0x03ff63ff

08003658 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b20      	cmp	r3, #32
 800366c:	d138      	bne.n	80036e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003678:	2302      	movs	r3, #2
 800367a:	e032      	b.n	80036e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2224      	movs	r2, #36	; 0x24
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6819      	ldr	r1, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	e000      	b.n	80036e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036e0:	2302      	movs	r3, #2
  }
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b20      	cmp	r3, #32
 8003702:	d139      	bne.n	8003778 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800370e:	2302      	movs	r3, #2
 8003710:	e033      	b.n	800377a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2224      	movs	r2, #36	; 0x24
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003740:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	e000      	b.n	800377a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003778:	2302      	movs	r3, #2
  }
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
	...

08003788 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40007000 	.word	0x40007000

080037a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b2:	d130      	bne.n	8003816 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037b4:	4b23      	ldr	r3, [pc, #140]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c0:	d038      	beq.n	8003834 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037c2:	4b20      	ldr	r3, [pc, #128]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037ca:	4a1e      	ldr	r2, [pc, #120]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037d2:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2232      	movs	r2, #50	; 0x32
 80037d8:	fb02 f303 	mul.w	r3, r2, r3
 80037dc:	4a1b      	ldr	r2, [pc, #108]	; (800384c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	0c9b      	lsrs	r3, r3, #18
 80037e4:	3301      	adds	r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037e8:	e002      	b.n	80037f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037f0:	4b14      	ldr	r3, [pc, #80]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fc:	d102      	bne.n	8003804 <HAL_PWREx_ControlVoltageScaling+0x60>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f2      	bne.n	80037ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003804:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003810:	d110      	bne.n	8003834 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e00f      	b.n	8003836 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800381e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003822:	d007      	beq.n	8003834 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003824:	4b07      	ldr	r3, [pc, #28]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800382c:	4a05      	ldr	r2, [pc, #20]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800382e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003832:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40007000 	.word	0x40007000
 8003848:	2000000c 	.word	0x2000000c
 800384c:	431bde83 	.word	0x431bde83

08003850 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e39d      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003862:	4ba4      	ldr	r3, [pc, #656]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800386c:	4ba1      	ldr	r3, [pc, #644]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 80e1 	beq.w	8003a46 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <HAL_RCC_OscConfig+0x4a>
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b0c      	cmp	r3, #12
 800388e:	f040 8088 	bne.w	80039a2 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b01      	cmp	r3, #1
 8003896:	f040 8084 	bne.w	80039a2 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800389a:	4b96      	ldr	r3, [pc, #600]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_RCC_OscConfig+0x62>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e375      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1a      	ldr	r2, [r3, #32]
 80038b6:	4b8f      	ldr	r3, [pc, #572]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <HAL_RCC_OscConfig+0x7c>
 80038c2:	4b8c      	ldr	r3, [pc, #560]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ca:	e005      	b.n	80038d8 <HAL_RCC_OscConfig+0x88>
 80038cc:	4b89      	ldr	r3, [pc, #548]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 80038ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d2:	091b      	lsrs	r3, r3, #4
 80038d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038d8:	4293      	cmp	r3, r2
 80038da:	d223      	bcs.n	8003924 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 fcd1 	bl	8004288 <RCC_SetFlashLatencyFromMSIRange>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e356      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038f0:	4b80      	ldr	r3, [pc, #512]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a7f      	ldr	r2, [pc, #508]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 80038f6:	f043 0308 	orr.w	r3, r3, #8
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	4b7d      	ldr	r3, [pc, #500]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	497a      	ldr	r1, [pc, #488]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800390e:	4b79      	ldr	r3, [pc, #484]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	4975      	ldr	r1, [pc, #468]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	604b      	str	r3, [r1, #4]
 8003922:	e022      	b.n	800396a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003924:	4b73      	ldr	r3, [pc, #460]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a72      	ldr	r2, [pc, #456]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 800392a:	f043 0308 	orr.w	r3, r3, #8
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b70      	ldr	r3, [pc, #448]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	496d      	ldr	r1, [pc, #436]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003942:	4b6c      	ldr	r3, [pc, #432]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	4968      	ldr	r1, [pc, #416]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003952:	4313      	orrs	r3, r2
 8003954:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fc94 	bl	8004288 <RCC_SetFlashLatencyFromMSIRange>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e319      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800396a:	f000 fc03 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 800396e:	4601      	mov	r1, r0
 8003970:	4b60      	ldr	r3, [pc, #384]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	4a5f      	ldr	r2, [pc, #380]	; (8003af8 <HAL_RCC_OscConfig+0x2a8>)
 800397c:	5cd3      	ldrb	r3, [r2, r3]
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	fa21 f303 	lsr.w	r3, r1, r3
 8003986:	4a5d      	ldr	r2, [pc, #372]	; (8003afc <HAL_RCC_OscConfig+0x2ac>)
 8003988:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800398a:	4b5d      	ldr	r3, [pc, #372]	; (8003b00 <HAL_RCC_OscConfig+0x2b0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fd f8ee 	bl	8000b70 <HAL_InitTick>
 8003994:	4603      	mov	r3, r0
 8003996:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d052      	beq.n	8003a44 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	e2fd      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d032      	beq.n	8003a10 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039aa:	4b52      	ldr	r3, [pc, #328]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a51      	ldr	r2, [pc, #324]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039b6:	f7fd f927 	bl	8000c08 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039be:	f7fd f923 	bl	8000c08 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e2e6      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039d0:	4b48      	ldr	r3, [pc, #288]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039dc:	4b45      	ldr	r3, [pc, #276]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a44      	ldr	r2, [pc, #272]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 80039e2:	f043 0308 	orr.w	r3, r3, #8
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b42      	ldr	r3, [pc, #264]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	493f      	ldr	r1, [pc, #252]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039fa:	4b3e      	ldr	r3, [pc, #248]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	493a      	ldr	r1, [pc, #232]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	604b      	str	r3, [r1, #4]
 8003a0e:	e01a      	b.n	8003a46 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a10:	4b38      	ldr	r3, [pc, #224]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a37      	ldr	r2, [pc, #220]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a1c:	f7fd f8f4 	bl	8000c08 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a24:	f7fd f8f0 	bl	8000c08 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e2b3      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a36:	4b2f      	ldr	r3, [pc, #188]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x1d4>
 8003a42:	e000      	b.n	8003a46 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d074      	beq.n	8003b3c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_OscConfig+0x214>
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b0c      	cmp	r3, #12
 8003a5c:	d10e      	bne.n	8003a7c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d10b      	bne.n	8003a7c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d064      	beq.n	8003b3a <HAL_RCC_OscConfig+0x2ea>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d160      	bne.n	8003b3a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e290      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a84:	d106      	bne.n	8003a94 <HAL_RCC_OscConfig+0x244>
 8003a86:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e01d      	b.n	8003ad0 <HAL_RCC_OscConfig+0x280>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x268>
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a14      	ldr	r2, [pc, #80]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a11      	ldr	r2, [pc, #68]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCC_OscConfig+0x280>
 8003ab8:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a0d      	ldr	r2, [pc, #52]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <HAL_RCC_OscConfig+0x2a4>)
 8003aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01c      	beq.n	8003b12 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad8:	f7fd f896 	bl	8000c08 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ade:	e011      	b.n	8003b04 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae0:	f7fd f892 	bl	8000c08 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b64      	cmp	r3, #100	; 0x64
 8003aec:	d90a      	bls.n	8003b04 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e255      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
 8003af8:	080073dc 	.word	0x080073dc
 8003afc:	2000000c 	.word	0x2000000c
 8003b00:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b04:	4bae      	ldr	r3, [pc, #696]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0e7      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x290>
 8003b10:	e014      	b.n	8003b3c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b12:	f7fd f879 	bl	8000c08 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b1a:	f7fd f875 	bl	8000c08 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b64      	cmp	r3, #100	; 0x64
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e238      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b2c:	4ba4      	ldr	r3, [pc, #656]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f0      	bne.n	8003b1a <HAL_RCC_OscConfig+0x2ca>
 8003b38:	e000      	b.n	8003b3c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d060      	beq.n	8003c0a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d005      	beq.n	8003b5a <HAL_RCC_OscConfig+0x30a>
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b0c      	cmp	r3, #12
 8003b52:	d119      	bne.n	8003b88 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d116      	bne.n	8003b88 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b5a:	4b99      	ldr	r3, [pc, #612]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <HAL_RCC_OscConfig+0x322>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e215      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b72:	4b93      	ldr	r3, [pc, #588]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	061b      	lsls	r3, r3, #24
 8003b80:	498f      	ldr	r1, [pc, #572]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b86:	e040      	b.n	8003c0a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d023      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b90:	4b8b      	ldr	r3, [pc, #556]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a8a      	ldr	r2, [pc, #552]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fd f834 	bl	8000c08 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba4:	f7fd f830 	bl	8000c08 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e1f3      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb6:	4b82      	ldr	r3, [pc, #520]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc2:	4b7f      	ldr	r3, [pc, #508]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	061b      	lsls	r3, r3, #24
 8003bd0:	497b      	ldr	r1, [pc, #492]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	604b      	str	r3, [r1, #4]
 8003bd6:	e018      	b.n	8003c0a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd8:	4b79      	ldr	r3, [pc, #484]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a78      	ldr	r2, [pc, #480]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fd f810 	bl	8000c08 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bec:	f7fd f80c 	bl	8000c08 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e1cf      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bfe:	4b70      	ldr	r3, [pc, #448]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d03c      	beq.n	8003c90 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d01c      	beq.n	8003c58 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1e:	4b68      	ldr	r3, [pc, #416]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c24:	4a66      	ldr	r2, [pc, #408]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2e:	f7fc ffeb 	bl	8000c08 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c36:	f7fc ffe7 	bl	8000c08 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e1aa      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c48:	4b5d      	ldr	r3, [pc, #372]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0ef      	beq.n	8003c36 <HAL_RCC_OscConfig+0x3e6>
 8003c56:	e01b      	b.n	8003c90 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c58:	4b59      	ldr	r3, [pc, #356]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c5e:	4a58      	ldr	r2, [pc, #352]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fc ffce 	bl	8000c08 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c70:	f7fc ffca 	bl	8000c08 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e18d      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c82:	4b4f      	ldr	r3, [pc, #316]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1ef      	bne.n	8003c70 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80a5 	beq.w	8003de8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ca2:	4b47      	ldr	r3, [pc, #284]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10d      	bne.n	8003cca <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cae:	4b44      	ldr	r3, [pc, #272]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb2:	4a43      	ldr	r2, [pc, #268]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8003cba:	4b41      	ldr	r3, [pc, #260]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cca:	4b3e      	ldr	r3, [pc, #248]	; (8003dc4 <HAL_RCC_OscConfig+0x574>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d118      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cd6:	4b3b      	ldr	r3, [pc, #236]	; (8003dc4 <HAL_RCC_OscConfig+0x574>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a3a      	ldr	r2, [pc, #232]	; (8003dc4 <HAL_RCC_OscConfig+0x574>)
 8003cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ce2:	f7fc ff91 	bl	8000c08 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cea:	f7fc ff8d 	bl	8000c08 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e150      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cfc:	4b31      	ldr	r3, [pc, #196]	; (8003dc4 <HAL_RCC_OscConfig+0x574>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d108      	bne.n	8003d22 <HAL_RCC_OscConfig+0x4d2>
 8003d10:	4b2b      	ldr	r3, [pc, #172]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d16:	4a2a      	ldr	r2, [pc, #168]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d20:	e024      	b.n	8003d6c <HAL_RCC_OscConfig+0x51c>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b05      	cmp	r3, #5
 8003d28:	d110      	bne.n	8003d4c <HAL_RCC_OscConfig+0x4fc>
 8003d2a:	4b25      	ldr	r3, [pc, #148]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d30:	4a23      	ldr	r2, [pc, #140]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003d32:	f043 0304 	orr.w	r3, r3, #4
 8003d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d3a:	4b21      	ldr	r3, [pc, #132]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	4a1f      	ldr	r2, [pc, #124]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d4a:	e00f      	b.n	8003d6c <HAL_RCC_OscConfig+0x51c>
 8003d4c:	4b1c      	ldr	r3, [pc, #112]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	4a1b      	ldr	r2, [pc, #108]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d5c:	4b18      	ldr	r3, [pc, #96]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	4a17      	ldr	r2, [pc, #92]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003d64:	f023 0304 	bic.w	r3, r3, #4
 8003d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d016      	beq.n	8003da2 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d74:	f7fc ff48 	bl	8000c08 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7c:	f7fc ff44 	bl	8000c08 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e105      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d92:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <HAL_RCC_OscConfig+0x570>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0ed      	beq.n	8003d7c <HAL_RCC_OscConfig+0x52c>
 8003da0:	e019      	b.n	8003dd6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da2:	f7fc ff31 	bl	8000c08 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da8:	e00e      	b.n	8003dc8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fc ff2d 	bl	8000c08 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d905      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e0ee      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dc8:	4b77      	ldr	r3, [pc, #476]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e9      	bne.n	8003daa <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dd6:	7ffb      	ldrb	r3, [r7, #31]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d105      	bne.n	8003de8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ddc:	4b72      	ldr	r3, [pc, #456]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de0:	4a71      	ldr	r2, [pc, #452]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80d5 	beq.w	8003f9c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b0c      	cmp	r3, #12
 8003df6:	f000 808e 	beq.w	8003f16 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d15b      	bne.n	8003eba <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e02:	4b69      	ldr	r3, [pc, #420]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a68      	ldr	r2, [pc, #416]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003e08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fc fefb 	bl	8000c08 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e16:	f7fc fef7 	bl	8000c08 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e0ba      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e28:	4b5f      	ldr	r3, [pc, #380]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f0      	bne.n	8003e16 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e34:	4b5c      	ldr	r3, [pc, #368]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	4b5c      	ldr	r3, [pc, #368]	; (8003fac <HAL_RCC_OscConfig+0x75c>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e44:	3a01      	subs	r2, #1
 8003e46:	0112      	lsls	r2, r2, #4
 8003e48:	4311      	orrs	r1, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e4e:	0212      	lsls	r2, r2, #8
 8003e50:	4311      	orrs	r1, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e56:	0852      	lsrs	r2, r2, #1
 8003e58:	3a01      	subs	r2, #1
 8003e5a:	0552      	lsls	r2, r2, #21
 8003e5c:	4311      	orrs	r1, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e62:	0852      	lsrs	r2, r2, #1
 8003e64:	3a01      	subs	r2, #1
 8003e66:	0652      	lsls	r2, r2, #25
 8003e68:	4311      	orrs	r1, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e6e:	0912      	lsrs	r2, r2, #4
 8003e70:	0452      	lsls	r2, r2, #17
 8003e72:	430a      	orrs	r2, r1
 8003e74:	494c      	ldr	r1, [pc, #304]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e7a:	4b4b      	ldr	r3, [pc, #300]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a4a      	ldr	r2, [pc, #296]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003e80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e84:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e86:	4b48      	ldr	r3, [pc, #288]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	4a47      	ldr	r2, [pc, #284]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003e8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e90:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fc feb9 	bl	8000c08 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9a:	f7fc feb5 	bl	8000c08 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e078      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eac:	4b3e      	ldr	r3, [pc, #248]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x64a>
 8003eb8:	e070      	b.n	8003f9c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eba:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a3a      	ldr	r2, [pc, #232]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003ec0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003ec6:	4b38      	ldr	r3, [pc, #224]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d105      	bne.n	8003ede <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ed2:	4b35      	ldr	r3, [pc, #212]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	4a34      	ldr	r2, [pc, #208]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003ed8:	f023 0303 	bic.w	r3, r3, #3
 8003edc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ede:	4b32      	ldr	r3, [pc, #200]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	4a31      	ldr	r2, [pc, #196]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003ee4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eee:	f7fc fe8b 	bl	8000c08 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fc fe87 	bl	8000c08 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e04a      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f08:	4b27      	ldr	r3, [pc, #156]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f0      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x6a6>
 8003f14:	e042      	b.n	8003f9c <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e03d      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003f22:	4b21      	ldr	r3, [pc, #132]	; (8003fa8 <HAL_RCC_OscConfig+0x758>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f003 0203 	and.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d130      	bne.n	8003f98 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	3b01      	subs	r3, #1
 8003f42:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d127      	bne.n	8003f98 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d11f      	bne.n	8003f98 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f62:	2a07      	cmp	r2, #7
 8003f64:	bf14      	ite	ne
 8003f66:	2201      	movne	r2, #1
 8003f68:	2200      	moveq	r2, #0
 8003f6a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d113      	bne.n	8003f98 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7a:	085b      	lsrs	r3, r3, #1
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d109      	bne.n	8003f98 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	3b01      	subs	r3, #1
 8003f92:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3720      	adds	r7, #32
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	f99d808c 	.word	0xf99d808c

08003fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0c8      	b.n	8004156 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc4:	4b66      	ldr	r3, [pc, #408]	; (8004160 <HAL_RCC_ClockConfig+0x1b0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d910      	bls.n	8003ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd2:	4b63      	ldr	r3, [pc, #396]	; (8004160 <HAL_RCC_ClockConfig+0x1b0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f023 0207 	bic.w	r2, r3, #7
 8003fda:	4961      	ldr	r1, [pc, #388]	; (8004160 <HAL_RCC_ClockConfig+0x1b0>)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe2:	4b5f      	ldr	r3, [pc, #380]	; (8004160 <HAL_RCC_ClockConfig+0x1b0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0b0      	b.n	8004156 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d04c      	beq.n	800409a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b03      	cmp	r3, #3
 8004006:	d107      	bne.n	8004018 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004008:	4b56      	ldr	r3, [pc, #344]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d121      	bne.n	8004058 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e09e      	b.n	8004156 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d107      	bne.n	8004030 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004020:	4b50      	ldr	r3, [pc, #320]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d115      	bne.n	8004058 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e092      	b.n	8004156 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d107      	bne.n	8004048 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004038:	4b4a      	ldr	r3, [pc, #296]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e086      	b.n	8004156 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004048:	4b46      	ldr	r3, [pc, #280]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e07e      	b.n	8004156 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004058:	4b42      	ldr	r3, [pc, #264]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f023 0203 	bic.w	r2, r3, #3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	493f      	ldr	r1, [pc, #252]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 8004066:	4313      	orrs	r3, r2
 8004068:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406a:	f7fc fdcd 	bl	8000c08 <HAL_GetTick>
 800406e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004070:	e00a      	b.n	8004088 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004072:	f7fc fdc9 	bl	8000c08 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e066      	b.n	8004156 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004088:	4b36      	ldr	r3, [pc, #216]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 020c 	and.w	r2, r3, #12
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	429a      	cmp	r2, r3
 8004098:	d1eb      	bne.n	8004072 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a6:	4b2f      	ldr	r3, [pc, #188]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	492c      	ldr	r1, [pc, #176]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040b8:	4b29      	ldr	r3, [pc, #164]	; (8004160 <HAL_RCC_ClockConfig+0x1b0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d210      	bcs.n	80040e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b26      	ldr	r3, [pc, #152]	; (8004160 <HAL_RCC_ClockConfig+0x1b0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 0207 	bic.w	r2, r3, #7
 80040ce:	4924      	ldr	r1, [pc, #144]	; (8004160 <HAL_RCC_ClockConfig+0x1b0>)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b22      	ldr	r3, [pc, #136]	; (8004160 <HAL_RCC_ClockConfig+0x1b0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e036      	b.n	8004156 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f4:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	4918      	ldr	r1, [pc, #96]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 8004102:	4313      	orrs	r3, r2
 8004104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004112:	4b14      	ldr	r3, [pc, #80]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4910      	ldr	r1, [pc, #64]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004126:	f000 f825 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 800412a:	4601      	mov	r1, r0
 800412c:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	4a0c      	ldr	r2, [pc, #48]	; (8004168 <HAL_RCC_ClockConfig+0x1b8>)
 8004138:	5cd3      	ldrb	r3, [r2, r3]
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	fa21 f303 	lsr.w	r3, r1, r3
 8004142:	4a0a      	ldr	r2, [pc, #40]	; (800416c <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004146:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <HAL_RCC_ClockConfig+0x1c0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fc fd10 	bl	8000b70 <HAL_InitTick>
 8004150:	4603      	mov	r3, r0
 8004152:	72fb      	strb	r3, [r7, #11]

  return status;
 8004154:	7afb      	ldrb	r3, [r7, #11]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40022000 	.word	0x40022000
 8004164:	40021000 	.word	0x40021000
 8004168:	080073dc 	.word	0x080073dc
 800416c:	2000000c 	.word	0x2000000c
 8004170:	20000000 	.word	0x20000000

08004174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004174:	b480      	push	{r7}
 8004176:	b089      	sub	sp, #36	; 0x24
 8004178:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	2300      	movs	r3, #0
 8004180:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004182:	4b3d      	ldr	r3, [pc, #244]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800418c:	4b3a      	ldr	r3, [pc, #232]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0x34>
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b0c      	cmp	r3, #12
 80041a0:	d121      	bne.n	80041e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d11e      	bne.n	80041e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041a8:	4b33      	ldr	r3, [pc, #204]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041b4:	4b30      	ldr	r3, [pc, #192]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 80041b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	e005      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041c4:	4b2c      	ldr	r3, [pc, #176]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041d0:	4a2a      	ldr	r2, [pc, #168]	; (800427c <HAL_RCC_GetSysClockFreq+0x108>)
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10d      	bne.n	80041fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d102      	bne.n	80041f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041ec:	4b24      	ldr	r3, [pc, #144]	; (8004280 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	e004      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d101      	bne.n	80041fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041f8:	4b22      	ldr	r3, [pc, #136]	; (8004284 <HAL_RCC_GetSysClockFreq+0x110>)
 80041fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b0c      	cmp	r3, #12
 8004200:	d133      	bne.n	800426a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d002      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0xa4>
 8004212:	2b03      	cmp	r3, #3
 8004214:	d003      	beq.n	800421e <HAL_RCC_GetSysClockFreq+0xaa>
 8004216:	e005      	b.n	8004224 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <HAL_RCC_GetSysClockFreq+0x10c>)
 800421a:	617b      	str	r3, [r7, #20]
      break;
 800421c:	e005      	b.n	800422a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800421e:	4b19      	ldr	r3, [pc, #100]	; (8004284 <HAL_RCC_GetSysClockFreq+0x110>)
 8004220:	617b      	str	r3, [r7, #20]
      break;
 8004222:	e002      	b.n	800422a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	617b      	str	r3, [r7, #20]
      break;
 8004228:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800422a:	4b13      	ldr	r3, [pc, #76]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	091b      	lsrs	r3, r3, #4
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	3301      	adds	r3, #1
 8004236:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	fb02 f203 	mul.w	r2, r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	fbb2 f3f3 	udiv	r3, r2, r3
 800424e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004250:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	0e5b      	lsrs	r3, r3, #25
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	3301      	adds	r3, #1
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800426a:	69bb      	ldr	r3, [r7, #24]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3724      	adds	r7, #36	; 0x24
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	40021000 	.word	0x40021000
 800427c:	080073ec 	.word	0x080073ec
 8004280:	00f42400 	.word	0x00f42400
 8004284:	007a1200 	.word	0x007a1200

08004288 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004294:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042a0:	f7ff fa72 	bl	8003788 <HAL_PWREx_GetVoltageRange>
 80042a4:	6178      	str	r0, [r7, #20]
 80042a6:	e014      	b.n	80042d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042a8:	4b25      	ldr	r3, [pc, #148]	; (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	4a24      	ldr	r2, [pc, #144]	; (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b2:	6593      	str	r3, [r2, #88]	; 0x58
 80042b4:	4b22      	ldr	r3, [pc, #136]	; (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042c0:	f7ff fa62 	bl	8003788 <HAL_PWREx_GetVoltageRange>
 80042c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042c6:	4b1e      	ldr	r3, [pc, #120]	; (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	4a1d      	ldr	r2, [pc, #116]	; (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d8:	d10b      	bne.n	80042f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b80      	cmp	r3, #128	; 0x80
 80042de:	d919      	bls.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2ba0      	cmp	r3, #160	; 0xa0
 80042e4:	d902      	bls.n	80042ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042e6:	2302      	movs	r3, #2
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	e013      	b.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042ec:	2301      	movs	r3, #1
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	e010      	b.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b80      	cmp	r3, #128	; 0x80
 80042f6:	d902      	bls.n	80042fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042f8:	2303      	movs	r3, #3
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	e00a      	b.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b80      	cmp	r3, #128	; 0x80
 8004302:	d102      	bne.n	800430a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004304:	2302      	movs	r3, #2
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	e004      	b.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b70      	cmp	r3, #112	; 0x70
 800430e:	d101      	bne.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004310:	2301      	movs	r3, #1
 8004312:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f023 0207 	bic.w	r2, r3, #7
 800431c:	4909      	ldr	r1, [pc, #36]	; (8004344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004324:	4b07      	ldr	r3, [pc, #28]	; (8004344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	429a      	cmp	r2, r3
 8004330:	d001      	beq.n	8004336 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021000 	.word	0x40021000
 8004344:	40022000 	.word	0x40022000

08004348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004350:	2300      	movs	r3, #0
 8004352:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004354:	2300      	movs	r3, #0
 8004356:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004360:	2b00      	cmp	r3, #0
 8004362:	d03f      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800436c:	d01c      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800436e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004372:	d802      	bhi.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00e      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004378:	e01f      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x72>
 800437a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800437e:	d003      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004380:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004384:	d01c      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004386:	e018      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004388:	4b85      	ldr	r3, [pc, #532]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4a84      	ldr	r2, [pc, #528]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800438e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004392:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004394:	e015      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3304      	adds	r3, #4
 800439a:	2100      	movs	r1, #0
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fab9 	bl	8004914 <RCCEx_PLLSAI1_Config>
 80043a2:	4603      	mov	r3, r0
 80043a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043a6:	e00c      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3320      	adds	r3, #32
 80043ac:	2100      	movs	r1, #0
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fba0 	bl	8004af4 <RCCEx_PLLSAI2_Config>
 80043b4:	4603      	mov	r3, r0
 80043b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043b8:	e003      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	74fb      	strb	r3, [r7, #19]
      break;
 80043be:	e000      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80043c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043c2:	7cfb      	ldrb	r3, [r7, #19]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10b      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043c8:	4b75      	ldr	r3, [pc, #468]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043d6:	4972      	ldr	r1, [pc, #456]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043de:	e001      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e0:	7cfb      	ldrb	r3, [r7, #19]
 80043e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d03f      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043f8:	d01c      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80043fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043fe:	d802      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00e      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004404:	e01f      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004406:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800440a:	d003      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800440c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004410:	d01c      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004412:	e018      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004414:	4b62      	ldr	r3, [pc, #392]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a61      	ldr	r2, [pc, #388]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800441a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004420:	e015      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3304      	adds	r3, #4
 8004426:	2100      	movs	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fa73 	bl	8004914 <RCCEx_PLLSAI1_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004432:	e00c      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3320      	adds	r3, #32
 8004438:	2100      	movs	r1, #0
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fb5a 	bl	8004af4 <RCCEx_PLLSAI2_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004444:	e003      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	74fb      	strb	r3, [r7, #19]
      break;
 800444a:	e000      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800444c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800444e:	7cfb      	ldrb	r3, [r7, #19]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004454:	4b52      	ldr	r3, [pc, #328]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004462:	494f      	ldr	r1, [pc, #316]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800446a:	e001      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446c:	7cfb      	ldrb	r3, [r7, #19]
 800446e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80a0 	beq.w	80045be <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800447e:	2300      	movs	r3, #0
 8004480:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004482:	4b47      	ldr	r3, [pc, #284]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004492:	2300      	movs	r3, #0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00d      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004498:	4b41      	ldr	r3, [pc, #260]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800449a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449c:	4a40      	ldr	r2, [pc, #256]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800449e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a2:	6593      	str	r3, [r2, #88]	; 0x58
 80044a4:	4b3e      	ldr	r3, [pc, #248]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b0:	2301      	movs	r3, #1
 80044b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044b4:	4b3b      	ldr	r3, [pc, #236]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a3a      	ldr	r2, [pc, #232]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044c0:	f7fc fba2 	bl	8000c08 <HAL_GetTick>
 80044c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044c6:	e009      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c8:	f7fc fb9e 	bl	8000c08 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d902      	bls.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	74fb      	strb	r3, [r7, #19]
        break;
 80044da:	e005      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044dc:	4b31      	ldr	r3, [pc, #196]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ef      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d15c      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044ee:	4b2c      	ldr	r3, [pc, #176]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01f      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	429a      	cmp	r2, r3
 800450a:	d019      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800450c:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800450e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004516:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004518:	4b21      	ldr	r3, [pc, #132]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	4a20      	ldr	r2, [pc, #128]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004528:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452e:	4a1c      	ldr	r2, [pc, #112]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004538:	4a19      	ldr	r2, [pc, #100]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d016      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454a:	f7fc fb5d 	bl	8000c08 <HAL_GetTick>
 800454e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004550:	e00b      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004552:	f7fc fb59 	bl	8000c08 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004560:	4293      	cmp	r3, r2
 8004562:	d902      	bls.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	74fb      	strb	r3, [r7, #19]
            break;
 8004568:	e006      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800456a:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0ec      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004578:	7cfb      	ldrb	r3, [r7, #19]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10c      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800457e:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800458e:	4904      	ldr	r1, [pc, #16]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004596:	e009      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	74bb      	strb	r3, [r7, #18]
 800459c:	e006      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x264>
 800459e:	bf00      	nop
 80045a0:	40021000 	.word	0x40021000
 80045a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a8:	7cfb      	ldrb	r3, [r7, #19]
 80045aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045ac:	7c7b      	ldrb	r3, [r7, #17]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d105      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b2:	4b9e      	ldr	r3, [pc, #632]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b6:	4a9d      	ldr	r2, [pc, #628]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ca:	4b98      	ldr	r3, [pc, #608]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d0:	f023 0203 	bic.w	r2, r3, #3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	4994      	ldr	r1, [pc, #592]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045ec:	4b8f      	ldr	r3, [pc, #572]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	f023 020c 	bic.w	r2, r3, #12
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	498c      	ldr	r1, [pc, #560]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800460e:	4b87      	ldr	r3, [pc, #540]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	4983      	ldr	r1, [pc, #524]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004630:	4b7e      	ldr	r3, [pc, #504]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463e:	497b      	ldr	r1, [pc, #492]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004652:	4b76      	ldr	r3, [pc, #472]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004660:	4972      	ldr	r1, [pc, #456]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004674:	4b6d      	ldr	r3, [pc, #436]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004682:	496a      	ldr	r1, [pc, #424]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004696:	4b65      	ldr	r3, [pc, #404]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a4:	4961      	ldr	r1, [pc, #388]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046b8:	4b5c      	ldr	r3, [pc, #368]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c6:	4959      	ldr	r1, [pc, #356]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046da:	4b54      	ldr	r3, [pc, #336]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e8:	4950      	ldr	r1, [pc, #320]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046fc:	4b4b      	ldr	r3, [pc, #300]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004702:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	4948      	ldr	r1, [pc, #288]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800471e:	4b43      	ldr	r3, [pc, #268]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004724:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472c:	493f      	ldr	r1, [pc, #252]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d028      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004740:	4b3a      	ldr	r3, [pc, #232]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004746:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800474e:	4937      	ldr	r1, [pc, #220]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800475e:	d106      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004760:	4b32      	ldr	r3, [pc, #200]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4a31      	ldr	r2, [pc, #196]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800476a:	60d3      	str	r3, [r2, #12]
 800476c:	e011      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004772:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004776:	d10c      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	2101      	movs	r1, #1
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f8c8 	bl	8004914 <RCCEx_PLLSAI1_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d028      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800479e:	4b23      	ldr	r3, [pc, #140]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ac:	491f      	ldr	r1, [pc, #124]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047bc:	d106      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047be:	4b1b      	ldr	r3, [pc, #108]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	4a1a      	ldr	r2, [pc, #104]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047c8:	60d3      	str	r3, [r2, #12]
 80047ca:	e011      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3304      	adds	r3, #4
 80047da:	2101      	movs	r1, #1
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 f899 	bl	8004914 <RCCEx_PLLSAI1_Config>
 80047e2:	4603      	mov	r3, r0
 80047e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047e6:	7cfb      	ldrb	r3, [r7, #19]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80047ec:	7cfb      	ldrb	r3, [r7, #19]
 80047ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d02b      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047fc:	4b0b      	ldr	r3, [pc, #44]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004802:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480a:	4908      	ldr	r1, [pc, #32]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004816:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800481a:	d109      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	4a02      	ldr	r2, [pc, #8]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004826:	60d3      	str	r3, [r2, #12]
 8004828:	e014      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800482a:	bf00      	nop
 800482c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004834:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004838:	d10c      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3304      	adds	r3, #4
 800483e:	2101      	movs	r1, #1
 8004840:	4618      	mov	r0, r3
 8004842:	f000 f867 	bl	8004914 <RCCEx_PLLSAI1_Config>
 8004846:	4603      	mov	r3, r0
 8004848:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800484a:	7cfb      	ldrb	r3, [r7, #19]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004850:	7cfb      	ldrb	r3, [r7, #19]
 8004852:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d02f      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004860:	4b2b      	ldr	r3, [pc, #172]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004866:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800486e:	4928      	ldr	r1, [pc, #160]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800487a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800487e:	d10d      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3304      	adds	r3, #4
 8004884:	2102      	movs	r1, #2
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f844 	bl	8004914 <RCCEx_PLLSAI1_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004890:	7cfb      	ldrb	r3, [r7, #19]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d014      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004896:	7cfb      	ldrb	r3, [r7, #19]
 8004898:	74bb      	strb	r3, [r7, #18]
 800489a:	e011      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3320      	adds	r3, #32
 80048aa:	2102      	movs	r1, #2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 f921 	bl	8004af4 <RCCEx_PLLSAI2_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048b6:	7cfb      	ldrb	r3, [r7, #19]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80048bc:	7cfb      	ldrb	r3, [r7, #19]
 80048be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048cc:	4b10      	ldr	r3, [pc, #64]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048da:	490d      	ldr	r1, [pc, #52]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00b      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048ee:	4b08      	ldr	r3, [pc, #32]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048fe:	4904      	ldr	r1, [pc, #16]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004906:	7cbb      	ldrb	r3, [r7, #18]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000

08004914 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004922:	4b73      	ldr	r3, [pc, #460]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d018      	beq.n	8004960 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800492e:	4b70      	ldr	r3, [pc, #448]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f003 0203 	and.w	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d10d      	bne.n	800495a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
       ||
 8004942:	2b00      	cmp	r3, #0
 8004944:	d009      	beq.n	800495a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004946:	4b6a      	ldr	r3, [pc, #424]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	091b      	lsrs	r3, r3, #4
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
       ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d044      	beq.n	80049e4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	73fb      	strb	r3, [r7, #15]
 800495e:	e041      	b.n	80049e4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d00c      	beq.n	8004982 <RCCEx_PLLSAI1_Config+0x6e>
 8004968:	2b03      	cmp	r3, #3
 800496a:	d013      	beq.n	8004994 <RCCEx_PLLSAI1_Config+0x80>
 800496c:	2b01      	cmp	r3, #1
 800496e:	d120      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004970:	4b5f      	ldr	r3, [pc, #380]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d11d      	bne.n	80049b8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004980:	e01a      	b.n	80049b8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004982:	4b5b      	ldr	r3, [pc, #364]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498a:	2b00      	cmp	r3, #0
 800498c:	d116      	bne.n	80049bc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004992:	e013      	b.n	80049bc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004994:	4b56      	ldr	r3, [pc, #344]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10f      	bne.n	80049c0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049a0:	4b53      	ldr	r3, [pc, #332]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d109      	bne.n	80049c0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049b0:	e006      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]
      break;
 80049b6:	e004      	b.n	80049c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80049b8:	bf00      	nop
 80049ba:	e002      	b.n	80049c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80049bc:	bf00      	nop
 80049be:	e000      	b.n	80049c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80049c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10d      	bne.n	80049e4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049c8:	4b49      	ldr	r3, [pc, #292]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6819      	ldr	r1, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	3b01      	subs	r3, #1
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	430b      	orrs	r3, r1
 80049de:	4944      	ldr	r1, [pc, #272]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d17d      	bne.n	8004ae6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049ea:	4b41      	ldr	r3, [pc, #260]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a40      	ldr	r2, [pc, #256]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f6:	f7fc f907 	bl	8000c08 <HAL_GetTick>
 80049fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049fc:	e009      	b.n	8004a12 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049fe:	f7fc f903 	bl	8000c08 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d902      	bls.n	8004a12 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	73fb      	strb	r3, [r7, #15]
        break;
 8004a10:	e005      	b.n	8004a1e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a12:	4b37      	ldr	r3, [pc, #220]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1ef      	bne.n	80049fe <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d160      	bne.n	8004ae6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d111      	bne.n	8004a4e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a2a:	4b31      	ldr	r3, [pc, #196]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6892      	ldr	r2, [r2, #8]
 8004a3a:	0211      	lsls	r1, r2, #8
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	68d2      	ldr	r2, [r2, #12]
 8004a40:	0912      	lsrs	r2, r2, #4
 8004a42:	0452      	lsls	r2, r2, #17
 8004a44:	430a      	orrs	r2, r1
 8004a46:	492a      	ldr	r1, [pc, #168]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	610b      	str	r3, [r1, #16]
 8004a4c:	e027      	b.n	8004a9e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d112      	bne.n	8004a7a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a54:	4b26      	ldr	r3, [pc, #152]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6892      	ldr	r2, [r2, #8]
 8004a64:	0211      	lsls	r1, r2, #8
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6912      	ldr	r2, [r2, #16]
 8004a6a:	0852      	lsrs	r2, r2, #1
 8004a6c:	3a01      	subs	r2, #1
 8004a6e:	0552      	lsls	r2, r2, #21
 8004a70:	430a      	orrs	r2, r1
 8004a72:	491f      	ldr	r1, [pc, #124]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	610b      	str	r3, [r1, #16]
 8004a78:	e011      	b.n	8004a9e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a7a:	4b1d      	ldr	r3, [pc, #116]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6892      	ldr	r2, [r2, #8]
 8004a8a:	0211      	lsls	r1, r2, #8
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6952      	ldr	r2, [r2, #20]
 8004a90:	0852      	lsrs	r2, r2, #1
 8004a92:	3a01      	subs	r2, #1
 8004a94:	0652      	lsls	r2, r2, #25
 8004a96:	430a      	orrs	r2, r1
 8004a98:	4915      	ldr	r1, [pc, #84]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a9e:	4b14      	ldr	r3, [pc, #80]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a13      	ldr	r2, [pc, #76]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004aa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aa8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aaa:	f7fc f8ad 	bl	8000c08 <HAL_GetTick>
 8004aae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ab0:	e009      	b.n	8004ac6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ab2:	f7fc f8a9 	bl	8000c08 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d902      	bls.n	8004ac6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	73fb      	strb	r3, [r7, #15]
          break;
 8004ac4:	e005      	b.n	8004ad2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0ef      	beq.n	8004ab2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d106      	bne.n	8004ae6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ad8:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	4903      	ldr	r1, [pc, #12]	; (8004af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40021000 	.word	0x40021000

08004af4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b02:	4b68      	ldr	r3, [pc, #416]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d018      	beq.n	8004b40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b0e:	4b65      	ldr	r3, [pc, #404]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 0203 	and.w	r2, r3, #3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d10d      	bne.n	8004b3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
       ||
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d009      	beq.n	8004b3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b26:	4b5f      	ldr	r3, [pc, #380]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	091b      	lsrs	r3, r3, #4
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
       ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d044      	beq.n	8004bc4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	73fb      	strb	r3, [r7, #15]
 8004b3e:	e041      	b.n	8004bc4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d00c      	beq.n	8004b62 <RCCEx_PLLSAI2_Config+0x6e>
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d013      	beq.n	8004b74 <RCCEx_PLLSAI2_Config+0x80>
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d120      	bne.n	8004b92 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b50:	4b54      	ldr	r3, [pc, #336]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d11d      	bne.n	8004b98 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b60:	e01a      	b.n	8004b98 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b62:	4b50      	ldr	r3, [pc, #320]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d116      	bne.n	8004b9c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b72:	e013      	b.n	8004b9c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b74:	4b4b      	ldr	r3, [pc, #300]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10f      	bne.n	8004ba0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b80:	4b48      	ldr	r3, [pc, #288]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d109      	bne.n	8004ba0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b90:	e006      	b.n	8004ba0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	73fb      	strb	r3, [r7, #15]
      break;
 8004b96:	e004      	b.n	8004ba2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004b98:	bf00      	nop
 8004b9a:	e002      	b.n	8004ba2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004b9c:	bf00      	nop
 8004b9e:	e000      	b.n	8004ba2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004ba0:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10d      	bne.n	8004bc4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ba8:	4b3e      	ldr	r3, [pc, #248]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6819      	ldr	r1, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	4939      	ldr	r1, [pc, #228]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d167      	bne.n	8004c9a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bca:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a35      	ldr	r2, [pc, #212]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd6:	f7fc f817 	bl	8000c08 <HAL_GetTick>
 8004bda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bdc:	e009      	b.n	8004bf2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bde:	f7fc f813 	bl	8000c08 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d902      	bls.n	8004bf2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	73fb      	strb	r3, [r7, #15]
        break;
 8004bf0:	e005      	b.n	8004bfe <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bf2:	4b2c      	ldr	r3, [pc, #176]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1ef      	bne.n	8004bde <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d14a      	bne.n	8004c9a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d111      	bne.n	8004c2e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c0a:	4b26      	ldr	r3, [pc, #152]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6892      	ldr	r2, [r2, #8]
 8004c1a:	0211      	lsls	r1, r2, #8
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68d2      	ldr	r2, [r2, #12]
 8004c20:	0912      	lsrs	r2, r2, #4
 8004c22:	0452      	lsls	r2, r2, #17
 8004c24:	430a      	orrs	r2, r1
 8004c26:	491f      	ldr	r1, [pc, #124]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	614b      	str	r3, [r1, #20]
 8004c2c:	e011      	b.n	8004c52 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6892      	ldr	r2, [r2, #8]
 8004c3e:	0211      	lsls	r1, r2, #8
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6912      	ldr	r2, [r2, #16]
 8004c44:	0852      	lsrs	r2, r2, #1
 8004c46:	3a01      	subs	r2, #1
 8004c48:	0652      	lsls	r2, r2, #25
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	4915      	ldr	r1, [pc, #84]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c52:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5e:	f7fb ffd3 	bl	8000c08 <HAL_GetTick>
 8004c62:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c64:	e009      	b.n	8004c7a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c66:	f7fb ffcf 	bl	8000c08 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d902      	bls.n	8004c7a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	73fb      	strb	r3, [r7, #15]
          break;
 8004c78:	e005      	b.n	8004c86 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0ef      	beq.n	8004c66 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	4903      	ldr	r1, [pc, #12]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000

08004ca8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e01d      	b.n	8004cf6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f001 ffd2 	bl	8006c78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f000 f9e8 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	6839      	ldr	r1, [r7, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fd42 	bl	800579c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1e      	ldr	r2, [pc, #120]	; (8004d98 <HAL_TIM_PWM_Start+0x98>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d013      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x4a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1d      	ldr	r2, [pc, #116]	; (8004d9c <HAL_TIM_PWM_Start+0x9c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00e      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x4a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1b      	ldr	r2, [pc, #108]	; (8004da0 <HAL_TIM_PWM_Start+0xa0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d009      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x4a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1a      	ldr	r2, [pc, #104]	; (8004da4 <HAL_TIM_PWM_Start+0xa4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x4a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <HAL_TIM_PWM_Start+0xa8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d101      	bne.n	8004d4e <HAL_TIM_PWM_Start+0x4e>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <HAL_TIM_PWM_Start+0x50>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	4b10      	ldr	r3, [pc, #64]	; (8004dac <HAL_TIM_PWM_Start+0xac>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b06      	cmp	r3, #6
 8004d74:	d00b      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x8e>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d7c:	d007      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0201 	orr.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40012c00 	.word	0x40012c00
 8004d9c:	40013400 	.word	0x40013400
 8004da0:	40014000 	.word	0x40014000
 8004da4:	40014400 	.word	0x40014400
 8004da8:	40014800 	.word	0x40014800
 8004dac:	00010007 	.word	0x00010007

08004db0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fcea 	bl	800579c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a2a      	ldr	r2, [pc, #168]	; (8004e78 <HAL_TIM_PWM_Stop+0xc8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <HAL_TIM_PWM_Stop+0x4a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a29      	ldr	r2, [pc, #164]	; (8004e7c <HAL_TIM_PWM_Stop+0xcc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00e      	beq.n	8004dfa <HAL_TIM_PWM_Stop+0x4a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a27      	ldr	r2, [pc, #156]	; (8004e80 <HAL_TIM_PWM_Stop+0xd0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d009      	beq.n	8004dfa <HAL_TIM_PWM_Stop+0x4a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a26      	ldr	r2, [pc, #152]	; (8004e84 <HAL_TIM_PWM_Stop+0xd4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d004      	beq.n	8004dfa <HAL_TIM_PWM_Stop+0x4a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a24      	ldr	r2, [pc, #144]	; (8004e88 <HAL_TIM_PWM_Stop+0xd8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_PWM_Stop+0x4e>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <HAL_TIM_PWM_Stop+0x50>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d017      	beq.n	8004e34 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6a1a      	ldr	r2, [r3, #32]
 8004e0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10f      	bne.n	8004e34 <HAL_TIM_PWM_Stop+0x84>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6a1a      	ldr	r2, [r3, #32]
 8004e1a:	f240 4344 	movw	r3, #1092	; 0x444
 8004e1e:	4013      	ands	r3, r2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d107      	bne.n	8004e34 <HAL_TIM_PWM_Stop+0x84>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6a1a      	ldr	r2, [r3, #32]
 8004e3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10f      	bne.n	8004e64 <HAL_TIM_PWM_Stop+0xb4>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6a1a      	ldr	r2, [r3, #32]
 8004e4a:	f240 4344 	movw	r3, #1092	; 0x444
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d107      	bne.n	8004e64 <HAL_TIM_PWM_Stop+0xb4>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0201 	bic.w	r2, r2, #1
 8004e62:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	40013400 	.word	0x40013400
 8004e80:	40014000 	.word	0x40014000
 8004e84:	40014400 	.word	0x40014400
 8004e88:	40014800 	.word	0x40014800

08004e8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e105      	b.n	80050b2 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b14      	cmp	r3, #20
 8004eba:	f200 80f0 	bhi.w	800509e <HAL_TIM_PWM_ConfigChannel+0x212>
 8004ebe:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004f19 	.word	0x08004f19
 8004ec8:	0800509f 	.word	0x0800509f
 8004ecc:	0800509f 	.word	0x0800509f
 8004ed0:	0800509f 	.word	0x0800509f
 8004ed4:	08004f59 	.word	0x08004f59
 8004ed8:	0800509f 	.word	0x0800509f
 8004edc:	0800509f 	.word	0x0800509f
 8004ee0:	0800509f 	.word	0x0800509f
 8004ee4:	08004f9b 	.word	0x08004f9b
 8004ee8:	0800509f 	.word	0x0800509f
 8004eec:	0800509f 	.word	0x0800509f
 8004ef0:	0800509f 	.word	0x0800509f
 8004ef4:	08004fdb 	.word	0x08004fdb
 8004ef8:	0800509f 	.word	0x0800509f
 8004efc:	0800509f 	.word	0x0800509f
 8004f00:	0800509f 	.word	0x0800509f
 8004f04:	0800501d 	.word	0x0800501d
 8004f08:	0800509f 	.word	0x0800509f
 8004f0c:	0800509f 	.word	0x0800509f
 8004f10:	0800509f 	.word	0x0800509f
 8004f14:	0800505d 	.word	0x0800505d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 f966 	bl	80051f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0208 	orr.w	r2, r2, #8
 8004f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0204 	bic.w	r2, r2, #4
 8004f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6999      	ldr	r1, [r3, #24]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	619a      	str	r2, [r3, #24]
      break;
 8004f56:	e0a3      	b.n	80050a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 f9d6 	bl	8005310 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6999      	ldr	r1, [r3, #24]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	021a      	lsls	r2, r3, #8
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	619a      	str	r2, [r3, #24]
      break;
 8004f98:	e082      	b.n	80050a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fa3f 	bl	8005424 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0208 	orr.w	r2, r2, #8
 8004fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0204 	bic.w	r2, r2, #4
 8004fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69d9      	ldr	r1, [r3, #28]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	61da      	str	r2, [r3, #28]
      break;
 8004fd8:	e062      	b.n	80050a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 faa7 	bl	8005534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69d9      	ldr	r1, [r3, #28]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	021a      	lsls	r2, r3, #8
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	61da      	str	r2, [r3, #28]
      break;
 800501a:	e041      	b.n	80050a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	4618      	mov	r0, r3
 8005024:	f000 faf0 	bl	8005608 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0208 	orr.w	r2, r2, #8
 8005036:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0204 	bic.w	r2, r2, #4
 8005046:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800505a:	e021      	b.n	80050a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fb34 	bl	80056d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005076:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005086:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	021a      	lsls	r2, r3, #8
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800509c:	e000      	b.n	80050a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800509e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop

080050bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a40      	ldr	r2, [pc, #256]	; (80051d0 <TIM_Base_SetConfig+0x114>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050da:	d00f      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a3d      	ldr	r2, [pc, #244]	; (80051d4 <TIM_Base_SetConfig+0x118>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00b      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a3c      	ldr	r2, [pc, #240]	; (80051d8 <TIM_Base_SetConfig+0x11c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d007      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a3b      	ldr	r2, [pc, #236]	; (80051dc <TIM_Base_SetConfig+0x120>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a3a      	ldr	r2, [pc, #232]	; (80051e0 <TIM_Base_SetConfig+0x124>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d108      	bne.n	800510e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2f      	ldr	r2, [pc, #188]	; (80051d0 <TIM_Base_SetConfig+0x114>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d01f      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511c:	d01b      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2c      	ldr	r2, [pc, #176]	; (80051d4 <TIM_Base_SetConfig+0x118>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d017      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2b      	ldr	r2, [pc, #172]	; (80051d8 <TIM_Base_SetConfig+0x11c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2a      	ldr	r2, [pc, #168]	; (80051dc <TIM_Base_SetConfig+0x120>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00f      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a29      	ldr	r2, [pc, #164]	; (80051e0 <TIM_Base_SetConfig+0x124>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00b      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a28      	ldr	r2, [pc, #160]	; (80051e4 <TIM_Base_SetConfig+0x128>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d007      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a27      	ldr	r2, [pc, #156]	; (80051e8 <TIM_Base_SetConfig+0x12c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d003      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a26      	ldr	r2, [pc, #152]	; (80051ec <TIM_Base_SetConfig+0x130>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d108      	bne.n	8005168 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a10      	ldr	r2, [pc, #64]	; (80051d0 <TIM_Base_SetConfig+0x114>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00f      	beq.n	80051b4 <TIM_Base_SetConfig+0xf8>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a12      	ldr	r2, [pc, #72]	; (80051e0 <TIM_Base_SetConfig+0x124>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00b      	beq.n	80051b4 <TIM_Base_SetConfig+0xf8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a11      	ldr	r2, [pc, #68]	; (80051e4 <TIM_Base_SetConfig+0x128>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d007      	beq.n	80051b4 <TIM_Base_SetConfig+0xf8>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a10      	ldr	r2, [pc, #64]	; (80051e8 <TIM_Base_SetConfig+0x12c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <TIM_Base_SetConfig+0xf8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a0f      	ldr	r2, [pc, #60]	; (80051ec <TIM_Base_SetConfig+0x130>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d103      	bne.n	80051bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	615a      	str	r2, [r3, #20]
}
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40012c00 	.word	0x40012c00
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40013400 	.word	0x40013400
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40014400 	.word	0x40014400
 80051ec:	40014800 	.word	0x40014800

080051f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f023 0201 	bic.w	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800521e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f023 0302 	bic.w	r3, r3, #2
 800523c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a2c      	ldr	r2, [pc, #176]	; (80052fc <TIM_OC1_SetConfig+0x10c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00f      	beq.n	8005270 <TIM_OC1_SetConfig+0x80>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a2b      	ldr	r2, [pc, #172]	; (8005300 <TIM_OC1_SetConfig+0x110>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00b      	beq.n	8005270 <TIM_OC1_SetConfig+0x80>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a2a      	ldr	r2, [pc, #168]	; (8005304 <TIM_OC1_SetConfig+0x114>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d007      	beq.n	8005270 <TIM_OC1_SetConfig+0x80>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a29      	ldr	r2, [pc, #164]	; (8005308 <TIM_OC1_SetConfig+0x118>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d003      	beq.n	8005270 <TIM_OC1_SetConfig+0x80>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a28      	ldr	r2, [pc, #160]	; (800530c <TIM_OC1_SetConfig+0x11c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d10c      	bne.n	800528a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f023 0308 	bic.w	r3, r3, #8
 8005276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f023 0304 	bic.w	r3, r3, #4
 8005288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a1b      	ldr	r2, [pc, #108]	; (80052fc <TIM_OC1_SetConfig+0x10c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00f      	beq.n	80052b2 <TIM_OC1_SetConfig+0xc2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a1a      	ldr	r2, [pc, #104]	; (8005300 <TIM_OC1_SetConfig+0x110>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00b      	beq.n	80052b2 <TIM_OC1_SetConfig+0xc2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a19      	ldr	r2, [pc, #100]	; (8005304 <TIM_OC1_SetConfig+0x114>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d007      	beq.n	80052b2 <TIM_OC1_SetConfig+0xc2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a18      	ldr	r2, [pc, #96]	; (8005308 <TIM_OC1_SetConfig+0x118>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d003      	beq.n	80052b2 <TIM_OC1_SetConfig+0xc2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a17      	ldr	r2, [pc, #92]	; (800530c <TIM_OC1_SetConfig+0x11c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d111      	bne.n	80052d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	621a      	str	r2, [r3, #32]
}
 80052f0:	bf00      	nop
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40013400 	.word	0x40013400
 8005304:	40014000 	.word	0x40014000
 8005308:	40014400 	.word	0x40014400
 800530c:	40014800 	.word	0x40014800

08005310 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	f023 0210 	bic.w	r2, r3, #16
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800533e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f023 0320 	bic.w	r3, r3, #32
 800535e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	4313      	orrs	r3, r2
 800536a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a28      	ldr	r2, [pc, #160]	; (8005410 <TIM_OC2_SetConfig+0x100>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d003      	beq.n	800537c <TIM_OC2_SetConfig+0x6c>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a27      	ldr	r2, [pc, #156]	; (8005414 <TIM_OC2_SetConfig+0x104>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d10d      	bne.n	8005398 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005396:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a1d      	ldr	r2, [pc, #116]	; (8005410 <TIM_OC2_SetConfig+0x100>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00f      	beq.n	80053c0 <TIM_OC2_SetConfig+0xb0>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a1c      	ldr	r2, [pc, #112]	; (8005414 <TIM_OC2_SetConfig+0x104>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00b      	beq.n	80053c0 <TIM_OC2_SetConfig+0xb0>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a1b      	ldr	r2, [pc, #108]	; (8005418 <TIM_OC2_SetConfig+0x108>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d007      	beq.n	80053c0 <TIM_OC2_SetConfig+0xb0>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a1a      	ldr	r2, [pc, #104]	; (800541c <TIM_OC2_SetConfig+0x10c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d003      	beq.n	80053c0 <TIM_OC2_SetConfig+0xb0>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a19      	ldr	r2, [pc, #100]	; (8005420 <TIM_OC2_SetConfig+0x110>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d113      	bne.n	80053e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40012c00 	.word	0x40012c00
 8005414:	40013400 	.word	0x40013400
 8005418:	40014000 	.word	0x40014000
 800541c:	40014400 	.word	0x40014400
 8005420:	40014800 	.word	0x40014800

08005424 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0303 	bic.w	r3, r3, #3
 800545e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a27      	ldr	r2, [pc, #156]	; (8005520 <TIM_OC3_SetConfig+0xfc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d003      	beq.n	800548e <TIM_OC3_SetConfig+0x6a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a26      	ldr	r2, [pc, #152]	; (8005524 <TIM_OC3_SetConfig+0x100>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d10d      	bne.n	80054aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005494:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	021b      	lsls	r3, r3, #8
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a1c      	ldr	r2, [pc, #112]	; (8005520 <TIM_OC3_SetConfig+0xfc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00f      	beq.n	80054d2 <TIM_OC3_SetConfig+0xae>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a1b      	ldr	r2, [pc, #108]	; (8005524 <TIM_OC3_SetConfig+0x100>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00b      	beq.n	80054d2 <TIM_OC3_SetConfig+0xae>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a1a      	ldr	r2, [pc, #104]	; (8005528 <TIM_OC3_SetConfig+0x104>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d007      	beq.n	80054d2 <TIM_OC3_SetConfig+0xae>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a19      	ldr	r2, [pc, #100]	; (800552c <TIM_OC3_SetConfig+0x108>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d003      	beq.n	80054d2 <TIM_OC3_SetConfig+0xae>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a18      	ldr	r2, [pc, #96]	; (8005530 <TIM_OC3_SetConfig+0x10c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d113      	bne.n	80054fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	621a      	str	r2, [r3, #32]
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40013400 	.word	0x40013400
 8005528:	40014000 	.word	0x40014000
 800552c:	40014400 	.word	0x40014400
 8005530:	40014800 	.word	0x40014800

08005534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	031b      	lsls	r3, r3, #12
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <TIM_OC4_SetConfig+0xc0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00f      	beq.n	80055b8 <TIM_OC4_SetConfig+0x84>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a17      	ldr	r2, [pc, #92]	; (80055f8 <TIM_OC4_SetConfig+0xc4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00b      	beq.n	80055b8 <TIM_OC4_SetConfig+0x84>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a16      	ldr	r2, [pc, #88]	; (80055fc <TIM_OC4_SetConfig+0xc8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d007      	beq.n	80055b8 <TIM_OC4_SetConfig+0x84>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a15      	ldr	r2, [pc, #84]	; (8005600 <TIM_OC4_SetConfig+0xcc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d003      	beq.n	80055b8 <TIM_OC4_SetConfig+0x84>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a14      	ldr	r2, [pc, #80]	; (8005604 <TIM_OC4_SetConfig+0xd0>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d109      	bne.n	80055cc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	019b      	lsls	r3, r3, #6
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	40013400 	.word	0x40013400
 80055fc:	40014000 	.word	0x40014000
 8005600:	40014400 	.word	0x40014400
 8005604:	40014800 	.word	0x40014800

08005608 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800564c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a17      	ldr	r2, [pc, #92]	; (80056bc <TIM_OC5_SetConfig+0xb4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00f      	beq.n	8005682 <TIM_OC5_SetConfig+0x7a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a16      	ldr	r2, [pc, #88]	; (80056c0 <TIM_OC5_SetConfig+0xb8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00b      	beq.n	8005682 <TIM_OC5_SetConfig+0x7a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a15      	ldr	r2, [pc, #84]	; (80056c4 <TIM_OC5_SetConfig+0xbc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d007      	beq.n	8005682 <TIM_OC5_SetConfig+0x7a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a14      	ldr	r2, [pc, #80]	; (80056c8 <TIM_OC5_SetConfig+0xc0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d003      	beq.n	8005682 <TIM_OC5_SetConfig+0x7a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a13      	ldr	r2, [pc, #76]	; (80056cc <TIM_OC5_SetConfig+0xc4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d109      	bne.n	8005696 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005688:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	021b      	lsls	r3, r3, #8
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	621a      	str	r2, [r3, #32]
}
 80056b0:	bf00      	nop
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	40012c00 	.word	0x40012c00
 80056c0:	40013400 	.word	0x40013400
 80056c4:	40014000 	.word	0x40014000
 80056c8:	40014400 	.word	0x40014400
 80056cc:	40014800 	.word	0x40014800

080056d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	051b      	lsls	r3, r3, #20
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a18      	ldr	r2, [pc, #96]	; (8005788 <TIM_OC6_SetConfig+0xb8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00f      	beq.n	800574c <TIM_OC6_SetConfig+0x7c>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a17      	ldr	r2, [pc, #92]	; (800578c <TIM_OC6_SetConfig+0xbc>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00b      	beq.n	800574c <TIM_OC6_SetConfig+0x7c>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a16      	ldr	r2, [pc, #88]	; (8005790 <TIM_OC6_SetConfig+0xc0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d007      	beq.n	800574c <TIM_OC6_SetConfig+0x7c>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a15      	ldr	r2, [pc, #84]	; (8005794 <TIM_OC6_SetConfig+0xc4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_OC6_SetConfig+0x7c>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a14      	ldr	r2, [pc, #80]	; (8005798 <TIM_OC6_SetConfig+0xc8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d109      	bne.n	8005760 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005752:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	029b      	lsls	r3, r3, #10
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	621a      	str	r2, [r3, #32]
}
 800577a:	bf00      	nop
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40012c00 	.word	0x40012c00
 800578c:	40013400 	.word	0x40013400
 8005790:	40014000 	.word	0x40014000
 8005794:	40014400 	.word	0x40014400
 8005798:	40014800 	.word	0x40014800

0800579c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f003 031f 	and.w	r3, r3, #31
 80057ae:	2201      	movs	r2, #1
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a1a      	ldr	r2, [r3, #32]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	43db      	mvns	r3, r3
 80057be:	401a      	ands	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a1a      	ldr	r2, [r3, #32]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f003 031f 	and.w	r3, r3, #31
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	fa01 f303 	lsl.w	r3, r1, r3
 80057d4:	431a      	orrs	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e045      	b.n	800588c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1c      	ldr	r2, [pc, #112]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d004      	beq.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1b      	ldr	r2, [pc, #108]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d108      	bne.n	8005846 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800583a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800585e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	4313      	orrs	r3, r2
 8005868:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40013400 	.word	0x40013400

080058a0 <wireWriteRegister>:
#include "INA219.h"

void wireWriteRegister (uint8_t reg, uint16_t value)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	4603      	mov	r3, r0
 80058a8:	460a      	mov	r2, r1
 80058aa:	71fb      	strb	r3, [r7, #7]
 80058ac:	4613      	mov	r3, r2
 80058ae:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = 0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	73fb      	strb	r3, [r7, #15]

	uint8_t buffer[3];
	buffer[0] = reg; // register
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	733b      	strb	r3, [r7, #12]
	buffer[1] = (value >> 8); // MSB
 80058b8:	88bb      	ldrh	r3, [r7, #4]
 80058ba:	0a1b      	lsrs	r3, r3, #8
 80058bc:	b29b      	uxth	r3, r3
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	737b      	strb	r3, [r7, #13]
	buffer[2] = value & 0xff; // LSB
 80058c2:	88bb      	ldrh	r3, [r7, #4]
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&ina219_hi2c1, ina219_i2caddr<<1, buffer, 3, 100);
 80058c8:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <wireWriteRegister+0x50>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	b299      	uxth	r1, r3
 80058d2:	f107 020c 	add.w	r2, r7, #12
 80058d6:	2364      	movs	r3, #100	; 0x64
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	2303      	movs	r3, #3
 80058dc:	4805      	ldr	r0, [pc, #20]	; (80058f4 <wireWriteRegister+0x54>)
 80058de:	f7fd faf1 	bl	8002ec4 <HAL_I2C_Master_Transmit>
 80058e2:	4603      	mov	r3, r0
 80058e4:	73fb      	strb	r3, [r7, #15]
}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000194 	.word	0x20000194
 80058f4:	20000148 	.word	0x20000148

080058f8 <wireReadRegister>:

void wireReadRegister(uint8_t reg, uint16_t *value)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	4603      	mov	r3, r0
 8005900:	6039      	str	r1, [r7, #0]
 8005902:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Master_Transmit(&ina219_hi2c1, ina219_i2caddr<<1, &reg, 1, 100);
 8005908:	4b18      	ldr	r3, [pc, #96]	; (800596c <wireReadRegister+0x74>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	b299      	uxth	r1, r3
 8005912:	1dfa      	adds	r2, r7, #7
 8005914:	2364      	movs	r3, #100	; 0x64
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	2301      	movs	r3, #1
 800591a:	4815      	ldr	r0, [pc, #84]	; (8005970 <wireReadRegister+0x78>)
 800591c:	f7fd fad2 	bl	8002ec4 <HAL_I2C_Master_Transmit>
 8005920:	4603      	mov	r3, r0
 8005922:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1); // Max 12-bit conversion time is 586us per sample
 8005924:	2001      	movs	r0, #1
 8005926:	f7fb f97b 	bl	8000c20 <HAL_Delay>

	uint8_t buffer[2] = {0,0};
 800592a:	2300      	movs	r3, #0
 800592c:	733b      	strb	r3, [r7, #12]
 800592e:	2300      	movs	r3, #0
 8005930:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Receive(&ina219_hi2c1, ina219_i2caddr<<1, buffer, 2, 100);
 8005932:	4b0e      	ldr	r3, [pc, #56]	; (800596c <wireReadRegister+0x74>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	b299      	uxth	r1, r3
 800593c:	f107 020c 	add.w	r2, r7, #12
 8005940:	2364      	movs	r3, #100	; 0x64
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	2302      	movs	r3, #2
 8005946:	480a      	ldr	r0, [pc, #40]	; (8005970 <wireReadRegister+0x78>)
 8005948:	f7fd fbb0 	bl	80030ac <HAL_I2C_Master_Receive>
 800594c:	4603      	mov	r3, r0
 800594e:	73fb      	strb	r3, [r7, #15]
	*value = (buffer[0]<<8) | buffer[1];
 8005950:	7b3b      	ldrb	r3, [r7, #12]
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	b21a      	sxth	r2, r3
 8005956:	7b7b      	ldrb	r3, [r7, #13]
 8005958:	b21b      	sxth	r3, r3
 800595a:	4313      	orrs	r3, r2
 800595c:	b21b      	sxth	r3, r3
 800595e:	b29a      	uxth	r2, r3
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	801a      	strh	r2, [r3, #0]
}
 8005964:	bf00      	nop
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20000194 	.word	0x20000194
 8005970:	20000148 	.word	0x20000148

08005974 <setCalibration_32V_2A>:

void setCalibration_32V_2A()
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
  ina219_calValue = 4096;
 800597a:	4b0e      	ldr	r3, [pc, #56]	; (80059b4 <setCalibration_32V_2A+0x40>)
 800597c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005980:	601a      	str	r2, [r3, #0]

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 10;  // Current LSB = 100uA per bit (1000/100 = 10)
 8005982:	4b0d      	ldr	r3, [pc, #52]	; (80059b8 <setCalibration_32V_2A+0x44>)
 8005984:	220a      	movs	r2, #10
 8005986:	601a      	str	r2, [r3, #0]
  ina219_powerMultiplier_mW = 2;     // Power LSB = 1mW per bit (2/1)
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <setCalibration_32V_2A+0x48>)
 800598a:	2202      	movs	r2, #2
 800598c:	601a      	str	r2, [r3, #0]

  // Set Calibration register to 'Cal' calculated above
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 800598e:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <setCalibration_32V_2A+0x40>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	b29b      	uxth	r3, r3
 8005994:	4619      	mov	r1, r3
 8005996:	2005      	movs	r0, #5
 8005998:	f7ff ff82 	bl	80058a0 <wireWriteRegister>

  // Set Config register to take into account the settings above
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 800599c:	f643 139f 	movw	r3, #14751	; 0x399f
 80059a0:	80fb      	strh	r3, [r7, #6]
                    INA219_CONFIG_GAIN_8_320MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
 80059a2:	88fb      	ldrh	r3, [r7, #6]
 80059a4:	4619      	mov	r1, r3
 80059a6:	2000      	movs	r0, #0
 80059a8:	f7ff ff7a 	bl	80058a0 <wireWriteRegister>
}
 80059ac:	bf00      	nop
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20000198 	.word	0x20000198
 80059b8:	20000140 	.word	0x20000140
 80059bc:	20000144 	.word	0x20000144

080059c0 <setCalibration_16V_400mA>:
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
}

void setCalibration_16V_400mA() {
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0

  ina219_calValue = 8192;
 80059c6:	4b0e      	ldr	r3, [pc, #56]	; (8005a00 <setCalibration_16V_400mA+0x40>)
 80059c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059cc:	601a      	str	r2, [r3, #0]

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 20;  // Current LSB = 50uA per bit (1000/50 = 20)
 80059ce:	4b0d      	ldr	r3, [pc, #52]	; (8005a04 <setCalibration_16V_400mA+0x44>)
 80059d0:	2214      	movs	r2, #20
 80059d2:	601a      	str	r2, [r3, #0]
  ina219_powerMultiplier_mW = 1;     // Power LSB = 1mW per bit
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <setCalibration_16V_400mA+0x48>)
 80059d6:	2201      	movs	r2, #1
 80059d8:	601a      	str	r2, [r3, #0]

  // Set Calibration register to 'Cal' calculated above
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 80059da:	4b09      	ldr	r3, [pc, #36]	; (8005a00 <setCalibration_16V_400mA+0x40>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	4619      	mov	r1, r3
 80059e2:	2005      	movs	r0, #5
 80059e4:	f7ff ff5c 	bl	80058a0 <wireWriteRegister>

  // Set Config register to take into account the settings above
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 80059e8:	f240 139f 	movw	r3, #415	; 0x19f
 80059ec:	80fb      	strh	r3, [r7, #6]
                    INA219_CONFIG_GAIN_1_40MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
 80059ee:	88fb      	ldrh	r3, [r7, #6]
 80059f0:	4619      	mov	r1, r3
 80059f2:	2000      	movs	r0, #0
 80059f4:	f7ff ff54 	bl	80058a0 <wireWriteRegister>
}
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	20000198 	.word	0x20000198
 8005a04:	20000140 	.word	0x20000140
 8005a08:	20000144 	.word	0x20000144

08005a0c <ina219_init>:

void ina219_init(I2C_HandleTypeDef hi2c1, uint8_t ina219_addr) {
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	f107 0c08 	add.w	ip, r7, #8
 8005a16:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  ina219_i2caddr = ina219_addr;
 8005a1a:	4a0d      	ldr	r2, [pc, #52]	; (8005a50 <ina219_init+0x44>)
 8005a1c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005a20:	7013      	strb	r3, [r2, #0]
  ina219_currentDivider_mA = 0;
 8005a22:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <ina219_init+0x48>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
  ina219_powerMultiplier_mW = 0;
 8005a28:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <ina219_init+0x4c>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
  ina219_hi2c1 = hi2c1;
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <ina219_init+0x50>)
 8005a30:	4618      	mov	r0, r3
 8005a32:	f107 0108 	add.w	r1, r7, #8
 8005a36:	234c      	movs	r3, #76	; 0x4c
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f001 fcaf 	bl	800739c <memcpy>

  // Set chip to large range config values to start
  setCalibration_32V_2A();
 8005a3e:	f7ff ff99 	bl	8005974 <setCalibration_32V_2A>
}
 8005a42:	bf00      	nop
 8005a44:	46bd      	mov	sp, r7
 8005a46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a4a:	b004      	add	sp, #16
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000194 	.word	0x20000194
 8005a54:	20000140 	.word	0x20000140
 8005a58:	20000144 	.word	0x20000144
 8005a5c:	20000148 	.word	0x20000148

08005a60 <getBusVoltage_raw>:

int16_t getBusVoltage_raw() {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
  uint16_t value;
  wireReadRegister(INA219_REG_BUSVOLTAGE, &value);
 8005a66:	1dbb      	adds	r3, r7, #6
 8005a68:	4619      	mov	r1, r3
 8005a6a:	2002      	movs	r0, #2
 8005a6c:	f7ff ff44 	bl	80058f8 <wireReadRegister>

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	08db      	lsrs	r3, r3, #3
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	b21b      	sxth	r3, r3
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <getShuntVoltage_raw>:

int16_t getShuntVoltage_raw() {
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
  uint16_t value;
  wireReadRegister(INA219_REG_SHUNTVOLTAGE, &value);
 8005a8a:	1dbb      	adds	r3, r7, #6
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	2001      	movs	r0, #1
 8005a90:	f7ff ff32 	bl	80058f8 <wireReadRegister>
  return (int16_t)value;
 8005a94:	88fb      	ldrh	r3, [r7, #6]
 8005a96:	b21b      	sxth	r3, r3
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <getCurrent_raw>:

int16_t getCurrent_raw() {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8005aa6:	4b09      	ldr	r3, [pc, #36]	; (8005acc <getCurrent_raw+0x2c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	4619      	mov	r1, r3
 8005aae:	2005      	movs	r0, #5
 8005ab0:	f7ff fef6 	bl	80058a0 <wireWriteRegister>

  // Now we can safely read the CURRENT register!
  wireReadRegister(INA219_REG_CURRENT, &value);
 8005ab4:	1dbb      	adds	r3, r7, #6
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	2004      	movs	r0, #4
 8005aba:	f7ff ff1d 	bl	80058f8 <wireReadRegister>

  return (int16_t)value;
 8005abe:	88fb      	ldrh	r3, [r7, #6]
 8005ac0:	b21b      	sxth	r3, r3
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000198 	.word	0x20000198

08005ad0 <getPower_raw>:

int16_t getPower_raw() {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8005ad6:	4b09      	ldr	r3, [pc, #36]	; (8005afc <getPower_raw+0x2c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	4619      	mov	r1, r3
 8005ade:	2005      	movs	r0, #5
 8005ae0:	f7ff fede 	bl	80058a0 <wireWriteRegister>

  // Now we can safely read the POWER register!
  wireReadRegister(INA219_REG_POWER, &value);
 8005ae4:	1dbb      	adds	r3, r7, #6
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	2003      	movs	r0, #3
 8005aea:	f7ff ff05 	bl	80058f8 <wireReadRegister>

  return (int16_t)value;
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	b21b      	sxth	r3, r3
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000198 	.word	0x20000198

08005b00 <getShuntVoltage_mV>:

float getShuntVoltage_mV() {
 8005b00:	b590      	push	{r4, r7, lr}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
  int16_t value;
  value = getShuntVoltage_raw();
 8005b06:	f7ff ffbd 	bl	8005a84 <getShuntVoltage_raw>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	80fb      	strh	r3, [r7, #6]
  return value * 0.01;
 8005b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fa fcaa 	bl	800046c <__aeabi_i2d>
 8005b18:	a309      	add	r3, pc, #36	; (adr r3, 8005b40 <getShuntVoltage_mV+0x40>)
 8005b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1e:	f7fa fd0f 	bl	8000540 <__aeabi_dmul>
 8005b22:	4603      	mov	r3, r0
 8005b24:	460c      	mov	r4, r1
 8005b26:	4618      	mov	r0, r3
 8005b28:	4621      	mov	r1, r4
 8005b2a:	f7fa ffb9 	bl	8000aa0 <__aeabi_d2f>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	ee07 3a90 	vmov	s15, r3
}
 8005b34:	eeb0 0a67 	vmov.f32	s0, s15
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd90      	pop	{r4, r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	47ae147b 	.word	0x47ae147b
 8005b44:	3f847ae1 	.word	0x3f847ae1

08005b48 <getBusVoltage_V>:

float getBusVoltage_V() {
 8005b48:	b590      	push	{r4, r7, lr}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
  int16_t value = getBusVoltage_raw();
 8005b4e:	f7ff ff87 	bl	8005a60 <getBusVoltage_raw>
 8005b52:	4603      	mov	r3, r0
 8005b54:	80fb      	strh	r3, [r7, #6]
  return value * 0.001;
 8005b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fa fc86 	bl	800046c <__aeabi_i2d>
 8005b60:	a309      	add	r3, pc, #36	; (adr r3, 8005b88 <getBusVoltage_V+0x40>)
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	f7fa fceb 	bl	8000540 <__aeabi_dmul>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	4618      	mov	r0, r3
 8005b70:	4621      	mov	r1, r4
 8005b72:	f7fa ff95 	bl	8000aa0 <__aeabi_d2f>
 8005b76:	4603      	mov	r3, r0
 8005b78:	ee07 3a90 	vmov	s15, r3
}
 8005b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd90      	pop	{r4, r7, pc}
 8005b86:	bf00      	nop
 8005b88:	d2f1a9fc 	.word	0xd2f1a9fc
 8005b8c:	3f50624d 	.word	0x3f50624d

08005b90 <getCurrent_mA>:

float getCurrent_mA() {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
  float valueDec = getCurrent_raw();
 8005b96:	f7ff ff83 	bl	8005aa0 <getCurrent_raw>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	ee07 3a90 	vmov	s15, r3
 8005ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ba4:	edc7 7a01 	vstr	s15, [r7, #4]
  valueDec /= ina219_currentDivider_mA;
 8005ba8:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <getCurrent_mA+0x40>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	ee07 3a90 	vmov	s15, r3
 8005bb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bb4:	edd7 6a01 	vldr	s13, [r7, #4]
 8005bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bbc:	edc7 7a01 	vstr	s15, [r7, #4]
  return valueDec;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	ee07 3a90 	vmov	s15, r3
}
 8005bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20000140 	.word	0x20000140

08005bd4 <getPower_mW>:

float getPower_mW() {
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
  float valueDec = getPower_raw();
 8005bda:	f7ff ff79 	bl	8005ad0 <getPower_raw>
 8005bde:	4603      	mov	r3, r0
 8005be0:	ee07 3a90 	vmov	s15, r3
 8005be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be8:	edc7 7a01 	vstr	s15, [r7, #4]
  valueDec *= ina219_powerMultiplier_mW;
 8005bec:	4b09      	ldr	r3, [pc, #36]	; (8005c14 <getPower_mW+0x40>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	ee07 3a90 	vmov	s15, r3
 8005bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf8:	ed97 7a01 	vldr	s14, [r7, #4]
 8005bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c00:	edc7 7a01 	vstr	s15, [r7, #4]
  return valueDec;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	ee07 3a90 	vmov	s15, r3
}
 8005c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	20000144 	.word	0x20000144

08005c18 <getData>:

void getData(INA* ina){
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
	ina->shuntvoltage = getShuntVoltage_mV();
 8005c20:	f7ff ff6e 	bl	8005b00 <getShuntVoltage_mV>
 8005c24:	eef0 7a40 	vmov.f32	s15, s0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	edc3 7a00 	vstr	s15, [r3]
	ina->busvoltage = getBusVoltage_V();
 8005c2e:	f7ff ff8b 	bl	8005b48 <getBusVoltage_V>
 8005c32:	eef0 7a40 	vmov.f32	s15, s0
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	edc3 7a01 	vstr	s15, [r3, #4]
	ina->current_mA = getCurrent_mA();
 8005c3c:	f7ff ffa8 	bl	8005b90 <getCurrent_mA>
 8005c40:	eef0 7a40 	vmov.f32	s15, s0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	edc3 7a02 	vstr	s15, [r3, #8]
	ina->power_mW = getPower_mW();
 8005c4a:	f7ff ffc3 	bl	8005bd4 <getPower_mW>
 8005c4e:	eef0 7a40 	vmov.f32	s15, s0
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	edc3 7a04 	vstr	s15, [r3, #16]
	ina->loadvoltage = ina->busvoltage + (ina->shuntvoltage / 1000);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	edd3 6a00 	vldr	s13, [r3]
 8005c64:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8005c80 <getData+0x68>
 8005c68:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	447a0000 	.word	0x447a0000

08005c84 <sendMessageCAN>:

void sendMessageCAN(INA ina, CAN_HandleTypeDef* phcan, uint8_t ina_id){
 8005c84:	b084      	sub	sp, #16
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b086      	sub	sp, #24
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	f107 0c20 	add.w	ip, r7, #32
 8005c90:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	Z_CAN_Package can_tx_pkg = NULL_MSG;
 8005c94:	4a10      	ldr	r2, [pc, #64]	; (8005cd8 <sendMessageCAN+0x54>)
 8005c96:	f107 030c 	add.w	r3, r7, #12
 8005c9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	can_tx_pkg.identifier = ina_id;
 8005ca0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005ca4:	60fb      	str	r3, [r7, #12]
	float f1, f2;
	f1 = ina.current_mA;
 8005ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca8:	60bb      	str	r3, [r7, #8]
	f2 = ina.loadvoltage;
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	607b      	str	r3, [r7, #4]
	memcpy(can_tx_pkg.data, &f1, sizeof(float));
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	613b      	str	r3, [r7, #16]
	memcpy(can_tx_pkg.data + sizeof(float), &f2, sizeof(float));
 8005cb2:	f107 030c 	add.w	r3, r7, #12
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	3304      	adds	r3, #4
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	601a      	str	r2, [r3, #0]
	sendCanMessage(phcan, can_tx_pkg);
 8005cbe:	f107 030c 	add.w	r3, r7, #12
 8005cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005cc6:	f001 f8b1 	bl	8006e2c <sendCanMessage>


	return;
 8005cca:	bf00      	nop
	//can_tx_pkg.identifier |= 0b00100000;
	can_tx_pkg.data[7] = 5;
	memcpy(can_tx_pkg.data, &(ina->loadvoltage), sizeof(ina->loadvoltage));
	sendCanMessage(phcan, can_tx_pkg);
	*/
}
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cd4:	b004      	add	sp, #16
 8005cd6:	4770      	bx	lr
 8005cd8:	20000010 	.word	0x20000010

08005cdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cde:	b097      	sub	sp, #92	; 0x5c
 8005ce0:	af10      	add	r7, sp, #64	; 0x40
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ce2:	f7fa ff2d 	bl	8000b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ce6:	f000 fa4f 	bl	8006188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005cea:	f000 fd27 	bl	800673c <MX_GPIO_Init>
  MX_CAN1_Init();
 8005cee:	f000 fc13 	bl	8006518 <MX_CAN1_Init>
  MX_ADC1_Init();
 8005cf2:	f000 fad3 	bl	800629c <MX_ADC1_Init>
  MX_ADC2_Init();
 8005cf6:	f000 fb47 	bl	8006388 <MX_ADC2_Init>
  MX_ADC3_Init();
 8005cfa:	f000 fba9 	bl	8006450 <MX_ADC3_Init>
  MX_I2C1_Init();
 8005cfe:	f000 fc41 	bl	8006584 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005d02:	f000 fc7f 	bl	8006604 <MX_I2C2_Init>
  MX_TIM5_Init();
 8005d06:	f000 fcbd 	bl	8006684 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // Initializing CAN Filter
  filterConfigCAN(&hcan1);
 8005d0a:	489e      	ldr	r0, [pc, #632]	; (8005f84 <main+0x2a8>)
 8005d0c:	f001 f86e 	bl	8006dec <filterConfigCAN>
  HAL_CAN_Start(&hcan1);
 8005d10:	489c      	ldr	r0, [pc, #624]	; (8005f84 <main+0x2a8>)
 8005d12:	f7fc fc4c 	bl	80025ae <HAL_CAN_Start>

  // Initializing PWM Timer
  HAL_TIM_PWM_Init(&htim5);
 8005d16:	489c      	ldr	r0, [pc, #624]	; (8005f88 <main+0x2ac>)
 8005d18:	f7fe ffc6 	bl	8004ca8 <HAL_TIM_PWM_Init>
  configPWM.OCMode = TIM_OCMODE_PWM1;
 8005d1c:	4b9b      	ldr	r3, [pc, #620]	; (8005f8c <main+0x2b0>)
 8005d1e:	2260      	movs	r2, #96	; 0x60
 8005d20:	601a      	str	r2, [r3, #0]
  configPWM.Pulse = 0; // Largura do pulso
 8005d22:	4b9a      	ldr	r3, [pc, #616]	; (8005f8c <main+0x2b0>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	605a      	str	r2, [r3, #4]
  configPWM.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d28:	4b98      	ldr	r3, [pc, #608]	; (8005f8c <main+0x2b0>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]
  configPWM.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005d2e:	4b97      	ldr	r3, [pc, #604]	; (8005f8c <main+0x2b0>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	60da      	str	r2, [r3, #12]
  configPWM.OCFastMode = TIM_OCFAST_DISABLE;
 8005d34:	4b95      	ldr	r3, [pc, #596]	; (8005f8c <main+0x2b0>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	611a      	str	r2, [r3, #16]
  configPWM.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005d3a:	4b94      	ldr	r3, [pc, #592]	; (8005f8c <main+0x2b0>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	615a      	str	r2, [r3, #20]
  configPWM.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005d40:	4b92      	ldr	r3, [pc, #584]	; (8005f8c <main+0x2b0>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	619a      	str	r2, [r3, #24]
  HAL_TIM_PWM_ConfigChannel(&htim5, &configPWM, TIM_CHANNEL_1);
 8005d46:	2200      	movs	r2, #0
 8005d48:	4990      	ldr	r1, [pc, #576]	; (8005f8c <main+0x2b0>)
 8005d4a:	488f      	ldr	r0, [pc, #572]	; (8005f88 <main+0x2ac>)
 8005d4c:	f7ff f89e 	bl	8004e8c <HAL_TIM_PWM_ConfigChannel>
	}
	else{
		continue;		//Nenhuma Mensagem recebida
	}
	*/
	if(temp > 60){		//Prevent Overheating
 8005d50:	4b8f      	ldr	r3, [pc, #572]	; (8005f90 <main+0x2b4>)
 8005d52:	edd3 7a00 	vldr	s15, [r3]
 8005d56:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8005f94 <main+0x2b8>
 8005d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d62:	dd06      	ble.n	8005d72 <main+0x96>
	  		HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8005d64:	2100      	movs	r1, #0
 8005d66:	4888      	ldr	r0, [pc, #544]	; (8005f88 <main+0x2ac>)
 8005d68:	f7ff f822 	bl	8004db0 <HAL_TIM_PWM_Stop>
	  		flagPWM = 0;
 8005d6c:	4b8a      	ldr	r3, [pc, #552]	; (8005f98 <main+0x2bc>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	701a      	strb	r2, [r3, #0]
	}

	// Read and send INA1 - I2C1 (Bateria)
	ina219_init(hi2c1, INA_ADDR_1);
 8005d72:	4e8a      	ldr	r6, [pc, #552]	; (8005f9c <main+0x2c0>)
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d78:	466d      	mov	r5, sp
 8005d7a:	f106 0410 	add.w	r4, r6, #16
 8005d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d8a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005d8e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005d92:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005d96:	f7ff fe39 	bl	8005a0c <ina219_init>
	setCalibration_16V_400mA();
 8005d9a:	f7ff fe11 	bl	80059c0 <setCalibration_16V_400mA>
	getData(&ina1_i2c1);
 8005d9e:	4880      	ldr	r0, [pc, #512]	; (8005fa0 <main+0x2c4>)
 8005da0:	f7ff ff3a 	bl	8005c18 <getData>
	//sendMessageCAN(&ina1_i2c1, &hcan1, 0);

	can_tx_pkg.identifier = 2;
 8005da4:	4b7f      	ldr	r3, [pc, #508]	; (8005fa4 <main+0x2c8>)
 8005da6:	2202      	movs	r2, #2
 8005da8:	601a      	str	r2, [r3, #0]
	float f1, f2;
	f1 = ina1_i2c1.current_mA;
 8005daa:	4b7d      	ldr	r3, [pc, #500]	; (8005fa0 <main+0x2c4>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	60bb      	str	r3, [r7, #8]
	f2 = ina1_i2c1.loadvoltage;
 8005db0:	4b7b      	ldr	r3, [pc, #492]	; (8005fa0 <main+0x2c4>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	607b      	str	r3, [r7, #4]
	memcpy(can_tx_pkg.data, &f1, sizeof(float));
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	4a7a      	ldr	r2, [pc, #488]	; (8005fa4 <main+0x2c8>)
 8005dba:	6053      	str	r3, [r2, #4]
	memcpy(can_tx_pkg.data + sizeof(float), &f2, sizeof(float));
 8005dbc:	4a7a      	ldr	r2, [pc, #488]	; (8005fa8 <main+0x2cc>)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6013      	str	r3, [r2, #0]
	sendCanMessage(&hcan1, can_tx_pkg);
 8005dc2:	4b78      	ldr	r3, [pc, #480]	; (8005fa4 <main+0x2c8>)
 8005dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dc6:	486f      	ldr	r0, [pc, #444]	; (8005f84 <main+0x2a8>)
 8005dc8:	f001 f830 	bl	8006e2c <sendCanMessage>

	// Read and send INA2 - I2C1 (Charger)
	ina219_init(hi2c1, INA_ADDR_2);
 8005dcc:	4e73      	ldr	r6, [pc, #460]	; (8005f9c <main+0x2c0>)
 8005dce:	2341      	movs	r3, #65	; 0x41
 8005dd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dd2:	466d      	mov	r5, sp
 8005dd4:	f106 0410 	add.w	r4, r6, #16
 8005dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005de4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005de8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005dec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005df0:	f7ff fe0c 	bl	8005a0c <ina219_init>
	setCalibration_16V_400mA();
 8005df4:	f7ff fde4 	bl	80059c0 <setCalibration_16V_400mA>
	getData(&ina2_i2c1);
 8005df8:	486c      	ldr	r0, [pc, #432]	; (8005fac <main+0x2d0>)
 8005dfa:	f7ff ff0d 	bl	8005c18 <getData>
	sendMessageCAN(ina2_i2c1, &hcan1, 3);
 8005dfe:	4b6b      	ldr	r3, [pc, #428]	; (8005fac <main+0x2d0>)
 8005e00:	2203      	movs	r2, #3
 8005e02:	9202      	str	r2, [sp, #8]
 8005e04:	4a5f      	ldr	r2, [pc, #380]	; (8005f84 <main+0x2a8>)
 8005e06:	9201      	str	r2, [sp, #4]
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	9200      	str	r2, [sp, #0]
 8005e0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e0e:	f7ff ff39 	bl	8005c84 <sendMessageCAN>

	// Read and send INA3 - I2C1 (3.3V)
	ina219_init(hi2c1, INA_ADDR_3);
 8005e12:	4e62      	ldr	r6, [pc, #392]	; (8005f9c <main+0x2c0>)
 8005e14:	2344      	movs	r3, #68	; 0x44
 8005e16:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e18:	466d      	mov	r5, sp
 8005e1a:	f106 0410 	add.w	r4, r6, #16
 8005e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e2a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005e2e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005e32:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005e36:	f7ff fde9 	bl	8005a0c <ina219_init>
	setCalibration_16V_400mA();
 8005e3a:	f7ff fdc1 	bl	80059c0 <setCalibration_16V_400mA>
	getData(&ina3_i2c1);
 8005e3e:	485c      	ldr	r0, [pc, #368]	; (8005fb0 <main+0x2d4>)
 8005e40:	f7ff feea 	bl	8005c18 <getData>
	sendMessageCAN(ina3_i2c1, &hcan1, 4);
 8005e44:	4b5a      	ldr	r3, [pc, #360]	; (8005fb0 <main+0x2d4>)
 8005e46:	2204      	movs	r2, #4
 8005e48:	9202      	str	r2, [sp, #8]
 8005e4a:	4a4e      	ldr	r2, [pc, #312]	; (8005f84 <main+0x2a8>)
 8005e4c:	9201      	str	r2, [sp, #4]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	9200      	str	r2, [sp, #0]
 8005e52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e54:	f7ff ff16 	bl	8005c84 <sendMessageCAN>

	// Read and send INA4 - I2C1 (5V)
	ina219_init(hi2c1, INA_ADDR_4);
 8005e58:	4e50      	ldr	r6, [pc, #320]	; (8005f9c <main+0x2c0>)
 8005e5a:	2345      	movs	r3, #69	; 0x45
 8005e5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e5e:	466d      	mov	r5, sp
 8005e60:	f106 0410 	add.w	r4, r6, #16
 8005e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e70:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005e74:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005e78:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005e7c:	f7ff fdc6 	bl	8005a0c <ina219_init>
	setCalibration_16V_400mA();
 8005e80:	f7ff fd9e 	bl	80059c0 <setCalibration_16V_400mA>
	getData(&ina4_i2c1);
 8005e84:	484b      	ldr	r0, [pc, #300]	; (8005fb4 <main+0x2d8>)
 8005e86:	f7ff fec7 	bl	8005c18 <getData>
	sendMessageCAN(ina4_i2c1, &hcan1, 5);
 8005e8a:	4b4a      	ldr	r3, [pc, #296]	; (8005fb4 <main+0x2d8>)
 8005e8c:	2205      	movs	r2, #5
 8005e8e:	9202      	str	r2, [sp, #8]
 8005e90:	4a3c      	ldr	r2, [pc, #240]	; (8005f84 <main+0x2a8>)
 8005e92:	9201      	str	r2, [sp, #4]
 8005e94:	691a      	ldr	r2, [r3, #16]
 8005e96:	9200      	str	r2, [sp, #0]
 8005e98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e9a:	f7ff fef3 	bl	8005c84 <sendMessageCAN>
	setCalibration_16V_400mA();
	getData(&ina1_i2c2);
	sendMessageCAN(&ina1_i2c2, &hcan1, 6);
*/
	// Read and send INA2 - I2C2 (Painel Solar 2)
	ina219_init(hi2c2, INA_ADDR_2);
 8005e9e:	4e46      	ldr	r6, [pc, #280]	; (8005fb8 <main+0x2dc>)
 8005ea0:	2341      	movs	r3, #65	; 0x41
 8005ea2:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ea4:	466d      	mov	r5, sp
 8005ea6:	f106 0410 	add.w	r4, r6, #16
 8005eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eb6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005eba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005ebe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005ec2:	f7ff fda3 	bl	8005a0c <ina219_init>
	setCalibration_16V_400mA();
 8005ec6:	f7ff fd7b 	bl	80059c0 <setCalibration_16V_400mA>
	getData(&ina2_i2c2);
 8005eca:	483c      	ldr	r0, [pc, #240]	; (8005fbc <main+0x2e0>)
 8005ecc:	f7ff fea4 	bl	8005c18 <getData>
	sendMessageCAN(ina2_i2c2, &hcan1, 7);
 8005ed0:	4b3a      	ldr	r3, [pc, #232]	; (8005fbc <main+0x2e0>)
 8005ed2:	2207      	movs	r2, #7
 8005ed4:	9202      	str	r2, [sp, #8]
 8005ed6:	4a2b      	ldr	r2, [pc, #172]	; (8005f84 <main+0x2a8>)
 8005ed8:	9201      	str	r2, [sp, #4]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	9200      	str	r2, [sp, #0]
 8005ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ee0:	f7ff fed0 	bl	8005c84 <sendMessageCAN>

	// Read and send INA3 - I2C2 (Painel Solar 1)
	ina219_init(hi2c2, INA_ADDR_3);
 8005ee4:	4e34      	ldr	r6, [pc, #208]	; (8005fb8 <main+0x2dc>)
 8005ee6:	2344      	movs	r3, #68	; 0x44
 8005ee8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005eea:	466d      	mov	r5, sp
 8005eec:	f106 0410 	add.w	r4, r6, #16
 8005ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005efc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005f00:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005f04:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005f08:	f7ff fd80 	bl	8005a0c <ina219_init>
	setCalibration_16V_400mA();
 8005f0c:	f7ff fd58 	bl	80059c0 <setCalibration_16V_400mA>
	getData(&ina3_i2c2);
 8005f10:	482b      	ldr	r0, [pc, #172]	; (8005fc0 <main+0x2e4>)
 8005f12:	f7ff fe81 	bl	8005c18 <getData>
	sendMessageCAN(ina3_i2c2, &hcan1, 8);
 8005f16:	4b2a      	ldr	r3, [pc, #168]	; (8005fc0 <main+0x2e4>)
 8005f18:	2208      	movs	r2, #8
 8005f1a:	9202      	str	r2, [sp, #8]
 8005f1c:	4a19      	ldr	r2, [pc, #100]	; (8005f84 <main+0x2a8>)
 8005f1e:	9201      	str	r2, [sp, #4]
 8005f20:	691a      	ldr	r2, [r3, #16]
 8005f22:	9200      	str	r2, [sp, #0]
 8005f24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f26:	f7ff fead 	bl	8005c84 <sendMessageCAN>
	sendMessageCAN(&ina4_i2c2, &hcan1, 9);
*/


	// Read adc1 (Therm3)
	temp_avg1 = 0;
 8005f2a:	4b26      	ldr	r3, [pc, #152]	; (8005fc4 <main+0x2e8>)
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 5; i++)
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	e011      	b.n	8005f5c <main+0x280>
		temp_avg1 += tempADC(&hadc1, 1100);
 8005f38:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8005fd0 <main+0x2f4>
 8005f3c:	4822      	ldr	r0, [pc, #136]	; (8005fc8 <main+0x2ec>)
 8005f3e:	f000 fc47 	bl	80067d0 <tempADC>
 8005f42:	eeb0 7a40 	vmov.f32	s14, s0
 8005f46:	4b1f      	ldr	r3, [pc, #124]	; (8005fc4 <main+0x2e8>)
 8005f48:	edd3 7a00 	vldr	s15, [r3]
 8005f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f50:	4b1c      	ldr	r3, [pc, #112]	; (8005fc4 <main+0x2e8>)
 8005f52:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 5; i++)
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	ddea      	ble.n	8005f38 <main+0x25c>
	temp_avg1 /= 5;
 8005f62:	4b18      	ldr	r3, [pc, #96]	; (8005fc4 <main+0x2e8>)
 8005f64:	ed93 7a00 	vldr	s14, [r3]
 8005f68:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8005f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f70:	4b14      	ldr	r3, [pc, #80]	; (8005fc4 <main+0x2e8>)
 8005f72:	edc3 7a00 	vstr	s15, [r3]

	// Read adc2 (Therm2)
	temp_avg2 = 0;
 8005f76:	4b15      	ldr	r3, [pc, #84]	; (8005fcc <main+0x2f0>)
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 5; i++)
 8005f7e:	2300      	movs	r3, #0
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	e039      	b.n	8005ff8 <main+0x31c>
 8005f84:	200003c4 	.word	0x200003c4
 8005f88:	200002a4 	.word	0x200002a4
 8005f8c:	20000118 	.word	0x20000118
 8005f90:	20000008 	.word	0x20000008
 8005f94:	42700000 	.word	0x42700000
 8005f98:	20000134 	.word	0x20000134
 8005f9c:	20000208 	.word	0x20000208
 8005fa0:	200000a0 	.word	0x200000a0
 8005fa4:	200003ac 	.word	0x200003ac
 8005fa8:	200003b4 	.word	0x200003b4
 8005fac:	200000b4 	.word	0x200000b4
 8005fb0:	200000c8 	.word	0x200000c8
 8005fb4:	200000dc 	.word	0x200000dc
 8005fb8:	20000254 	.word	0x20000254
 8005fbc:	200000f0 	.word	0x200000f0
 8005fc0:	20000104 	.word	0x20000104
 8005fc4:	2000019c 	.word	0x2000019c
 8005fc8:	200002e4 	.word	0x200002e4
 8005fcc:	200001a0 	.word	0x200001a0
 8005fd0:	44898000 	.word	0x44898000
		temp_avg2 += tempADC(&hadc2, 1100);
 8005fd4:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 8005fd0 <main+0x2f4>
 8005fd8:	485f      	ldr	r0, [pc, #380]	; (8006158 <main+0x47c>)
 8005fda:	f000 fbf9 	bl	80067d0 <tempADC>
 8005fde:	eeb0 7a40 	vmov.f32	s14, s0
 8005fe2:	4b5e      	ldr	r3, [pc, #376]	; (800615c <main+0x480>)
 8005fe4:	edd3 7a00 	vldr	s15, [r3]
 8005fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fec:	4b5b      	ldr	r3, [pc, #364]	; (800615c <main+0x480>)
 8005fee:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 5; i++)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	ddea      	ble.n	8005fd4 <main+0x2f8>
	temp_avg2 /= 5;
 8005ffe:	4b57      	ldr	r3, [pc, #348]	; (800615c <main+0x480>)
 8006000:	ed93 7a00 	vldr	s14, [r3]
 8006004:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8006008:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800600c:	4b53      	ldr	r3, [pc, #332]	; (800615c <main+0x480>)
 800600e:	edc3 7a00 	vstr	s15, [r3]

	// Read adc3 (Therm1)
	temp_avg3 = 0;
 8006012:	4b53      	ldr	r3, [pc, #332]	; (8006160 <main+0x484>)
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 5; i++)
 800601a:	2300      	movs	r3, #0
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e011      	b.n	8006044 <main+0x368>
		temp_avg3 += tempADC(&hadc3, 1100);
 8006020:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8006164 <main+0x488>
 8006024:	4850      	ldr	r0, [pc, #320]	; (8006168 <main+0x48c>)
 8006026:	f000 fbd3 	bl	80067d0 <tempADC>
 800602a:	eeb0 7a40 	vmov.f32	s14, s0
 800602e:	4b4c      	ldr	r3, [pc, #304]	; (8006160 <main+0x484>)
 8006030:	edd3 7a00 	vldr	s15, [r3]
 8006034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006038:	4b49      	ldr	r3, [pc, #292]	; (8006160 <main+0x484>)
 800603a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 5; i++)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3301      	adds	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b04      	cmp	r3, #4
 8006048:	ddea      	ble.n	8006020 <main+0x344>
	temp_avg3 /= 5;
 800604a:	4b45      	ldr	r3, [pc, #276]	; (8006160 <main+0x484>)
 800604c:	ed93 7a00 	vldr	s14, [r3]
 8006050:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8006054:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006058:	4b41      	ldr	r3, [pc, #260]	; (8006160 <main+0x484>)
 800605a:	edc3 7a00 	vstr	s15, [r3]

	temp = (temp_avg1 + temp_avg2)/2.0;
 800605e:	4b43      	ldr	r3, [pc, #268]	; (800616c <main+0x490>)
 8006060:	ed93 7a00 	vldr	s14, [r3]
 8006064:	4b3d      	ldr	r3, [pc, #244]	; (800615c <main+0x480>)
 8006066:	edd3 7a00 	vldr	s15, [r3]
 800606a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800606e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006076:	4b3e      	ldr	r3, [pc, #248]	; (8006170 <main+0x494>)
 8006078:	edc3 7a00 	vstr	s15, [r3]

	can_tx_pkg.identifier = 1;
 800607c:	4b3d      	ldr	r3, [pc, #244]	; (8006174 <main+0x498>)
 800607e:	2201      	movs	r2, #1
 8006080:	601a      	str	r2, [r3, #0]
	memcpy(can_tx_pkg.data, &temp, sizeof(float));
 8006082:	4b3b      	ldr	r3, [pc, #236]	; (8006170 <main+0x494>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a3b      	ldr	r2, [pc, #236]	; (8006174 <main+0x498>)
 8006088:	6053      	str	r3, [r2, #4]
	sendCanMessage(&hcan1, can_tx_pkg);
 800608a:	4b3a      	ldr	r3, [pc, #232]	; (8006174 <main+0x498>)
 800608c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800608e:	483a      	ldr	r0, [pc, #232]	; (8006178 <main+0x49c>)
 8006090:	f000 fecc 	bl	8006e2c <sendCanMessage>

	if(temp < 2 && flagPWM != 2){		//60%
 8006094:	4b36      	ldr	r3, [pc, #216]	; (8006170 <main+0x494>)
 8006096:	edd3 7a00 	vldr	s15, [r3]
 800609a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800609e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a6:	d51c      	bpl.n	80060e2 <main+0x406>
 80060a8:	4b34      	ldr	r3, [pc, #208]	; (800617c <main+0x4a0>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d018      	beq.n	80060e2 <main+0x406>
		//HAL_GPIO_WritePin(PWM_T_GPIO_Port, PWM_T_Pin, GPIO_PIN_SET);
		if(flagPWM != 0)
 80060b0:	4b32      	ldr	r3, [pc, #200]	; (800617c <main+0x4a0>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <main+0x3e4>
			HAL_TIM_PWM_Stop(&htim5,TIM_CHANNEL_1);
 80060b8:	2100      	movs	r1, #0
 80060ba:	4831      	ldr	r0, [pc, #196]	; (8006180 <main+0x4a4>)
 80060bc:	f7fe fe78 	bl	8004db0 <HAL_TIM_PWM_Stop>

		configPWM.Pulse = 1200;
 80060c0:	4b30      	ldr	r3, [pc, #192]	; (8006184 <main+0x4a8>)
 80060c2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80060c6:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim5, &configPWM, TIM_CHANNEL_1);
 80060c8:	2200      	movs	r2, #0
 80060ca:	492e      	ldr	r1, [pc, #184]	; (8006184 <main+0x4a8>)
 80060cc:	482c      	ldr	r0, [pc, #176]	; (8006180 <main+0x4a4>)
 80060ce:	f7fe fedd 	bl	8004e8c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 80060d2:	2100      	movs	r1, #0
 80060d4:	482a      	ldr	r0, [pc, #168]	; (8006180 <main+0x4a4>)
 80060d6:	f7fe fe13 	bl	8004d00 <HAL_TIM_PWM_Start>
		flagPWM = 2;
 80060da:	4b28      	ldr	r3, [pc, #160]	; (800617c <main+0x4a0>)
 80060dc:	2202      	movs	r2, #2
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	e039      	b.n	8006156 <main+0x47a>
	}
	else if(temp < 5 && flagPWM != 1){	//30%
 80060e2:	4b23      	ldr	r3, [pc, #140]	; (8006170 <main+0x494>)
 80060e4:	edd3 7a00 	vldr	s15, [r3]
 80060e8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80060ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f4:	d51c      	bpl.n	8006130 <main+0x454>
 80060f6:	4b21      	ldr	r3, [pc, #132]	; (800617c <main+0x4a0>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d018      	beq.n	8006130 <main+0x454>
		if(flagPWM != 0)
 80060fe:	4b1f      	ldr	r3, [pc, #124]	; (800617c <main+0x4a0>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <main+0x432>
			HAL_TIM_PWM_Stop(&htim5,TIM_CHANNEL_1);
 8006106:	2100      	movs	r1, #0
 8006108:	481d      	ldr	r0, [pc, #116]	; (8006180 <main+0x4a4>)
 800610a:	f7fe fe51 	bl	8004db0 <HAL_TIM_PWM_Stop>

		configPWM.Pulse = 600;
 800610e:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <main+0x4a8>)
 8006110:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006114:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim5, &configPWM, TIM_CHANNEL_1);
 8006116:	2200      	movs	r2, #0
 8006118:	491a      	ldr	r1, [pc, #104]	; (8006184 <main+0x4a8>)
 800611a:	4819      	ldr	r0, [pc, #100]	; (8006180 <main+0x4a4>)
 800611c:	f7fe feb6 	bl	8004e8c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 8006120:	2100      	movs	r1, #0
 8006122:	4817      	ldr	r0, [pc, #92]	; (8006180 <main+0x4a4>)
 8006124:	f7fe fdec 	bl	8004d00 <HAL_TIM_PWM_Start>
		flagPWM = 1;
 8006128:	4b14      	ldr	r3, [pc, #80]	; (800617c <main+0x4a0>)
 800612a:	2201      	movs	r2, #1
 800612c:	701a      	strb	r2, [r3, #0]
 800612e:	e012      	b.n	8006156 <main+0x47a>
	}
	else if(temp >= 5 && flagPWM != 0){	//Stop
 8006130:	4b0f      	ldr	r3, [pc, #60]	; (8006170 <main+0x494>)
 8006132:	edd3 7a00 	vldr	s15, [r3]
 8006136:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800613a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800613e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006142:	db08      	blt.n	8006156 <main+0x47a>
 8006144:	4b0d      	ldr	r3, [pc, #52]	; (800617c <main+0x4a0>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f43f ae01 	beq.w	8005d50 <main+0x74>
		HAL_TIM_PWM_Stop(&htim5,TIM_CHANNEL_1);
 800614e:	2100      	movs	r1, #0
 8006150:	480b      	ldr	r0, [pc, #44]	; (8006180 <main+0x4a4>)
 8006152:	f7fe fe2d 	bl	8004db0 <HAL_TIM_PWM_Stop>
  {
 8006156:	e5fb      	b.n	8005d50 <main+0x74>
 8006158:	200001a4 	.word	0x200001a4
 800615c:	200001a0 	.word	0x200001a0
 8006160:	200002a0 	.word	0x200002a0
 8006164:	44898000 	.word	0x44898000
 8006168:	20000348 	.word	0x20000348
 800616c:	2000019c 	.word	0x2000019c
 8006170:	20000008 	.word	0x20000008
 8006174:	200003ac 	.word	0x200003ac
 8006178:	200003c4 	.word	0x200003c4
 800617c:	20000134 	.word	0x20000134
 8006180:	200002a4 	.word	0x200002a4
 8006184:	20000118 	.word	0x20000118

08006188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b0b8      	sub	sp, #224	; 0xe0
 800618c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800618e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006192:	2244      	movs	r2, #68	; 0x44
 8006194:	2100      	movs	r1, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f001 f90b 	bl	80073b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800619c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	605a      	str	r2, [r3, #4]
 80061a6:	609a      	str	r2, [r3, #8]
 80061a8:	60da      	str	r2, [r3, #12]
 80061aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80061ac:	463b      	mov	r3, r7
 80061ae:	2288      	movs	r2, #136	; 0x88
 80061b0:	2100      	movs	r1, #0
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 f8fd 	bl	80073b2 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80061b8:	2302      	movs	r3, #2
 80061ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80061be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80061c6:	2310      	movs	r3, #16
 80061c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80061cc:	2302      	movs	r3, #2
 80061ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80061d2:	2302      	movs	r3, #2
 80061d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80061d8:	2301      	movs	r3, #1
 80061da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80061de:	230a      	movs	r3, #10
 80061e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80061e4:	2307      	movs	r3, #7
 80061e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80061ea:	2302      	movs	r3, #2
 80061ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80061f0:	2302      	movs	r3, #2
 80061f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80061f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fd fb28 	bl	8003850 <HAL_RCC_OscConfig>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006206:	f000 fb9d 	bl	8006944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800620a:	230f      	movs	r3, #15
 800620c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006210:	2303      	movs	r3, #3
 8006212:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006216:	2300      	movs	r3, #0
 8006218:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800621c:	2300      	movs	r3, #0
 800621e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006222:	2300      	movs	r3, #0
 8006224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006228:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800622c:	2104      	movs	r1, #4
 800622e:	4618      	mov	r0, r3
 8006230:	f7fd febe 	bl	8003fb0 <HAL_RCC_ClockConfig>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800623a:	f000 fb83 	bl	8006944 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 800623e:	f244 03c0 	movw	r3, #16576	; 0x40c0
 8006242:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006244:	2300      	movs	r3, #0
 8006246:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006248:	2300      	movs	r3, #0
 800624a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800624c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006250:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8006252:	2302      	movs	r3, #2
 8006254:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8006256:	2301      	movs	r3, #1
 8006258:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800625a:	2308      	movs	r3, #8
 800625c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800625e:	2307      	movs	r3, #7
 8006260:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8006262:	2302      	movs	r3, #2
 8006264:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8006266:	2302      	movs	r3, #2
 8006268:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800626a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800626e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006270:	463b      	mov	r3, r7
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe f868 	bl	8004348 <HAL_RCCEx_PeriphCLKConfig>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800627e:	f000 fb61 	bl	8006944 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006282:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006286:	f7fd fa8d 	bl	80037a4 <HAL_PWREx_ControlVoltageScaling>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8006290:	f000 fb58 	bl	8006944 <Error_Handler>
  }
}
 8006294:	bf00      	nop
 8006296:	37e0      	adds	r7, #224	; 0xe0
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08a      	sub	sp, #40	; 0x28
 80062a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80062a2:	f107 031c 	add.w	r3, r7, #28
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	605a      	str	r2, [r3, #4]
 80062ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80062ae:	1d3b      	adds	r3, r7, #4
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	605a      	str	r2, [r3, #4]
 80062b6:	609a      	str	r2, [r3, #8]
 80062b8:	60da      	str	r2, [r3, #12]
 80062ba:	611a      	str	r2, [r3, #16]
 80062bc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80062be:	4b2f      	ldr	r3, [pc, #188]	; (800637c <MX_ADC1_Init+0xe0>)
 80062c0:	4a2f      	ldr	r2, [pc, #188]	; (8006380 <MX_ADC1_Init+0xe4>)
 80062c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80062c4:	4b2d      	ldr	r3, [pc, #180]	; (800637c <MX_ADC1_Init+0xe0>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80062ca:	4b2c      	ldr	r3, [pc, #176]	; (800637c <MX_ADC1_Init+0xe0>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80062d0:	4b2a      	ldr	r3, [pc, #168]	; (800637c <MX_ADC1_Init+0xe0>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80062d6:	4b29      	ldr	r3, [pc, #164]	; (800637c <MX_ADC1_Init+0xe0>)
 80062d8:	2200      	movs	r2, #0
 80062da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80062dc:	4b27      	ldr	r3, [pc, #156]	; (800637c <MX_ADC1_Init+0xe0>)
 80062de:	2204      	movs	r2, #4
 80062e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80062e2:	4b26      	ldr	r3, [pc, #152]	; (800637c <MX_ADC1_Init+0xe0>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80062e8:	4b24      	ldr	r3, [pc, #144]	; (800637c <MX_ADC1_Init+0xe0>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80062ee:	4b23      	ldr	r3, [pc, #140]	; (800637c <MX_ADC1_Init+0xe0>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80062f4:	4b21      	ldr	r3, [pc, #132]	; (800637c <MX_ADC1_Init+0xe0>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80062fc:	4b1f      	ldr	r3, [pc, #124]	; (800637c <MX_ADC1_Init+0xe0>)
 80062fe:	2200      	movs	r2, #0
 8006300:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006302:	4b1e      	ldr	r3, [pc, #120]	; (800637c <MX_ADC1_Init+0xe0>)
 8006304:	2200      	movs	r2, #0
 8006306:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006308:	4b1c      	ldr	r3, [pc, #112]	; (800637c <MX_ADC1_Init+0xe0>)
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006310:	4b1a      	ldr	r3, [pc, #104]	; (800637c <MX_ADC1_Init+0xe0>)
 8006312:	2200      	movs	r2, #0
 8006314:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8006316:	4b19      	ldr	r3, [pc, #100]	; (800637c <MX_ADC1_Init+0xe0>)
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800631e:	4817      	ldr	r0, [pc, #92]	; (800637c <MX_ADC1_Init+0xe0>)
 8006320:	f7fa fec4 	bl	80010ac <HAL_ADC_Init>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800632a:	f000 fb0b 	bl	8006944 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006332:	f107 031c 	add.w	r3, r7, #28
 8006336:	4619      	mov	r1, r3
 8006338:	4810      	ldr	r0, [pc, #64]	; (800637c <MX_ADC1_Init+0xe0>)
 800633a:	f7fb fec7 	bl	80020cc <HAL_ADCEx_MultiModeConfigChannel>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8006344:	f000 fafe 	bl	8006944 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006348:	4b0e      	ldr	r3, [pc, #56]	; (8006384 <MX_ADC1_Init+0xe8>)
 800634a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800634c:	2306      	movs	r3, #6
 800634e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006350:	2300      	movs	r3, #0
 8006352:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006354:	237f      	movs	r3, #127	; 0x7f
 8006356:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006358:	2304      	movs	r3, #4
 800635a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006360:	1d3b      	adds	r3, r7, #4
 8006362:	4619      	mov	r1, r3
 8006364:	4805      	ldr	r0, [pc, #20]	; (800637c <MX_ADC1_Init+0xe0>)
 8006366:	f7fb f9c1 	bl	80016ec <HAL_ADC_ConfigChannel>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8006370:	f000 fae8 	bl	8006944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006374:	bf00      	nop
 8006376:	3728      	adds	r7, #40	; 0x28
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	200002e4 	.word	0x200002e4
 8006380:	50040000 	.word	0x50040000
 8006384:	36902000 	.word	0x36902000

08006388 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800638e:	463b      	mov	r3, r7
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	605a      	str	r2, [r3, #4]
 8006396:	609a      	str	r2, [r3, #8]
 8006398:	60da      	str	r2, [r3, #12]
 800639a:	611a      	str	r2, [r3, #16]
 800639c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800639e:	4b29      	ldr	r3, [pc, #164]	; (8006444 <MX_ADC2_Init+0xbc>)
 80063a0:	4a29      	ldr	r2, [pc, #164]	; (8006448 <MX_ADC2_Init+0xc0>)
 80063a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80063a4:	4b27      	ldr	r3, [pc, #156]	; (8006444 <MX_ADC2_Init+0xbc>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80063aa:	4b26      	ldr	r3, [pc, #152]	; (8006444 <MX_ADC2_Init+0xbc>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80063b0:	4b24      	ldr	r3, [pc, #144]	; (8006444 <MX_ADC2_Init+0xbc>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80063b6:	4b23      	ldr	r3, [pc, #140]	; (8006444 <MX_ADC2_Init+0xbc>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80063bc:	4b21      	ldr	r3, [pc, #132]	; (8006444 <MX_ADC2_Init+0xbc>)
 80063be:	2204      	movs	r2, #4
 80063c0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80063c2:	4b20      	ldr	r3, [pc, #128]	; (8006444 <MX_ADC2_Init+0xbc>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80063c8:	4b1e      	ldr	r3, [pc, #120]	; (8006444 <MX_ADC2_Init+0xbc>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80063ce:	4b1d      	ldr	r3, [pc, #116]	; (8006444 <MX_ADC2_Init+0xbc>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80063d4:	4b1b      	ldr	r3, [pc, #108]	; (8006444 <MX_ADC2_Init+0xbc>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80063dc:	4b19      	ldr	r3, [pc, #100]	; (8006444 <MX_ADC2_Init+0xbc>)
 80063de:	2200      	movs	r2, #0
 80063e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80063e2:	4b18      	ldr	r3, [pc, #96]	; (8006444 <MX_ADC2_Init+0xbc>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80063e8:	4b16      	ldr	r3, [pc, #88]	; (8006444 <MX_ADC2_Init+0xbc>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80063f0:	4b14      	ldr	r3, [pc, #80]	; (8006444 <MX_ADC2_Init+0xbc>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80063f6:	4b13      	ldr	r3, [pc, #76]	; (8006444 <MX_ADC2_Init+0xbc>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80063fe:	4811      	ldr	r0, [pc, #68]	; (8006444 <MX_ADC2_Init+0xbc>)
 8006400:	f7fa fe54 	bl	80010ac <HAL_ADC_Init>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800640a:	f000 fa9b 	bl	8006944 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800640e:	4b0f      	ldr	r3, [pc, #60]	; (800644c <MX_ADC2_Init+0xc4>)
 8006410:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006412:	2306      	movs	r3, #6
 8006414:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006416:	2300      	movs	r3, #0
 8006418:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800641a:	237f      	movs	r3, #127	; 0x7f
 800641c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800641e:	2304      	movs	r3, #4
 8006420:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8006422:	2300      	movs	r3, #0
 8006424:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006426:	463b      	mov	r3, r7
 8006428:	4619      	mov	r1, r3
 800642a:	4806      	ldr	r0, [pc, #24]	; (8006444 <MX_ADC2_Init+0xbc>)
 800642c:	f7fb f95e 	bl	80016ec <HAL_ADC_ConfigChannel>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8006436:	f000 fa85 	bl	8006944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800643a:	bf00      	nop
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	200001a4 	.word	0x200001a4
 8006448:	50040100 	.word	0x50040100
 800644c:	19200040 	.word	0x19200040

08006450 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006456:	463b      	mov	r3, r7
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	605a      	str	r2, [r3, #4]
 800645e:	609a      	str	r2, [r3, #8]
 8006460:	60da      	str	r2, [r3, #12]
 8006462:	611a      	str	r2, [r3, #16]
 8006464:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8006466:	4b29      	ldr	r3, [pc, #164]	; (800650c <MX_ADC3_Init+0xbc>)
 8006468:	4a29      	ldr	r2, [pc, #164]	; (8006510 <MX_ADC3_Init+0xc0>)
 800646a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800646c:	4b27      	ldr	r3, [pc, #156]	; (800650c <MX_ADC3_Init+0xbc>)
 800646e:	2200      	movs	r2, #0
 8006470:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8006472:	4b26      	ldr	r3, [pc, #152]	; (800650c <MX_ADC3_Init+0xbc>)
 8006474:	2200      	movs	r2, #0
 8006476:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006478:	4b24      	ldr	r3, [pc, #144]	; (800650c <MX_ADC3_Init+0xbc>)
 800647a:	2200      	movs	r2, #0
 800647c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800647e:	4b23      	ldr	r3, [pc, #140]	; (800650c <MX_ADC3_Init+0xbc>)
 8006480:	2200      	movs	r2, #0
 8006482:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006484:	4b21      	ldr	r3, [pc, #132]	; (800650c <MX_ADC3_Init+0xbc>)
 8006486:	2204      	movs	r2, #4
 8006488:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800648a:	4b20      	ldr	r3, [pc, #128]	; (800650c <MX_ADC3_Init+0xbc>)
 800648c:	2200      	movs	r2, #0
 800648e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8006490:	4b1e      	ldr	r3, [pc, #120]	; (800650c <MX_ADC3_Init+0xbc>)
 8006492:	2200      	movs	r2, #0
 8006494:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8006496:	4b1d      	ldr	r3, [pc, #116]	; (800650c <MX_ADC3_Init+0xbc>)
 8006498:	2201      	movs	r2, #1
 800649a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800649c:	4b1b      	ldr	r3, [pc, #108]	; (800650c <MX_ADC3_Init+0xbc>)
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80064a4:	4b19      	ldr	r3, [pc, #100]	; (800650c <MX_ADC3_Init+0xbc>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80064aa:	4b18      	ldr	r3, [pc, #96]	; (800650c <MX_ADC3_Init+0xbc>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80064b0:	4b16      	ldr	r3, [pc, #88]	; (800650c <MX_ADC3_Init+0xbc>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80064b8:	4b14      	ldr	r3, [pc, #80]	; (800650c <MX_ADC3_Init+0xbc>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80064be:	4b13      	ldr	r3, [pc, #76]	; (800650c <MX_ADC3_Init+0xbc>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80064c6:	4811      	ldr	r0, [pc, #68]	; (800650c <MX_ADC3_Init+0xbc>)
 80064c8:	f7fa fdf0 	bl	80010ac <HAL_ADC_Init>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80064d2:	f000 fa37 	bl	8006944 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80064d6:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <MX_ADC3_Init+0xc4>)
 80064d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80064da:	2306      	movs	r3, #6
 80064dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80064de:	2300      	movs	r3, #0
 80064e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80064e2:	237f      	movs	r3, #127	; 0x7f
 80064e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80064e6:	2304      	movs	r3, #4
 80064e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80064ee:	463b      	mov	r3, r7
 80064f0:	4619      	mov	r1, r3
 80064f2:	4806      	ldr	r0, [pc, #24]	; (800650c <MX_ADC3_Init+0xbc>)
 80064f4:	f7fb f8fa 	bl	80016ec <HAL_ADC_ConfigChannel>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80064fe:	f000 fa21 	bl	8006944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8006502:	bf00      	nop
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000348 	.word	0x20000348
 8006510:	50040200 	.word	0x50040200
 8006514:	0c900008 	.word	0x0c900008

08006518 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800651c:	4b17      	ldr	r3, [pc, #92]	; (800657c <MX_CAN1_Init+0x64>)
 800651e:	4a18      	ldr	r2, [pc, #96]	; (8006580 <MX_CAN1_Init+0x68>)
 8006520:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8006522:	4b16      	ldr	r3, [pc, #88]	; (800657c <MX_CAN1_Init+0x64>)
 8006524:	2210      	movs	r2, #16
 8006526:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006528:	4b14      	ldr	r3, [pc, #80]	; (800657c <MX_CAN1_Init+0x64>)
 800652a:	2200      	movs	r2, #0
 800652c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800652e:	4b13      	ldr	r3, [pc, #76]	; (800657c <MX_CAN1_Init+0x64>)
 8006530:	2200      	movs	r2, #0
 8006532:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8006534:	4b11      	ldr	r3, [pc, #68]	; (800657c <MX_CAN1_Init+0x64>)
 8006536:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800653a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800653c:	4b0f      	ldr	r3, [pc, #60]	; (800657c <MX_CAN1_Init+0x64>)
 800653e:	2200      	movs	r2, #0
 8006540:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006542:	4b0e      	ldr	r3, [pc, #56]	; (800657c <MX_CAN1_Init+0x64>)
 8006544:	2200      	movs	r2, #0
 8006546:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006548:	4b0c      	ldr	r3, [pc, #48]	; (800657c <MX_CAN1_Init+0x64>)
 800654a:	2200      	movs	r2, #0
 800654c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800654e:	4b0b      	ldr	r3, [pc, #44]	; (800657c <MX_CAN1_Init+0x64>)
 8006550:	2200      	movs	r2, #0
 8006552:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006554:	4b09      	ldr	r3, [pc, #36]	; (800657c <MX_CAN1_Init+0x64>)
 8006556:	2200      	movs	r2, #0
 8006558:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800655a:	4b08      	ldr	r3, [pc, #32]	; (800657c <MX_CAN1_Init+0x64>)
 800655c:	2200      	movs	r2, #0
 800655e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006560:	4b06      	ldr	r3, [pc, #24]	; (800657c <MX_CAN1_Init+0x64>)
 8006562:	2200      	movs	r2, #0
 8006564:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006566:	4805      	ldr	r0, [pc, #20]	; (800657c <MX_CAN1_Init+0x64>)
 8006568:	f7fb fe5c 	bl	8002224 <HAL_CAN_Init>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8006572:	f000 f9e7 	bl	8006944 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8006576:	bf00      	nop
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	200003c4 	.word	0x200003c4
 8006580:	40006400 	.word	0x40006400

08006584 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006588:	4b1b      	ldr	r3, [pc, #108]	; (80065f8 <MX_I2C1_Init+0x74>)
 800658a:	4a1c      	ldr	r2, [pc, #112]	; (80065fc <MX_I2C1_Init+0x78>)
 800658c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800658e:	4b1a      	ldr	r3, [pc, #104]	; (80065f8 <MX_I2C1_Init+0x74>)
 8006590:	4a1b      	ldr	r2, [pc, #108]	; (8006600 <MX_I2C1_Init+0x7c>)
 8006592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006594:	4b18      	ldr	r3, [pc, #96]	; (80065f8 <MX_I2C1_Init+0x74>)
 8006596:	2200      	movs	r2, #0
 8006598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800659a:	4b17      	ldr	r3, [pc, #92]	; (80065f8 <MX_I2C1_Init+0x74>)
 800659c:	2201      	movs	r2, #1
 800659e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80065a0:	4b15      	ldr	r3, [pc, #84]	; (80065f8 <MX_I2C1_Init+0x74>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80065a6:	4b14      	ldr	r3, [pc, #80]	; (80065f8 <MX_I2C1_Init+0x74>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80065ac:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <MX_I2C1_Init+0x74>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80065b2:	4b11      	ldr	r3, [pc, #68]	; (80065f8 <MX_I2C1_Init+0x74>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80065b8:	4b0f      	ldr	r3, [pc, #60]	; (80065f8 <MX_I2C1_Init+0x74>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80065be:	480e      	ldr	r0, [pc, #56]	; (80065f8 <MX_I2C1_Init+0x74>)
 80065c0:	f7fc fbf0 	bl	8002da4 <HAL_I2C_Init>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80065ca:	f000 f9bb 	bl	8006944 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80065ce:	2100      	movs	r1, #0
 80065d0:	4809      	ldr	r0, [pc, #36]	; (80065f8 <MX_I2C1_Init+0x74>)
 80065d2:	f7fd f841 	bl	8003658 <HAL_I2CEx_ConfigAnalogFilter>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80065dc:	f000 f9b2 	bl	8006944 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80065e0:	2100      	movs	r1, #0
 80065e2:	4805      	ldr	r0, [pc, #20]	; (80065f8 <MX_I2C1_Init+0x74>)
 80065e4:	f7fd f883 	bl	80036ee <HAL_I2CEx_ConfigDigitalFilter>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80065ee:	f000 f9a9 	bl	8006944 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80065f2:	bf00      	nop
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000208 	.word	0x20000208
 80065fc:	40005400 	.word	0x40005400
 8006600:	10909cec 	.word	0x10909cec

08006604 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006608:	4b1b      	ldr	r3, [pc, #108]	; (8006678 <MX_I2C2_Init+0x74>)
 800660a:	4a1c      	ldr	r2, [pc, #112]	; (800667c <MX_I2C2_Init+0x78>)
 800660c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800660e:	4b1a      	ldr	r3, [pc, #104]	; (8006678 <MX_I2C2_Init+0x74>)
 8006610:	4a1b      	ldr	r2, [pc, #108]	; (8006680 <MX_I2C2_Init+0x7c>)
 8006612:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006614:	4b18      	ldr	r3, [pc, #96]	; (8006678 <MX_I2C2_Init+0x74>)
 8006616:	2200      	movs	r2, #0
 8006618:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800661a:	4b17      	ldr	r3, [pc, #92]	; (8006678 <MX_I2C2_Init+0x74>)
 800661c:	2201      	movs	r2, #1
 800661e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006620:	4b15      	ldr	r3, [pc, #84]	; (8006678 <MX_I2C2_Init+0x74>)
 8006622:	2200      	movs	r2, #0
 8006624:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006626:	4b14      	ldr	r3, [pc, #80]	; (8006678 <MX_I2C2_Init+0x74>)
 8006628:	2200      	movs	r2, #0
 800662a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800662c:	4b12      	ldr	r3, [pc, #72]	; (8006678 <MX_I2C2_Init+0x74>)
 800662e:	2200      	movs	r2, #0
 8006630:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006632:	4b11      	ldr	r3, [pc, #68]	; (8006678 <MX_I2C2_Init+0x74>)
 8006634:	2200      	movs	r2, #0
 8006636:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006638:	4b0f      	ldr	r3, [pc, #60]	; (8006678 <MX_I2C2_Init+0x74>)
 800663a:	2200      	movs	r2, #0
 800663c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800663e:	480e      	ldr	r0, [pc, #56]	; (8006678 <MX_I2C2_Init+0x74>)
 8006640:	f7fc fbb0 	bl	8002da4 <HAL_I2C_Init>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800664a:	f000 f97b 	bl	8006944 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800664e:	2100      	movs	r1, #0
 8006650:	4809      	ldr	r0, [pc, #36]	; (8006678 <MX_I2C2_Init+0x74>)
 8006652:	f7fd f801 	bl	8003658 <HAL_I2CEx_ConfigAnalogFilter>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800665c:	f000 f972 	bl	8006944 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006660:	2100      	movs	r1, #0
 8006662:	4805      	ldr	r0, [pc, #20]	; (8006678 <MX_I2C2_Init+0x74>)
 8006664:	f7fd f843 	bl	80036ee <HAL_I2CEx_ConfigDigitalFilter>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800666e:	f000 f969 	bl	8006944 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006672:	bf00      	nop
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000254 	.word	0x20000254
 800667c:	40005800 	.word	0x40005800
 8006680:	10909cec 	.word	0x10909cec

08006684 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08a      	sub	sp, #40	; 0x28
 8006688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800668a:	f107 031c 	add.w	r3, r7, #28
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	605a      	str	r2, [r3, #4]
 8006694:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006696:	463b      	mov	r3, r7
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	605a      	str	r2, [r3, #4]
 800669e:	609a      	str	r2, [r3, #8]
 80066a0:	60da      	str	r2, [r3, #12]
 80066a2:	611a      	str	r2, [r3, #16]
 80066a4:	615a      	str	r2, [r3, #20]
 80066a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80066a8:	4b22      	ldr	r3, [pc, #136]	; (8006734 <MX_TIM5_Init+0xb0>)
 80066aa:	4a23      	ldr	r2, [pc, #140]	; (8006738 <MX_TIM5_Init+0xb4>)
 80066ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 40000;
 80066ae:	4b21      	ldr	r3, [pc, #132]	; (8006734 <MX_TIM5_Init+0xb0>)
 80066b0:	f649 4240 	movw	r2, #40000	; 0x9c40
 80066b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066b6:	4b1f      	ldr	r3, [pc, #124]	; (8006734 <MX_TIM5_Init+0xb0>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000;
 80066bc:	4b1d      	ldr	r3, [pc, #116]	; (8006734 <MX_TIM5_Init+0xb0>)
 80066be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80066c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066c4:	4b1b      	ldr	r3, [pc, #108]	; (8006734 <MX_TIM5_Init+0xb0>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066ca:	4b1a      	ldr	r3, [pc, #104]	; (8006734 <MX_TIM5_Init+0xb0>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80066d0:	4818      	ldr	r0, [pc, #96]	; (8006734 <MX_TIM5_Init+0xb0>)
 80066d2:	f7fe fae9 	bl	8004ca8 <HAL_TIM_PWM_Init>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 80066dc:	f000 f932 	bl	8006944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066e0:	2300      	movs	r3, #0
 80066e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066e4:	2300      	movs	r3, #0
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80066e8:	f107 031c 	add.w	r3, r7, #28
 80066ec:	4619      	mov	r1, r3
 80066ee:	4811      	ldr	r0, [pc, #68]	; (8006734 <MX_TIM5_Init+0xb0>)
 80066f0:	f7ff f87a 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 80066fa:	f000 f923 	bl	8006944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066fe:	2360      	movs	r3, #96	; 0x60
 8006700:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006706:	2300      	movs	r3, #0
 8006708:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800670a:	2300      	movs	r3, #0
 800670c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800670e:	463b      	mov	r3, r7
 8006710:	2200      	movs	r2, #0
 8006712:	4619      	mov	r1, r3
 8006714:	4807      	ldr	r0, [pc, #28]	; (8006734 <MX_TIM5_Init+0xb0>)
 8006716:	f7fe fbb9 	bl	8004e8c <HAL_TIM_PWM_ConfigChannel>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8006720:	f000 f910 	bl	8006944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8006724:	4803      	ldr	r0, [pc, #12]	; (8006734 <MX_TIM5_Init+0xb0>)
 8006726:	f000 fac7 	bl	8006cb8 <HAL_TIM_MspPostInit>

}
 800672a:	bf00      	nop
 800672c:	3728      	adds	r7, #40	; 0x28
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	200002a4 	.word	0x200002a4
 8006738:	40000c00 	.word	0x40000c00

0800673c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006742:	f107 030c 	add.w	r3, r7, #12
 8006746:	2200      	movs	r2, #0
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	605a      	str	r2, [r3, #4]
 800674c:	609a      	str	r2, [r3, #8]
 800674e:	60da      	str	r2, [r3, #12]
 8006750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006752:	4b1d      	ldr	r3, [pc, #116]	; (80067c8 <MX_GPIO_Init+0x8c>)
 8006754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006756:	4a1c      	ldr	r2, [pc, #112]	; (80067c8 <MX_GPIO_Init+0x8c>)
 8006758:	f043 0304 	orr.w	r3, r3, #4
 800675c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800675e:	4b1a      	ldr	r3, [pc, #104]	; (80067c8 <MX_GPIO_Init+0x8c>)
 8006760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	60bb      	str	r3, [r7, #8]
 8006768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800676a:	4b17      	ldr	r3, [pc, #92]	; (80067c8 <MX_GPIO_Init+0x8c>)
 800676c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676e:	4a16      	ldr	r2, [pc, #88]	; (80067c8 <MX_GPIO_Init+0x8c>)
 8006770:	f043 0301 	orr.w	r3, r3, #1
 8006774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006776:	4b14      	ldr	r3, [pc, #80]	; (80067c8 <MX_GPIO_Init+0x8c>)
 8006778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	607b      	str	r3, [r7, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006782:	4b11      	ldr	r3, [pc, #68]	; (80067c8 <MX_GPIO_Init+0x8c>)
 8006784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006786:	4a10      	ldr	r2, [pc, #64]	; (80067c8 <MX_GPIO_Init+0x8c>)
 8006788:	f043 0302 	orr.w	r3, r3, #2
 800678c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800678e:	4b0e      	ldr	r3, [pc, #56]	; (80067c8 <MX_GPIO_Init+0x8c>)
 8006790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	603b      	str	r3, [r7, #0]
 8006798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LBK_Pin, GPIO_PIN_RESET);
 800679a:	2200      	movs	r2, #0
 800679c:	21c0      	movs	r1, #192	; 0xc0
 800679e:	480b      	ldr	r0, [pc, #44]	; (80067cc <MX_GPIO_Init+0x90>)
 80067a0:	f7fc fae8 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LBK_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LBK_Pin;
 80067a4:	23c0      	movs	r3, #192	; 0xc0
 80067a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067a8:	2301      	movs	r3, #1
 80067aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ac:	2300      	movs	r3, #0
 80067ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067b0:	2300      	movs	r3, #0
 80067b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067b4:	f107 030c 	add.w	r3, r7, #12
 80067b8:	4619      	mov	r1, r3
 80067ba:	4804      	ldr	r0, [pc, #16]	; (80067cc <MX_GPIO_Init+0x90>)
 80067bc:	f7fc f932 	bl	8002a24 <HAL_GPIO_Init>

}
 80067c0:	bf00      	nop
 80067c2:	3720      	adds	r7, #32
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	40021000 	.word	0x40021000
 80067cc:	48000800 	.word	0x48000800

080067d0 <tempADC>:

/* USER CODE BEGIN 4 */
float tempADC(ADC_HandleTypeDef* phadc, float R0){
 80067d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80067d4:	b08a      	sub	sp, #40	; 0x28
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	ed87 0a00 	vstr	s0, [r7]
	float V;
	float R;
	float T;

	//Converting Constants
	const float B = 3900.0;
 80067de:	4b54      	ldr	r3, [pc, #336]	; (8006930 <tempADC+0x160>)
 80067e0:	623b      	str	r3, [r7, #32]
	const float T0 = 298.15;
 80067e2:	4b54      	ldr	r3, [pc, #336]	; (8006934 <tempADC+0x164>)
 80067e4:	61fb      	str	r3, [r7, #28]
	const float R_div = 100.0;
 80067e6:	4b54      	ldr	r3, [pc, #336]	; (8006938 <tempADC+0x168>)
 80067e8:	61bb      	str	r3, [r7, #24]
	const float V_ref = 3.3;
 80067ea:	4b54      	ldr	r3, [pc, #336]	; (800693c <tempADC+0x16c>)
 80067ec:	617b      	str	r3, [r7, #20]

	//Read adc voltage
	HAL_ADC_Start(phadc);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7fa fdb0 	bl	8001354 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(phadc, 100) == HAL_OK){
 80067f4:	2164      	movs	r1, #100	; 0x64
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fa fe9a 	bl	8001530 <HAL_ADC_PollForConversion>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d11f      	bne.n	8006842 <tempADC+0x72>
		adc_val = HAL_ADC_GetValue(phadc);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fa ff64 	bl	80016d0 <HAL_ADC_GetValue>
 8006808:	6138      	str	r0, [r7, #16]
		V = (float)((float)adc_val*3.3)/4095.0;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	ee07 3a90 	vmov	s15, r3
 8006810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006814:	ee17 0a90 	vmov	r0, s15
 8006818:	f7f9 fe3a 	bl	8000490 <__aeabi_f2d>
 800681c:	a340      	add	r3, pc, #256	; (adr r3, 8006920 <tempADC+0x150>)
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	f7f9 fe8d 	bl	8000540 <__aeabi_dmul>
 8006826:	4603      	mov	r3, r0
 8006828:	460c      	mov	r4, r1
 800682a:	4618      	mov	r0, r3
 800682c:	4621      	mov	r1, r4
 800682e:	f7fa f937 	bl	8000aa0 <__aeabi_d2f>
 8006832:	ee06 0a90 	vmov	s13, r0
 8006836:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8006940 <tempADC+0x170>
 800683a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800683e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}
	HAL_ADC_Stop(phadc);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7fa fe40 	bl	80014c8 <HAL_ADC_Stop>

	//Convert Voltage into Resistance
	R = (V * R_div)/(V_ref - V);
 8006848:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800684c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006850:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006854:	ed97 7a05 	vldr	s14, [r7, #20]
 8006858:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800685c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006864:	edc7 7a03 	vstr	s15, [r7, #12]

	//Convert Resistance into Temperature
	T = (T0 * B)/(T0*log(R/R0) + B);
 8006868:	ed97 7a07 	vldr	s14, [r7, #28]
 800686c:	edd7 7a08 	vldr	s15, [r7, #32]
 8006870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006874:	ee17 0a90 	vmov	r0, s15
 8006878:	f7f9 fe0a 	bl	8000490 <__aeabi_f2d>
 800687c:	4604      	mov	r4, r0
 800687e:	460d      	mov	r5, r1
 8006880:	69f8      	ldr	r0, [r7, #28]
 8006882:	f7f9 fe05 	bl	8000490 <__aeabi_f2d>
 8006886:	4680      	mov	r8, r0
 8006888:	4689      	mov	r9, r1
 800688a:	ed97 7a03 	vldr	s14, [r7, #12]
 800688e:	edd7 7a00 	vldr	s15, [r7]
 8006892:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006896:	ee16 0a90 	vmov	r0, s13
 800689a:	f7f9 fdf9 	bl	8000490 <__aeabi_f2d>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	ec43 2b10 	vmov	d0, r2, r3
 80068a6:	f000 fb11 	bl	8006ecc <log>
 80068aa:	ec53 2b10 	vmov	r2, r3, d0
 80068ae:	4640      	mov	r0, r8
 80068b0:	4649      	mov	r1, r9
 80068b2:	f7f9 fe45 	bl	8000540 <__aeabi_dmul>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4690      	mov	r8, r2
 80068bc:	4699      	mov	r9, r3
 80068be:	6a38      	ldr	r0, [r7, #32]
 80068c0:	f7f9 fde6 	bl	8000490 <__aeabi_f2d>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4640      	mov	r0, r8
 80068ca:	4649      	mov	r1, r9
 80068cc:	f7f9 fc82 	bl	80001d4 <__adddf3>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	4620      	mov	r0, r4
 80068d6:	4629      	mov	r1, r5
 80068d8:	f7f9 ff5c 	bl	8000794 <__aeabi_ddiv>
 80068dc:	4603      	mov	r3, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	4618      	mov	r0, r3
 80068e2:	4621      	mov	r1, r4
 80068e4:	f7fa f8dc 	bl	8000aa0 <__aeabi_d2f>
 80068e8:	4603      	mov	r3, r0
 80068ea:	60bb      	str	r3, [r7, #8]

	//Kelvin to Celsius
	T =  T - 273.15;
 80068ec:	68b8      	ldr	r0, [r7, #8]
 80068ee:	f7f9 fdcf 	bl	8000490 <__aeabi_f2d>
 80068f2:	a30d      	add	r3, pc, #52	; (adr r3, 8006928 <tempADC+0x158>)
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f7f9 fc6a 	bl	80001d0 <__aeabi_dsub>
 80068fc:	4603      	mov	r3, r0
 80068fe:	460c      	mov	r4, r1
 8006900:	4618      	mov	r0, r3
 8006902:	4621      	mov	r1, r4
 8006904:	f7fa f8cc 	bl	8000aa0 <__aeabi_d2f>
 8006908:	4603      	mov	r3, r0
 800690a:	60bb      	str	r3, [r7, #8]

	return T;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	ee07 3a90 	vmov	s15, r3
}
 8006912:	eeb0 0a67 	vmov.f32	s0, s15
 8006916:	3728      	adds	r7, #40	; 0x28
 8006918:	46bd      	mov	sp, r7
 800691a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800691e:	bf00      	nop
 8006920:	66666666 	.word	0x66666666
 8006924:	400a6666 	.word	0x400a6666
 8006928:	66666666 	.word	0x66666666
 800692c:	40711266 	.word	0x40711266
 8006930:	4573c000 	.word	0x4573c000
 8006934:	43951333 	.word	0x43951333
 8006938:	42c80000 	.word	0x42c80000
 800693c:	40533333 	.word	0x40533333
 8006940:	457ff000 	.word	0x457ff000

08006944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006944:	b480      	push	{r7}
 8006946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006948:	bf00      	nop
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
	...

08006954 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800695a:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <HAL_MspInit+0x44>)
 800695c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800695e:	4a0e      	ldr	r2, [pc, #56]	; (8006998 <HAL_MspInit+0x44>)
 8006960:	f043 0301 	orr.w	r3, r3, #1
 8006964:	6613      	str	r3, [r2, #96]	; 0x60
 8006966:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <HAL_MspInit+0x44>)
 8006968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	607b      	str	r3, [r7, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006972:	4b09      	ldr	r3, [pc, #36]	; (8006998 <HAL_MspInit+0x44>)
 8006974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006976:	4a08      	ldr	r2, [pc, #32]	; (8006998 <HAL_MspInit+0x44>)
 8006978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800697c:	6593      	str	r3, [r2, #88]	; 0x58
 800697e:	4b06      	ldr	r3, [pc, #24]	; (8006998 <HAL_MspInit+0x44>)
 8006980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006986:	603b      	str	r3, [r7, #0]
 8006988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40021000 	.word	0x40021000

0800699c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08e      	sub	sp, #56	; 0x38
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	605a      	str	r2, [r3, #4]
 80069ae:	609a      	str	r2, [r3, #8]
 80069b0:	60da      	str	r2, [r3, #12]
 80069b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a4d      	ldr	r2, [pc, #308]	; (8006af0 <HAL_ADC_MspInit+0x154>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d12d      	bne.n	8006a1a <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80069be:	4b4d      	ldr	r3, [pc, #308]	; (8006af4 <HAL_ADC_MspInit+0x158>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3301      	adds	r3, #1
 80069c4:	4a4b      	ldr	r2, [pc, #300]	; (8006af4 <HAL_ADC_MspInit+0x158>)
 80069c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80069c8:	4b4a      	ldr	r3, [pc, #296]	; (8006af4 <HAL_ADC_MspInit+0x158>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d10b      	bne.n	80069e8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80069d0:	4b49      	ldr	r3, [pc, #292]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 80069d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d4:	4a48      	ldr	r2, [pc, #288]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 80069d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80069da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069dc:	4b46      	ldr	r3, [pc, #280]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 80069de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069e4:	623b      	str	r3, [r7, #32]
 80069e6:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069e8:	4b43      	ldr	r3, [pc, #268]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 80069ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ec:	4a42      	ldr	r2, [pc, #264]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 80069ee:	f043 0304 	orr.w	r3, r3, #4
 80069f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069f4:	4b40      	ldr	r3, [pc, #256]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 80069f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	61fb      	str	r3, [r7, #28]
 80069fe:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = THERM3_Pin;
 8006a00:	2310      	movs	r3, #16
 8006a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006a04:	230b      	movs	r3, #11
 8006a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(THERM3_GPIO_Port, &GPIO_InitStruct);
 8006a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a10:	4619      	mov	r1, r3
 8006a12:	483a      	ldr	r0, [pc, #232]	; (8006afc <HAL_ADC_MspInit+0x160>)
 8006a14:	f7fc f806 	bl	8002a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8006a18:	e065      	b.n	8006ae6 <HAL_ADC_MspInit+0x14a>
  else if(hadc->Instance==ADC2)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a38      	ldr	r2, [pc, #224]	; (8006b00 <HAL_ADC_MspInit+0x164>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d12e      	bne.n	8006a82 <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC_CLK_ENABLED++;
 8006a24:	4b33      	ldr	r3, [pc, #204]	; (8006af4 <HAL_ADC_MspInit+0x158>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	4a32      	ldr	r2, [pc, #200]	; (8006af4 <HAL_ADC_MspInit+0x158>)
 8006a2c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8006a2e:	4b31      	ldr	r3, [pc, #196]	; (8006af4 <HAL_ADC_MspInit+0x158>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d10b      	bne.n	8006a4e <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8006a36:	4b30      	ldr	r3, [pc, #192]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 8006a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a3a:	4a2f      	ldr	r2, [pc, #188]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 8006a3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a42:	4b2d      	ldr	r3, [pc, #180]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 8006a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a4a:	61bb      	str	r3, [r7, #24]
 8006a4c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a4e:	4b2a      	ldr	r3, [pc, #168]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 8006a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a52:	4a29      	ldr	r2, [pc, #164]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 8006a54:	f043 0301 	orr.w	r3, r3, #1
 8006a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a5a:	4b27      	ldr	r3, [pc, #156]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 8006a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = THERM2_Pin;
 8006a66:	2302      	movs	r3, #2
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006a6a:	230b      	movs	r3, #11
 8006a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(THERM2_GPIO_Port, &GPIO_InitStruct);
 8006a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a76:	4619      	mov	r1, r3
 8006a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a7c:	f7fb ffd2 	bl	8002a24 <HAL_GPIO_Init>
}
 8006a80:	e031      	b.n	8006ae6 <HAL_ADC_MspInit+0x14a>
  else if(hadc->Instance==ADC3)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a1f      	ldr	r2, [pc, #124]	; (8006b04 <HAL_ADC_MspInit+0x168>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d12c      	bne.n	8006ae6 <HAL_ADC_MspInit+0x14a>
    HAL_RCC_ADC_CLK_ENABLED++;
 8006a8c:	4b19      	ldr	r3, [pc, #100]	; (8006af4 <HAL_ADC_MspInit+0x158>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3301      	adds	r3, #1
 8006a92:	4a18      	ldr	r2, [pc, #96]	; (8006af4 <HAL_ADC_MspInit+0x158>)
 8006a94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8006a96:	4b17      	ldr	r3, [pc, #92]	; (8006af4 <HAL_ADC_MspInit+0x158>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d10b      	bne.n	8006ab6 <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8006a9e:	4b16      	ldr	r3, [pc, #88]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 8006aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa2:	4a15      	ldr	r2, [pc, #84]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 8006aa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006aaa:	4b13      	ldr	r3, [pc, #76]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 8006aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ab6:	4b10      	ldr	r3, [pc, #64]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 8006ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aba:	4a0f      	ldr	r2, [pc, #60]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 8006abc:	f043 0304 	orr.w	r3, r3, #4
 8006ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ac2:	4b0d      	ldr	r3, [pc, #52]	; (8006af8 <HAL_ADC_MspInit+0x15c>)
 8006ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = THERM1_Pin;
 8006ace:	2304      	movs	r3, #4
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006ad2:	230b      	movs	r3, #11
 8006ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(THERM1_GPIO_Port, &GPIO_InitStruct);
 8006ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ade:	4619      	mov	r1, r3
 8006ae0:	4806      	ldr	r0, [pc, #24]	; (8006afc <HAL_ADC_MspInit+0x160>)
 8006ae2:	f7fb ff9f 	bl	8002a24 <HAL_GPIO_Init>
}
 8006ae6:	bf00      	nop
 8006ae8:	3738      	adds	r7, #56	; 0x38
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	50040000 	.word	0x50040000
 8006af4:	20000138 	.word	0x20000138
 8006af8:	40021000 	.word	0x40021000
 8006afc:	48000800 	.word	0x48000800
 8006b00:	50040100 	.word	0x50040100
 8006b04:	50040200 	.word	0x50040200

08006b08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08a      	sub	sp, #40	; 0x28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b10:	f107 0314 	add.w	r3, r7, #20
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	605a      	str	r2, [r3, #4]
 8006b1a:	609a      	str	r2, [r3, #8]
 8006b1c:	60da      	str	r2, [r3, #12]
 8006b1e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a18      	ldr	r2, [pc, #96]	; (8006b88 <HAL_CAN_MspInit+0x80>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d129      	bne.n	8006b7e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006b2a:	4b18      	ldr	r3, [pc, #96]	; (8006b8c <HAL_CAN_MspInit+0x84>)
 8006b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2e:	4a17      	ldr	r2, [pc, #92]	; (8006b8c <HAL_CAN_MspInit+0x84>)
 8006b30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b34:	6593      	str	r3, [r2, #88]	; 0x58
 8006b36:	4b15      	ldr	r3, [pc, #84]	; (8006b8c <HAL_CAN_MspInit+0x84>)
 8006b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b42:	4b12      	ldr	r3, [pc, #72]	; (8006b8c <HAL_CAN_MspInit+0x84>)
 8006b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b46:	4a11      	ldr	r2, [pc, #68]	; (8006b8c <HAL_CAN_MspInit+0x84>)
 8006b48:	f043 0301 	orr.w	r3, r3, #1
 8006b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b4e:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <HAL_CAN_MspInit+0x84>)
 8006b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b60:	2302      	movs	r3, #2
 8006b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006b6c:	2309      	movs	r3, #9
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b70:	f107 0314 	add.w	r3, r7, #20
 8006b74:	4619      	mov	r1, r3
 8006b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b7a:	f7fb ff53 	bl	8002a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8006b7e:	bf00      	nop
 8006b80:	3728      	adds	r7, #40	; 0x28
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	40006400 	.word	0x40006400
 8006b8c:	40021000 	.word	0x40021000

08006b90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08c      	sub	sp, #48	; 0x30
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b98:	f107 031c 	add.w	r3, r7, #28
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	605a      	str	r2, [r3, #4]
 8006ba2:	609a      	str	r2, [r3, #8]
 8006ba4:	60da      	str	r2, [r3, #12]
 8006ba6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a2e      	ldr	r2, [pc, #184]	; (8006c68 <HAL_I2C_MspInit+0xd8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d128      	bne.n	8006c04 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bb2:	4b2e      	ldr	r3, [pc, #184]	; (8006c6c <HAL_I2C_MspInit+0xdc>)
 8006bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb6:	4a2d      	ldr	r2, [pc, #180]	; (8006c6c <HAL_I2C_MspInit+0xdc>)
 8006bb8:	f043 0302 	orr.w	r3, r3, #2
 8006bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bbe:	4b2b      	ldr	r3, [pc, #172]	; (8006c6c <HAL_I2C_MspInit+0xdc>)
 8006bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006bca:	23c0      	movs	r3, #192	; 0xc0
 8006bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006bce:	2312      	movs	r3, #18
 8006bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006bda:	2304      	movs	r3, #4
 8006bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bde:	f107 031c 	add.w	r3, r7, #28
 8006be2:	4619      	mov	r1, r3
 8006be4:	4822      	ldr	r0, [pc, #136]	; (8006c70 <HAL_I2C_MspInit+0xe0>)
 8006be6:	f7fb ff1d 	bl	8002a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006bea:	4b20      	ldr	r3, [pc, #128]	; (8006c6c <HAL_I2C_MspInit+0xdc>)
 8006bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bee:	4a1f      	ldr	r2, [pc, #124]	; (8006c6c <HAL_I2C_MspInit+0xdc>)
 8006bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8006bf6:	4b1d      	ldr	r3, [pc, #116]	; (8006c6c <HAL_I2C_MspInit+0xdc>)
 8006bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006c02:	e02d      	b.n	8006c60 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a1a      	ldr	r2, [pc, #104]	; (8006c74 <HAL_I2C_MspInit+0xe4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d128      	bne.n	8006c60 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c0e:	4b17      	ldr	r3, [pc, #92]	; (8006c6c <HAL_I2C_MspInit+0xdc>)
 8006c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c12:	4a16      	ldr	r2, [pc, #88]	; (8006c6c <HAL_I2C_MspInit+0xdc>)
 8006c14:	f043 0302 	orr.w	r3, r3, #2
 8006c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c1a:	4b14      	ldr	r3, [pc, #80]	; (8006c6c <HAL_I2C_MspInit+0xdc>)
 8006c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8006c26:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c2c:	2312      	movs	r3, #18
 8006c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c30:	2301      	movs	r3, #1
 8006c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c34:	2303      	movs	r3, #3
 8006c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006c38:	2304      	movs	r3, #4
 8006c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c3c:	f107 031c 	add.w	r3, r7, #28
 8006c40:	4619      	mov	r1, r3
 8006c42:	480b      	ldr	r0, [pc, #44]	; (8006c70 <HAL_I2C_MspInit+0xe0>)
 8006c44:	f7fb feee 	bl	8002a24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006c48:	4b08      	ldr	r3, [pc, #32]	; (8006c6c <HAL_I2C_MspInit+0xdc>)
 8006c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4c:	4a07      	ldr	r2, [pc, #28]	; (8006c6c <HAL_I2C_MspInit+0xdc>)
 8006c4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c52:	6593      	str	r3, [r2, #88]	; 0x58
 8006c54:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <HAL_I2C_MspInit+0xdc>)
 8006c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c5c:	60fb      	str	r3, [r7, #12]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
}
 8006c60:	bf00      	nop
 8006c62:	3730      	adds	r7, #48	; 0x30
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40005400 	.word	0x40005400
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	48000400 	.word	0x48000400
 8006c74:	40005800 	.word	0x40005800

08006c78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a0a      	ldr	r2, [pc, #40]	; (8006cb0 <HAL_TIM_PWM_MspInit+0x38>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d10b      	bne.n	8006ca2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006c8a:	4b0a      	ldr	r3, [pc, #40]	; (8006cb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8006c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8e:	4a09      	ldr	r2, [pc, #36]	; (8006cb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8006c90:	f043 0308 	orr.w	r3, r3, #8
 8006c94:	6593      	str	r3, [r2, #88]	; 0x58
 8006c96:	4b07      	ldr	r3, [pc, #28]	; (8006cb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8006c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9a:	f003 0308 	and.w	r3, r3, #8
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006ca2:	bf00      	nop
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	40000c00 	.word	0x40000c00
 8006cb4:	40021000 	.word	0x40021000

08006cb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b088      	sub	sp, #32
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cc0:	f107 030c 	add.w	r3, r7, #12
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	605a      	str	r2, [r3, #4]
 8006cca:	609a      	str	r2, [r3, #8]
 8006ccc:	60da      	str	r2, [r3, #12]
 8006cce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a11      	ldr	r2, [pc, #68]	; (8006d1c <HAL_TIM_MspPostInit+0x64>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d11c      	bne.n	8006d14 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cda:	4b11      	ldr	r3, [pc, #68]	; (8006d20 <HAL_TIM_MspPostInit+0x68>)
 8006cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cde:	4a10      	ldr	r2, [pc, #64]	; (8006d20 <HAL_TIM_MspPostInit+0x68>)
 8006ce0:	f043 0301 	orr.w	r3, r3, #1
 8006ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ce6:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <HAL_TIM_MspPostInit+0x68>)
 8006ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	60bb      	str	r3, [r7, #8]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration    
    PA0     ------> TIM5_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006d02:	2302      	movs	r3, #2
 8006d04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d06:	f107 030c 	add.w	r3, r7, #12
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d10:	f7fb fe88 	bl	8002a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8006d14:	bf00      	nop
 8006d16:	3720      	adds	r7, #32
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	40000c00 	.word	0x40000c00
 8006d20:	40021000 	.word	0x40021000

08006d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006d28:	bf00      	nop
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d32:	b480      	push	{r7}
 8006d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d36:	e7fe      	b.n	8006d36 <HardFault_Handler+0x4>

08006d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d3c:	e7fe      	b.n	8006d3c <MemManage_Handler+0x4>

08006d3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d42:	e7fe      	b.n	8006d42 <BusFault_Handler+0x4>

08006d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d48:	e7fe      	b.n	8006d48 <UsageFault_Handler+0x4>

08006d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006d4e:	bf00      	nop
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d5c:	bf00      	nop
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006d66:	b480      	push	{r7}
 8006d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006d6a:	bf00      	nop
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006d78:	f7f9 ff34 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006d7c:	bf00      	nop
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006d80:	b480      	push	{r7}
 8006d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006d84:	4b17      	ldr	r3, [pc, #92]	; (8006de4 <SystemInit+0x64>)
 8006d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8a:	4a16      	ldr	r2, [pc, #88]	; (8006de4 <SystemInit+0x64>)
 8006d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006d94:	4b14      	ldr	r3, [pc, #80]	; (8006de8 <SystemInit+0x68>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a13      	ldr	r2, [pc, #76]	; (8006de8 <SystemInit+0x68>)
 8006d9a:	f043 0301 	orr.w	r3, r3, #1
 8006d9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006da0:	4b11      	ldr	r3, [pc, #68]	; (8006de8 <SystemInit+0x68>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006da6:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <SystemInit+0x68>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a0f      	ldr	r2, [pc, #60]	; (8006de8 <SystemInit+0x68>)
 8006dac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006db0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006db4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006db6:	4b0c      	ldr	r3, [pc, #48]	; (8006de8 <SystemInit+0x68>)
 8006db8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006dbc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006dbe:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <SystemInit+0x68>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a09      	ldr	r2, [pc, #36]	; (8006de8 <SystemInit+0x68>)
 8006dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dc8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006dca:	4b07      	ldr	r3, [pc, #28]	; (8006de8 <SystemInit+0x68>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006dd0:	4b04      	ldr	r3, [pc, #16]	; (8006de4 <SystemInit+0x64>)
 8006dd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006dd6:	609a      	str	r2, [r3, #8]
#endif
}
 8006dd8:	bf00      	nop
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	e000ed00 	.word	0xe000ed00
 8006de8:	40021000 	.word	0x40021000

08006dec <filterConfigCAN>:
#include "zenith_can_lib.h"

Z_CAN_Package NULL_MSG = {-1, {0,0,0,0,0,0,0,0}};

void filterConfigCAN(CAN_HandleTypeDef *hcan1)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08c      	sub	sp, #48	; 0x30
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]

	CAN_FilterTypeDef can1FilterInit;

	can1FilterInit.FilterActivation = ENABLE;
 8006df4:	2301      	movs	r3, #1
 8006df6:	62bb      	str	r3, [r7, #40]	; 0x28
	can1FilterInit.FilterBank = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	61fb      	str	r3, [r7, #28]
	can1FilterInit.FilterFIFOAssignment = CAN_RX_FIFO0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	61bb      	str	r3, [r7, #24]
	can1FilterInit.FilterIdHigh = 0x0000;
 8006e00:	2300      	movs	r3, #0
 8006e02:	60bb      	str	r3, [r7, #8]
	can1FilterInit.FilterIdLow = 0x0000;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]
	can1FilterInit.FilterMaskIdHigh = 0x0000;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	613b      	str	r3, [r7, #16]
	can1FilterInit.FilterMaskIdLow = 0x0000;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	617b      	str	r3, [r7, #20]
	can1FilterInit.FilterMode = CAN_FILTERMODE_IDMASK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	623b      	str	r3, [r7, #32]
	can1FilterInit.FilterScale = CAN_FILTERSCALE_32BIT;
 8006e14:	2301      	movs	r3, #1
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcan1, &can1FilterInit);
 8006e18:	f107 0308 	add.w	r3, r7, #8
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7fb fafb 	bl	800241a <HAL_CAN_ConfigFilter>
}
 8006e24:	bf00      	nop
 8006e26:	3730      	adds	r7, #48	; 0x30
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <sendCanMessage>:

uint8_t sendCanMessage(CAN_HandleTypeDef *hcan1, Z_CAN_Package package)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08c      	sub	sp, #48	; 0x30
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	4638      	mov	r0, r7
 8006e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint32_t pTxMailbox;

	//Mounting the CAN header
	CAN_TxHeaderTypeDef pTxHeader;
	pTxHeader.DLC = 8;
 8006e3a:	2308      	movs	r3, #8
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
	pTxHeader.IDE = CAN_ID_STD;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	61fb      	str	r3, [r7, #28]
	pTxHeader.RTR = CAN_RTR_DATA;
 8006e42:	2300      	movs	r3, #0
 8006e44:	623b      	str	r3, [r7, #32]
	pTxHeader.StdId = package.identifier;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	617b      	str	r3, [r7, #20]

	if(HAL_CAN_GetTxMailboxesFreeLevel(hcan1) != 0){
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f7fb fcce 	bl	80027ec <HAL_CAN_GetTxMailboxesFreeLevel>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00b      	beq.n	8006e6e <sendCanMessage+0x42>
		HAL_CAN_AddTxMessage(hcan1, &pTxHeader, package.data, &pTxMailbox);
 8006e56:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	1d1a      	adds	r2, r3, #4
 8006e5e:	f107 0114 	add.w	r1, r7, #20
 8006e62:	4603      	mov	r3, r0
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f7fb fbe6 	bl	8002636 <HAL_CAN_AddTxMessage>
		return 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	e000      	b.n	8006e70 <sendCanMessage+0x44>
	}
	else{
		return -1;
 8006e6e:	23ff      	movs	r3, #255	; 0xff
	}
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3730      	adds	r7, #48	; 0x30
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006eb0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006e7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006e7e:	e003      	b.n	8006e88 <LoopCopyDataInit>

08006e80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006e80:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006e82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006e84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006e86:	3104      	adds	r1, #4

08006e88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006e88:	480b      	ldr	r0, [pc, #44]	; (8006eb8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006e8a:	4b0c      	ldr	r3, [pc, #48]	; (8006ebc <LoopForever+0xe>)
	adds	r2, r0, r1
 8006e8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006e8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006e90:	d3f6      	bcc.n	8006e80 <CopyDataInit>
	ldr	r2, =_sbss
 8006e92:	4a0b      	ldr	r2, [pc, #44]	; (8006ec0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006e94:	e002      	b.n	8006e9c <LoopFillZerobss>

08006e96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006e96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006e98:	f842 3b04 	str.w	r3, [r2], #4

08006e9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006e9c:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <LoopForever+0x16>)
	cmp	r2, r3
 8006e9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006ea0:	d3f9      	bcc.n	8006e96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006ea2:	f7ff ff6d 	bl	8006d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ea6:	f000 fa55 	bl	8007354 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006eaa:	f7fe ff17 	bl	8005cdc <main>

08006eae <LoopForever>:

LoopForever:
    b LoopForever
 8006eae:	e7fe      	b.n	8006eae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006eb0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006eb4:	08007428 	.word	0x08007428
	ldr	r0, =_sdata
 8006eb8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006ebc:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8006ec0:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8006ec4:	200003ec 	.word	0x200003ec

08006ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006ec8:	e7fe      	b.n	8006ec8 <ADC1_2_IRQHandler>
	...

08006ecc <log>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	ed2d 8b02 	vpush	{d8}
 8006ed2:	b08a      	sub	sp, #40	; 0x28
 8006ed4:	ec55 4b10 	vmov	r4, r5, d0
 8006ed8:	f000 f87a 	bl	8006fd0 <__ieee754_log>
 8006edc:	4b36      	ldr	r3, [pc, #216]	; (8006fb8 <log+0xec>)
 8006ede:	eeb0 8a40 	vmov.f32	s16, s0
 8006ee2:	eef0 8a60 	vmov.f32	s17, s1
 8006ee6:	f993 6000 	ldrsb.w	r6, [r3]
 8006eea:	1c73      	adds	r3, r6, #1
 8006eec:	d05b      	beq.n	8006fa6 <log+0xda>
 8006eee:	4622      	mov	r2, r4
 8006ef0:	462b      	mov	r3, r5
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	f7f9 fdbd 	bl	8000a74 <__aeabi_dcmpun>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d153      	bne.n	8006fa6 <log+0xda>
 8006efe:	2200      	movs	r2, #0
 8006f00:	2300      	movs	r3, #0
 8006f02:	4620      	mov	r0, r4
 8006f04:	4629      	mov	r1, r5
 8006f06:	f7f9 fdab 	bl	8000a60 <__aeabi_dcmpgt>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d14b      	bne.n	8006fa6 <log+0xda>
 8006f0e:	4b2b      	ldr	r3, [pc, #172]	; (8006fbc <log+0xf0>)
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	9008      	str	r0, [sp, #32]
 8006f14:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006f18:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006f1c:	b9a6      	cbnz	r6, 8006f48 <log+0x7c>
 8006f1e:	4b28      	ldr	r3, [pc, #160]	; (8006fc0 <log+0xf4>)
 8006f20:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006f24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f28:	4620      	mov	r0, r4
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4629      	mov	r1, r5
 8006f30:	f7f9 fd6e 	bl	8000a10 <__aeabi_dcmpeq>
 8006f34:	bb40      	cbnz	r0, 8006f88 <log+0xbc>
 8006f36:	2301      	movs	r3, #1
 8006f38:	2e02      	cmp	r6, #2
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	d119      	bne.n	8006f72 <log+0xa6>
 8006f3e:	f000 fa03 	bl	8007348 <__errno>
 8006f42:	2321      	movs	r3, #33	; 0x21
 8006f44:	6003      	str	r3, [r0, #0]
 8006f46:	e019      	b.n	8006f7c <log+0xb0>
 8006f48:	4b1e      	ldr	r3, [pc, #120]	; (8006fc4 <log+0xf8>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f50:	4620      	mov	r0, r4
 8006f52:	2200      	movs	r2, #0
 8006f54:	2300      	movs	r3, #0
 8006f56:	4629      	mov	r1, r5
 8006f58:	f7f9 fd5a 	bl	8000a10 <__aeabi_dcmpeq>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d0ea      	beq.n	8006f36 <log+0x6a>
 8006f60:	2302      	movs	r3, #2
 8006f62:	429e      	cmp	r6, r3
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	d111      	bne.n	8006f8c <log+0xc0>
 8006f68:	f000 f9ee 	bl	8007348 <__errno>
 8006f6c:	2322      	movs	r3, #34	; 0x22
 8006f6e:	6003      	str	r3, [r0, #0]
 8006f70:	e011      	b.n	8006f96 <log+0xca>
 8006f72:	4668      	mov	r0, sp
 8006f74:	f000 f9de 	bl	8007334 <matherr>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d0e0      	beq.n	8006f3e <log+0x72>
 8006f7c:	4812      	ldr	r0, [pc, #72]	; (8006fc8 <log+0xfc>)
 8006f7e:	f000 f9db 	bl	8007338 <nan>
 8006f82:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006f86:	e006      	b.n	8006f96 <log+0xca>
 8006f88:	2302      	movs	r3, #2
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	4668      	mov	r0, sp
 8006f8e:	f000 f9d1 	bl	8007334 <matherr>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d0e8      	beq.n	8006f68 <log+0x9c>
 8006f96:	9b08      	ldr	r3, [sp, #32]
 8006f98:	b11b      	cbz	r3, 8006fa2 <log+0xd6>
 8006f9a:	f000 f9d5 	bl	8007348 <__errno>
 8006f9e:	9b08      	ldr	r3, [sp, #32]
 8006fa0:	6003      	str	r3, [r0, #0]
 8006fa2:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006fa6:	eeb0 0a48 	vmov.f32	s0, s16
 8006faa:	eef0 0a68 	vmov.f32	s1, s17
 8006fae:	b00a      	add	sp, #40	; 0x28
 8006fb0:	ecbd 8b02 	vpop	{d8}
 8006fb4:	bd70      	pop	{r4, r5, r6, pc}
 8006fb6:	bf00      	nop
 8006fb8:	2000001c 	.word	0x2000001c
 8006fbc:	0800741c 	.word	0x0800741c
 8006fc0:	c7efffff 	.word	0xc7efffff
 8006fc4:	fff00000 	.word	0xfff00000
 8006fc8:	0800741f 	.word	0x0800741f
 8006fcc:	00000000 	.word	0x00000000

08006fd0 <__ieee754_log>:
 8006fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	ec51 0b10 	vmov	r0, r1, d0
 8006fd8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006fdc:	b087      	sub	sp, #28
 8006fde:	460d      	mov	r5, r1
 8006fe0:	da27      	bge.n	8007032 <__ieee754_log+0x62>
 8006fe2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006fe6:	4303      	orrs	r3, r0
 8006fe8:	ee10 2a10 	vmov	r2, s0
 8006fec:	d10a      	bne.n	8007004 <__ieee754_log+0x34>
 8006fee:	49cc      	ldr	r1, [pc, #816]	; (8007320 <__ieee754_log+0x350>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	f7f9 fbcd 	bl	8000794 <__aeabi_ddiv>
 8006ffa:	ec41 0b10 	vmov	d0, r0, r1
 8006ffe:	b007      	add	sp, #28
 8007000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007004:	2900      	cmp	r1, #0
 8007006:	da05      	bge.n	8007014 <__ieee754_log+0x44>
 8007008:	460b      	mov	r3, r1
 800700a:	f7f9 f8e1 	bl	80001d0 <__aeabi_dsub>
 800700e:	2200      	movs	r2, #0
 8007010:	2300      	movs	r3, #0
 8007012:	e7f0      	b.n	8006ff6 <__ieee754_log+0x26>
 8007014:	4bc3      	ldr	r3, [pc, #780]	; (8007324 <__ieee754_log+0x354>)
 8007016:	2200      	movs	r2, #0
 8007018:	f7f9 fa92 	bl	8000540 <__aeabi_dmul>
 800701c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007020:	460d      	mov	r5, r1
 8007022:	4ac1      	ldr	r2, [pc, #772]	; (8007328 <__ieee754_log+0x358>)
 8007024:	4295      	cmp	r5, r2
 8007026:	dd06      	ble.n	8007036 <__ieee754_log+0x66>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	f7f9 f8d2 	bl	80001d4 <__adddf3>
 8007030:	e7e3      	b.n	8006ffa <__ieee754_log+0x2a>
 8007032:	2300      	movs	r3, #0
 8007034:	e7f5      	b.n	8007022 <__ieee754_log+0x52>
 8007036:	152c      	asrs	r4, r5, #20
 8007038:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800703c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007040:	441c      	add	r4, r3
 8007042:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8007046:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800704a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800704e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8007052:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8007056:	ea42 0105 	orr.w	r1, r2, r5
 800705a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800705e:	2200      	movs	r2, #0
 8007060:	4bb2      	ldr	r3, [pc, #712]	; (800732c <__ieee754_log+0x35c>)
 8007062:	f7f9 f8b5 	bl	80001d0 <__aeabi_dsub>
 8007066:	1cab      	adds	r3, r5, #2
 8007068:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800706c:	2b02      	cmp	r3, #2
 800706e:	4682      	mov	sl, r0
 8007070:	468b      	mov	fp, r1
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	dc53      	bgt.n	8007120 <__ieee754_log+0x150>
 8007078:	2300      	movs	r3, #0
 800707a:	f7f9 fcc9 	bl	8000a10 <__aeabi_dcmpeq>
 800707e:	b1d0      	cbz	r0, 80070b6 <__ieee754_log+0xe6>
 8007080:	2c00      	cmp	r4, #0
 8007082:	f000 8120 	beq.w	80072c6 <__ieee754_log+0x2f6>
 8007086:	4620      	mov	r0, r4
 8007088:	f7f9 f9f0 	bl	800046c <__aeabi_i2d>
 800708c:	a390      	add	r3, pc, #576	; (adr r3, 80072d0 <__ieee754_log+0x300>)
 800708e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007092:	4606      	mov	r6, r0
 8007094:	460f      	mov	r7, r1
 8007096:	f7f9 fa53 	bl	8000540 <__aeabi_dmul>
 800709a:	a38f      	add	r3, pc, #572	; (adr r3, 80072d8 <__ieee754_log+0x308>)
 800709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a0:	4604      	mov	r4, r0
 80070a2:	460d      	mov	r5, r1
 80070a4:	4630      	mov	r0, r6
 80070a6:	4639      	mov	r1, r7
 80070a8:	f7f9 fa4a 	bl	8000540 <__aeabi_dmul>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4620      	mov	r0, r4
 80070b2:	4629      	mov	r1, r5
 80070b4:	e7ba      	b.n	800702c <__ieee754_log+0x5c>
 80070b6:	a38a      	add	r3, pc, #552	; (adr r3, 80072e0 <__ieee754_log+0x310>)
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	4650      	mov	r0, sl
 80070be:	4659      	mov	r1, fp
 80070c0:	f7f9 fa3e 	bl	8000540 <__aeabi_dmul>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	2000      	movs	r0, #0
 80070ca:	4999      	ldr	r1, [pc, #612]	; (8007330 <__ieee754_log+0x360>)
 80070cc:	f7f9 f880 	bl	80001d0 <__aeabi_dsub>
 80070d0:	4652      	mov	r2, sl
 80070d2:	4606      	mov	r6, r0
 80070d4:	460f      	mov	r7, r1
 80070d6:	465b      	mov	r3, fp
 80070d8:	4650      	mov	r0, sl
 80070da:	4659      	mov	r1, fp
 80070dc:	f7f9 fa30 	bl	8000540 <__aeabi_dmul>
 80070e0:	4602      	mov	r2, r0
 80070e2:	460b      	mov	r3, r1
 80070e4:	4630      	mov	r0, r6
 80070e6:	4639      	mov	r1, r7
 80070e8:	f7f9 fa2a 	bl	8000540 <__aeabi_dmul>
 80070ec:	4606      	mov	r6, r0
 80070ee:	460f      	mov	r7, r1
 80070f0:	b914      	cbnz	r4, 80070f8 <__ieee754_log+0x128>
 80070f2:	4632      	mov	r2, r6
 80070f4:	463b      	mov	r3, r7
 80070f6:	e0a0      	b.n	800723a <__ieee754_log+0x26a>
 80070f8:	4620      	mov	r0, r4
 80070fa:	f7f9 f9b7 	bl	800046c <__aeabi_i2d>
 80070fe:	a374      	add	r3, pc, #464	; (adr r3, 80072d0 <__ieee754_log+0x300>)
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	4680      	mov	r8, r0
 8007106:	4689      	mov	r9, r1
 8007108:	f7f9 fa1a 	bl	8000540 <__aeabi_dmul>
 800710c:	a372      	add	r3, pc, #456	; (adr r3, 80072d8 <__ieee754_log+0x308>)
 800710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007112:	4604      	mov	r4, r0
 8007114:	460d      	mov	r5, r1
 8007116:	4640      	mov	r0, r8
 8007118:	4649      	mov	r1, r9
 800711a:	f7f9 fa11 	bl	8000540 <__aeabi_dmul>
 800711e:	e0a5      	b.n	800726c <__ieee754_log+0x29c>
 8007120:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007124:	f7f9 f856 	bl	80001d4 <__adddf3>
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	4650      	mov	r0, sl
 800712e:	4659      	mov	r1, fp
 8007130:	f7f9 fb30 	bl	8000794 <__aeabi_ddiv>
 8007134:	e9cd 0100 	strd	r0, r1, [sp]
 8007138:	4620      	mov	r0, r4
 800713a:	f7f9 f997 	bl	800046c <__aeabi_i2d>
 800713e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007146:	4610      	mov	r0, r2
 8007148:	4619      	mov	r1, r3
 800714a:	f7f9 f9f9 	bl	8000540 <__aeabi_dmul>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007156:	f7f9 f9f3 	bl	8000540 <__aeabi_dmul>
 800715a:	a363      	add	r3, pc, #396	; (adr r3, 80072e8 <__ieee754_log+0x318>)
 800715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007160:	4680      	mov	r8, r0
 8007162:	4689      	mov	r9, r1
 8007164:	f7f9 f9ec 	bl	8000540 <__aeabi_dmul>
 8007168:	a361      	add	r3, pc, #388	; (adr r3, 80072f0 <__ieee754_log+0x320>)
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	f7f9 f831 	bl	80001d4 <__adddf3>
 8007172:	4642      	mov	r2, r8
 8007174:	464b      	mov	r3, r9
 8007176:	f7f9 f9e3 	bl	8000540 <__aeabi_dmul>
 800717a:	a35f      	add	r3, pc, #380	; (adr r3, 80072f8 <__ieee754_log+0x328>)
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	f7f9 f828 	bl	80001d4 <__adddf3>
 8007184:	4642      	mov	r2, r8
 8007186:	464b      	mov	r3, r9
 8007188:	f7f9 f9da 	bl	8000540 <__aeabi_dmul>
 800718c:	a35c      	add	r3, pc, #368	; (adr r3, 8007300 <__ieee754_log+0x330>)
 800718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007192:	f7f9 f81f 	bl	80001d4 <__adddf3>
 8007196:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800719a:	f7f9 f9d1 	bl	8000540 <__aeabi_dmul>
 800719e:	a35a      	add	r3, pc, #360	; (adr r3, 8007308 <__ieee754_log+0x338>)
 80071a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071a8:	4640      	mov	r0, r8
 80071aa:	4649      	mov	r1, r9
 80071ac:	f7f9 f9c8 	bl	8000540 <__aeabi_dmul>
 80071b0:	a357      	add	r3, pc, #348	; (adr r3, 8007310 <__ieee754_log+0x340>)
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	f7f9 f80d 	bl	80001d4 <__adddf3>
 80071ba:	4642      	mov	r2, r8
 80071bc:	464b      	mov	r3, r9
 80071be:	f7f9 f9bf 	bl	8000540 <__aeabi_dmul>
 80071c2:	a355      	add	r3, pc, #340	; (adr r3, 8007318 <__ieee754_log+0x348>)
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f7f9 f804 	bl	80001d4 <__adddf3>
 80071cc:	4642      	mov	r2, r8
 80071ce:	464b      	mov	r3, r9
 80071d0:	f7f9 f9b6 	bl	8000540 <__aeabi_dmul>
 80071d4:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80071e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071e4:	f7f8 fff6 	bl	80001d4 <__adddf3>
 80071e8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80071ec:	3551      	adds	r5, #81	; 0x51
 80071ee:	4335      	orrs	r5, r6
 80071f0:	2d00      	cmp	r5, #0
 80071f2:	4680      	mov	r8, r0
 80071f4:	4689      	mov	r9, r1
 80071f6:	dd48      	ble.n	800728a <__ieee754_log+0x2ba>
 80071f8:	2200      	movs	r2, #0
 80071fa:	4b4d      	ldr	r3, [pc, #308]	; (8007330 <__ieee754_log+0x360>)
 80071fc:	4650      	mov	r0, sl
 80071fe:	4659      	mov	r1, fp
 8007200:	f7f9 f99e 	bl	8000540 <__aeabi_dmul>
 8007204:	4652      	mov	r2, sl
 8007206:	465b      	mov	r3, fp
 8007208:	f7f9 f99a 	bl	8000540 <__aeabi_dmul>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	4606      	mov	r6, r0
 8007212:	460f      	mov	r7, r1
 8007214:	4640      	mov	r0, r8
 8007216:	4649      	mov	r1, r9
 8007218:	f7f8 ffdc 	bl	80001d4 <__adddf3>
 800721c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007220:	f7f9 f98e 	bl	8000540 <__aeabi_dmul>
 8007224:	4680      	mov	r8, r0
 8007226:	4689      	mov	r9, r1
 8007228:	b964      	cbnz	r4, 8007244 <__ieee754_log+0x274>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4630      	mov	r0, r6
 8007230:	4639      	mov	r1, r7
 8007232:	f7f8 ffcd 	bl	80001d0 <__aeabi_dsub>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4650      	mov	r0, sl
 800723c:	4659      	mov	r1, fp
 800723e:	f7f8 ffc7 	bl	80001d0 <__aeabi_dsub>
 8007242:	e6da      	b.n	8006ffa <__ieee754_log+0x2a>
 8007244:	a322      	add	r3, pc, #136	; (adr r3, 80072d0 <__ieee754_log+0x300>)
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800724e:	f7f9 f977 	bl	8000540 <__aeabi_dmul>
 8007252:	a321      	add	r3, pc, #132	; (adr r3, 80072d8 <__ieee754_log+0x308>)
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	4604      	mov	r4, r0
 800725a:	460d      	mov	r5, r1
 800725c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007260:	f7f9 f96e 	bl	8000540 <__aeabi_dmul>
 8007264:	4642      	mov	r2, r8
 8007266:	464b      	mov	r3, r9
 8007268:	f7f8 ffb4 	bl	80001d4 <__adddf3>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4630      	mov	r0, r6
 8007272:	4639      	mov	r1, r7
 8007274:	f7f8 ffac 	bl	80001d0 <__aeabi_dsub>
 8007278:	4652      	mov	r2, sl
 800727a:	465b      	mov	r3, fp
 800727c:	f7f8 ffa8 	bl	80001d0 <__aeabi_dsub>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4620      	mov	r0, r4
 8007286:	4629      	mov	r1, r5
 8007288:	e7d9      	b.n	800723e <__ieee754_log+0x26e>
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4650      	mov	r0, sl
 8007290:	4659      	mov	r1, fp
 8007292:	f7f8 ff9d 	bl	80001d0 <__aeabi_dsub>
 8007296:	e9dd 2300 	ldrd	r2, r3, [sp]
 800729a:	f7f9 f951 	bl	8000540 <__aeabi_dmul>
 800729e:	4606      	mov	r6, r0
 80072a0:	460f      	mov	r7, r1
 80072a2:	2c00      	cmp	r4, #0
 80072a4:	f43f af25 	beq.w	80070f2 <__ieee754_log+0x122>
 80072a8:	a309      	add	r3, pc, #36	; (adr r3, 80072d0 <__ieee754_log+0x300>)
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072b2:	f7f9 f945 	bl	8000540 <__aeabi_dmul>
 80072b6:	a308      	add	r3, pc, #32	; (adr r3, 80072d8 <__ieee754_log+0x308>)
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	4604      	mov	r4, r0
 80072be:	460d      	mov	r5, r1
 80072c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072c4:	e729      	b.n	800711a <__ieee754_log+0x14a>
 80072c6:	2000      	movs	r0, #0
 80072c8:	2100      	movs	r1, #0
 80072ca:	e696      	b.n	8006ffa <__ieee754_log+0x2a>
 80072cc:	f3af 8000 	nop.w
 80072d0:	fee00000 	.word	0xfee00000
 80072d4:	3fe62e42 	.word	0x3fe62e42
 80072d8:	35793c76 	.word	0x35793c76
 80072dc:	3dea39ef 	.word	0x3dea39ef
 80072e0:	55555555 	.word	0x55555555
 80072e4:	3fd55555 	.word	0x3fd55555
 80072e8:	df3e5244 	.word	0xdf3e5244
 80072ec:	3fc2f112 	.word	0x3fc2f112
 80072f0:	96cb03de 	.word	0x96cb03de
 80072f4:	3fc74664 	.word	0x3fc74664
 80072f8:	94229359 	.word	0x94229359
 80072fc:	3fd24924 	.word	0x3fd24924
 8007300:	55555593 	.word	0x55555593
 8007304:	3fe55555 	.word	0x3fe55555
 8007308:	d078c69f 	.word	0xd078c69f
 800730c:	3fc39a09 	.word	0x3fc39a09
 8007310:	1d8e78af 	.word	0x1d8e78af
 8007314:	3fcc71c5 	.word	0x3fcc71c5
 8007318:	9997fa04 	.word	0x9997fa04
 800731c:	3fd99999 	.word	0x3fd99999
 8007320:	c3500000 	.word	0xc3500000
 8007324:	43500000 	.word	0x43500000
 8007328:	7fefffff 	.word	0x7fefffff
 800732c:	3ff00000 	.word	0x3ff00000
 8007330:	3fe00000 	.word	0x3fe00000

08007334 <matherr>:
 8007334:	2000      	movs	r0, #0
 8007336:	4770      	bx	lr

08007338 <nan>:
 8007338:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007340 <nan+0x8>
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	00000000 	.word	0x00000000
 8007344:	7ff80000 	.word	0x7ff80000

08007348 <__errno>:
 8007348:	4b01      	ldr	r3, [pc, #4]	; (8007350 <__errno+0x8>)
 800734a:	6818      	ldr	r0, [r3, #0]
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	20000020 	.word	0x20000020

08007354 <__libc_init_array>:
 8007354:	b570      	push	{r4, r5, r6, lr}
 8007356:	4e0d      	ldr	r6, [pc, #52]	; (800738c <__libc_init_array+0x38>)
 8007358:	4c0d      	ldr	r4, [pc, #52]	; (8007390 <__libc_init_array+0x3c>)
 800735a:	1ba4      	subs	r4, r4, r6
 800735c:	10a4      	asrs	r4, r4, #2
 800735e:	2500      	movs	r5, #0
 8007360:	42a5      	cmp	r5, r4
 8007362:	d109      	bne.n	8007378 <__libc_init_array+0x24>
 8007364:	4e0b      	ldr	r6, [pc, #44]	; (8007394 <__libc_init_array+0x40>)
 8007366:	4c0c      	ldr	r4, [pc, #48]	; (8007398 <__libc_init_array+0x44>)
 8007368:	f000 f82c 	bl	80073c4 <_init>
 800736c:	1ba4      	subs	r4, r4, r6
 800736e:	10a4      	asrs	r4, r4, #2
 8007370:	2500      	movs	r5, #0
 8007372:	42a5      	cmp	r5, r4
 8007374:	d105      	bne.n	8007382 <__libc_init_array+0x2e>
 8007376:	bd70      	pop	{r4, r5, r6, pc}
 8007378:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800737c:	4798      	blx	r3
 800737e:	3501      	adds	r5, #1
 8007380:	e7ee      	b.n	8007360 <__libc_init_array+0xc>
 8007382:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007386:	4798      	blx	r3
 8007388:	3501      	adds	r5, #1
 800738a:	e7f2      	b.n	8007372 <__libc_init_array+0x1e>
 800738c:	08007420 	.word	0x08007420
 8007390:	08007420 	.word	0x08007420
 8007394:	08007420 	.word	0x08007420
 8007398:	08007424 	.word	0x08007424

0800739c <memcpy>:
 800739c:	b510      	push	{r4, lr}
 800739e:	1e43      	subs	r3, r0, #1
 80073a0:	440a      	add	r2, r1
 80073a2:	4291      	cmp	r1, r2
 80073a4:	d100      	bne.n	80073a8 <memcpy+0xc>
 80073a6:	bd10      	pop	{r4, pc}
 80073a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073b0:	e7f7      	b.n	80073a2 <memcpy+0x6>

080073b2 <memset>:
 80073b2:	4402      	add	r2, r0
 80073b4:	4603      	mov	r3, r0
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d100      	bne.n	80073bc <memset+0xa>
 80073ba:	4770      	bx	lr
 80073bc:	f803 1b01 	strb.w	r1, [r3], #1
 80073c0:	e7f9      	b.n	80073b6 <memset+0x4>
	...

080073c4 <_init>:
 80073c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c6:	bf00      	nop
 80073c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ca:	bc08      	pop	{r3}
 80073cc:	469e      	mov	lr, r3
 80073ce:	4770      	bx	lr

080073d0 <_fini>:
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d2:	bf00      	nop
 80073d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d6:	bc08      	pop	{r3}
 80073d8:	469e      	mov	lr, r3
 80073da:	4770      	bx	lr
