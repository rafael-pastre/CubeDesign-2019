
LoRaSendercpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006620  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080067b0  080067b0  000167b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006904  08006904  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006904  08006904  00016904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800690c  0800690c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800690c  0800690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800691c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000070  0800698c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  0800698c  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001491c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002683  00000000  00000000  000349bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001268  00000000  00000000  00037040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001150  00000000  00000000  000382a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b201  00000000  00000000  000393f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d387  00000000  00000000  000645f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f8a5e  00000000  00000000  00071980  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016a3de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b4  00000000  00000000  0016a45c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006798 	.word	0x08006798

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006798 	.word	0x08006798

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b972 	b.w	8000a04 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9e08      	ldr	r6, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	4688      	mov	r8, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d14b      	bne.n	80007de <__udivmoddi4+0xa6>
 8000746:	428a      	cmp	r2, r1
 8000748:	4615      	mov	r5, r2
 800074a:	d967      	bls.n	800081c <__udivmoddi4+0xe4>
 800074c:	fab2 f282 	clz	r2, r2
 8000750:	b14a      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000752:	f1c2 0720 	rsb	r7, r2, #32
 8000756:	fa01 f302 	lsl.w	r3, r1, r2
 800075a:	fa20 f707 	lsr.w	r7, r0, r7
 800075e:	4095      	lsls	r5, r2
 8000760:	ea47 0803 	orr.w	r8, r7, r3
 8000764:	4094      	lsls	r4, r2
 8000766:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000770:	fa1f fc85 	uxth.w	ip, r5
 8000774:	fb0e 8817 	mls	r8, lr, r7, r8
 8000778:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800077c:	fb07 f10c 	mul.w	r1, r7, ip
 8000780:	4299      	cmp	r1, r3
 8000782:	d909      	bls.n	8000798 <__udivmoddi4+0x60>
 8000784:	18eb      	adds	r3, r5, r3
 8000786:	f107 30ff 	add.w	r0, r7, #4294967295
 800078a:	f080 811b 	bcs.w	80009c4 <__udivmoddi4+0x28c>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 8118 	bls.w	80009c4 <__udivmoddi4+0x28c>
 8000794:	3f02      	subs	r7, #2
 8000796:	442b      	add	r3, r5
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0fe 	udiv	r0, r3, lr
 80007a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80007ac:	45a4      	cmp	ip, r4
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x8c>
 80007b0:	192c      	adds	r4, r5, r4
 80007b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b6:	f080 8107 	bcs.w	80009c8 <__udivmoddi4+0x290>
 80007ba:	45a4      	cmp	ip, r4
 80007bc:	f240 8104 	bls.w	80009c8 <__udivmoddi4+0x290>
 80007c0:	3802      	subs	r0, #2
 80007c2:	442c      	add	r4, r5
 80007c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80007c8:	eba4 040c 	sub.w	r4, r4, ip
 80007cc:	2700      	movs	r7, #0
 80007ce:	b11e      	cbz	r6, 80007d8 <__udivmoddi4+0xa0>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c6 4300 	strd	r4, r3, [r6]
 80007d8:	4639      	mov	r1, r7
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	428b      	cmp	r3, r1
 80007e0:	d909      	bls.n	80007f6 <__udivmoddi4+0xbe>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	f000 80eb 	beq.w	80009be <__udivmoddi4+0x286>
 80007e8:	2700      	movs	r7, #0
 80007ea:	e9c6 0100 	strd	r0, r1, [r6]
 80007ee:	4638      	mov	r0, r7
 80007f0:	4639      	mov	r1, r7
 80007f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f6:	fab3 f783 	clz	r7, r3
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	d147      	bne.n	800088e <__udivmoddi4+0x156>
 80007fe:	428b      	cmp	r3, r1
 8000800:	d302      	bcc.n	8000808 <__udivmoddi4+0xd0>
 8000802:	4282      	cmp	r2, r0
 8000804:	f200 80fa 	bhi.w	80009fc <__udivmoddi4+0x2c4>
 8000808:	1a84      	subs	r4, r0, r2
 800080a:	eb61 0303 	sbc.w	r3, r1, r3
 800080e:	2001      	movs	r0, #1
 8000810:	4698      	mov	r8, r3
 8000812:	2e00      	cmp	r6, #0
 8000814:	d0e0      	beq.n	80007d8 <__udivmoddi4+0xa0>
 8000816:	e9c6 4800 	strd	r4, r8, [r6]
 800081a:	e7dd      	b.n	80007d8 <__udivmoddi4+0xa0>
 800081c:	b902      	cbnz	r2, 8000820 <__udivmoddi4+0xe8>
 800081e:	deff      	udf	#255	; 0xff
 8000820:	fab2 f282 	clz	r2, r2
 8000824:	2a00      	cmp	r2, #0
 8000826:	f040 808f 	bne.w	8000948 <__udivmoddi4+0x210>
 800082a:	1b49      	subs	r1, r1, r5
 800082c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000830:	fa1f f885 	uxth.w	r8, r5
 8000834:	2701      	movs	r7, #1
 8000836:	fbb1 fcfe 	udiv	ip, r1, lr
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000840:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000844:	fb08 f10c 	mul.w	r1, r8, ip
 8000848:	4299      	cmp	r1, r3
 800084a:	d907      	bls.n	800085c <__udivmoddi4+0x124>
 800084c:	18eb      	adds	r3, r5, r3
 800084e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000852:	d202      	bcs.n	800085a <__udivmoddi4+0x122>
 8000854:	4299      	cmp	r1, r3
 8000856:	f200 80cd 	bhi.w	80009f4 <__udivmoddi4+0x2bc>
 800085a:	4684      	mov	ip, r0
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	b2a3      	uxth	r3, r4
 8000860:	fbb1 f0fe 	udiv	r0, r1, lr
 8000864:	fb0e 1410 	mls	r4, lr, r0, r1
 8000868:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800086c:	fb08 f800 	mul.w	r8, r8, r0
 8000870:	45a0      	cmp	r8, r4
 8000872:	d907      	bls.n	8000884 <__udivmoddi4+0x14c>
 8000874:	192c      	adds	r4, r5, r4
 8000876:	f100 33ff 	add.w	r3, r0, #4294967295
 800087a:	d202      	bcs.n	8000882 <__udivmoddi4+0x14a>
 800087c:	45a0      	cmp	r8, r4
 800087e:	f200 80b6 	bhi.w	80009ee <__udivmoddi4+0x2b6>
 8000882:	4618      	mov	r0, r3
 8000884:	eba4 0408 	sub.w	r4, r4, r8
 8000888:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800088c:	e79f      	b.n	80007ce <__udivmoddi4+0x96>
 800088e:	f1c7 0c20 	rsb	ip, r7, #32
 8000892:	40bb      	lsls	r3, r7
 8000894:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000898:	ea4e 0e03 	orr.w	lr, lr, r3
 800089c:	fa01 f407 	lsl.w	r4, r1, r7
 80008a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80008a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80008a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80008ac:	4325      	orrs	r5, r4
 80008ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80008b2:	0c2c      	lsrs	r4, r5, #16
 80008b4:	fb08 3319 	mls	r3, r8, r9, r3
 80008b8:	fa1f fa8e 	uxth.w	sl, lr
 80008bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80008c0:	fb09 f40a 	mul.w	r4, r9, sl
 80008c4:	429c      	cmp	r4, r3
 80008c6:	fa02 f207 	lsl.w	r2, r2, r7
 80008ca:	fa00 f107 	lsl.w	r1, r0, r7
 80008ce:	d90b      	bls.n	80008e8 <__udivmoddi4+0x1b0>
 80008d0:	eb1e 0303 	adds.w	r3, lr, r3
 80008d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80008d8:	f080 8087 	bcs.w	80009ea <__udivmoddi4+0x2b2>
 80008dc:	429c      	cmp	r4, r3
 80008de:	f240 8084 	bls.w	80009ea <__udivmoddi4+0x2b2>
 80008e2:	f1a9 0902 	sub.w	r9, r9, #2
 80008e6:	4473      	add	r3, lr
 80008e8:	1b1b      	subs	r3, r3, r4
 80008ea:	b2ad      	uxth	r5, r5
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3310 	mls	r3, r8, r0, r3
 80008f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008fc:	45a2      	cmp	sl, r4
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x1da>
 8000900:	eb1e 0404 	adds.w	r4, lr, r4
 8000904:	f100 33ff 	add.w	r3, r0, #4294967295
 8000908:	d26b      	bcs.n	80009e2 <__udivmoddi4+0x2aa>
 800090a:	45a2      	cmp	sl, r4
 800090c:	d969      	bls.n	80009e2 <__udivmoddi4+0x2aa>
 800090e:	3802      	subs	r0, #2
 8000910:	4474      	add	r4, lr
 8000912:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000916:	fba0 8902 	umull	r8, r9, r0, r2
 800091a:	eba4 040a 	sub.w	r4, r4, sl
 800091e:	454c      	cmp	r4, r9
 8000920:	46c2      	mov	sl, r8
 8000922:	464b      	mov	r3, r9
 8000924:	d354      	bcc.n	80009d0 <__udivmoddi4+0x298>
 8000926:	d051      	beq.n	80009cc <__udivmoddi4+0x294>
 8000928:	2e00      	cmp	r6, #0
 800092a:	d069      	beq.n	8000a00 <__udivmoddi4+0x2c8>
 800092c:	ebb1 050a 	subs.w	r5, r1, sl
 8000930:	eb64 0403 	sbc.w	r4, r4, r3
 8000934:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000938:	40fd      	lsrs	r5, r7
 800093a:	40fc      	lsrs	r4, r7
 800093c:	ea4c 0505 	orr.w	r5, ip, r5
 8000940:	e9c6 5400 	strd	r5, r4, [r6]
 8000944:	2700      	movs	r7, #0
 8000946:	e747      	b.n	80007d8 <__udivmoddi4+0xa0>
 8000948:	f1c2 0320 	rsb	r3, r2, #32
 800094c:	fa20 f703 	lsr.w	r7, r0, r3
 8000950:	4095      	lsls	r5, r2
 8000952:	fa01 f002 	lsl.w	r0, r1, r2
 8000956:	fa21 f303 	lsr.w	r3, r1, r3
 800095a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800095e:	4338      	orrs	r0, r7
 8000960:	0c01      	lsrs	r1, r0, #16
 8000962:	fbb3 f7fe 	udiv	r7, r3, lr
 8000966:	fa1f f885 	uxth.w	r8, r5
 800096a:	fb0e 3317 	mls	r3, lr, r7, r3
 800096e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000972:	fb07 f308 	mul.w	r3, r7, r8
 8000976:	428b      	cmp	r3, r1
 8000978:	fa04 f402 	lsl.w	r4, r4, r2
 800097c:	d907      	bls.n	800098e <__udivmoddi4+0x256>
 800097e:	1869      	adds	r1, r5, r1
 8000980:	f107 3cff 	add.w	ip, r7, #4294967295
 8000984:	d22f      	bcs.n	80009e6 <__udivmoddi4+0x2ae>
 8000986:	428b      	cmp	r3, r1
 8000988:	d92d      	bls.n	80009e6 <__udivmoddi4+0x2ae>
 800098a:	3f02      	subs	r7, #2
 800098c:	4429      	add	r1, r5
 800098e:	1acb      	subs	r3, r1, r3
 8000990:	b281      	uxth	r1, r0
 8000992:	fbb3 f0fe 	udiv	r0, r3, lr
 8000996:	fb0e 3310 	mls	r3, lr, r0, r3
 800099a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800099e:	fb00 f308 	mul.w	r3, r0, r8
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d907      	bls.n	80009b6 <__udivmoddi4+0x27e>
 80009a6:	1869      	adds	r1, r5, r1
 80009a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80009ac:	d217      	bcs.n	80009de <__udivmoddi4+0x2a6>
 80009ae:	428b      	cmp	r3, r1
 80009b0:	d915      	bls.n	80009de <__udivmoddi4+0x2a6>
 80009b2:	3802      	subs	r0, #2
 80009b4:	4429      	add	r1, r5
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80009bc:	e73b      	b.n	8000836 <__udivmoddi4+0xfe>
 80009be:	4637      	mov	r7, r6
 80009c0:	4630      	mov	r0, r6
 80009c2:	e709      	b.n	80007d8 <__udivmoddi4+0xa0>
 80009c4:	4607      	mov	r7, r0
 80009c6:	e6e7      	b.n	8000798 <__udivmoddi4+0x60>
 80009c8:	4618      	mov	r0, r3
 80009ca:	e6fb      	b.n	80007c4 <__udivmoddi4+0x8c>
 80009cc:	4541      	cmp	r1, r8
 80009ce:	d2ab      	bcs.n	8000928 <__udivmoddi4+0x1f0>
 80009d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80009d4:	eb69 020e 	sbc.w	r2, r9, lr
 80009d8:	3801      	subs	r0, #1
 80009da:	4613      	mov	r3, r2
 80009dc:	e7a4      	b.n	8000928 <__udivmoddi4+0x1f0>
 80009de:	4660      	mov	r0, ip
 80009e0:	e7e9      	b.n	80009b6 <__udivmoddi4+0x27e>
 80009e2:	4618      	mov	r0, r3
 80009e4:	e795      	b.n	8000912 <__udivmoddi4+0x1da>
 80009e6:	4667      	mov	r7, ip
 80009e8:	e7d1      	b.n	800098e <__udivmoddi4+0x256>
 80009ea:	4681      	mov	r9, r0
 80009ec:	e77c      	b.n	80008e8 <__udivmoddi4+0x1b0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	442c      	add	r4, r5
 80009f2:	e747      	b.n	8000884 <__udivmoddi4+0x14c>
 80009f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f8:	442b      	add	r3, r5
 80009fa:	e72f      	b.n	800085c <__udivmoddi4+0x124>
 80009fc:	4638      	mov	r0, r7
 80009fe:	e708      	b.n	8000812 <__udivmoddi4+0xda>
 8000a00:	4637      	mov	r7, r6
 8000a02:	e6e9      	b.n	80007d8 <__udivmoddi4+0xa0>

08000a04 <__aeabi_idiv0>:
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_Init+0x3c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <HAL_Init+0x3c>)
 8000a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1e:	2003      	movs	r0, #3
 8000a20:	f000 f95c 	bl	8000cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 f80f 	bl	8000a48 <HAL_InitTick>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	e001      	b.n	8000a3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a36:	f004 fd1d 	bl	8005474 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40022000 	.word	0x40022000

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <HAL_InitTick+0x68>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d022      	beq.n	8000aa2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_InitTick+0x6c>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <HAL_InitTick+0x68>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 f968 	bl	8000d46 <HAL_SYSTICK_Config>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d10f      	bne.n	8000a9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b0f      	cmp	r3, #15
 8000a80:	d809      	bhi.n	8000a96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a82:	2200      	movs	r2, #0
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8a:	f000 f932 	bl	8000cf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_InitTick+0x70>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	e007      	b.n	8000aa6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	73fb      	strb	r3, [r7, #15]
 8000a9a:	e004      	b.n	8000aa6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e001      	b.n	8000aa6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000004 	.word	0x20000004
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000000 	.word	0x20000000

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_IncTick+0x1c>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x20>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <HAL_IncTick+0x1c>)
 8000acc:	6013      	str	r3, [r2, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	20000218 	.word	0x20000218
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <HAL_GetTick+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000218 	.word	0x20000218

08000af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b00:	f7ff ffee 	bl	8000ae0 <HAL_GetTick>
 8000b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b10:	d004      	beq.n	8000b1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_Delay+0x40>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	4413      	add	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b1c:	bf00      	nop
 8000b1e:	f7ff ffdf 	bl	8000ae0 <HAL_GetTick>
 8000b22:	4602      	mov	r2, r0
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d8f7      	bhi.n	8000b1e <HAL_Delay+0x26>
  {
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000004 	.word	0x20000004

08000b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	60d3      	str	r3, [r2, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <__NVIC_GetPriorityGrouping+0x18>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 0307 	and.w	r3, r3, #7
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db0b      	blt.n	8000bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	f003 021f 	and.w	r2, r3, #31
 8000bb8:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <__NVIC_EnableIRQ+0x38>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	095b      	lsrs	r3, r3, #5
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e100 	.word	0xe000e100

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db0a      	blt.n	8000c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	490c      	ldr	r1, [pc, #48]	; (8000c28 <__NVIC_SetPriority+0x4c>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c04:	e00a      	b.n	8000c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <__NVIC_SetPriority+0x50>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	3b04      	subs	r3, #4
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	440b      	add	r3, r1
 8000c1a:	761a      	strb	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f1c3 0307 	rsb	r3, r3, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <NVIC_EncodePriority+0x30>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	e000      	b.n	8000c62 <NVIC_EncodePriority+0x32>
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	4313      	orrs	r3, r2
         );
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	; 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca8:	d301      	bcc.n	8000cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00f      	b.n	8000cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <SysTick_Config+0x40>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f7ff ff8e 	bl	8000bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff29 	bl	8000b3c <__NVIC_SetPriorityGrouping>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d04:	f7ff ff3e 	bl	8000b84 <__NVIC_GetPriorityGrouping>
 8000d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff ff8e 	bl	8000c30 <NVIC_EncodePriority>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff5d 	bl	8000bdc <__NVIC_SetPriority>
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff31 	bl	8000ba0 <__NVIC_EnableIRQ>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ffa2 	bl	8000c98 <SysTick_Config>
 8000d54:	4603      	mov	r3, r0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6e:	e17f      	b.n	8001070 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	2101      	movs	r1, #1
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 8171 	beq.w	800106a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d003      	beq.n	8000d98 <HAL_GPIO_Init+0x38>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b12      	cmp	r3, #18
 8000d96:	d123      	bne.n	8000de0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	08da      	lsrs	r2, r3, #3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3208      	adds	r2, #8
 8000da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	220f      	movs	r2, #15
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	691a      	ldr	r2, [r3, #16]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	08da      	lsrs	r2, r3, #3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3208      	adds	r2, #8
 8000dda:	6939      	ldr	r1, [r7, #16]
 8000ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0203 	and.w	r2, r3, #3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d00b      	beq.n	8000e34 <HAL_GPIO_Init+0xd4>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d007      	beq.n	8000e34 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e28:	2b11      	cmp	r3, #17
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b12      	cmp	r3, #18
 8000e32:	d130      	bne.n	8000e96 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	68da      	ldr	r2, [r3, #12]
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	091b      	lsrs	r3, r3, #4
 8000e80:	f003 0201 	and.w	r2, r3, #1
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d118      	bne.n	8000ed4 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	f003 0201 	and.w	r2, r3, #1
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 80ac 	beq.w	800106a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	4b5e      	ldr	r3, [pc, #376]	; (800108c <HAL_GPIO_Init+0x32c>)
 8000f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f16:	4a5d      	ldr	r2, [pc, #372]	; (800108c <HAL_GPIO_Init+0x32c>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f1e:	4b5b      	ldr	r3, [pc, #364]	; (800108c <HAL_GPIO_Init+0x32c>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f2a:	4a59      	ldr	r2, [pc, #356]	; (8001090 <HAL_GPIO_Init+0x330>)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3302      	adds	r3, #2
 8000f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	220f      	movs	r2, #15
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f54:	d025      	beq.n	8000fa2 <HAL_GPIO_Init+0x242>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_GPIO_Init+0x334>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d01f      	beq.n	8000f9e <HAL_GPIO_Init+0x23e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <HAL_GPIO_Init+0x338>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d019      	beq.n	8000f9a <HAL_GPIO_Init+0x23a>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_GPIO_Init+0x33c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x236>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_GPIO_Init+0x340>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x232>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4a      	ldr	r2, [pc, #296]	; (80010a4 <HAL_GPIO_Init+0x344>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x22e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a49      	ldr	r2, [pc, #292]	; (80010a8 <HAL_GPIO_Init+0x348>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x22a>
 8000f86:	2306      	movs	r3, #6
 8000f88:	e00c      	b.n	8000fa4 <HAL_GPIO_Init+0x244>
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	e00a      	b.n	8000fa4 <HAL_GPIO_Init+0x244>
 8000f8e:	2305      	movs	r3, #5
 8000f90:	e008      	b.n	8000fa4 <HAL_GPIO_Init+0x244>
 8000f92:	2304      	movs	r3, #4
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x244>
 8000f96:	2303      	movs	r3, #3
 8000f98:	e004      	b.n	8000fa4 <HAL_GPIO_Init+0x244>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_Init+0x244>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_Init+0x244>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	f002 0203 	and.w	r2, r2, #3
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	4093      	lsls	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fb4:	4936      	ldr	r1, [pc, #216]	; (8001090 <HAL_GPIO_Init+0x330>)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fc2:	4b3a      	ldr	r3, [pc, #232]	; (80010ac <HAL_GPIO_Init+0x34c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fe6:	4a31      	ldr	r2, [pc, #196]	; (80010ac <HAL_GPIO_Init+0x34c>)
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <HAL_GPIO_Init+0x34c>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001010:	4a26      	ldr	r2, [pc, #152]	; (80010ac <HAL_GPIO_Init+0x34c>)
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <HAL_GPIO_Init+0x34c>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <HAL_GPIO_Init+0x34c>)
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_GPIO_Init+0x34c>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43db      	mvns	r3, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001064:	4a11      	ldr	r2, [pc, #68]	; (80010ac <HAL_GPIO_Init+0x34c>)
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa22 f303 	lsr.w	r3, r2, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	f47f ae78 	bne.w	8000d70 <HAL_GPIO_Init+0x10>
  }
}
 8001080:	bf00      	nop
 8001082:	371c      	adds	r7, #28
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	40021000 	.word	0x40021000
 8001090:	40010000 	.word	0x40010000
 8001094:	48000400 	.word	0x48000400
 8001098:	48000800 	.word	0x48000800
 800109c:	48000c00 	.word	0x48000c00
 80010a0:	48001000 	.word	0x48001000
 80010a4:	48001400 	.word	0x48001400
 80010a8:	48001800 	.word	0x48001800
 80010ac:	40010400 	.word	0x40010400

080010b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
 80010bc:	4613      	mov	r3, r2
 80010be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c0:	787b      	ldrb	r3, [r7, #1]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010ec:	695a      	ldr	r2, [r3, #20]
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d006      	beq.n	8001104 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	4618      	mov	r0, r3
 8001100:	f004 f980 	bl	8005404 <HAL_GPIO_EXTI_Callback>
  }
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40010400 	.word	0x40010400

08001110 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <HAL_PWREx_GetVoltageRange+0x18>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40007000 	.word	0x40007000

0800112c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800113a:	d130      	bne.n	800119e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800113c:	4b23      	ldr	r3, [pc, #140]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001148:	d038      	beq.n	80011bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001152:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001158:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2232      	movs	r2, #50	; 0x32
 8001160:	fb02 f303 	mul.w	r3, r2, r3
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	0c9b      	lsrs	r3, r3, #18
 800116c:	3301      	adds	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001170:	e002      	b.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3b01      	subs	r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001184:	d102      	bne.n	800118c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1f2      	bne.n	8001172 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001198:	d110      	bne.n	80011bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e00f      	b.n	80011be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011aa:	d007      	beq.n	80011bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011b4:	4a05      	ldr	r2, [pc, #20]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40007000 	.word	0x40007000
 80011d0:	20000008 	.word	0x20000008
 80011d4:	431bde83 	.word	0x431bde83

080011d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e39d      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ea:	4ba4      	ldr	r3, [pc, #656]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f4:	4ba1      	ldr	r3, [pc, #644]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 80e1 	beq.w	80013ce <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d007      	beq.n	8001222 <HAL_RCC_OscConfig+0x4a>
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	2b0c      	cmp	r3, #12
 8001216:	f040 8088 	bne.w	800132a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b01      	cmp	r3, #1
 800121e:	f040 8084 	bne.w	800132a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001222:	4b96      	ldr	r3, [pc, #600]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <HAL_RCC_OscConfig+0x62>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e375      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a1a      	ldr	r2, [r3, #32]
 800123e:	4b8f      	ldr	r3, [pc, #572]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d004      	beq.n	8001254 <HAL_RCC_OscConfig+0x7c>
 800124a:	4b8c      	ldr	r3, [pc, #560]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001252:	e005      	b.n	8001260 <HAL_RCC_OscConfig+0x88>
 8001254:	4b89      	ldr	r3, [pc, #548]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001260:	4293      	cmp	r3, r2
 8001262:	d223      	bcs.n	80012ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fd09 	bl	8001c80 <RCC_SetFlashLatencyFromMSIRange>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e356      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001278:	4b80      	ldr	r3, [pc, #512]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a7f      	ldr	r2, [pc, #508]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 800127e:	f043 0308 	orr.w	r3, r3, #8
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b7d      	ldr	r3, [pc, #500]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	497a      	ldr	r1, [pc, #488]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001296:	4b79      	ldr	r3, [pc, #484]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	4975      	ldr	r1, [pc, #468]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
 80012aa:	e022      	b.n	80012f2 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ac:	4b73      	ldr	r3, [pc, #460]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a72      	ldr	r2, [pc, #456]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 80012b2:	f043 0308 	orr.w	r3, r3, #8
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b70      	ldr	r3, [pc, #448]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	496d      	ldr	r1, [pc, #436]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ca:	4b6c      	ldr	r3, [pc, #432]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	4968      	ldr	r1, [pc, #416]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fccc 	bl	8001c80 <RCC_SetFlashLatencyFromMSIRange>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e319      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012f2:	f000 fc03 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 80012f6:	4601      	mov	r1, r0
 80012f8:	4b60      	ldr	r3, [pc, #384]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	4a5f      	ldr	r2, [pc, #380]	; (8001480 <HAL_RCC_OscConfig+0x2a8>)
 8001304:	5cd3      	ldrb	r3, [r2, r3]
 8001306:	f003 031f 	and.w	r3, r3, #31
 800130a:	fa21 f303 	lsr.w	r3, r1, r3
 800130e:	4a5d      	ldr	r2, [pc, #372]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001312:	4b5d      	ldr	r3, [pc, #372]	; (8001488 <HAL_RCC_OscConfig+0x2b0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fb96 	bl	8000a48 <HAL_InitTick>
 800131c:	4603      	mov	r3, r0
 800131e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d052      	beq.n	80013cc <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	e2fd      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d032      	beq.n	8001398 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001332:	4b52      	ldr	r3, [pc, #328]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a51      	ldr	r2, [pc, #324]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800133e:	f7ff fbcf 	bl	8000ae0 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001346:	f7ff fbcb 	bl	8000ae0 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e2e6      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001358:	4b48      	ldr	r3, [pc, #288]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001364:	4b45      	ldr	r3, [pc, #276]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a44      	ldr	r2, [pc, #272]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 800136a:	f043 0308 	orr.w	r3, r3, #8
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b42      	ldr	r3, [pc, #264]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	493f      	ldr	r1, [pc, #252]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001382:	4b3e      	ldr	r3, [pc, #248]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	493a      	ldr	r1, [pc, #232]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001392:	4313      	orrs	r3, r2
 8001394:	604b      	str	r3, [r1, #4]
 8001396:	e01a      	b.n	80013ce <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001398:	4b38      	ldr	r3, [pc, #224]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a37      	ldr	r2, [pc, #220]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 800139e:	f023 0301 	bic.w	r3, r3, #1
 80013a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fb9c 	bl	8000ae0 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ac:	f7ff fb98 	bl	8000ae0 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e2b3      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013be:	4b2f      	ldr	r3, [pc, #188]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x1d4>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d074      	beq.n	80014c4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d005      	beq.n	80013ec <HAL_RCC_OscConfig+0x214>
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d10e      	bne.n	8001404 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d10b      	bne.n	8001404 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	4b23      	ldr	r3, [pc, #140]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d064      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2ea>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d160      	bne.n	80014c2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e290      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140c:	d106      	bne.n	800141c <HAL_RCC_OscConfig+0x244>
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a1a      	ldr	r2, [pc, #104]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e01d      	b.n	8001458 <HAL_RCC_OscConfig+0x280>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x268>
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a14      	ldr	r2, [pc, #80]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a11      	ldr	r2, [pc, #68]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0x280>
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0d      	ldr	r2, [pc, #52]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0a      	ldr	r2, [pc, #40]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d01c      	beq.n	800149a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fb3e 	bl	8000ae0 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001466:	e011      	b.n	800148c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fb3a 	bl	8000ae0 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d90a      	bls.n	800148c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e255      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000
 8001480:	08006824 	.word	0x08006824
 8001484:	20000008 	.word	0x20000008
 8001488:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148c:	4bae      	ldr	r3, [pc, #696]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0e7      	beq.n	8001468 <HAL_RCC_OscConfig+0x290>
 8001498:	e014      	b.n	80014c4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149a:	f7ff fb21 	bl	8000ae0 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a2:	f7ff fb1d 	bl	8000ae0 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b64      	cmp	r3, #100	; 0x64
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e238      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014b4:	4ba4      	ldr	r3, [pc, #656]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f0      	bne.n	80014a2 <HAL_RCC_OscConfig+0x2ca>
 80014c0:	e000      	b.n	80014c4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d060      	beq.n	8001592 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	d005      	beq.n	80014e2 <HAL_RCC_OscConfig+0x30a>
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b0c      	cmp	r3, #12
 80014da:	d119      	bne.n	8001510 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d116      	bne.n	8001510 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e2:	4b99      	ldr	r3, [pc, #612]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <HAL_RCC_OscConfig+0x322>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e215      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fa:	4b93      	ldr	r3, [pc, #588]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	061b      	lsls	r3, r3, #24
 8001508:	498f      	ldr	r1, [pc, #572]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800150e:	e040      	b.n	8001592 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d023      	beq.n	8001560 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001518:	4b8b      	ldr	r3, [pc, #556]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a8a      	ldr	r2, [pc, #552]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 800151e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fadc 	bl	8000ae0 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152c:	f7ff fad8 	bl	8000ae0 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e1f3      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800153e:	4b82      	ldr	r3, [pc, #520]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154a:	4b7f      	ldr	r3, [pc, #508]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	061b      	lsls	r3, r3, #24
 8001558:	497b      	ldr	r1, [pc, #492]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]
 800155e:	e018      	b.n	8001592 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001560:	4b79      	ldr	r3, [pc, #484]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a78      	ldr	r2, [pc, #480]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 8001566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800156a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fab8 	bl	8000ae0 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fab4 	bl	8000ae0 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e1cf      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001586:	4b70      	ldr	r3, [pc, #448]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d03c      	beq.n	8001618 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d01c      	beq.n	80015e0 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a6:	4b68      	ldr	r3, [pc, #416]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80015a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ac:	4a66      	ldr	r2, [pc, #408]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b6:	f7ff fa93 	bl	8000ae0 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015be:	f7ff fa8f 	bl	8000ae0 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e1aa      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d0:	4b5d      	ldr	r3, [pc, #372]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80015d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0ef      	beq.n	80015be <HAL_RCC_OscConfig+0x3e6>
 80015de:	e01b      	b.n	8001618 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e0:	4b59      	ldr	r3, [pc, #356]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80015e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e6:	4a58      	ldr	r2, [pc, #352]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fa76 	bl	8000ae0 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f8:	f7ff fa72 	bl	8000ae0 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e18d      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800160a:	4b4f      	ldr	r3, [pc, #316]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 800160c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1ef      	bne.n	80015f8 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80a5 	beq.w	8001770 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800162a:	4b47      	ldr	r3, [pc, #284]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10d      	bne.n	8001652 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	4b44      	ldr	r3, [pc, #272]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 8001638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163a:	4a43      	ldr	r2, [pc, #268]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 800163c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001640:	6593      	str	r3, [r2, #88]	; 0x58
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800164e:	2301      	movs	r3, #1
 8001650:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001652:	4b3e      	ldr	r3, [pc, #248]	; (800174c <HAL_RCC_OscConfig+0x574>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165a:	2b00      	cmp	r3, #0
 800165c:	d118      	bne.n	8001690 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800165e:	4b3b      	ldr	r3, [pc, #236]	; (800174c <HAL_RCC_OscConfig+0x574>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a3a      	ldr	r2, [pc, #232]	; (800174c <HAL_RCC_OscConfig+0x574>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166a:	f7ff fa39 	bl	8000ae0 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001672:	f7ff fa35 	bl	8000ae0 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e150      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001684:	4b31      	ldr	r3, [pc, #196]	; (800174c <HAL_RCC_OscConfig+0x574>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d108      	bne.n	80016aa <HAL_RCC_OscConfig+0x4d2>
 8001698:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169e:	4a2a      	ldr	r2, [pc, #168]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a8:	e024      	b.n	80016f4 <HAL_RCC_OscConfig+0x51c>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d110      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4fc>
 80016b2:	4b25      	ldr	r3, [pc, #148]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80016b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b8:	4a23      	ldr	r2, [pc, #140]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80016c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c8:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d2:	e00f      	b.n	80016f4 <HAL_RCC_OscConfig+0x51c>
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80016d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016da:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80016e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ea:	4a17      	ldr	r2, [pc, #92]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 80016ec:	f023 0304 	bic.w	r3, r3, #4
 80016f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d016      	beq.n	800172a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fc:	f7ff f9f0 	bl	8000ae0 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001702:	e00a      	b.n	800171a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f7ff f9ec 	bl	8000ae0 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e105      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_OscConfig+0x570>)
 800171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0ed      	beq.n	8001704 <HAL_RCC_OscConfig+0x52c>
 8001728:	e019      	b.n	800175e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172a:	f7ff f9d9 	bl	8000ae0 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001730:	e00e      	b.n	8001750 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7ff f9d5 	bl	8000ae0 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001740:	4293      	cmp	r3, r2
 8001742:	d905      	bls.n	8001750 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e0ee      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
 8001748:	40021000 	.word	0x40021000
 800174c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001750:	4b77      	ldr	r3, [pc, #476]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1e9      	bne.n	8001732 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800175e:	7ffb      	ldrb	r3, [r7, #31]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001764:	4b72      	ldr	r3, [pc, #456]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 8001766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001768:	4a71      	ldr	r2, [pc, #452]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 800176a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800176e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80d5 	beq.w	8001924 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	2b0c      	cmp	r3, #12
 800177e:	f000 808e 	beq.w	800189e <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	2b02      	cmp	r3, #2
 8001788:	d15b      	bne.n	8001842 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178a:	4b69      	ldr	r3, [pc, #420]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a68      	ldr	r2, [pc, #416]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 8001790:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001796:	f7ff f9a3 	bl	8000ae0 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179e:	f7ff f99f 	bl	8000ae0 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e0ba      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b0:	4b5f      	ldr	r3, [pc, #380]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1f0      	bne.n	800179e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017bc:	4b5c      	ldr	r3, [pc, #368]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	4b5c      	ldr	r3, [pc, #368]	; (8001934 <HAL_RCC_OscConfig+0x75c>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017cc:	3a01      	subs	r2, #1
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	4311      	orrs	r1, r2
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017d6:	0212      	lsls	r2, r2, #8
 80017d8:	4311      	orrs	r1, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017de:	0852      	lsrs	r2, r2, #1
 80017e0:	3a01      	subs	r2, #1
 80017e2:	0552      	lsls	r2, r2, #21
 80017e4:	4311      	orrs	r1, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017ea:	0852      	lsrs	r2, r2, #1
 80017ec:	3a01      	subs	r2, #1
 80017ee:	0652      	lsls	r2, r2, #25
 80017f0:	4311      	orrs	r1, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017f6:	0912      	lsrs	r2, r2, #4
 80017f8:	0452      	lsls	r2, r2, #17
 80017fa:	430a      	orrs	r2, r1
 80017fc:	494c      	ldr	r1, [pc, #304]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001802:	4b4b      	ldr	r3, [pc, #300]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a4a      	ldr	r2, [pc, #296]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 8001808:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800180c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800180e:	4b48      	ldr	r3, [pc, #288]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	4a47      	ldr	r2, [pc, #284]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 8001814:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001818:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff f961 	bl	8000ae0 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001822:	f7ff f95d 	bl	8000ae0 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e078      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001834:	4b3e      	ldr	r3, [pc, #248]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x64a>
 8001840:	e070      	b.n	8001924 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001842:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a3a      	ldr	r2, [pc, #232]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 8001848:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800184c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800184e:	4b38      	ldr	r3, [pc, #224]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d105      	bne.n	8001866 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800185a:	4b35      	ldr	r3, [pc, #212]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	4a34      	ldr	r2, [pc, #208]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 8001860:	f023 0303 	bic.w	r3, r3, #3
 8001864:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001866:	4b32      	ldr	r3, [pc, #200]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	4a31      	ldr	r2, [pc, #196]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 800186c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001874:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001876:	f7ff f933 	bl	8000ae0 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187e:	f7ff f92f 	bl	8000ae0 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e04a      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f0      	bne.n	800187e <HAL_RCC_OscConfig+0x6a6>
 800189c:	e042      	b.n	8001924 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e03d      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80018aa:	4b21      	ldr	r3, [pc, #132]	; (8001930 <HAL_RCC_OscConfig+0x758>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 0203 	and.w	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d130      	bne.n	8001920 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	3b01      	subs	r3, #1
 80018ca:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d127      	bne.n	8001920 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018da:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d11f      	bne.n	8001920 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018ea:	2a07      	cmp	r2, #7
 80018ec:	bf14      	ite	ne
 80018ee:	2201      	movne	r2, #1
 80018f0:	2200      	moveq	r2, #0
 80018f2:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d113      	bne.n	8001920 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001902:	085b      	lsrs	r3, r3, #1
 8001904:	3b01      	subs	r3, #1
 8001906:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d109      	bne.n	8001920 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	085b      	lsrs	r3, r3, #1
 8001918:	3b01      	subs	r3, #1
 800191a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	f99d808c 	.word	0xf99d808c

08001938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0c8      	b.n	8001ade <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800194c:	4b66      	ldr	r3, [pc, #408]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d910      	bls.n	800197c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b63      	ldr	r3, [pc, #396]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 0207 	bic.w	r2, r3, #7
 8001962:	4961      	ldr	r1, [pc, #388]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196a:	4b5f      	ldr	r3, [pc, #380]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0b0      	b.n	8001ade <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d04c      	beq.n	8001a22 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b03      	cmp	r3, #3
 800198e:	d107      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001990:	4b56      	ldr	r3, [pc, #344]	; (8001aec <HAL_RCC_ClockConfig+0x1b4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d121      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e09e      	b.n	8001ade <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a8:	4b50      	ldr	r3, [pc, #320]	; (8001aec <HAL_RCC_ClockConfig+0x1b4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d115      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e092      	b.n	8001ade <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d107      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019c0:	4b4a      	ldr	r3, [pc, #296]	; (8001aec <HAL_RCC_ClockConfig+0x1b4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d109      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e086      	b.n	8001ade <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d0:	4b46      	ldr	r3, [pc, #280]	; (8001aec <HAL_RCC_ClockConfig+0x1b4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e07e      	b.n	8001ade <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019e0:	4b42      	ldr	r3, [pc, #264]	; (8001aec <HAL_RCC_ClockConfig+0x1b4>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f023 0203 	bic.w	r2, r3, #3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	493f      	ldr	r1, [pc, #252]	; (8001aec <HAL_RCC_ClockConfig+0x1b4>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f2:	f7ff f875 	bl	8000ae0 <HAL_GetTick>
 80019f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f8:	e00a      	b.n	8001a10 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fa:	f7ff f871 	bl	8000ae0 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e066      	b.n	8001ade <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a10:	4b36      	ldr	r3, [pc, #216]	; (8001aec <HAL_RCC_ClockConfig+0x1b4>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 020c 	and.w	r2, r3, #12
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d1eb      	bne.n	80019fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d008      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a2e:	4b2f      	ldr	r3, [pc, #188]	; (8001aec <HAL_RCC_ClockConfig+0x1b4>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	492c      	ldr	r1, [pc, #176]	; (8001aec <HAL_RCC_ClockConfig+0x1b4>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a40:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d210      	bcs.n	8001a70 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 0207 	bic.w	r2, r3, #7
 8001a56:	4924      	ldr	r1, [pc, #144]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e036      	b.n	8001ade <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_RCC_ClockConfig+0x1b4>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4918      	ldr	r1, [pc, #96]	; (8001aec <HAL_RCC_ClockConfig+0x1b4>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d009      	beq.n	8001aae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <HAL_RCC_ClockConfig+0x1b4>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4910      	ldr	r1, [pc, #64]	; (8001aec <HAL_RCC_ClockConfig+0x1b4>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aae:	f000 f825 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8001ab2:	4601      	mov	r1, r0
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_RCC_ClockConfig+0x1b4>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	4a0c      	ldr	r2, [pc, #48]	; (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	5cd3      	ldrb	r3, [r2, r3]
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	fa21 f303 	lsr.w	r3, r1, r3
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe ffb8 	bl	8000a48 <HAL_InitTick>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	72fb      	strb	r3, [r7, #11]

  return status;
 8001adc:	7afb      	ldrb	r3, [r7, #11]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40022000 	.word	0x40022000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	08006824 	.word	0x08006824
 8001af4:	20000008 	.word	0x20000008
 8001af8:	20000000 	.word	0x20000000

08001afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b14:	4b3a      	ldr	r3, [pc, #232]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x34>
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	d121      	bne.n	8001b6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d11e      	bne.n	8001b6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b30:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b3c:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	e005      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b4c:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b58:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10d      	bne.n	8001b84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d102      	bne.n	8001b7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b74:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	e004      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x110>)
 8001b82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	2b0c      	cmp	r3, #12
 8001b88:	d133      	bne.n	8001bf2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d002      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0xa4>
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d003      	beq.n	8001ba6 <HAL_RCC_GetSysClockFreq+0xaa>
 8001b9e:	e005      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ba2:	617b      	str	r3, [r7, #20]
      break;
 8001ba4:	e005      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ba8:	617b      	str	r3, [r7, #20]
      break;
 8001baa:	e002      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	617b      	str	r3, [r7, #20]
      break;
 8001bb0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	fb02 f203 	mul.w	r2, r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0e5b      	lsrs	r3, r3, #25
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	3301      	adds	r3, #1
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bf2:	69bb      	ldr	r3, [r7, #24]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3724      	adds	r7, #36	; 0x24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40021000 	.word	0x40021000
 8001c04:	0800683c 	.word	0x0800683c
 8001c08:	00f42400 	.word	0x00f42400
 8001c0c:	007a1200 	.word	0x007a1200

08001c10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000008 	.word	0x20000008

08001c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c2c:	f7ff fff0 	bl	8001c10 <HAL_RCC_GetHCLKFreq>
 8001c30:	4601      	mov	r1, r0
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c3e:	5cd3      	ldrb	r3, [r2, r3]
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08006834 	.word	0x08006834

08001c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c58:	f7ff ffda 	bl	8001c10 <HAL_RCC_GetHCLKFreq>
 8001c5c:	4601      	mov	r1, r0
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0adb      	lsrs	r3, r3, #11
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c6a:	5cd3      	ldrb	r3, [r2, r3]
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	08006834 	.word	0x08006834

08001c80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c98:	f7ff fa3a 	bl	8001110 <HAL_PWREx_GetVoltageRange>
 8001c9c:	6178      	str	r0, [r7, #20]
 8001c9e:	e014      	b.n	8001cca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	4a24      	ldr	r2, [pc, #144]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001caa:	6593      	str	r3, [r2, #88]	; 0x58
 8001cac:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cb8:	f7ff fa2a 	bl	8001110 <HAL_PWREx_GetVoltageRange>
 8001cbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cd0:	d10b      	bne.n	8001cea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b80      	cmp	r3, #128	; 0x80
 8001cd6:	d919      	bls.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2ba0      	cmp	r3, #160	; 0xa0
 8001cdc:	d902      	bls.n	8001ce4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cde:	2302      	movs	r3, #2
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	e013      	b.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	e010      	b.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b80      	cmp	r3, #128	; 0x80
 8001cee:	d902      	bls.n	8001cf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	e00a      	b.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b80      	cmp	r3, #128	; 0x80
 8001cfa:	d102      	bne.n	8001d02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	e004      	b.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b70      	cmp	r3, #112	; 0x70
 8001d06:	d101      	bne.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d08:	2301      	movs	r3, #1
 8001d0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 0207 	bic.w	r2, r3, #7
 8001d14:	4909      	ldr	r1, [pc, #36]	; (8001d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d001      	beq.n	8001d2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40022000 	.word	0x40022000

08001d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d48:	2300      	movs	r3, #0
 8001d4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d03f      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d64:	d01c      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d6a:	d802      	bhi.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00e      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001d70:	e01f      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001d72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d76:	d003      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001d78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d7c:	d01c      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001d7e:	e018      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d80:	4b85      	ldr	r3, [pc, #532]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4a84      	ldr	r2, [pc, #528]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d8c:	e015      	b.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 fab9 	bl	800230c <RCCEx_PLLSAI1_Config>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d9e:	e00c      	b.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3320      	adds	r3, #32
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 fba0 	bl	80024ec <RCCEx_PLLSAI2_Config>
 8001dac:	4603      	mov	r3, r0
 8001dae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001db0:	e003      	b.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	74fb      	strb	r3, [r7, #19]
      break;
 8001db6:	e000      	b.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dba:	7cfb      	ldrb	r3, [r7, #19]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10b      	bne.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dc0:	4b75      	ldr	r3, [pc, #468]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dce:	4972      	ldr	r1, [pc, #456]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dd6:	e001      	b.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dd8:	7cfb      	ldrb	r3, [r7, #19]
 8001dda:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d03f      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df0:	d01c      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001df2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df6:	d802      	bhi.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00e      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001dfc:	e01f      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001dfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e02:	d003      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001e04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e08:	d01c      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001e0a:	e018      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e0c:	4b62      	ldr	r3, [pc, #392]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4a61      	ldr	r2, [pc, #388]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e18:	e015      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 fa73 	bl	800230c <RCCEx_PLLSAI1_Config>
 8001e26:	4603      	mov	r3, r0
 8001e28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e2a:	e00c      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3320      	adds	r3, #32
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 fb5a 	bl	80024ec <RCCEx_PLLSAI2_Config>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e3c:	e003      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	74fb      	strb	r3, [r7, #19]
      break;
 8001e42:	e000      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e46:	7cfb      	ldrb	r3, [r7, #19]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10b      	bne.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e4c:	4b52      	ldr	r3, [pc, #328]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e5a:	494f      	ldr	r1, [pc, #316]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e62:	e001      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e64:	7cfb      	ldrb	r3, [r7, #19]
 8001e66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a0 	beq.w	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e7a:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00d      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e90:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	4a40      	ldr	r2, [pc, #256]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9c:	4b3e      	ldr	r3, [pc, #248]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eac:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a3a      	ldr	r2, [pc, #232]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eb8:	f7fe fe12 	bl	8000ae0 <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ebe:	e009      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec0:	f7fe fe0e 	bl	8000ae0 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d902      	bls.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	74fb      	strb	r3, [r7, #19]
        break;
 8001ed2:	e005      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ed4:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ef      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001ee0:	7cfb      	ldrb	r3, [r7, #19]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d15c      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ee6:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01f      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d019      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f16:	4a20      	ldr	r2, [pc, #128]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f26:	4a1c      	ldr	r2, [pc, #112]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d016      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7fe fdcd 	bl	8000ae0 <HAL_GetTick>
 8001f46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f48:	e00b      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7fe fdc9 	bl	8000ae0 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d902      	bls.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	74fb      	strb	r3, [r7, #19]
            break;
 8001f60:	e006      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0ec      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001f70:	7cfb      	ldrb	r3, [r7, #19]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f86:	4904      	ldr	r1, [pc, #16]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f8e:	e009      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f90:	7cfb      	ldrb	r3, [r7, #19]
 8001f92:	74bb      	strb	r3, [r7, #18]
 8001f94:	e006      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa0:	7cfb      	ldrb	r3, [r7, #19]
 8001fa2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa4:	7c7b      	ldrb	r3, [r7, #17]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d105      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001faa:	4b9e      	ldr	r3, [pc, #632]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fae:	4a9d      	ldr	r2, [pc, #628]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fc2:	4b98      	ldr	r3, [pc, #608]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc8:	f023 0203 	bic.w	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd0:	4994      	ldr	r1, [pc, #592]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fe4:	4b8f      	ldr	r3, [pc, #572]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fea:	f023 020c 	bic.w	r2, r3, #12
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff2:	498c      	ldr	r1, [pc, #560]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002006:	4b87      	ldr	r3, [pc, #540]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	4983      	ldr	r1, [pc, #524]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00a      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002028:	4b7e      	ldr	r3, [pc, #504]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	497b      	ldr	r1, [pc, #492]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800204a:	4b76      	ldr	r3, [pc, #472]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800204c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002058:	4972      	ldr	r1, [pc, #456]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800206c:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002072:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	496a      	ldr	r1, [pc, #424]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00a      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800208e:	4b65      	ldr	r3, [pc, #404]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002094:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	4961      	ldr	r1, [pc, #388]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00a      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020b0:	4b5c      	ldr	r3, [pc, #368]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020be:	4959      	ldr	r1, [pc, #356]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020d2:	4b54      	ldr	r3, [pc, #336]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e0:	4950      	ldr	r1, [pc, #320]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020f4:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002102:	4948      	ldr	r1, [pc, #288]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002116:	4b43      	ldr	r3, [pc, #268]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	493f      	ldr	r1, [pc, #252]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d028      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002138:	4b3a      	ldr	r3, [pc, #232]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002146:	4937      	ldr	r1, [pc, #220]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002156:	d106      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002158:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a31      	ldr	r2, [pc, #196]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800215e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002162:	60d3      	str	r3, [r2, #12]
 8002164:	e011      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800216a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800216e:	d10c      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3304      	adds	r3, #4
 8002174:	2101      	movs	r1, #1
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f8c8 	bl	800230c <RCCEx_PLLSAI1_Config>
 800217c:	4603      	mov	r3, r0
 800217e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002186:	7cfb      	ldrb	r3, [r7, #19]
 8002188:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d028      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002196:	4b23      	ldr	r3, [pc, #140]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	491f      	ldr	r1, [pc, #124]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021b4:	d106      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021c0:	60d3      	str	r3, [r2, #12]
 80021c2:	e011      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3304      	adds	r3, #4
 80021d2:	2101      	movs	r1, #1
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 f899 	bl	800230c <RCCEx_PLLSAI1_Config>
 80021da:	4603      	mov	r3, r0
 80021dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021de:	7cfb      	ldrb	r3, [r7, #19]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d02b      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002202:	4908      	ldr	r1, [pc, #32]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800220e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002212:	d109      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a02      	ldr	r2, [pc, #8]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800221a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800221e:	60d3      	str	r3, [r2, #12]
 8002220:	e014      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002230:	d10c      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3304      	adds	r3, #4
 8002236:	2101      	movs	r1, #1
 8002238:	4618      	mov	r0, r3
 800223a:	f000 f867 	bl	800230c <RCCEx_PLLSAI1_Config>
 800223e:	4603      	mov	r3, r0
 8002240:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002242:	7cfb      	ldrb	r3, [r7, #19]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d02f      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002258:	4b2b      	ldr	r3, [pc, #172]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002266:	4928      	ldr	r1, [pc, #160]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002276:	d10d      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3304      	adds	r3, #4
 800227c:	2102      	movs	r1, #2
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f844 	bl	800230c <RCCEx_PLLSAI1_Config>
 8002284:	4603      	mov	r3, r0
 8002286:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d014      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800228e:	7cfb      	ldrb	r3, [r7, #19]
 8002290:	74bb      	strb	r3, [r7, #18]
 8002292:	e011      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800229c:	d10c      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3320      	adds	r3, #32
 80022a2:	2102      	movs	r1, #2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 f921 	bl	80024ec <RCCEx_PLLSAI2_Config>
 80022aa:	4603      	mov	r3, r0
 80022ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80022b4:	7cfb      	ldrb	r3, [r7, #19]
 80022b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022d2:	490d      	ldr	r1, [pc, #52]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022f6:	4904      	ldr	r1, [pc, #16]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000

0800230c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800231a:	4b73      	ldr	r3, [pc, #460]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d018      	beq.n	8002358 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002326:	4b70      	ldr	r3, [pc, #448]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f003 0203 	and.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d10d      	bne.n	8002352 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
       ||
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800233e:	4b6a      	ldr	r3, [pc, #424]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
       ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d044      	beq.n	80023dc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	e041      	b.n	80023dc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d00c      	beq.n	800237a <RCCEx_PLLSAI1_Config+0x6e>
 8002360:	2b03      	cmp	r3, #3
 8002362:	d013      	beq.n	800238c <RCCEx_PLLSAI1_Config+0x80>
 8002364:	2b01      	cmp	r3, #1
 8002366:	d120      	bne.n	80023aa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002368:	4b5f      	ldr	r3, [pc, #380]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d11d      	bne.n	80023b0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002378:	e01a      	b.n	80023b0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800237a:	4b5b      	ldr	r3, [pc, #364]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002382:	2b00      	cmp	r3, #0
 8002384:	d116      	bne.n	80023b4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238a:	e013      	b.n	80023b4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800238c:	4b56      	ldr	r3, [pc, #344]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10f      	bne.n	80023b8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002398:	4b53      	ldr	r3, [pc, #332]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d109      	bne.n	80023b8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023a8:	e006      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
      break;
 80023ae:	e004      	b.n	80023ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80023b0:	bf00      	nop
 80023b2:	e002      	b.n	80023ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80023b4:	bf00      	nop
 80023b6:	e000      	b.n	80023ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80023b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10d      	bne.n	80023dc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023c0:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6819      	ldr	r1, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	430b      	orrs	r3, r1
 80023d6:	4944      	ldr	r1, [pc, #272]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d17d      	bne.n	80024de <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023e2:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a40      	ldr	r2, [pc, #256]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ee:	f7fe fb77 	bl	8000ae0 <HAL_GetTick>
 80023f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023f4:	e009      	b.n	800240a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023f6:	f7fe fb73 	bl	8000ae0 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d902      	bls.n	800240a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	73fb      	strb	r3, [r7, #15]
        break;
 8002408:	e005      	b.n	8002416 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800240a:	4b37      	ldr	r3, [pc, #220]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1ef      	bne.n	80023f6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d160      	bne.n	80024de <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d111      	bne.n	8002446 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002422:	4b31      	ldr	r3, [pc, #196]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800242a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6892      	ldr	r2, [r2, #8]
 8002432:	0211      	lsls	r1, r2, #8
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	68d2      	ldr	r2, [r2, #12]
 8002438:	0912      	lsrs	r2, r2, #4
 800243a:	0452      	lsls	r2, r2, #17
 800243c:	430a      	orrs	r2, r1
 800243e:	492a      	ldr	r1, [pc, #168]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002440:	4313      	orrs	r3, r2
 8002442:	610b      	str	r3, [r1, #16]
 8002444:	e027      	b.n	8002496 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d112      	bne.n	8002472 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800244c:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002454:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6892      	ldr	r2, [r2, #8]
 800245c:	0211      	lsls	r1, r2, #8
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6912      	ldr	r2, [r2, #16]
 8002462:	0852      	lsrs	r2, r2, #1
 8002464:	3a01      	subs	r2, #1
 8002466:	0552      	lsls	r2, r2, #21
 8002468:	430a      	orrs	r2, r1
 800246a:	491f      	ldr	r1, [pc, #124]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800246c:	4313      	orrs	r3, r2
 800246e:	610b      	str	r3, [r1, #16]
 8002470:	e011      	b.n	8002496 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800247a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6892      	ldr	r2, [r2, #8]
 8002482:	0211      	lsls	r1, r2, #8
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6952      	ldr	r2, [r2, #20]
 8002488:	0852      	lsrs	r2, r2, #1
 800248a:	3a01      	subs	r2, #1
 800248c:	0652      	lsls	r2, r2, #25
 800248e:	430a      	orrs	r2, r1
 8002490:	4915      	ldr	r1, [pc, #84]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002492:	4313      	orrs	r3, r2
 8002494:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002496:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800249c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a2:	f7fe fb1d 	bl	8000ae0 <HAL_GetTick>
 80024a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024a8:	e009      	b.n	80024be <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024aa:	f7fe fb19 	bl	8000ae0 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d902      	bls.n	80024be <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	73fb      	strb	r3, [r7, #15]
          break;
 80024bc:	e005      	b.n	80024ca <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0ef      	beq.n	80024aa <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d106      	bne.n	80024de <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	4903      	ldr	r1, [pc, #12]	; (80024e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000

080024ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024fa:	4b68      	ldr	r3, [pc, #416]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d018      	beq.n	8002538 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002506:	4b65      	ldr	r3, [pc, #404]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0203 	and.w	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d10d      	bne.n	8002532 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
       ||
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800251e:	4b5f      	ldr	r3, [pc, #380]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
       ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d044      	beq.n	80025bc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	e041      	b.n	80025bc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d00c      	beq.n	800255a <RCCEx_PLLSAI2_Config+0x6e>
 8002540:	2b03      	cmp	r3, #3
 8002542:	d013      	beq.n	800256c <RCCEx_PLLSAI2_Config+0x80>
 8002544:	2b01      	cmp	r3, #1
 8002546:	d120      	bne.n	800258a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002548:	4b54      	ldr	r3, [pc, #336]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d11d      	bne.n	8002590 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002558:	e01a      	b.n	8002590 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800255a:	4b50      	ldr	r3, [pc, #320]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002562:	2b00      	cmp	r3, #0
 8002564:	d116      	bne.n	8002594 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800256a:	e013      	b.n	8002594 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800256c:	4b4b      	ldr	r3, [pc, #300]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10f      	bne.n	8002598 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002578:	4b48      	ldr	r3, [pc, #288]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002588:	e006      	b.n	8002598 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
      break;
 800258e:	e004      	b.n	800259a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002590:	bf00      	nop
 8002592:	e002      	b.n	800259a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002594:	bf00      	nop
 8002596:	e000      	b.n	800259a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002598:	bf00      	nop
    }

    if(status == HAL_OK)
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10d      	bne.n	80025bc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025a0:	4b3e      	ldr	r3, [pc, #248]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6819      	ldr	r1, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	430b      	orrs	r3, r1
 80025b6:	4939      	ldr	r1, [pc, #228]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d167      	bne.n	8002692 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025c2:	4b36      	ldr	r3, [pc, #216]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a35      	ldr	r2, [pc, #212]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ce:	f7fe fa87 	bl	8000ae0 <HAL_GetTick>
 80025d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025d4:	e009      	b.n	80025ea <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025d6:	f7fe fa83 	bl	8000ae0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d902      	bls.n	80025ea <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	73fb      	strb	r3, [r7, #15]
        break;
 80025e8:	e005      	b.n	80025f6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025ea:	4b2c      	ldr	r3, [pc, #176]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1ef      	bne.n	80025d6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d14a      	bne.n	8002692 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d111      	bne.n	8002626 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002602:	4b26      	ldr	r3, [pc, #152]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800260a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6892      	ldr	r2, [r2, #8]
 8002612:	0211      	lsls	r1, r2, #8
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	68d2      	ldr	r2, [r2, #12]
 8002618:	0912      	lsrs	r2, r2, #4
 800261a:	0452      	lsls	r2, r2, #17
 800261c:	430a      	orrs	r2, r1
 800261e:	491f      	ldr	r1, [pc, #124]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002620:	4313      	orrs	r3, r2
 8002622:	614b      	str	r3, [r1, #20]
 8002624:	e011      	b.n	800264a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800262e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6892      	ldr	r2, [r2, #8]
 8002636:	0211      	lsls	r1, r2, #8
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6912      	ldr	r2, [r2, #16]
 800263c:	0852      	lsrs	r2, r2, #1
 800263e:	3a01      	subs	r2, #1
 8002640:	0652      	lsls	r2, r2, #25
 8002642:	430a      	orrs	r2, r1
 8002644:	4915      	ldr	r1, [pc, #84]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a13      	ldr	r2, [pc, #76]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002656:	f7fe fa43 	bl	8000ae0 <HAL_GetTick>
 800265a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800265c:	e009      	b.n	8002672 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800265e:	f7fe fa3f 	bl	8000ae0 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d902      	bls.n	8002672 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	73fb      	strb	r3, [r7, #15]
          break;
 8002670:	e005      	b.n	800267e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0ef      	beq.n	800265e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d106      	bne.n	8002692 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	4903      	ldr	r1, [pc, #12]	; (800269c <RCCEx_PLLSAI2_Config+0x1b0>)
 800268e:	4313      	orrs	r3, r2
 8002690:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e07c      	b.n	80027ac <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d106      	bne.n	80026d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f002 fef5 	bl	80054bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2202      	movs	r2, #2
 80026d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026e8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026f2:	d902      	bls.n	80026fa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e002      	b.n	8002700 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002708:	d007      	beq.n	800271a <HAL_SPI_Init+0x7a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002712:	d002      	beq.n	800271a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10b      	bne.n	800273a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800272a:	d903      	bls.n	8002734 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
 8002732:	e002      	b.n	800273a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	ea42 0103 	orr.w	r1, r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	0c1b      	lsrs	r3, r3, #16
 800277a:	f003 0204 	and.w	r2, r3, #4
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	ea42 0103 	orr.w	r1, r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	430a      	orrs	r2, r1
 800279a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	4613      	mov	r3, r2
 80027c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_SPI_Transmit+0x22>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e150      	b.n	8002a78 <HAL_SPI_Transmit+0x2c4>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027de:	f7fe f97f 	bl	8000ae0 <HAL_GetTick>
 80027e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d002      	beq.n	80027fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027f4:	2302      	movs	r3, #2
 80027f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027f8:	e135      	b.n	8002a66 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <HAL_SPI_Transmit+0x52>
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	77fb      	strb	r3, [r7, #31]
    goto error;
 800280a:	e12c      	b.n	8002a66 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2203      	movs	r2, #3
 8002810:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	88fa      	ldrh	r2, [r7, #6]
 800282a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002856:	d107      	bne.n	8002868 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002866:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	d007      	beq.n	8002886 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002884:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800288e:	d94b      	bls.n	8002928 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_SPI_Transmit+0xea>
 8002898:	8afb      	ldrh	r3, [r7, #22]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d13e      	bne.n	800291c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	881a      	ldrh	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	1c9a      	adds	r2, r3, #2
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028c2:	e02b      	b.n	800291c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d112      	bne.n	80028f8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	881a      	ldrh	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	1c9a      	adds	r2, r3, #2
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028f6:	e011      	b.n	800291c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028f8:	f7fe f8f2 	bl	8000ae0 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d803      	bhi.n	8002910 <HAL_SPI_Transmit+0x15c>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290e:	d102      	bne.n	8002916 <HAL_SPI_Transmit+0x162>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	77fb      	strb	r3, [r7, #31]
          goto error;
 800291a:	e0a4      	b.n	8002a66 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ce      	bne.n	80028c4 <HAL_SPI_Transmit+0x110>
 8002926:	e07c      	b.n	8002a22 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_SPI_Transmit+0x182>
 8002930:	8afb      	ldrh	r3, [r7, #22]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d170      	bne.n	8002a18 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d912      	bls.n	8002966 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	881a      	ldrh	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	1c9a      	adds	r2, r3, #2
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b02      	subs	r3, #2
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002964:	e058      	b.n	8002a18 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	7812      	ldrb	r2, [r2, #0]
 8002972:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800298c:	e044      	b.n	8002a18 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b02      	cmp	r3, #2
 800299a:	d12b      	bne.n	80029f4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d912      	bls.n	80029cc <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029aa:	881a      	ldrh	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	1c9a      	adds	r2, r3, #2
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b02      	subs	r3, #2
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029ca:	e025      	b.n	8002a18 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029f2:	e011      	b.n	8002a18 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029f4:	f7fe f874 	bl	8000ae0 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d803      	bhi.n	8002a0c <HAL_SPI_Transmit+0x258>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0a:	d102      	bne.n	8002a12 <HAL_SPI_Transmit+0x25e>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d102      	bne.n	8002a18 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a16:	e026      	b.n	8002a66 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1b5      	bne.n	800298e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	6839      	ldr	r1, [r7, #0]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 fc94 	bl	8003354 <SPI_EndRxTxTransaction>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	77fb      	strb	r3, [r7, #31]
 8002a62:	e000      	b.n	8002a66 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8002a64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002a76:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a9c:	d112      	bne.n	8002ac4 <HAL_SPI_Receive+0x44>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002aae:	88fa      	ldrh	r2, [r7, #6]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f908 	bl	8002cd0 <HAL_SPI_TransmitReceive>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	e101      	b.n	8002cc8 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_SPI_Receive+0x52>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e0fa      	b.n	8002cc8 <HAL_SPI_Receive+0x248>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ada:	f7fe f801 	bl	8000ae0 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d002      	beq.n	8002af2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
 8002aee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002af0:	e0e1      	b.n	8002cb6 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_SPI_Receive+0x7e>
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b02:	e0d8      	b.n	8002cb6 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2204      	movs	r2, #4
 8002b08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	88fa      	ldrh	r2, [r7, #6]
 8002b1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	88fa      	ldrh	r2, [r7, #6]
 8002b24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b4e:	d908      	bls.n	8002b62 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	e007      	b.n	8002b72 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b70:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7a:	d107      	bne.n	8002b8c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b8a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b96:	2b40      	cmp	r3, #64	; 0x40
 8002b98:	d007      	beq.n	8002baa <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ba8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bb2:	d867      	bhi.n	8002c84 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002bb4:	e030      	b.n	8002c18 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d117      	bne.n	8002bf4 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f103 020c 	add.w	r2, r3, #12
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	7812      	ldrb	r2, [r2, #0]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002bf2:	e011      	b.n	8002c18 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bf4:	f7fd ff74 	bl	8000ae0 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d803      	bhi.n	8002c0c <HAL_SPI_Receive+0x18c>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0a:	d102      	bne.n	8002c12 <HAL_SPI_Receive+0x192>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c16:	e04e      	b.n	8002cb6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1c8      	bne.n	8002bb6 <HAL_SPI_Receive+0x136>
 8002c24:	e034      	b.n	8002c90 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d115      	bne.n	8002c60 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	b292      	uxth	r2, r2
 8002c40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	1c9a      	adds	r2, r3, #2
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002c5e:	e011      	b.n	8002c84 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c60:	f7fd ff3e 	bl	8000ae0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d803      	bhi.n	8002c78 <HAL_SPI_Receive+0x1f8>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c76:	d102      	bne.n	8002c7e <HAL_SPI_Receive+0x1fe>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c82:	e018      	b.n	8002cb6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ca      	bne.n	8002c26 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	6839      	ldr	r1, [r7, #0]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fb05 	bl	80032a4 <SPI_EndRxTransaction>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	75fb      	strb	r3, [r7, #23]
 8002cb2:	e000      	b.n	8002cb6 <HAL_SPI_Receive+0x236>
  }

error :
 8002cb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_SPI_TransmitReceive+0x26>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e1fb      	b.n	80030ee <HAL_SPI_TransmitReceive+0x41e>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cfe:	f7fd feef 	bl	8000ae0 <HAL_GetTick>
 8002d02:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d0a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d12:	887b      	ldrh	r3, [r7, #2]
 8002d14:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002d16:	887b      	ldrh	r3, [r7, #2]
 8002d18:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d1a:	7efb      	ldrb	r3, [r7, #27]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d00e      	beq.n	8002d3e <HAL_SPI_TransmitReceive+0x6e>
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d26:	d106      	bne.n	8002d36 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <HAL_SPI_TransmitReceive+0x66>
 8002d30:	7efb      	ldrb	r3, [r7, #27]
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d003      	beq.n	8002d3e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
 8002d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d3c:	e1cd      	b.n	80030da <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_SPI_TransmitReceive+0x80>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HAL_SPI_TransmitReceive+0x80>
 8002d4a:	887b      	ldrh	r3, [r7, #2]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d103      	bne.n	8002d58 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d56:	e1c0      	b.n	80030da <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d003      	beq.n	8002d6c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2205      	movs	r2, #5
 8002d68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	887a      	ldrh	r2, [r7, #2]
 8002d7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	887a      	ldrh	r2, [r7, #2]
 8002d84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	887a      	ldrh	r2, [r7, #2]
 8002d92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	887a      	ldrh	r2, [r7, #2]
 8002d98:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dae:	d802      	bhi.n	8002db6 <HAL_SPI_TransmitReceive+0xe6>
 8002db0:	8a3b      	ldrh	r3, [r7, #16]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d908      	bls.n	8002dc8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	e007      	b.n	8002dd8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dd6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	d007      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002df4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dfe:	d97c      	bls.n	8002efa <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_SPI_TransmitReceive+0x13e>
 8002e08:	8a7b      	ldrh	r3, [r7, #18]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d169      	bne.n	8002ee2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	881a      	ldrh	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	1c9a      	adds	r2, r3, #2
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e32:	e056      	b.n	8002ee2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d11b      	bne.n	8002e7a <HAL_SPI_TransmitReceive+0x1aa>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d016      	beq.n	8002e7a <HAL_SPI_TransmitReceive+0x1aa>
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d113      	bne.n	8002e7a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e56:	881a      	ldrh	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	1c9a      	adds	r2, r3, #2
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d11c      	bne.n	8002ec2 <HAL_SPI_TransmitReceive+0x1f2>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d016      	beq.n	8002ec2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	1c9a      	adds	r2, r3, #2
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ec2:	f7fd fe0d 	bl	8000ae0 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d807      	bhi.n	8002ee2 <HAL_SPI_TransmitReceive+0x212>
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d003      	beq.n	8002ee2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002ee0:	e0fb      	b.n	80030da <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1a3      	bne.n	8002e34 <HAL_SPI_TransmitReceive+0x164>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d19d      	bne.n	8002e34 <HAL_SPI_TransmitReceive+0x164>
 8002ef8:	e0df      	b.n	80030ba <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_SPI_TransmitReceive+0x23a>
 8002f02:	8a7b      	ldrh	r3, [r7, #18]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	f040 80cb 	bne.w	80030a0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d912      	bls.n	8002f3a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	881a      	ldrh	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	1c9a      	adds	r2, r3, #2
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b02      	subs	r3, #2
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f38:	e0b2      	b.n	80030a0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	330c      	adds	r3, #12
 8002f44:	7812      	ldrb	r2, [r2, #0]
 8002f46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f60:	e09e      	b.n	80030a0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d134      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x30a>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d02f      	beq.n	8002fda <HAL_SPI_TransmitReceive+0x30a>
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d12c      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d912      	bls.n	8002fb0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	881a      	ldrh	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	1c9a      	adds	r2, r3, #2
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b02      	subs	r3, #2
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fae:	e012      	b.n	8002fd6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	7812      	ldrb	r2, [r2, #0]
 8002fbc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d148      	bne.n	800307a <HAL_SPI_TransmitReceive+0x3aa>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d042      	beq.n	800307a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d923      	bls.n	8003048 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	b292      	uxth	r2, r2
 800300c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	1c9a      	adds	r2, r3, #2
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b02      	subs	r3, #2
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d81f      	bhi.n	8003076 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	e016      	b.n	8003076 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f103 020c 	add.w	r2, r3, #12
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	7812      	ldrb	r2, [r2, #0]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003076:	2301      	movs	r3, #1
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800307a:	f7fd fd31 	bl	8000ae0 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003086:	429a      	cmp	r2, r3
 8003088:	d803      	bhi.n	8003092 <HAL_SPI_TransmitReceive+0x3c2>
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003090:	d102      	bne.n	8003098 <HAL_SPI_TransmitReceive+0x3c8>
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	2b00      	cmp	r3, #0
 8003096:	d103      	bne.n	80030a0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800309e:	e01c      	b.n	80030da <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f47f af5b 	bne.w	8002f62 <HAL_SPI_TransmitReceive+0x292>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f47f af54 	bne.w	8002f62 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f948 	bl	8003354 <SPI_EndRxTxTransaction>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d006      	beq.n	80030d8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	661a      	str	r2, [r3, #96]	; 0x60
 80030d6:	e000      	b.n	80030da <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80030d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80030ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3728      	adds	r7, #40	; 0x28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	4613      	mov	r3, r2
 8003104:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003106:	e04c      	b.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d048      	beq.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003110:	f7fd fce6 	bl	8000ae0 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d902      	bls.n	8003126 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d13d      	bne.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003134:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800313e:	d111      	bne.n	8003164 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003148:	d004      	beq.n	8003154 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003152:	d107      	bne.n	8003164 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003162:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800316c:	d10f      	bne.n	800318e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800318c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e00f      	b.n	80031c2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4013      	ands	r3, r2
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1a3      	bne.n	8003108 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80031d8:	e057      	b.n	800328a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80031e0:	d106      	bne.n	80031f0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d103      	bne.n	80031f0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	330c      	adds	r3, #12
 80031ee:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f6:	d048      	beq.n	800328a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80031f8:	f7fd fc72 	bl	8000ae0 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d902      	bls.n	800320e <SPI_WaitFifoStateUntilTimeout+0x44>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d13d      	bne.n	800328a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800321c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003226:	d111      	bne.n	800324c <SPI_WaitFifoStateUntilTimeout+0x82>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003230:	d004      	beq.n	800323c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323a:	d107      	bne.n	800324c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800324a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003254:	d10f      	bne.n	8003276 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003274:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e008      	b.n	800329c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4013      	ands	r3, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	429a      	cmp	r2, r3
 8003298:	d19f      	bne.n	80031da <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032b8:	d111      	bne.n	80032de <SPI_EndRxTransaction+0x3a>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c2:	d004      	beq.n	80032ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032cc:	d107      	bne.n	80032de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032dc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2200      	movs	r2, #0
 80032e6:	2180      	movs	r1, #128	; 0x80
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f7ff ff04 	bl	80030f6 <SPI_WaitFlagStateUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f8:	f043 0220 	orr.w	r2, r3, #32
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e023      	b.n	800334c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800330c:	d11d      	bne.n	800334a <SPI_EndRxTransaction+0xa6>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003316:	d004      	beq.n	8003322 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003320:	d113      	bne.n	800334a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2200      	movs	r2, #0
 800332a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f7ff ff4b 	bl	80031ca <SPI_WaitFifoStateUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333e:	f043 0220 	orr.w	r2, r3, #32
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e000      	b.n	800334c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2200      	movs	r2, #0
 8003368:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f7ff ff2c 	bl	80031ca <SPI_WaitFifoStateUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d007      	beq.n	8003388 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337c:	f043 0220 	orr.w	r2, r3, #32
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e027      	b.n	80033d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2200      	movs	r2, #0
 8003390:	2180      	movs	r1, #128	; 0x80
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff feaf 	bl	80030f6 <SPI_WaitFlagStateUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a2:	f043 0220 	orr.w	r2, r3, #32
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e014      	b.n	80033d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f7ff ff05 	bl	80031ca <SPI_WaitFifoStateUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d007      	beq.n	80033d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ca:	f043 0220 	orr.w	r2, r3, #32
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e000      	b.n	80033d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e01d      	b.n	800342e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f002 f8ba 	bl	8005580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f000 f8c2 	bl	80035a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_TIM_ConfigClockSource+0x18>
 800344a:	2302      	movs	r3, #2
 800344c:	e0a8      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x16a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003470:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003478:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d067      	beq.n	800355a <HAL_TIM_ConfigClockSource+0x124>
 800348a:	2b40      	cmp	r3, #64	; 0x40
 800348c:	d80b      	bhi.n	80034a6 <HAL_TIM_ConfigClockSource+0x70>
 800348e:	2b10      	cmp	r3, #16
 8003490:	d073      	beq.n	800357a <HAL_TIM_ConfigClockSource+0x144>
 8003492:	2b10      	cmp	r3, #16
 8003494:	d802      	bhi.n	800349c <HAL_TIM_ConfigClockSource+0x66>
 8003496:	2b00      	cmp	r3, #0
 8003498:	d06f      	beq.n	800357a <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800349a:	e078      	b.n	800358e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800349c:	2b20      	cmp	r3, #32
 800349e:	d06c      	beq.n	800357a <HAL_TIM_ConfigClockSource+0x144>
 80034a0:	2b30      	cmp	r3, #48	; 0x30
 80034a2:	d06a      	beq.n	800357a <HAL_TIM_ConfigClockSource+0x144>
      break;
 80034a4:	e073      	b.n	800358e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80034a6:	2b70      	cmp	r3, #112	; 0x70
 80034a8:	d00d      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x90>
 80034aa:	2b70      	cmp	r3, #112	; 0x70
 80034ac:	d804      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x82>
 80034ae:	2b50      	cmp	r3, #80	; 0x50
 80034b0:	d033      	beq.n	800351a <HAL_TIM_ConfigClockSource+0xe4>
 80034b2:	2b60      	cmp	r3, #96	; 0x60
 80034b4:	d041      	beq.n	800353a <HAL_TIM_ConfigClockSource+0x104>
      break;
 80034b6:	e06a      	b.n	800358e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80034b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034bc:	d066      	beq.n	800358c <HAL_TIM_ConfigClockSource+0x156>
 80034be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c2:	d017      	beq.n	80034f4 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80034c4:	e063      	b.n	800358e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6899      	ldr	r1, [r3, #8]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f000 f97b 	bl	80037d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	609a      	str	r2, [r3, #8]
      break;
 80034f2:	e04c      	b.n	800358e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6899      	ldr	r1, [r3, #8]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f000 f964 	bl	80037d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003516:	609a      	str	r2, [r3, #8]
      break;
 8003518:	e039      	b.n	800358e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	6859      	ldr	r1, [r3, #4]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	461a      	mov	r2, r3
 8003528:	f000 f8d8 	bl	80036dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2150      	movs	r1, #80	; 0x50
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f931 	bl	800379a <TIM_ITRx_SetConfig>
      break;
 8003538:	e029      	b.n	800358e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	6859      	ldr	r1, [r3, #4]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	461a      	mov	r2, r3
 8003548:	f000 f8f7 	bl	800373a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2160      	movs	r1, #96	; 0x60
 8003552:	4618      	mov	r0, r3
 8003554:	f000 f921 	bl	800379a <TIM_ITRx_SetConfig>
      break;
 8003558:	e019      	b.n	800358e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6859      	ldr	r1, [r3, #4]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	461a      	mov	r2, r3
 8003568:	f000 f8b8 	bl	80036dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2140      	movs	r1, #64	; 0x40
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f911 	bl	800379a <TIM_ITRx_SetConfig>
      break;
 8003578:	e009      	b.n	800358e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4619      	mov	r1, r3
 8003584:	4610      	mov	r0, r2
 8003586:	f000 f908 	bl	800379a <TIM_ITRx_SetConfig>
      break;
 800358a:	e000      	b.n	800358e <HAL_TIM_ConfigClockSource+0x158>
      break;
 800358c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a40      	ldr	r2, [pc, #256]	; (80036bc <TIM_Base_SetConfig+0x114>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d013      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c6:	d00f      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a3d      	ldr	r2, [pc, #244]	; (80036c0 <TIM_Base_SetConfig+0x118>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00b      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a3c      	ldr	r2, [pc, #240]	; (80036c4 <TIM_Base_SetConfig+0x11c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d007      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a3b      	ldr	r2, [pc, #236]	; (80036c8 <TIM_Base_SetConfig+0x120>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d003      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a3a      	ldr	r2, [pc, #232]	; (80036cc <TIM_Base_SetConfig+0x124>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d108      	bne.n	80035fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2f      	ldr	r2, [pc, #188]	; (80036bc <TIM_Base_SetConfig+0x114>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01f      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003608:	d01b      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a2c      	ldr	r2, [pc, #176]	; (80036c0 <TIM_Base_SetConfig+0x118>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d017      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a2b      	ldr	r2, [pc, #172]	; (80036c4 <TIM_Base_SetConfig+0x11c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a2a      	ldr	r2, [pc, #168]	; (80036c8 <TIM_Base_SetConfig+0x120>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00f      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a29      	ldr	r2, [pc, #164]	; (80036cc <TIM_Base_SetConfig+0x124>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00b      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a28      	ldr	r2, [pc, #160]	; (80036d0 <TIM_Base_SetConfig+0x128>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d007      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a27      	ldr	r2, [pc, #156]	; (80036d4 <TIM_Base_SetConfig+0x12c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d003      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a26      	ldr	r2, [pc, #152]	; (80036d8 <TIM_Base_SetConfig+0x130>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d108      	bne.n	8003654 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a10      	ldr	r2, [pc, #64]	; (80036bc <TIM_Base_SetConfig+0x114>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00f      	beq.n	80036a0 <TIM_Base_SetConfig+0xf8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a12      	ldr	r2, [pc, #72]	; (80036cc <TIM_Base_SetConfig+0x124>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00b      	beq.n	80036a0 <TIM_Base_SetConfig+0xf8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a11      	ldr	r2, [pc, #68]	; (80036d0 <TIM_Base_SetConfig+0x128>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d007      	beq.n	80036a0 <TIM_Base_SetConfig+0xf8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a10      	ldr	r2, [pc, #64]	; (80036d4 <TIM_Base_SetConfig+0x12c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_Base_SetConfig+0xf8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a0f      	ldr	r2, [pc, #60]	; (80036d8 <TIM_Base_SetConfig+0x130>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d103      	bne.n	80036a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	615a      	str	r2, [r3, #20]
}
 80036ae:	bf00      	nop
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40000400 	.word	0x40000400
 80036c4:	40000800 	.word	0x40000800
 80036c8:	40000c00 	.word	0x40000c00
 80036cc:	40013400 	.word	0x40013400
 80036d0:	40014000 	.word	0x40014000
 80036d4:	40014400 	.word	0x40014400
 80036d8:	40014800 	.word	0x40014800

080036dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	f023 0201 	bic.w	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f023 030a 	bic.w	r3, r3, #10
 8003718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	621a      	str	r2, [r3, #32]
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800373a:	b480      	push	{r7}
 800373c:	b087      	sub	sp, #28
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f023 0210 	bic.w	r2, r3, #16
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	031b      	lsls	r3, r3, #12
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003776:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	621a      	str	r2, [r3, #32]
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f043 0307 	orr.w	r3, r3, #7
 80037bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	609a      	str	r2, [r3, #8]
}
 80037c4:	bf00      	nop
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	021a      	lsls	r2, r3, #8
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	609a      	str	r2, [r3, #8]
}
 8003804:	bf00      	nop
 8003806:	371c      	adds	r7, #28
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003824:	2302      	movs	r3, #2
 8003826:	e045      	b.n	80038b4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1c      	ldr	r2, [pc, #112]	; (80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d004      	beq.n	800385c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d108      	bne.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003862:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003874:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4313      	orrs	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003886:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	4313      	orrs	r3, r2
 8003890:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	40012c00 	.word	0x40012c00
 80038c4:	40013400 	.word	0x40013400

080038c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e040      	b.n	800395c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f001 fe68 	bl	80055c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2224      	movs	r2, #36	; 0x24
 80038f4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f82c 	bl	8003964 <UART_SetConfig>
 800390c:	4603      	mov	r3, r0
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e022      	b.n	800395c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fb68 	bl	8003ff4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003932:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003942:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fbef 	bl	8004138 <UART_CheckIdleState>
 800395a:	4603      	mov	r3, r0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003964:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003968:	b088      	sub	sp, #32
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	4313      	orrs	r3, r2
 8003990:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	4bac      	ldr	r3, [pc, #688]	; (8003c4c <UART_SetConfig+0x2e8>)
 800399a:	4013      	ands	r3, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	69f9      	ldr	r1, [r7, #28]
 80039a2:	430b      	orrs	r3, r1
 80039a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4aa2      	ldr	r2, [pc, #648]	; (8003c50 <UART_SetConfig+0x2ec>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d004      	beq.n	80039d6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a99      	ldr	r2, [pc, #612]	; (8003c54 <UART_SetConfig+0x2f0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d121      	bne.n	8003a38 <UART_SetConfig+0xd4>
 80039f4:	4b98      	ldr	r3, [pc, #608]	; (8003c58 <UART_SetConfig+0x2f4>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d816      	bhi.n	8003a30 <UART_SetConfig+0xcc>
 8003a02:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <UART_SetConfig+0xa4>)
 8003a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a08:	08003a19 	.word	0x08003a19
 8003a0c:	08003a25 	.word	0x08003a25
 8003a10:	08003a1f 	.word	0x08003a1f
 8003a14:	08003a2b 	.word	0x08003a2b
 8003a18:	2301      	movs	r3, #1
 8003a1a:	76fb      	strb	r3, [r7, #27]
 8003a1c:	e0e8      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	76fb      	strb	r3, [r7, #27]
 8003a22:	e0e5      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003a24:	2304      	movs	r3, #4
 8003a26:	76fb      	strb	r3, [r7, #27]
 8003a28:	e0e2      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	76fb      	strb	r3, [r7, #27]
 8003a2e:	e0df      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003a30:	2310      	movs	r3, #16
 8003a32:	76fb      	strb	r3, [r7, #27]
 8003a34:	bf00      	nop
 8003a36:	e0db      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a87      	ldr	r2, [pc, #540]	; (8003c5c <UART_SetConfig+0x2f8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d134      	bne.n	8003aac <UART_SetConfig+0x148>
 8003a42:	4b85      	ldr	r3, [pc, #532]	; (8003c58 <UART_SetConfig+0x2f4>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b0c      	cmp	r3, #12
 8003a4e:	d829      	bhi.n	8003aa4 <UART_SetConfig+0x140>
 8003a50:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <UART_SetConfig+0xf4>)
 8003a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a56:	bf00      	nop
 8003a58:	08003a8d 	.word	0x08003a8d
 8003a5c:	08003aa5 	.word	0x08003aa5
 8003a60:	08003aa5 	.word	0x08003aa5
 8003a64:	08003aa5 	.word	0x08003aa5
 8003a68:	08003a99 	.word	0x08003a99
 8003a6c:	08003aa5 	.word	0x08003aa5
 8003a70:	08003aa5 	.word	0x08003aa5
 8003a74:	08003aa5 	.word	0x08003aa5
 8003a78:	08003a93 	.word	0x08003a93
 8003a7c:	08003aa5 	.word	0x08003aa5
 8003a80:	08003aa5 	.word	0x08003aa5
 8003a84:	08003aa5 	.word	0x08003aa5
 8003a88:	08003a9f 	.word	0x08003a9f
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	76fb      	strb	r3, [r7, #27]
 8003a90:	e0ae      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003a92:	2302      	movs	r3, #2
 8003a94:	76fb      	strb	r3, [r7, #27]
 8003a96:	e0ab      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	76fb      	strb	r3, [r7, #27]
 8003a9c:	e0a8      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003a9e:	2308      	movs	r3, #8
 8003aa0:	76fb      	strb	r3, [r7, #27]
 8003aa2:	e0a5      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	76fb      	strb	r3, [r7, #27]
 8003aa8:	bf00      	nop
 8003aaa:	e0a1      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a6b      	ldr	r2, [pc, #428]	; (8003c60 <UART_SetConfig+0x2fc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d120      	bne.n	8003af8 <UART_SetConfig+0x194>
 8003ab6:	4b68      	ldr	r3, [pc, #416]	; (8003c58 <UART_SetConfig+0x2f4>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ac0:	2b10      	cmp	r3, #16
 8003ac2:	d00f      	beq.n	8003ae4 <UART_SetConfig+0x180>
 8003ac4:	2b10      	cmp	r3, #16
 8003ac6:	d802      	bhi.n	8003ace <UART_SetConfig+0x16a>
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <UART_SetConfig+0x174>
 8003acc:	e010      	b.n	8003af0 <UART_SetConfig+0x18c>
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d005      	beq.n	8003ade <UART_SetConfig+0x17a>
 8003ad2:	2b30      	cmp	r3, #48	; 0x30
 8003ad4:	d009      	beq.n	8003aea <UART_SetConfig+0x186>
 8003ad6:	e00b      	b.n	8003af0 <UART_SetConfig+0x18c>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	76fb      	strb	r3, [r7, #27]
 8003adc:	e088      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	76fb      	strb	r3, [r7, #27]
 8003ae2:	e085      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	76fb      	strb	r3, [r7, #27]
 8003ae8:	e082      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003aea:	2308      	movs	r3, #8
 8003aec:	76fb      	strb	r3, [r7, #27]
 8003aee:	e07f      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003af0:	2310      	movs	r3, #16
 8003af2:	76fb      	strb	r3, [r7, #27]
 8003af4:	bf00      	nop
 8003af6:	e07b      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a59      	ldr	r2, [pc, #356]	; (8003c64 <UART_SetConfig+0x300>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d120      	bne.n	8003b44 <UART_SetConfig+0x1e0>
 8003b02:	4b55      	ldr	r3, [pc, #340]	; (8003c58 <UART_SetConfig+0x2f4>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b0c:	2b40      	cmp	r3, #64	; 0x40
 8003b0e:	d00f      	beq.n	8003b30 <UART_SetConfig+0x1cc>
 8003b10:	2b40      	cmp	r3, #64	; 0x40
 8003b12:	d802      	bhi.n	8003b1a <UART_SetConfig+0x1b6>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <UART_SetConfig+0x1c0>
 8003b18:	e010      	b.n	8003b3c <UART_SetConfig+0x1d8>
 8003b1a:	2b80      	cmp	r3, #128	; 0x80
 8003b1c:	d005      	beq.n	8003b2a <UART_SetConfig+0x1c6>
 8003b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b20:	d009      	beq.n	8003b36 <UART_SetConfig+0x1d2>
 8003b22:	e00b      	b.n	8003b3c <UART_SetConfig+0x1d8>
 8003b24:	2300      	movs	r3, #0
 8003b26:	76fb      	strb	r3, [r7, #27]
 8003b28:	e062      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	76fb      	strb	r3, [r7, #27]
 8003b2e:	e05f      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003b30:	2304      	movs	r3, #4
 8003b32:	76fb      	strb	r3, [r7, #27]
 8003b34:	e05c      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003b36:	2308      	movs	r3, #8
 8003b38:	76fb      	strb	r3, [r7, #27]
 8003b3a:	e059      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	76fb      	strb	r3, [r7, #27]
 8003b40:	bf00      	nop
 8003b42:	e055      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a47      	ldr	r2, [pc, #284]	; (8003c68 <UART_SetConfig+0x304>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d124      	bne.n	8003b98 <UART_SetConfig+0x234>
 8003b4e:	4b42      	ldr	r3, [pc, #264]	; (8003c58 <UART_SetConfig+0x2f4>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5c:	d012      	beq.n	8003b84 <UART_SetConfig+0x220>
 8003b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b62:	d802      	bhi.n	8003b6a <UART_SetConfig+0x206>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <UART_SetConfig+0x214>
 8003b68:	e012      	b.n	8003b90 <UART_SetConfig+0x22c>
 8003b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b6e:	d006      	beq.n	8003b7e <UART_SetConfig+0x21a>
 8003b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b74:	d009      	beq.n	8003b8a <UART_SetConfig+0x226>
 8003b76:	e00b      	b.n	8003b90 <UART_SetConfig+0x22c>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	76fb      	strb	r3, [r7, #27]
 8003b7c:	e038      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	76fb      	strb	r3, [r7, #27]
 8003b82:	e035      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003b84:	2304      	movs	r3, #4
 8003b86:	76fb      	strb	r3, [r7, #27]
 8003b88:	e032      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	76fb      	strb	r3, [r7, #27]
 8003b8e:	e02f      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003b90:	2310      	movs	r3, #16
 8003b92:	76fb      	strb	r3, [r7, #27]
 8003b94:	bf00      	nop
 8003b96:	e02b      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2c      	ldr	r2, [pc, #176]	; (8003c50 <UART_SetConfig+0x2ec>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d124      	bne.n	8003bec <UART_SetConfig+0x288>
 8003ba2:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <UART_SetConfig+0x2f4>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb0:	d012      	beq.n	8003bd8 <UART_SetConfig+0x274>
 8003bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb6:	d802      	bhi.n	8003bbe <UART_SetConfig+0x25a>
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <UART_SetConfig+0x268>
 8003bbc:	e012      	b.n	8003be4 <UART_SetConfig+0x280>
 8003bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc2:	d006      	beq.n	8003bd2 <UART_SetConfig+0x26e>
 8003bc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bc8:	d009      	beq.n	8003bde <UART_SetConfig+0x27a>
 8003bca:	e00b      	b.n	8003be4 <UART_SetConfig+0x280>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	76fb      	strb	r3, [r7, #27]
 8003bd0:	e00e      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	76fb      	strb	r3, [r7, #27]
 8003bd6:	e00b      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003bd8:	2304      	movs	r3, #4
 8003bda:	76fb      	strb	r3, [r7, #27]
 8003bdc:	e008      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003bde:	2308      	movs	r3, #8
 8003be0:	76fb      	strb	r3, [r7, #27]
 8003be2:	e005      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003be4:	2310      	movs	r3, #16
 8003be6:	76fb      	strb	r3, [r7, #27]
 8003be8:	bf00      	nop
 8003bea:	e001      	b.n	8003bf0 <UART_SetConfig+0x28c>
 8003bec:	2310      	movs	r3, #16
 8003bee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a16      	ldr	r2, [pc, #88]	; (8003c50 <UART_SetConfig+0x2ec>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	f040 80fa 	bne.w	8003df0 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bfc:	7efb      	ldrb	r3, [r7, #27]
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d836      	bhi.n	8003c70 <UART_SetConfig+0x30c>
 8003c02:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <UART_SetConfig+0x2a4>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c2d 	.word	0x08003c2d
 8003c0c:	08003c71 	.word	0x08003c71
 8003c10:	08003c35 	.word	0x08003c35
 8003c14:	08003c71 	.word	0x08003c71
 8003c18:	08003c3b 	.word	0x08003c3b
 8003c1c:	08003c71 	.word	0x08003c71
 8003c20:	08003c71 	.word	0x08003c71
 8003c24:	08003c71 	.word	0x08003c71
 8003c28:	08003c43 	.word	0x08003c43
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003c2c:	f7fd fffc 	bl	8001c28 <HAL_RCC_GetPCLK1Freq>
 8003c30:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c32:	e020      	b.n	8003c76 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003c34:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <UART_SetConfig+0x308>)
 8003c36:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c38:	e01d      	b.n	8003c76 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003c3a:	f7fd ff5f 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8003c3e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c40:	e019      	b.n	8003c76 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c46:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c48:	e015      	b.n	8003c76 <UART_SetConfig+0x312>
 8003c4a:	bf00      	nop
 8003c4c:	efff69f3 	.word	0xefff69f3
 8003c50:	40008000 	.word	0x40008000
 8003c54:	40013800 	.word	0x40013800
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40004400 	.word	0x40004400
 8003c60:	40004800 	.word	0x40004800
 8003c64:	40004c00 	.word	0x40004c00
 8003c68:	40005000 	.word	0x40005000
 8003c6c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	74fb      	strb	r3, [r7, #19]
        break;
 8003c74:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 81ac 	beq.w	8003fd6 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d305      	bcc.n	8003c9a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d902      	bls.n	8003ca0 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	74fb      	strb	r3, [r7, #19]
 8003c9e:	e19a      	b.n	8003fd6 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8003ca0:	7efb      	ldrb	r3, [r7, #27]
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	f200 8091 	bhi.w	8003dca <UART_SetConfig+0x466>
 8003ca8:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <UART_SetConfig+0x34c>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003cd5 	.word	0x08003cd5
 8003cb4:	08003dcb 	.word	0x08003dcb
 8003cb8:	08003d21 	.word	0x08003d21
 8003cbc:	08003dcb 	.word	0x08003dcb
 8003cc0:	08003d55 	.word	0x08003d55
 8003cc4:	08003dcb 	.word	0x08003dcb
 8003cc8:	08003dcb 	.word	0x08003dcb
 8003ccc:	08003dcb 	.word	0x08003dcb
 8003cd0:	08003da1 	.word	0x08003da1
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003cd4:	f7fd ffa8 	bl	8001c28 <HAL_RCC_GetPCLK1Freq>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	4619      	mov	r1, r3
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	f04f 0400 	mov.w	r4, #0
 8003ce8:	0214      	lsls	r4, r2, #8
 8003cea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003cee:	020b      	lsls	r3, r1, #8
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6852      	ldr	r2, [r2, #4]
 8003cf4:	0852      	lsrs	r2, r2, #1
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	eb13 0b01 	adds.w	fp, r3, r1
 8003d00:	eb44 0c02 	adc.w	ip, r4, r2
 8003d04:	4658      	mov	r0, fp
 8003d06:	4661      	mov	r1, ip
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f04f 0400 	mov.w	r4, #0
 8003d10:	461a      	mov	r2, r3
 8003d12:	4623      	mov	r3, r4
 8003d14:	f7fc fcf8 	bl	8000708 <__aeabi_uldivmod>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	460c      	mov	r4, r1
 8003d1c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003d1e:	e057      	b.n	8003dd0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	f04f 0400 	mov.w	r4, #0
 8003d2a:	49b1      	ldr	r1, [pc, #708]	; (8003ff0 <UART_SetConfig+0x68c>)
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	eb13 0b01 	adds.w	fp, r3, r1
 8003d34:	eb44 0c02 	adc.w	ip, r4, r2
 8003d38:	4658      	mov	r0, fp
 8003d3a:	4661      	mov	r1, ip
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f04f 0400 	mov.w	r4, #0
 8003d44:	461a      	mov	r2, r3
 8003d46:	4623      	mov	r3, r4
 8003d48:	f7fc fcde 	bl	8000708 <__aeabi_uldivmod>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003d52:	e03d      	b.n	8003dd0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003d54:	f7fd fed2 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	f04f 0400 	mov.w	r4, #0
 8003d68:	0214      	lsls	r4, r2, #8
 8003d6a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003d6e:	020b      	lsls	r3, r1, #8
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6852      	ldr	r2, [r2, #4]
 8003d74:	0852      	lsrs	r2, r2, #1
 8003d76:	4611      	mov	r1, r2
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	eb13 0b01 	adds.w	fp, r3, r1
 8003d80:	eb44 0c02 	adc.w	ip, r4, r2
 8003d84:	4658      	mov	r0, fp
 8003d86:	4661      	mov	r1, ip
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f04f 0400 	mov.w	r4, #0
 8003d90:	461a      	mov	r2, r3
 8003d92:	4623      	mov	r3, r4
 8003d94:	f7fc fcb8 	bl	8000708 <__aeabi_uldivmod>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003d9e:	e017      	b.n	8003dd0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	085b      	lsrs	r3, r3, #1
 8003da6:	f04f 0400 	mov.w	r4, #0
 8003daa:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003dae:	f144 0100 	adc.w	r1, r4, #0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f04f 0400 	mov.w	r4, #0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4623      	mov	r3, r4
 8003dbe:	f7fc fca3 	bl	8000708 <__aeabi_uldivmod>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003dc8:	e002      	b.n	8003dd0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	74fb      	strb	r3, [r7, #19]
            break;
 8003dce:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dd6:	d308      	bcc.n	8003dea <UART_SetConfig+0x486>
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dde:	d204      	bcs.n	8003dea <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	60da      	str	r2, [r3, #12]
 8003de8:	e0f5      	b.n	8003fd6 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	74fb      	strb	r3, [r7, #19]
 8003dee:	e0f2      	b.n	8003fd6 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df8:	d17f      	bne.n	8003efa <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8003dfa:	7efb      	ldrb	r3, [r7, #27]
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d85c      	bhi.n	8003eba <UART_SetConfig+0x556>
 8003e00:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <UART_SetConfig+0x4a4>)
 8003e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e06:	bf00      	nop
 8003e08:	08003e2d 	.word	0x08003e2d
 8003e0c:	08003e4b 	.word	0x08003e4b
 8003e10:	08003e69 	.word	0x08003e69
 8003e14:	08003ebb 	.word	0x08003ebb
 8003e18:	08003e85 	.word	0x08003e85
 8003e1c:	08003ebb 	.word	0x08003ebb
 8003e20:	08003ebb 	.word	0x08003ebb
 8003e24:	08003ebb 	.word	0x08003ebb
 8003e28:	08003ea3 	.word	0x08003ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e2c:	f7fd fefc 	bl	8001c28 <HAL_RCC_GetPCLK1Freq>
 8003e30:	4603      	mov	r3, r0
 8003e32:	005a      	lsls	r2, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	441a      	add	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e48:	e03a      	b.n	8003ec0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003e4a:	f7fd ff03 	bl	8001c54 <HAL_RCC_GetPCLK2Freq>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	005a      	lsls	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	441a      	add	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e66:	e02b      	b.n	8003ec0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003e72:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6852      	ldr	r2, [r2, #4]
 8003e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e82:	e01d      	b.n	8003ec0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e84:	f7fd fe3a 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	005a      	lsls	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	441a      	add	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ea0:	e00e      	b.n	8003ec0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	085b      	lsrs	r3, r3, #1
 8003ea8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003eb8:	e002      	b.n	8003ec0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	74fb      	strb	r3, [r7, #19]
        break;
 8003ebe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b0f      	cmp	r3, #15
 8003ec4:	d916      	bls.n	8003ef4 <UART_SetConfig+0x590>
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ecc:	d212      	bcs.n	8003ef4 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	f023 030f 	bic.w	r3, r3, #15
 8003ed6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	085b      	lsrs	r3, r3, #1
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	897b      	ldrh	r3, [r7, #10]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	897a      	ldrh	r2, [r7, #10]
 8003ef0:	60da      	str	r2, [r3, #12]
 8003ef2:	e070      	b.n	8003fd6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	74fb      	strb	r3, [r7, #19]
 8003ef8:	e06d      	b.n	8003fd6 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8003efa:	7efb      	ldrb	r3, [r7, #27]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d859      	bhi.n	8003fb4 <UART_SetConfig+0x650>
 8003f00:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <UART_SetConfig+0x5a4>)
 8003f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f06:	bf00      	nop
 8003f08:	08003f2d 	.word	0x08003f2d
 8003f0c:	08003f49 	.word	0x08003f49
 8003f10:	08003f65 	.word	0x08003f65
 8003f14:	08003fb5 	.word	0x08003fb5
 8003f18:	08003f81 	.word	0x08003f81
 8003f1c:	08003fb5 	.word	0x08003fb5
 8003f20:	08003fb5 	.word	0x08003fb5
 8003f24:	08003fb5 	.word	0x08003fb5
 8003f28:	08003f9d 	.word	0x08003f9d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003f2c:	f7fd fe7c 	bl	8001c28 <HAL_RCC_GetPCLK1Freq>
 8003f30:	4602      	mov	r2, r0
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	441a      	add	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f46:	e038      	b.n	8003fba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003f48:	f7fd fe84 	bl	8001c54 <HAL_RCC_GetPCLK2Freq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	085b      	lsrs	r3, r3, #1
 8003f54:	441a      	add	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f62:	e02a      	b.n	8003fba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003f6e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6852      	ldr	r2, [r2, #4]
 8003f76:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f7e:	e01c      	b.n	8003fba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f80:	f7fd fdbc 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8003f84:	4602      	mov	r2, r0
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	441a      	add	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f9a:	e00e      	b.n	8003fba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fb2:	e002      	b.n	8003fba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	74fb      	strb	r3, [r7, #19]
        break;
 8003fb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b0f      	cmp	r3, #15
 8003fbe:	d908      	bls.n	8003fd2 <UART_SetConfig+0x66e>
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc6:	d204      	bcs.n	8003fd2 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	60da      	str	r2, [r3, #12]
 8003fd0:	e001      	b.n	8003fd6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003fe2:	7cfb      	ldrb	r3, [r7, #19]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003fee:	bf00      	nop
 8003ff0:	f4240000 	.word	0xf4240000

08003ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01a      	beq.n	800410a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040f2:	d10a      	bne.n	800410a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	605a      	str	r2, [r3, #4]
  }
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af02      	add	r7, sp, #8
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004146:	f7fc fccb 	bl	8000ae0 <HAL_GetTick>
 800414a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b08      	cmp	r3, #8
 8004158:	d10e      	bne.n	8004178 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800415a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f82a 	bl	80041c2 <UART_WaitOnFlagUntilTimeout>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e020      	b.n	80041ba <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b04      	cmp	r3, #4
 8004184:	d10e      	bne.n	80041a4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004186:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f814 	bl	80041c2 <UART_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e00a      	b.n	80041ba <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2220      	movs	r2, #32
 80041ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d2:	e02a      	b.n	800422a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041da:	d026      	beq.n	800422a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041dc:	f7fc fc80 	bl	8000ae0 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d302      	bcc.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d11b      	bne.n	800422a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004200:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e00f      	b.n	800424a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69da      	ldr	r2, [r3, #28]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4013      	ands	r3, r2
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	429a      	cmp	r2, r3
 8004238:	bf0c      	ite	eq
 800423a:	2301      	moveq	r3, #1
 800423c:	2300      	movne	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	429a      	cmp	r2, r3
 8004246:	d0c5      	beq.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <_ZN9LoRaClass5writeEPKc>:
  float packetSnr();
  long packetFrequencyError();

  // from Print
  virtual size_t write(uint8_t byte);
  size_t write(const char *str) {
 8004252:	b590      	push	{r4, r7, lr}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
    if (str == NULL) return 0;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <_ZN9LoRaClass5writeEPKc+0x14>
 8004262:	2300      	movs	r3, #0
 8004264:	e00c      	b.n	8004280 <_ZN9LoRaClass5writeEPKc+0x2e>
    return write((const uint8_t *)str, strlen(str));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3304      	adds	r3, #4
 800426c:	681c      	ldr	r4, [r3, #0]
 800426e:	6838      	ldr	r0, [r7, #0]
 8004270:	f7fb ffae 	bl	80001d0 <strlen>
 8004274:	4603      	mov	r3, r0
 8004276:	461a      	mov	r2, r3
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	47a0      	blx	r4
 800427e:	4603      	mov	r3, r0
  }
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	bd90      	pop	{r4, r7, pc}

08004288 <_ZN9LoRaClassC1Ev>:
#define IRQ_PAYLOAD_CRC_ERROR_MASK 0x20
#define IRQ_RX_DONE_MASK           0x40

#define MAX_PKT_LENGTH           255

LoRaClass::LoRaClass() :
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(NULL)
 8004290:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <_ZN9LoRaClassC1Ev+0x34>)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	61da      	str	r2, [r3, #28]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	621a      	str	r2, [r3, #32]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	625a      	str	r2, [r3, #36]	; 0x24
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	629a      	str	r2, [r3, #40]	; 0x28
{
  // overide Stream timeout value
  //setTimeout(0);
}
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	0800680c 	.word	0x0800680c

080042c0 <_ZN9LoRaClass5beginEl>:

int LoRaClass::begin(long frequency)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]

  if (_reset_pin != 65535) {
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8b1b      	ldrh	r3, [r3, #24]
 80042ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d015      	beq.n	8004302 <_ZN9LoRaClass5beginEl+0x42>

    // perform reset
	HAL_GPIO_WritePin(_reset_gpio_port, _reset_pin, GPIO_PIN_RESET);	//digitalWrite(_reset, LOW);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6958      	ldr	r0, [r3, #20]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	8b1b      	ldrh	r3, [r3, #24]
 80042de:	2200      	movs	r2, #0
 80042e0:	4619      	mov	r1, r3
 80042e2:	f7fc fee5 	bl	80010b0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80042e6:	200a      	movs	r0, #10
 80042e8:	f7fc fc06 	bl	8000af8 <HAL_Delay>
    HAL_GPIO_WritePin(_reset_gpio_port, _reset_pin, GPIO_PIN_SET);		//digitalWrite(_reset, HIGH);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6958      	ldr	r0, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8b1b      	ldrh	r3, [r3, #24]
 80042f4:	2201      	movs	r2, #1
 80042f6:	4619      	mov	r1, r3
 80042f8:	f7fc feda 	bl	80010b0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80042fc:	200a      	movs	r0, #10
 80042fe:	f7fc fbfb 	bl	8000af8 <HAL_Delay>

  // start SPI
  //_spi->begin();

  // check version
  uint8_t version = readRegister(REG_VERSION);
 8004302:	2142      	movs	r1, #66	; 0x42
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fcd0 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 800430a:	4603      	mov	r3, r0
 800430c:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	2b12      	cmp	r3, #18
 8004312:	d001      	beq.n	8004318 <_ZN9LoRaClass5beginEl+0x58>
    return 0;
 8004314:	2300      	movs	r3, #0
 8004316:	e02b      	b.n	8004370 <_ZN9LoRaClass5beginEl+0xb0>
  }

  // put in sleep mode
  sleep();
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f98e 	bl	800463a <_ZN9LoRaClass5sleepEv>

  // set frequency
  setFrequency(frequency);
 800431e:	6839      	ldr	r1, [r7, #0]
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f9ed 	bl	8004700 <_ZN9LoRaClass12setFrequencyEl>

  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8004326:	2200      	movs	r2, #0
 8004328:	210e      	movs	r1, #14
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fcee 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8004330:	2200      	movs	r2, #0
 8004332:	210f      	movs	r1, #15
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fce9 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>

  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 800433a:	210c      	movs	r1, #12
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fcb4 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 8004342:	4603      	mov	r3, r0
 8004344:	f043 0303 	orr.w	r3, r3, #3
 8004348:	b2db      	uxtb	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	210c      	movs	r1, #12
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fcdc 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>

  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8004354:	2204      	movs	r2, #4
 8004356:	2126      	movs	r1, #38	; 0x26
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fcd7 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>

  // set output power to 17 dBm
  setTxPower(17);
 800435e:	2201      	movs	r2, #1
 8004360:	2111      	movs	r1, #17
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f976 	bl	8004654 <_ZN9LoRaClass10setTxPowerEii>

  // put in standby mode
  idle();
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f959 	bl	8004620 <_ZN9LoRaClass4idleEv>

  return 1;
 800436e:	2301      	movs	r3, #1
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <_ZN9LoRaClass11beginPacketEi>:
  //_spi->end();
}

//LATER
int LoRaClass::beginPacket(int implicitHeader)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  if (isTransmitting()) {
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f86a 	bl	800445c <_ZN9LoRaClass14isTransmittingEv>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <_ZN9LoRaClass11beginPacketEi+0x1a>
    return 0;
 800438e:	2300      	movs	r3, #0
 8004390:	e017      	b.n	80043c2 <_ZN9LoRaClass11beginPacketEi+0x4a>
  }

  // put in standby mode
  idle();
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f944 	bl	8004620 <_ZN9LoRaClass4idleEv>

  if (implicitHeader) {
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <_ZN9LoRaClass11beginPacketEi+0x2e>
    implicitHeaderMode();
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fc27 	bl	8004bf2 <_ZN9LoRaClass18implicitHeaderModeEv>
 80043a4:	e002      	b.n	80043ac <_ZN9LoRaClass11beginPacketEi+0x34>
  } else {
    explicitHeaderMode();
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fc0b 	bl	8004bc2 <_ZN9LoRaClass18explicitHeaderModeEv>
  }

  // reset FIFO address and paload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
 80043ac:	2200      	movs	r2, #0
 80043ae:	210d      	movs	r1, #13
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fcab 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 80043b6:	2200      	movs	r2, #0
 80043b8:	2122      	movs	r1, #34	; 0x22
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fca6 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>

  return 1;
 80043c0:	2301      	movs	r3, #1
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <_ZN9LoRaClass7delayUSEj>:

//NEW
void LoRaClass::delayUS(unsigned int us){
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
	_htim->Instance->CNT = 0;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2200      	movs	r2, #0
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24
	while(_htim->Instance->CNT < us);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	bf8c      	ite	hi
 80043ec:	2301      	movhi	r3, #1
 80043ee:	2300      	movls	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d000      	beq.n	80043f8 <_ZN9LoRaClass7delayUSEj+0x2e>
 80043f6:	e7f2      	b.n	80043de <_ZN9LoRaClass7delayUSEj+0x14>
	return;
 80043f8:	bf00      	nop
}
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <_ZN9LoRaClass9endPacketEb>:

//writeRegister(), delayMicroseconds(), yield()
int LoRaClass::endPacket(bool async)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	70fb      	strb	r3, [r7, #3]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8004410:	2283      	movs	r2, #131	; 0x83
 8004412:	2101      	movs	r1, #1
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fc79 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>

  if (async) {
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <_ZN9LoRaClass9endPacketEb+0x26>
    // grace time is required for the radio
    delayUS(150);
 8004420:	2196      	movs	r1, #150	; 0x96
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7ff ffd1 	bl	80043ca <_ZN9LoRaClass7delayUSEj>
 8004428:	e013      	b.n	8004452 <_ZN9LoRaClass9endPacketEb+0x4e>
  } else {
    // wait for TX done
    while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 800442a:	2112      	movs	r1, #18
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fc3c 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 8004432:	4603      	mov	r3, r0
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d000      	beq.n	8004448 <_ZN9LoRaClass9endPacketEb+0x44>
 8004446:	e7f0      	b.n	800442a <_ZN9LoRaClass9endPacketEb+0x26>
      //yield();
    }
    // clear IRQ's
    writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8004448:	2208      	movs	r2, #8
 800444a:	2112      	movs	r1, #18
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fc5d 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
  }

  return 1;
 8004452:	2301      	movs	r3, #1
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <_ZN9LoRaClass14isTransmittingEv>:

//readRegister(), writeRegister()
bool LoRaClass::isTransmitting()
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  if ((readRegister(REG_OP_MODE) & MODE_TX) == MODE_TX) {
 8004464:	2101      	movs	r1, #1
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fc1f 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 800446c:	4603      	mov	r3, r0
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b03      	cmp	r3, #3
 8004474:	bf0c      	ite	eq
 8004476:	2301      	moveq	r3, #1
 8004478:	2300      	movne	r3, #0
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <_ZN9LoRaClass14isTransmittingEv+0x28>
    return true;
 8004480:	2301      	movs	r3, #1
 8004482:	e013      	b.n	80044ac <_ZN9LoRaClass14isTransmittingEv+0x50>
  }

  if (readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) {
 8004484:	2112      	movs	r1, #18
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fc0f 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 800448c:	4603      	mov	r3, r0
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b00      	cmp	r3, #0
 8004494:	bf14      	ite	ne
 8004496:	2301      	movne	r3, #1
 8004498:	2300      	moveq	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d004      	beq.n	80044aa <_ZN9LoRaClass14isTransmittingEv+0x4e>
    // clear IRQ's
    writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80044a0:	2208      	movs	r2, #8
 80044a2:	2112      	movs	r1, #18
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fc31 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
  }

  return false;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <_ZN9LoRaClass5writeEh>:
  return static_cast<long>(fError);
}

//readRegister(), writeRegister()
size_t LoRaClass::write(uint8_t byte)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3304      	adds	r3, #4
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	1cf9      	adds	r1, r7, #3
 80044ca:	2201      	movs	r2, #1
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	4798      	blx	r3
 80044d0:	4603      	mov	r3, r0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <_ZN9LoRaClass5writeEPKhj>:

//readRegister(), writeRegister()
size_t LoRaClass::write(const uint8_t *buffer, size_t size)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b086      	sub	sp, #24
 80044de:	af00      	add	r7, sp, #0
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 80044e6:	2122      	movs	r1, #34	; 0x22
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fbde 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 80044ee:	4603      	mov	r3, r0
 80044f0:	613b      	str	r3, [r7, #16]

  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4413      	add	r3, r2
 80044f8:	2bff      	cmp	r3, #255	; 0xff
 80044fa:	d903      	bls.n	8004504 <_ZN9LoRaClass5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004502:	607b      	str	r3, [r7, #4]
  }

  // write data
  for (size_t i = 0; i < size; i++) {
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	d20c      	bcs.n	800452a <_ZN9LoRaClass5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	4413      	add	r3, r2
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	2100      	movs	r1, #0
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 fbf5 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	3301      	adds	r3, #1
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	e7ee      	b.n	8004508 <_ZN9LoRaClass5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	4413      	add	r3, r2
 8004534:	b2db      	uxtb	r3, r3
 8004536:	461a      	mov	r2, r3
 8004538:	2122      	movs	r1, #34	; 0x22
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fbe6 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>

  return size;
 8004540:	687b      	ldr	r3, [r7, #4]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <_ZN9LoRaClass9availableEv>:

//readRegister()
int LoRaClass::available()
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b082      	sub	sp, #8
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8004552:	2113      	movs	r1, #19
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 fba8 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 800455a:	4603      	mov	r3, r0
 800455c:	461a      	mov	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	1ad3      	subs	r3, r2, r3
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <_ZN9LoRaClass4readEv>:

//readRegister(), available()
int LoRaClass::read()
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3308      	adds	r3, #8
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	4798      	blx	r3
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	bf0c      	ite	eq
 8004586:	2301      	moveq	r3, #1
 8004588:	2300      	movne	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <_ZN9LoRaClass4readEv+0x2a>
    return -1;
 8004590:	f04f 33ff 	mov.w	r3, #4294967295
 8004594:	e009      	b.n	80045aa <_ZN9LoRaClass4readEv+0x3e>
  }

  _packetIndex++;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	621a      	str	r2, [r3, #32]

  return readRegister(REG_FIFO);
 80045a0:	2100      	movs	r1, #0
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fb81 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 80045a8:	4603      	mov	r3, r0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <_ZN9LoRaClass4peekEv>:

//writeRegister(), readRegister()
int LoRaClass::peek()
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  if (!available()) {
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3308      	adds	r3, #8
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	4798      	blx	r3
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <_ZN9LoRaClass4peekEv+0x2a>
    return -1;
 80045d6:	f04f 33ff 	mov.w	r3, #4294967295
 80045da:	e013      	b.n	8004604 <_ZN9LoRaClass4peekEv+0x52>
  }

  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 80045dc:	210d      	movs	r1, #13
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fb63 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 80045e4:	4603      	mov	r3, r0
 80045e6:	60fb      	str	r3, [r7, #12]

  // read
  uint8_t b = readRegister(REG_FIFO);
 80045e8:	2100      	movs	r1, #0
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fb5d 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 80045f0:	4603      	mov	r3, r0
 80045f2:	72fb      	strb	r3, [r7, #11]

  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	210d      	movs	r1, #13
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fb85 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>

  return b;
 8004602:	7afb      	ldrb	r3, [r7, #11]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <_ZN9LoRaClass5flushEv>:

//DONE
void LoRaClass::flush()
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <_ZN9LoRaClass4idleEv>:
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
}

//writeRegister()
void LoRaClass::idle()
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8004628:	2281      	movs	r2, #129	; 0x81
 800462a:	2101      	movs	r1, #1
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fb6d 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <_ZN9LoRaClass5sleepEv>:

//writeRegister()
void LoRaClass::sleep()
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8004642:	2280      	movs	r2, #128	; 0x80
 8004644:	2101      	movs	r1, #1
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fb60 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
}
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <_ZN9LoRaClass10setTxPowerEii>:

//writeRegister()
void LoRaClass::setTxPower(int level, int outputPin)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d116      	bne.n	8004694 <_ZN9LoRaClass10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	da02      	bge.n	8004672 <_ZN9LoRaClass10setTxPowerEii+0x1e>
      level = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	e004      	b.n	800467c <_ZN9LoRaClass10setTxPowerEii+0x28>
    } else if (level > 14) {
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b0e      	cmp	r3, #14
 8004676:	dd01      	ble.n	800467c <_ZN9LoRaClass10setTxPowerEii+0x28>
      level = 14;
 8004678:	230e      	movs	r3, #14
 800467a:	60bb      	str	r3, [r7, #8]
    }

    writeRegister(REG_PA_CONFIG, 0x70 | level);
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	b25b      	sxtb	r3, r3
 8004680:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004684:	b25b      	sxtb	r3, r3
 8004686:	b2db      	uxtb	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	2109      	movs	r1, #9
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 fb3d 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
      setOCP(100);
    }

    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8004692:	e030      	b.n	80046f6 <_ZN9LoRaClass10setTxPowerEii+0xa2>
    if (level > 17) {
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b11      	cmp	r3, #17
 8004698:	dd11      	ble.n	80046be <_ZN9LoRaClass10setTxPowerEii+0x6a>
      if (level > 20) {
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b14      	cmp	r3, #20
 800469e:	dd01      	ble.n	80046a4 <_ZN9LoRaClass10setTxPowerEii+0x50>
        level = 20;
 80046a0:	2314      	movs	r3, #20
 80046a2:	60bb      	str	r3, [r7, #8]
      level -= 3;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	3b03      	subs	r3, #3
 80046a8:	60bb      	str	r3, [r7, #8]
      writeRegister(REG_PA_DAC, 0x87);
 80046aa:	2287      	movs	r2, #135	; 0x87
 80046ac:	214d      	movs	r1, #77	; 0x4d
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fb2c 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
      setOCP(140);
 80046b4:	218c      	movs	r1, #140	; 0x8c
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fa16 	bl	8004ae8 <_ZN9LoRaClass6setOCPEh>
 80046bc:	e00d      	b.n	80046da <_ZN9LoRaClass10setTxPowerEii+0x86>
      if (level < 2) {
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	dc01      	bgt.n	80046c8 <_ZN9LoRaClass10setTxPowerEii+0x74>
        level = 2;
 80046c4:	2302      	movs	r3, #2
 80046c6:	60bb      	str	r3, [r7, #8]
      writeRegister(REG_PA_DAC, 0x84);
 80046c8:	2284      	movs	r2, #132	; 0x84
 80046ca:	214d      	movs	r1, #77	; 0x4d
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 fb1d 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
      setOCP(100);
 80046d2:	2164      	movs	r1, #100	; 0x64
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 fa07 	bl	8004ae8 <_ZN9LoRaClass6setOCPEh>
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	3b02      	subs	r3, #2
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	b25b      	sxtb	r3, r3
 80046e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046e8:	b25b      	sxtb	r3, r3
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	2109      	movs	r1, #9
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 fb0b 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
}
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <_ZN9LoRaClass12setFrequencyEl>:

//writeRegister()
void LoRaClass::setFrequency(long frequency)
{
 8004700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	61da      	str	r2, [r3, #28]

  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8004716:	135e      	asrs	r6, r3, #13
 8004718:	04dd      	lsls	r5, r3, #19
 800471a:	4a1a      	ldr	r2, [pc, #104]	; (8004784 <_ZN9LoRaClass12setFrequencyEl+0x84>)
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	4628      	mov	r0, r5
 8004722:	4631      	mov	r1, r6
 8004724:	f7fb fff0 	bl	8000708 <__aeabi_uldivmod>
 8004728:	4603      	mov	r3, r0
 800472a:	460c      	mov	r4, r1
 800472c:	e9c7 3402 	strd	r3, r4, [r7, #8]

  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8004730:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	f04f 0400 	mov.w	r4, #0
 800473c:	0c0b      	lsrs	r3, r1, #16
 800473e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004742:	0c14      	lsrs	r4, r2, #16
 8004744:	b2db      	uxtb	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	2106      	movs	r1, #6
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fade 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8004750:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	f04f 0400 	mov.w	r4, #0
 800475c:	0a0b      	lsrs	r3, r1, #8
 800475e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004762:	0a14      	lsrs	r4, r2, #8
 8004764:	b2db      	uxtb	r3, r3
 8004766:	461a      	mov	r2, r3
 8004768:	2107      	movs	r1, #7
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 face 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8004770:	7a3b      	ldrb	r3, [r7, #8]
 8004772:	461a      	mov	r2, r3
 8004774:	2108      	movs	r1, #8
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fac8 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
}
 800477c:	bf00      	nop
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004784:	01e84800 	.word	0x01e84800

08004788 <_ZN9LoRaClass18getSpreadingFactorEv>:

//readRegister()
int LoRaClass::getSpreadingFactor()
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  return readRegister(REG_MODEM_CONFIG_2) >> 4;
 8004790:	211e      	movs	r1, #30
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fa89 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 8004798:	4603      	mov	r3, r0
 800479a:	111b      	asrs	r3, r3, #4
}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <_ZN9LoRaClass18setSpreadingFactorEi>:

//writeRegister(), setLdoFlag(), readRegister()
void LoRaClass::setSpreadingFactor(int sf)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b05      	cmp	r3, #5
 80047b2:	dc02      	bgt.n	80047ba <_ZN9LoRaClass18setSpreadingFactorEi+0x16>
    sf = 6;
 80047b4:	2306      	movs	r3, #6
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	e004      	b.n	80047c4 <_ZN9LoRaClass18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b0c      	cmp	r3, #12
 80047be:	dd01      	ble.n	80047c4 <_ZN9LoRaClass18setSpreadingFactorEi+0x20>
    sf = 12;
 80047c0:	230c      	movs	r3, #12
 80047c2:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b06      	cmp	r3, #6
 80047c8:	d10a      	bne.n	80047e0 <_ZN9LoRaClass18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 80047ca:	22c5      	movs	r2, #197	; 0xc5
 80047cc:	2131      	movs	r1, #49	; 0x31
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fa9c 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 80047d4:	220c      	movs	r2, #12
 80047d6:	2137      	movs	r1, #55	; 0x37
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fa97 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
 80047de:	e009      	b.n	80047f4 <_ZN9LoRaClass18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 80047e0:	22c3      	movs	r2, #195	; 0xc3
 80047e2:	2131      	movs	r1, #49	; 0x31
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 fa91 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 80047ea:	220a      	movs	r2, #10
 80047ec:	2137      	movs	r1, #55	; 0x37
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fa8c 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
  }

  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 80047f4:	211e      	movs	r1, #30
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fa57 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 80047fc:	4603      	mov	r3, r0
 80047fe:	b25b      	sxtb	r3, r3
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	b25a      	sxtb	r2, r3
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	b25b      	sxtb	r3, r3
 800480c:	4313      	orrs	r3, r2
 800480e:	b25b      	sxtb	r3, r3
 8004810:	b2db      	uxtb	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	211e      	movs	r1, #30
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fa78 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
  setLdoFlag();
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f917 	bl	8004a50 <_ZN9LoRaClass10setLdoFlagEv>
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <_ZN9LoRaClass18getSignalBandwidthEv>:

//readRegister()
long LoRaClass::getSignalBandwidth()
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint8_t bw = (readRegister(REG_MODEM_CONFIG_1) >> 4);
 8004834:	211d      	movs	r1, #29
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fa37 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 800483c:	4603      	mov	r3, r0
 800483e:	111b      	asrs	r3, r3, #4
 8004840:	73fb      	strb	r3, [r7, #15]

  switch (bw) {
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	2b09      	cmp	r3, #9
 8004846:	d832      	bhi.n	80048ae <_ZN9LoRaClass18getSignalBandwidthEv+0x82>
 8004848:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <_ZN9LoRaClass18getSignalBandwidthEv+0x24>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004879 	.word	0x08004879
 8004854:	0800487f 	.word	0x0800487f
 8004858:	08004885 	.word	0x08004885
 800485c:	0800488b 	.word	0x0800488b
 8004860:	08004891 	.word	0x08004891
 8004864:	08004897 	.word	0x08004897
 8004868:	0800489d 	.word	0x0800489d
 800486c:	080048a3 	.word	0x080048a3
 8004870:	080048a7 	.word	0x080048a7
 8004874:	080048ab 	.word	0x080048ab
    case 0: return 7.8E3;
 8004878:	f641 6378 	movw	r3, #7800	; 0x1e78
 800487c:	e019      	b.n	80048b2 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 1: return 10.4E3;
 800487e:	f642 03a0 	movw	r3, #10400	; 0x28a0
 8004882:	e016      	b.n	80048b2 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 2: return 15.6E3;
 8004884:	f643 43f0 	movw	r3, #15600	; 0x3cf0
 8004888:	e013      	b.n	80048b2 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 3: return 20.8E3;
 800488a:	f245 1340 	movw	r3, #20800	; 0x5140
 800488e:	e010      	b.n	80048b2 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 4: return 31.25E3;
 8004890:	f647 2312 	movw	r3, #31250	; 0x7a12
 8004894:	e00d      	b.n	80048b2 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 5: return 41.7E3;
 8004896:	f24a 23e4 	movw	r3, #41700	; 0xa2e4
 800489a:	e00a      	b.n	80048b2 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 6: return 62.5E3;
 800489c:	f24f 4324 	movw	r3, #62500	; 0xf424
 80048a0:	e007      	b.n	80048b2 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 7: return 125E3;
 80048a2:	4b06      	ldr	r3, [pc, #24]	; (80048bc <_ZN9LoRaClass18getSignalBandwidthEv+0x90>)
 80048a4:	e005      	b.n	80048b2 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 8: return 250E3;
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <_ZN9LoRaClass18getSignalBandwidthEv+0x94>)
 80048a8:	e003      	b.n	80048b2 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 9: return 500E3;
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <_ZN9LoRaClass18getSignalBandwidthEv+0x98>)
 80048ac:	e001      	b.n	80048b2 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
  }

  return -1;
 80048ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	0001e848 	.word	0x0001e848
 80048c0:	0003d090 	.word	0x0003d090
 80048c4:	0007a120 	.word	0x0007a120

080048c8 <_ZN9LoRaClass18setSignalBandwidthEl>:

//writeRegister(), setLdoFlag()
void LoRaClass::setSignalBandwidth(long sbw)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  int bw;

  if (sbw <= 7.8E3) {
 80048d2:	6838      	ldr	r0, [r7, #0]
 80048d4:	f7fb fe26 	bl	8000524 <__aeabi_i2d>
 80048d8:	a34b      	add	r3, pc, #300	; (adr r3, 8004a08 <_ZN9LoRaClass18setSignalBandwidthEl+0x140>)
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f7fb fef5 	bl	80006cc <__aeabi_dcmple>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <_ZN9LoRaClass18setSignalBandwidthEl+0x26>
    bw = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	e071      	b.n	80049d2 <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 10.4E3) {
 80048ee:	6838      	ldr	r0, [r7, #0]
 80048f0:	f7fb fe18 	bl	8000524 <__aeabi_i2d>
 80048f4:	a346      	add	r3, pc, #280	; (adr r3, 8004a10 <_ZN9LoRaClass18setSignalBandwidthEl+0x148>)
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f7fb fee7 	bl	80006cc <__aeabi_dcmple>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <_ZN9LoRaClass18setSignalBandwidthEl+0x42>
    bw = 1;
 8004904:	2301      	movs	r3, #1
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e063      	b.n	80049d2 <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 15.6E3) {
 800490a:	6838      	ldr	r0, [r7, #0]
 800490c:	f7fb fe0a 	bl	8000524 <__aeabi_i2d>
 8004910:	a341      	add	r3, pc, #260	; (adr r3, 8004a18 <_ZN9LoRaClass18setSignalBandwidthEl+0x150>)
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	f7fb fed9 	bl	80006cc <__aeabi_dcmple>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <_ZN9LoRaClass18setSignalBandwidthEl+0x5e>
    bw = 2;
 8004920:	2302      	movs	r3, #2
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	e055      	b.n	80049d2 <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 20.8E3) {
 8004926:	6838      	ldr	r0, [r7, #0]
 8004928:	f7fb fdfc 	bl	8000524 <__aeabi_i2d>
 800492c:	a33c      	add	r3, pc, #240	; (adr r3, 8004a20 <_ZN9LoRaClass18setSignalBandwidthEl+0x158>)
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	f7fb fecb 	bl	80006cc <__aeabi_dcmple>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <_ZN9LoRaClass18setSignalBandwidthEl+0x7a>
    bw = 3;
 800493c:	2303      	movs	r3, #3
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e047      	b.n	80049d2 <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 31.25E3) {
 8004942:	6838      	ldr	r0, [r7, #0]
 8004944:	f7fb fdee 	bl	8000524 <__aeabi_i2d>
 8004948:	a337      	add	r3, pc, #220	; (adr r3, 8004a28 <_ZN9LoRaClass18setSignalBandwidthEl+0x160>)
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	f7fb febd 	bl	80006cc <__aeabi_dcmple>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <_ZN9LoRaClass18setSignalBandwidthEl+0x96>
    bw = 4;
 8004958:	2304      	movs	r3, #4
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	e039      	b.n	80049d2 <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 41.7E3) {
 800495e:	6838      	ldr	r0, [r7, #0]
 8004960:	f7fb fde0 	bl	8000524 <__aeabi_i2d>
 8004964:	a332      	add	r3, pc, #200	; (adr r3, 8004a30 <_ZN9LoRaClass18setSignalBandwidthEl+0x168>)
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f7fb feaf 	bl	80006cc <__aeabi_dcmple>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <_ZN9LoRaClass18setSignalBandwidthEl+0xb2>
    bw = 5;
 8004974:	2305      	movs	r3, #5
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	e02b      	b.n	80049d2 <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 62.5E3) {
 800497a:	6838      	ldr	r0, [r7, #0]
 800497c:	f7fb fdd2 	bl	8000524 <__aeabi_i2d>
 8004980:	a32d      	add	r3, pc, #180	; (adr r3, 8004a38 <_ZN9LoRaClass18setSignalBandwidthEl+0x170>)
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f7fb fea1 	bl	80006cc <__aeabi_dcmple>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <_ZN9LoRaClass18setSignalBandwidthEl+0xce>
    bw = 6;
 8004990:	2306      	movs	r3, #6
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e01d      	b.n	80049d2 <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 125E3) {
 8004996:	6838      	ldr	r0, [r7, #0]
 8004998:	f7fb fdc4 	bl	8000524 <__aeabi_i2d>
 800499c:	a328      	add	r3, pc, #160	; (adr r3, 8004a40 <_ZN9LoRaClass18setSignalBandwidthEl+0x178>)
 800499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a2:	f7fb fe93 	bl	80006cc <__aeabi_dcmple>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <_ZN9LoRaClass18setSignalBandwidthEl+0xea>
    bw = 7;
 80049ac:	2307      	movs	r3, #7
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e00f      	b.n	80049d2 <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 250E3) {
 80049b2:	6838      	ldr	r0, [r7, #0]
 80049b4:	f7fb fdb6 	bl	8000524 <__aeabi_i2d>
 80049b8:	a323      	add	r3, pc, #140	; (adr r3, 8004a48 <_ZN9LoRaClass18setSignalBandwidthEl+0x180>)
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f7fb fe85 	bl	80006cc <__aeabi_dcmple>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <_ZN9LoRaClass18setSignalBandwidthEl+0x106>
    bw = 8;
 80049c8:	2308      	movs	r3, #8
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	e001      	b.n	80049d2 <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 80049ce:	2309      	movs	r3, #9
 80049d0:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 80049d2:	211d      	movs	r1, #29
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f968 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 80049da:	4603      	mov	r3, r0
 80049dc:	b25b      	sxtb	r3, r3
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	b25a      	sxtb	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	b25b      	sxtb	r3, r3
 80049ea:	4313      	orrs	r3, r2
 80049ec:	b25b      	sxtb	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	211d      	movs	r1, #29
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f989 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
  setLdoFlag();
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f828 	bl	8004a50 <_ZN9LoRaClass10setLdoFlagEv>
}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	00000000 	.word	0x00000000
 8004a0c:	40be7800 	.word	0x40be7800
 8004a10:	00000000 	.word	0x00000000
 8004a14:	40c45000 	.word	0x40c45000
 8004a18:	00000000 	.word	0x00000000
 8004a1c:	40ce7800 	.word	0x40ce7800
 8004a20:	00000000 	.word	0x00000000
 8004a24:	40d45000 	.word	0x40d45000
 8004a28:	00000000 	.word	0x00000000
 8004a2c:	40de8480 	.word	0x40de8480
 8004a30:	00000000 	.word	0x00000000
 8004a34:	40e45c80 	.word	0x40e45c80
 8004a38:	00000000 	.word	0x00000000
 8004a3c:	40ee8480 	.word	0x40ee8480
 8004a40:	00000000 	.word	0x00000000
 8004a44:	40fe8480 	.word	0x40fe8480
 8004a48:	00000000 	.word	0x00000000
 8004a4c:	410e8480 	.word	0x410e8480

08004a50 <_ZN9LoRaClass10setLdoFlagEv>:

//writeRegister(), readRegister(), getSignalBandwidth(), getSpreadingFactor(), bitWrite()
void LoRaClass::setLdoFlag()
{
 8004a50:	b590      	push	{r4, r7, lr}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  // Section 4.1.1.5
  long symbolDuration = 1000 / ( getSignalBandwidth() / (1L << getSpreadingFactor()) ) ;
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff fee7 	bl	800482c <_ZN9LoRaClass18getSignalBandwidthEv>
 8004a5e:	4604      	mov	r4, r0
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7ff fe91 	bl	8004788 <_ZN9LoRaClass18getSpreadingFactorEv>
 8004a66:	4602      	mov	r2, r0
 8004a68:	2301      	movs	r3, #1
 8004a6a:	4093      	lsls	r3, r2
 8004a6c:	fb94 f3f3 	sdiv	r3, r4, r3
 8004a70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a74:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a78:	613b      	str	r3, [r7, #16]

  // Section 4.1.1.6
  bool ldoOn = symbolDuration > 16;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b10      	cmp	r3, #16
 8004a7e:	bfcc      	ite	gt
 8004a80:	2301      	movgt	r3, #1
 8004a82:	2300      	movle	r3, #0
 8004a84:	73fb      	strb	r3, [r7, #15]

  uint8_t config3 = readRegister(REG_MODEM_CONFIG_3);
 8004a86:	2126      	movs	r1, #38	; 0x26
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f90e 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	75fb      	strb	r3, [r7, #23]

  //bitWrite(config3, 3, ldoOn);
  //NEW
  if(ldoOn == true){
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d004      	beq.n	8004aa2 <_ZN9LoRaClass10setLdoFlagEv+0x52>
	  config3 ^= 0b00001000;
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	f083 0308 	eor.w	r3, r3, #8
 8004a9e:	75fb      	strb	r3, [r7, #23]
 8004aa0:	e003      	b.n	8004aaa <_ZN9LoRaClass10setLdoFlagEv+0x5a>
  }
  else{
	  config3 &= 0b11110111;
 8004aa2:	7dfb      	ldrb	r3, [r7, #23]
 8004aa4:	f023 0308 	bic.w	r3, r3, #8
 8004aa8:	75fb      	strb	r3, [r7, #23]
  }

  writeRegister(REG_MODEM_CONFIG_3, config3);
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
 8004aac:	461a      	mov	r2, r3
 8004aae:	2126      	movs	r1, #38	; 0x26
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f92b 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd90      	pop	{r4, r7, pc}

08004abe <_ZN9LoRaClass9enableCrcEv>:
  writeRegister(REG_SYNC_WORD, sw);
}

//writeRegister()
void LoRaClass::enableCrc()
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  writeRegister(REG_MODEM_CONFIG_2, readRegister(REG_MODEM_CONFIG_2) | 0x04);
 8004ac6:	211e      	movs	r1, #30
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8ee 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f043 0304 	orr.w	r3, r3, #4
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	211e      	movs	r1, #30
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f916 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
}
 8004ae0:	bf00      	nop
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <_ZN9LoRaClass6setOCPEh>:
  writeRegister(REG_INVERTIQ2, 0x1d);
}

//writeRegister()
void LoRaClass::setOCP(uint8_t mA)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	70fb      	strb	r3, [r7, #3]
  uint8_t ocpTrim = 27;
 8004af4:	231b      	movs	r3, #27
 8004af6:	73fb      	strb	r3, [r7, #15]

  if (mA <= 120) {
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	2b78      	cmp	r3, #120	; 0x78
 8004afc:	d809      	bhi.n	8004b12 <_ZN9LoRaClass6setOCPEh+0x2a>
    ocpTrim = (mA - 45) / 5;
 8004afe:	78fb      	ldrb	r3, [r7, #3]
 8004b00:	3b2d      	subs	r3, #45	; 0x2d
 8004b02:	4a12      	ldr	r2, [pc, #72]	; (8004b4c <_ZN9LoRaClass6setOCPEh+0x64>)
 8004b04:	fb82 1203 	smull	r1, r2, r2, r3
 8004b08:	1052      	asrs	r2, r2, #1
 8004b0a:	17db      	asrs	r3, r3, #31
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	73fb      	strb	r3, [r7, #15]
 8004b10:	e00b      	b.n	8004b2a <_ZN9LoRaClass6setOCPEh+0x42>
  } else if (mA <=240) {
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	2bf0      	cmp	r3, #240	; 0xf0
 8004b16:	d808      	bhi.n	8004b2a <_ZN9LoRaClass6setOCPEh+0x42>
    ocpTrim = (mA + 30) / 10;
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	331e      	adds	r3, #30
 8004b1c:	4a0b      	ldr	r2, [pc, #44]	; (8004b4c <_ZN9LoRaClass6setOCPEh+0x64>)
 8004b1e:	fb82 1203 	smull	r1, r2, r2, r3
 8004b22:	1092      	asrs	r2, r2, #2
 8004b24:	17db      	asrs	r3, r3, #31
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	73fb      	strb	r3, [r7, #15]
  }

  writeRegister(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	f043 0320 	orr.w	r3, r3, #32
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	461a      	mov	r2, r3
 8004b3a:	210b      	movs	r1, #11
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f8e5 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
}
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	66666667 	.word	0x66666667

08004b50 <_ZN9LoRaClass7setPinsEP12GPIO_TypeDeftS1_t9IRQn_Type>:
  return readRegister(REG_RSSI_WIDEBAND);
}

//internal setting
void LoRaClass::setPins(GPIO_TypeDef * nss_gpio_port, uint16_t nss_pin, GPIO_TypeDef * reset_gpio_port, uint16_t reset_pin, IRQn_Type dio0_IRQ)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	80fb      	strh	r3, [r7, #6]
	_nss_gpio_port = nss_gpio_port;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	60da      	str	r2, [r3, #12]
	_nss_pin = nss_pin,
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	88fa      	ldrh	r2, [r7, #6]
 8004b6a:	821a      	strh	r2, [r3, #16]
	_reset_gpio_port = reset_gpio_port;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	615a      	str	r2, [r3, #20]
	_reset_pin = reset_pin;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8b3a      	ldrh	r2, [r7, #24]
 8004b76:	831a      	strh	r2, [r3, #24]
	_dio0_IRQ = dio0_IRQ;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	7f3a      	ldrb	r2, [r7, #28]
 8004b7c:	769a      	strb	r2, [r3, #26]
}
 8004b7e:	bf00      	nop
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <_ZN9LoRaClass6setSPIEP19__SPI_HandleTypeDef>:

//internal setting
void LoRaClass::setSPI(SPI_HandleTypeDef* hspi)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	6039      	str	r1, [r7, #0]
  _hspi = hspi;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	605a      	str	r2, [r3, #4]
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <_ZN9LoRaClass6setTIMEP17TIM_HandleTypeDef>:

//NEW
void LoRaClass::setTIM(TIM_HandleTypeDef* htim)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]
  _htim = htim;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	609a      	str	r2, [r3, #8]
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <_ZN9LoRaClass18explicitHeaderModeEv>:
  }
}

//writeRegister()
void LoRaClass::explicitHeaderMode()
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	625a      	str	r2, [r3, #36]	; 0x24

  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8004bd0:	211d      	movs	r1, #29
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f869 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	461a      	mov	r2, r3
 8004be2:	211d      	movs	r1, #29
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f891 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <_ZN9LoRaClass18implicitHeaderModeEv>:

//writeRegister()
void LoRaClass::implicitHeaderMode()
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	625a      	str	r2, [r3, #36]	; 0x24

  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8004c00:	211d      	movs	r1, #29
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f851 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	211d      	movs	r1, #29
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f879 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
}
 8004c1a:	bf00      	nop
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <_ZN9LoRaClass14handleDio0RiseEv>:

//readRegister(), writeRegister(), _onReceive
void LoRaClass::handleDio0Rise()
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8004c2a:	2112      	movs	r1, #18
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f83c 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 8004c32:	4603      	mov	r3, r0
 8004c34:	60fb      	str	r3, [r7, #12]

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	2112      	movs	r1, #18
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f864 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>

  if ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d129      	bne.n	8004ca2 <_ZN9LoRaClass14handleDio0RiseEv+0x80>
    // received a packet
    _packetIndex = 0;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	621a      	str	r2, [r3, #32]

    // read packet length
    int packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <_ZN9LoRaClass14handleDio0RiseEv+0x46>
 8004c5c:	2122      	movs	r1, #34	; 0x22
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f823 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 8004c64:	4603      	mov	r3, r0
 8004c66:	e004      	b.n	8004c72 <_ZN9LoRaClass14handleDio0RiseEv+0x50>
 8004c68:	2113      	movs	r1, #19
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f81d 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 8004c70:	4603      	mov	r3, r0
 8004c72:	60bb      	str	r3, [r7, #8]

    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8004c74:	2110      	movs	r1, #16
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f817 	bl	8004caa <_ZN9LoRaClass12readRegisterEh>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	461a      	mov	r2, r3
 8004c80:	210d      	movs	r1, #13
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f842 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>

    if (_onReceive) {
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <_ZN9LoRaClass14handleDio0RiseEv+0x76>
      _onReceive(packetLength);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c94:	68b8      	ldr	r0, [r7, #8]
 8004c96:	4798      	blx	r3
    }

    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8004c98:	2200      	movs	r2, #0
 8004c9a:	210d      	movs	r1, #13
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f835 	bl	8004d0c <_ZN9LoRaClass13writeRegisterEhh>
  }
}
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <_ZN9LoRaClass12readRegisterEh>:

//NEW
uint8_t LoRaClass::readRegister(uint8_t address)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	70fb      	strb	r3, [r7, #3]
  //return singleTransfer(address & 0x7f, 0x00);
	uint8_t value = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73fb      	strb	r3, [r7, #15]
	address = address & 0x7f;
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(_nss_gpio_port, _nss_pin, GPIO_PIN_RESET);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68d8      	ldr	r0, [r3, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8a1b      	ldrh	r3, [r3, #16]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	4619      	mov	r1, r3
 8004cd0:	f7fc f9ee 	bl	80010b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (_hspi, &address, 1, 100);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6858      	ldr	r0, [r3, #4]
 8004cd8:	1cf9      	adds	r1, r7, #3
 8004cda:	2364      	movs	r3, #100	; 0x64
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f7fd fd69 	bl	80027b4 <HAL_SPI_Transmit>
	HAL_SPI_Receive (_hspi, &value, 1, 100);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6858      	ldr	r0, [r3, #4]
 8004ce6:	f107 010f 	add.w	r1, r7, #15
 8004cea:	2364      	movs	r3, #100	; 0x64
 8004cec:	2201      	movs	r2, #1
 8004cee:	f7fd fec7 	bl	8002a80 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_nss_gpio_port, _nss_pin, GPIO_PIN_SET);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68d8      	ldr	r0, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8a1b      	ldrh	r3, [r3, #16]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	f7fc f9d7 	bl	80010b0 <HAL_GPIO_WritePin>
	return value;
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <_ZN9LoRaClass13writeRegisterEhh>:

//NEW
void LoRaClass::writeRegister(uint8_t address, uint8_t value)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	70bb      	strb	r3, [r7, #2]
  //singleTransfer(address | 0x80, value);
	uint8_t MOSIBuffer[2];
	MOSIBuffer[0] = address | 0x80;
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	733b      	strb	r3, [r7, #12]
	MOSIBuffer[1] = value;
 8004d26:	78bb      	ldrb	r3, [r7, #2]
 8004d28:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(_nss_gpio_port, _nss_pin, GPIO_PIN_RESET);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68d8      	ldr	r0, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8a1b      	ldrh	r3, [r3, #16]
 8004d32:	2200      	movs	r2, #0
 8004d34:	4619      	mov	r1, r3
 8004d36:	f7fc f9bb 	bl	80010b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (_hspi, MOSIBuffer, 2, 100);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6858      	ldr	r0, [r3, #4]
 8004d3e:	f107 010c 	add.w	r1, r7, #12
 8004d42:	2364      	movs	r3, #100	; 0x64
 8004d44:	2202      	movs	r2, #2
 8004d46:	f7fd fd35 	bl	80027b4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_nss_gpio_port, _nss_pin, GPIO_PIN_SET);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68d8      	ldr	r0, [r3, #12]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	8a1b      	ldrh	r3, [r3, #16]
 8004d52:	2201      	movs	r2, #1
 8004d54:	4619      	mov	r1, r3
 8004d56:	f7fc f9ab 	bl	80010b0 <HAL_GPIO_WritePin>
}
 8004d5a:	bf00      	nop
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <_ZN9LoRaClass10onDio0RiseEv>:
  return response;
}

//handleDio0Rise()
void LoRaClass::onDio0Rise()
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  LoRa.handleDio0Rise();
 8004d6c:	4803      	ldr	r0, [pc, #12]	; (8004d7c <_ZN9LoRaClass10onDio0RiseEv+0x18>)
 8004d6e:	f7ff ff58 	bl	8004c22 <_ZN9LoRaClass14handleDio0RiseEv>
}
 8004d72:	bf00      	nop
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	2000008c 	.word	0x2000008c

08004d80 <_ZN9LoRaClass5printEPKc>:

/**
 * print methods
 */
size_t LoRaClass::print(const char str[])
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  return write(str);
 8004d8a:	6839      	ldr	r1, [r7, #0]
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff fa60 	bl	8004252 <_ZN9LoRaClass5writeEPKc>
 8004d92:	4603      	mov	r3, r0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <_ZN9LoRaClass5printEc>:

size_t LoRaClass::print(char c)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	70fb      	strb	r3, [r7, #3]
  return write(c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	4611      	mov	r1, r2
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	4798      	blx	r3
 8004db6:	4603      	mov	r3, r0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <_ZN9LoRaClass5printEii>:
{
  return print((unsigned long) b, base);
}

size_t LoRaClass::print(int n, int base)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f805 	bl	8004de0 <_ZN9LoRaClass5printEli>
 8004dd6:	4603      	mov	r3, r0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <_ZN9LoRaClass5printEli>:
{
  return print((unsigned long) n, base);
}

size_t LoRaClass::print(long n, int base)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <_ZN9LoRaClass5printEli+0x26>
    return write(n);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	4798      	blx	r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	e028      	b.n	8004e58 <_ZN9LoRaClass5printEli+0x78>
  } else if (base == 10) {
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b0a      	cmp	r3, #10
 8004e0a:	d11d      	bne.n	8004e48 <_ZN9LoRaClass5printEli+0x68>
    if (n < 0) {
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da12      	bge.n	8004e38 <_ZN9LoRaClass5printEli+0x58>
      int t = print('-');
 8004e12:	212d      	movs	r1, #45	; 0x2d
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff ffc1 	bl	8004d9c <_ZN9LoRaClass5printEc>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	617b      	str	r3, [r7, #20]
      n = -n;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	425b      	negs	r3, r3
 8004e22:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	220a      	movs	r2, #10
 8004e28:	4619      	mov	r1, r3
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f818 	bl	8004e60 <_ZN9LoRaClass11printNumberEmh>
 8004e30:	4602      	mov	r2, r0
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	4413      	add	r3, r2
 8004e36:	e00f      	b.n	8004e58 <_ZN9LoRaClass5printEli+0x78>
    }
    return printNumber(n, 10);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	220a      	movs	r2, #10
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f80e 	bl	8004e60 <_ZN9LoRaClass11printNumberEmh>
 8004e44:	4603      	mov	r3, r0
 8004e46:	e007      	b.n	8004e58 <_ZN9LoRaClass5printEli+0x78>
  } else {
    return printNumber(n, base);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	4619      	mov	r1, r3
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f805 	bl	8004e60 <_ZN9LoRaClass11printNumberEmh>
 8004e56:	4603      	mov	r3, r0
  }
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <_ZN9LoRaClass11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t LoRaClass::printNumber(unsigned long n, uint8_t base)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08e      	sub	sp, #56	; 0x38
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 8004e6e:	f107 0310 	add.w	r3, r7, #16
 8004e72:	3320      	adds	r3, #32
 8004e74:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
 8004e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d801      	bhi.n	8004e86 <_ZN9LoRaClass11printNumberEmh+0x26>
 8004e82:	230a      	movs	r3, #10
 8004e84:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
 8004e86:	79fa      	ldrb	r2, [r7, #7]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e8e:	fb02 f201 	mul.w	r2, r2, r1
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8004ea2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ea6:	2b09      	cmp	r3, #9
 8004ea8:	d804      	bhi.n	8004eb4 <_ZN9LoRaClass11printNumberEmh+0x54>
 8004eaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004eae:	3330      	adds	r3, #48	; 0x30
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	e003      	b.n	8004ebc <_ZN9LoRaClass11printNumberEmh+0x5c>
 8004eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004eb8:	3337      	adds	r3, #55	; 0x37
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ebe:	3a01      	subs	r2, #1
 8004ec0:	637a      	str	r2, [r7, #52]	; 0x34
 8004ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ec4:	7013      	strb	r3, [r2, #0]
  } while(n);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d000      	beq.n	8004ece <_ZN9LoRaClass11printNumberEmh+0x6e>
  do {
 8004ecc:	e7db      	b.n	8004e86 <_ZN9LoRaClass11printNumberEmh+0x26>

  return write(str);
 8004ece:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f7ff f9be 	bl	8004252 <_ZN9LoRaClass5writeEPKc>
 8004ed6:	4603      	mov	r3, r0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3738      	adds	r7, #56	; 0x38
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <_Z41__static_initialization_and_destruction_0ii>:
  }

  return n;
}

LoRaClass LoRa;
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d107      	bne.n	8004f00 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d102      	bne.n	8004f00 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004efa:	4803      	ldr	r0, [pc, #12]	; (8004f08 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8004efc:	f7ff f9c4 	bl	8004288 <_ZN9LoRaClassC1Ev>
 8004f00:	bf00      	nop
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	2000008c 	.word	0x2000008c

08004f0c <_GLOBAL__sub_I__ZN9LoRaClassC2Ev>:
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f14:	2001      	movs	r0, #1
 8004f16:	f7ff ffe3 	bl	8004ee0 <_Z41__static_initialization_and_destruction_0ii>
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f22:	f7fb fd71 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f26:	f000 f885 	bl	8005034 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f2a:	f000 f9e5 	bl	80052f8 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8004f2e:	f000 f9af 	bl	8005290 <_ZL19MX_USART2_UART_Initv>
  MX_SPI2_Init();
 8004f32:	f000 f909 	bl	8005148 <_ZL12MX_SPI2_Initv>
  MX_TIM1_Init();
 8004f36:	f000 f949 	bl	80051cc <_ZL12MX_TIM1_Initv>

  /* USER CODE BEGIN 2 */
  LoRa.setPins(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, NULL, -1, EXTI15_10_IRQn);
 8004f3a:	2328      	movs	r3, #40	; 0x28
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	2300      	movs	r3, #0
 8004f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f4a:	492d      	ldr	r1, [pc, #180]	; (8005000 <main+0xe4>)
 8004f4c:	482d      	ldr	r0, [pc, #180]	; (8005004 <main+0xe8>)
 8004f4e:	f7ff fdff 	bl	8004b50 <_ZN9LoRaClass7setPinsEP12GPIO_TypeDeftS1_t9IRQn_Type>
  LoRa.setSPI(&hspi2);
 8004f52:	492d      	ldr	r1, [pc, #180]	; (8005008 <main+0xec>)
 8004f54:	482b      	ldr	r0, [pc, #172]	; (8005004 <main+0xe8>)
 8004f56:	f7ff fe18 	bl	8004b8a <_ZN9LoRaClass6setSPIEP19__SPI_HandleTypeDef>
  LoRa.setTIM(&htim1);
 8004f5a:	492c      	ldr	r1, [pc, #176]	; (800500c <main+0xf0>)
 8004f5c:	4829      	ldr	r0, [pc, #164]	; (8005004 <main+0xe8>)
 8004f5e:	f7ff fe22 	bl	8004ba6 <_ZN9LoRaClass6setTIMEP17TIM_HandleTypeDef>

  if (!LoRa.begin(433.123E6)) {
 8004f62:	492b      	ldr	r1, [pc, #172]	; (8005010 <main+0xf4>)
 8004f64:	4827      	ldr	r0, [pc, #156]	; (8005004 <main+0xe8>)
 8004f66:	f7ff f9ab 	bl	80042c0 <_ZN9LoRaClass5beginEl>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf0c      	ite	eq
 8004f70:	2301      	moveq	r3, #1
 8004f72:	2300      	movne	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <main+0x66>
	  printf("Starting LoRa failed!\n");
 8004f7a:	4826      	ldr	r0, [pc, #152]	; (8005014 <main+0xf8>)
 8004f7c:	f000 fd38 	bl	80059f0 <puts>
      while (1);
 8004f80:	e7fe      	b.n	8004f80 <main+0x64>
  }
  LoRa.setTxPower(20, 1);
 8004f82:	2201      	movs	r2, #1
 8004f84:	2114      	movs	r1, #20
 8004f86:	481f      	ldr	r0, [pc, #124]	; (8005004 <main+0xe8>)
 8004f88:	f7ff fb64 	bl	8004654 <_ZN9LoRaClass10setTxPowerEii>
  LoRa.setSignalBandwidth(125E3);
 8004f8c:	4922      	ldr	r1, [pc, #136]	; (8005018 <main+0xfc>)
 8004f8e:	481d      	ldr	r0, [pc, #116]	; (8005004 <main+0xe8>)
 8004f90:	f7ff fc9a 	bl	80048c8 <_ZN9LoRaClass18setSignalBandwidthEl>
  LoRa.setSpreadingFactor(11);
 8004f94:	210b      	movs	r1, #11
 8004f96:	481b      	ldr	r0, [pc, #108]	; (8005004 <main+0xe8>)
 8004f98:	f7ff fc04 	bl	80047a4 <_ZN9LoRaClass18setSpreadingFactorEi>
  LoRa.enableCrc();
 8004f9c:	4819      	ldr	r0, [pc, #100]	; (8005004 <main+0xe8>)
 8004f9e:	f7ff fd8e 	bl	8004abe <_ZN9LoRaClass9enableCrcEv>
  printf("LoRa started\n");
 8004fa2:	481e      	ldr	r0, [pc, #120]	; (800501c <main+0x100>)
 8004fa4:	f000 fd24 	bl	80059f0 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	printf("Sending packet: %d\n", counter);
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <main+0x104>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4619      	mov	r1, r3
 8004fae:	481d      	ldr	r0, [pc, #116]	; (8005024 <main+0x108>)
 8004fb0:	f000 fcaa 	bl	8005908 <iprintf>

	// send packet
	LoRa.beginPacket();
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4813      	ldr	r0, [pc, #76]	; (8005004 <main+0xe8>)
 8004fb8:	f7ff f9de 	bl	8004378 <_ZN9LoRaClass11beginPacketEi>
	LoRa.print("hello ");
 8004fbc:	491a      	ldr	r1, [pc, #104]	; (8005028 <main+0x10c>)
 8004fbe:	4811      	ldr	r0, [pc, #68]	; (8005004 <main+0xe8>)
 8004fc0:	f7ff fede 	bl	8004d80 <_ZN9LoRaClass5printEPKc>
	LoRa.print(counter);
 8004fc4:	4b16      	ldr	r3, [pc, #88]	; (8005020 <main+0x104>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	220a      	movs	r2, #10
 8004fca:	4619      	mov	r1, r3
 8004fcc:	480d      	ldr	r0, [pc, #52]	; (8005004 <main+0xe8>)
 8004fce:	f7ff fef7 	bl	8004dc0 <_ZN9LoRaClass5printEii>
	LoRa.print("\n");
 8004fd2:	4916      	ldr	r1, [pc, #88]	; (800502c <main+0x110>)
 8004fd4:	480b      	ldr	r0, [pc, #44]	; (8005004 <main+0xe8>)
 8004fd6:	f7ff fed3 	bl	8004d80 <_ZN9LoRaClass5printEPKc>
	LoRa.print("LF working");
 8004fda:	4915      	ldr	r1, [pc, #84]	; (8005030 <main+0x114>)
 8004fdc:	4809      	ldr	r0, [pc, #36]	; (8005004 <main+0xe8>)
 8004fde:	f7ff fecf 	bl	8004d80 <_ZN9LoRaClass5printEPKc>
	LoRa.endPacket();
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4807      	ldr	r0, [pc, #28]	; (8005004 <main+0xe8>)
 8004fe6:	f7ff fa0d 	bl	8004404 <_ZN9LoRaClass9endPacketEb>

	counter++;
 8004fea:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <main+0x104>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	4a0b      	ldr	r2, [pc, #44]	; (8005020 <main+0x104>)
 8004ff2:	6013      	str	r3, [r2, #0]

	HAL_Delay(1500);
 8004ff4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004ff8:	f7fb fd7e 	bl	8000af8 <HAL_Delay>
	printf("Sending packet: %d\n", counter);
 8004ffc:	e7d4      	b.n	8004fa8 <main+0x8c>
 8004ffe:	bf00      	nop
 8005000:	48000400 	.word	0x48000400
 8005004:	2000008c 	.word	0x2000008c
 8005008:	200000b8 	.word	0x200000b8
 800500c:	2000011c 	.word	0x2000011c
 8005010:	19d0eeb8 	.word	0x19d0eeb8
 8005014:	080067b0 	.word	0x080067b0
 8005018:	0001e848 	.word	0x0001e848
 800501c:	080067c8 	.word	0x080067c8
 8005020:	20000208 	.word	0x20000208
 8005024:	080067d8 	.word	0x080067d8
 8005028:	080067ec 	.word	0x080067ec
 800502c:	080067f4 	.word	0x080067f4
 8005030:	080067f8 	.word	0x080067f8

08005034 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b0b8      	sub	sp, #224	; 0xe0
 8005038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800503a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800503e:	2244      	movs	r2, #68	; 0x44
 8005040:	2100      	movs	r1, #0
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fc58 	bl	80058f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005048:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	605a      	str	r2, [r3, #4]
 8005052:	609a      	str	r2, [r3, #8]
 8005054:	60da      	str	r2, [r3, #12]
 8005056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005058:	463b      	mov	r3, r7
 800505a:	2288      	movs	r2, #136	; 0x88
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fc4a 	bl	80058f8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005064:	2302      	movs	r3, #2
 8005066:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800506a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800506e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005072:	2310      	movs	r3, #16
 8005074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005078:	2302      	movs	r3, #2
 800507a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800507e:	2302      	movs	r3, #2
 8005080:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005084:	2301      	movs	r3, #1
 8005086:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800508a:	230a      	movs	r3, #10
 800508c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005090:	2307      	movs	r3, #7
 8005092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005096:	2302      	movs	r3, #2
 8005098:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800509c:	2302      	movs	r3, #2
 800509e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80050a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fc f896 	bl	80011d8 <HAL_RCC_OscConfig>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	bf14      	ite	ne
 80050b2:	2301      	movne	r3, #1
 80050b4:	2300      	moveq	r3, #0
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 80050bc:	f000 f9b4 	bl	8005428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80050c0:	230f      	movs	r3, #15
 80050c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80050c6:	2303      	movs	r3, #3
 80050c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050cc:	2300      	movs	r3, #0
 80050ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80050d2:	2300      	movs	r3, #0
 80050d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80050d8:	2300      	movs	r3, #0
 80050da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80050de:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80050e2:	2104      	movs	r1, #4
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fc fc27 	bl	8001938 <HAL_RCC_ClockConfig>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bf14      	ite	ne
 80050f0:	2301      	movne	r3, #1
 80050f2:	2300      	moveq	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 80050fa:	f000 f995 	bl	8005428 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80050fe:	2302      	movs	r3, #2
 8005100:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005102:	2300      	movs	r3, #0
 8005104:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005106:	463b      	mov	r3, r7
 8005108:	4618      	mov	r0, r3
 800510a:	f7fc fe19 	bl	8001d40 <HAL_RCCEx_PeriphCLKConfig>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf14      	ite	ne
 8005114:	2301      	movne	r3, #1
 8005116:	2300      	moveq	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 800511e:	f000 f983 	bl	8005428 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005122:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005126:	f7fc f801 	bl	800112c <HAL_PWREx_ControlVoltageScaling>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	bf14      	ite	ne
 8005130:	2301      	movne	r3, #1
 8005132:	2300      	moveq	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <_Z18SystemClock_Configv+0x10a>
  {
    Error_Handler();
 800513a:	f000 f975 	bl	8005428 <Error_Handler>
  }
}
 800513e:	bf00      	nop
 8005140:	37e0      	adds	r7, #224	; 0xe0
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800514c:	4b1d      	ldr	r3, [pc, #116]	; (80051c4 <_ZL12MX_SPI2_Initv+0x7c>)
 800514e:	4a1e      	ldr	r2, [pc, #120]	; (80051c8 <_ZL12MX_SPI2_Initv+0x80>)
 8005150:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005152:	4b1c      	ldr	r3, [pc, #112]	; (80051c4 <_ZL12MX_SPI2_Initv+0x7c>)
 8005154:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005158:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800515a:	4b1a      	ldr	r3, [pc, #104]	; (80051c4 <_ZL12MX_SPI2_Initv+0x7c>)
 800515c:	2200      	movs	r2, #0
 800515e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005160:	4b18      	ldr	r3, [pc, #96]	; (80051c4 <_ZL12MX_SPI2_Initv+0x7c>)
 8005162:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005166:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005168:	4b16      	ldr	r3, [pc, #88]	; (80051c4 <_ZL12MX_SPI2_Initv+0x7c>)
 800516a:	2200      	movs	r2, #0
 800516c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800516e:	4b15      	ldr	r3, [pc, #84]	; (80051c4 <_ZL12MX_SPI2_Initv+0x7c>)
 8005170:	2200      	movs	r2, #0
 8005172:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005174:	4b13      	ldr	r3, [pc, #76]	; (80051c4 <_ZL12MX_SPI2_Initv+0x7c>)
 8005176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800517a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800517c:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <_ZL12MX_SPI2_Initv+0x7c>)
 800517e:	2218      	movs	r2, #24
 8005180:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005182:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <_ZL12MX_SPI2_Initv+0x7c>)
 8005184:	2200      	movs	r2, #0
 8005186:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005188:	4b0e      	ldr	r3, [pc, #56]	; (80051c4 <_ZL12MX_SPI2_Initv+0x7c>)
 800518a:	2200      	movs	r2, #0
 800518c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800518e:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <_ZL12MX_SPI2_Initv+0x7c>)
 8005190:	2200      	movs	r2, #0
 8005192:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005194:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <_ZL12MX_SPI2_Initv+0x7c>)
 8005196:	2207      	movs	r2, #7
 8005198:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800519a:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <_ZL12MX_SPI2_Initv+0x7c>)
 800519c:	2200      	movs	r2, #0
 800519e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80051a0:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <_ZL12MX_SPI2_Initv+0x7c>)
 80051a2:	2208      	movs	r2, #8
 80051a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80051a6:	4807      	ldr	r0, [pc, #28]	; (80051c4 <_ZL12MX_SPI2_Initv+0x7c>)
 80051a8:	f7fd fa7a 	bl	80026a0 <HAL_SPI_Init>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bf14      	ite	ne
 80051b2:	2301      	movne	r3, #1
 80051b4:	2300      	moveq	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 80051bc:	f000 f934 	bl	8005428 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80051c0:	bf00      	nop
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	200000b8 	.word	0x200000b8
 80051c8:	40003800 	.word	0x40003800

080051cc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051d2:	f107 0310 	add.w	r3, r7, #16
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	605a      	str	r2, [r3, #4]
 80051dc:	609a      	str	r2, [r3, #8]
 80051de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051e0:	1d3b      	adds	r3, r7, #4
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	605a      	str	r2, [r3, #4]
 80051e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80051ea:	4b27      	ldr	r3, [pc, #156]	; (8005288 <_ZL12MX_TIM1_Initv+0xbc>)
 80051ec:	4a27      	ldr	r2, [pc, #156]	; (800528c <_ZL12MX_TIM1_Initv+0xc0>)
 80051ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80051f0:	4b25      	ldr	r3, [pc, #148]	; (8005288 <_ZL12MX_TIM1_Initv+0xbc>)
 80051f2:	224f      	movs	r2, #79	; 0x4f
 80051f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051f6:	4b24      	ldr	r3, [pc, #144]	; (8005288 <_ZL12MX_TIM1_Initv+0xbc>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 80051fc:	4b22      	ldr	r3, [pc, #136]	; (8005288 <_ZL12MX_TIM1_Initv+0xbc>)
 80051fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005202:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005204:	4b20      	ldr	r3, [pc, #128]	; (8005288 <_ZL12MX_TIM1_Initv+0xbc>)
 8005206:	2200      	movs	r2, #0
 8005208:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800520a:	4b1f      	ldr	r3, [pc, #124]	; (8005288 <_ZL12MX_TIM1_Initv+0xbc>)
 800520c:	2200      	movs	r2, #0
 800520e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005210:	4b1d      	ldr	r3, [pc, #116]	; (8005288 <_ZL12MX_TIM1_Initv+0xbc>)
 8005212:	2200      	movs	r2, #0
 8005214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005216:	481c      	ldr	r0, [pc, #112]	; (8005288 <_ZL12MX_TIM1_Initv+0xbc>)
 8005218:	f7fe f8e2 	bl	80033e0 <HAL_TIM_Base_Init>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	bf14      	ite	ne
 8005222:	2301      	movne	r3, #1
 8005224:	2300      	moveq	r3, #0
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 800522c:	f000 f8fc 	bl	8005428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005234:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005236:	f107 0310 	add.w	r3, r7, #16
 800523a:	4619      	mov	r1, r3
 800523c:	4812      	ldr	r0, [pc, #72]	; (8005288 <_ZL12MX_TIM1_Initv+0xbc>)
 800523e:	f7fe f8fa 	bl	8003436 <HAL_TIM_ConfigClockSource>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	bf14      	ite	ne
 8005248:	2301      	movne	r3, #1
 800524a:	2300      	moveq	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 8005252:	f000 f8e9 	bl	8005428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005256:	2300      	movs	r3, #0
 8005258:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800525a:	2300      	movs	r3, #0
 800525c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005262:	1d3b      	adds	r3, r7, #4
 8005264:	4619      	mov	r1, r3
 8005266:	4808      	ldr	r0, [pc, #32]	; (8005288 <_ZL12MX_TIM1_Initv+0xbc>)
 8005268:	f7fe fad2 	bl	8003810 <HAL_TIMEx_MasterConfigSynchronization>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	bf14      	ite	ne
 8005272:	2301      	movne	r3, #1
 8005274:	2300      	moveq	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 800527c:	f000 f8d4 	bl	8005428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005280:	bf00      	nop
 8005282:	3720      	adds	r7, #32
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	2000011c 	.word	0x2000011c
 800528c:	40012c00 	.word	0x40012c00

08005290 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005294:	4b16      	ldr	r3, [pc, #88]	; (80052f0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8005296:	4a17      	ldr	r2, [pc, #92]	; (80052f4 <_ZL19MX_USART2_UART_Initv+0x64>)
 8005298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800529a:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800529c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80052a2:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80052a8:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80052ae:	4b10      	ldr	r3, [pc, #64]	; (80052f0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80052b4:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80052b6:	220c      	movs	r2, #12
 80052b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052ba:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80052bc:	2200      	movs	r2, #0
 80052be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052c6:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80052cc:	4b08      	ldr	r3, [pc, #32]	; (80052f0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80052d2:	4807      	ldr	r0, [pc, #28]	; (80052f0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80052d4:	f7fe faf8 	bl	80038c8 <HAL_UART_Init>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	bf14      	ite	ne
 80052de:	2301      	movne	r3, #1
 80052e0:	2300      	moveq	r3, #0
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80052e8:	f000 f89e 	bl	8005428 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80052ec:	bf00      	nop
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	2000015c 	.word	0x2000015c
 80052f4:	40004400 	.word	0x40004400

080052f8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08a      	sub	sp, #40	; 0x28
 80052fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052fe:	f107 0314 	add.w	r3, r7, #20
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	605a      	str	r2, [r3, #4]
 8005308:	609a      	str	r2, [r3, #8]
 800530a:	60da      	str	r2, [r3, #12]
 800530c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800530e:	4b39      	ldr	r3, [pc, #228]	; (80053f4 <_ZL12MX_GPIO_Initv+0xfc>)
 8005310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005312:	4a38      	ldr	r2, [pc, #224]	; (80053f4 <_ZL12MX_GPIO_Initv+0xfc>)
 8005314:	f043 0304 	orr.w	r3, r3, #4
 8005318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800531a:	4b36      	ldr	r3, [pc, #216]	; (80053f4 <_ZL12MX_GPIO_Initv+0xfc>)
 800531c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005326:	4b33      	ldr	r3, [pc, #204]	; (80053f4 <_ZL12MX_GPIO_Initv+0xfc>)
 8005328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532a:	4a32      	ldr	r2, [pc, #200]	; (80053f4 <_ZL12MX_GPIO_Initv+0xfc>)
 800532c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005332:	4b30      	ldr	r3, [pc, #192]	; (80053f4 <_ZL12MX_GPIO_Initv+0xfc>)
 8005334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800533e:	4b2d      	ldr	r3, [pc, #180]	; (80053f4 <_ZL12MX_GPIO_Initv+0xfc>)
 8005340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005342:	4a2c      	ldr	r2, [pc, #176]	; (80053f4 <_ZL12MX_GPIO_Initv+0xfc>)
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800534a:	4b2a      	ldr	r3, [pc, #168]	; (80053f4 <_ZL12MX_GPIO_Initv+0xfc>)
 800534c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	60bb      	str	r3, [r7, #8]
 8005354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005356:	4b27      	ldr	r3, [pc, #156]	; (80053f4 <_ZL12MX_GPIO_Initv+0xfc>)
 8005358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800535a:	4a26      	ldr	r2, [pc, #152]	; (80053f4 <_ZL12MX_GPIO_Initv+0xfc>)
 800535c:	f043 0302 	orr.w	r3, r3, #2
 8005360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005362:	4b24      	ldr	r3, [pc, #144]	; (80053f4 <_ZL12MX_GPIO_Initv+0xfc>)
 8005364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800536e:	2200      	movs	r2, #0
 8005370:	2120      	movs	r1, #32
 8005372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005376:	f7fb fe9b 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 800537a:	2201      	movs	r2, #1
 800537c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005380:	481d      	ldr	r0, [pc, #116]	; (80053f8 <_ZL12MX_GPIO_Initv+0x100>)
 8005382:	f7fb fe95 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800538a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800538c:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <_ZL12MX_GPIO_Initv+0x104>)
 800538e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005390:	2300      	movs	r3, #0
 8005392:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005394:	f107 0314 	add.w	r3, r7, #20
 8005398:	4619      	mov	r1, r3
 800539a:	4819      	ldr	r0, [pc, #100]	; (8005400 <_ZL12MX_GPIO_Initv+0x108>)
 800539c:	f7fb fce0 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80053a0:	2320      	movs	r3, #32
 80053a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053a4:	2301      	movs	r3, #1
 80053a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ac:	2300      	movs	r3, #0
 80053ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80053b0:	f107 0314 	add.w	r3, r7, #20
 80053b4:	4619      	mov	r1, r3
 80053b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053ba:	f7fb fcd1 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 80053be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053c4:	2301      	movs	r3, #1
 80053c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053cc:	2300      	movs	r3, #0
 80053ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80053d0:	f107 0314 	add.w	r3, r7, #20
 80053d4:	4619      	mov	r1, r3
 80053d6:	4808      	ldr	r0, [pc, #32]	; (80053f8 <_ZL12MX_GPIO_Initv+0x100>)
 80053d8:	f7fb fcc2 	bl	8000d60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80053dc:	2200      	movs	r2, #0
 80053de:	2100      	movs	r1, #0
 80053e0:	2028      	movs	r0, #40	; 0x28
 80053e2:	f7fb fc86 	bl	8000cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80053e6:	2028      	movs	r0, #40	; 0x28
 80053e8:	f7fb fc9f 	bl	8000d2a <HAL_NVIC_EnableIRQ>

}
 80053ec:	bf00      	nop
 80053ee:	3728      	adds	r7, #40	; 0x28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40021000 	.word	0x40021000
 80053f8:	48000400 	.word	0x48000400
 80053fc:	10210000 	.word	0x10210000
 8005400:	48000800 	.word	0x48000800

08005404 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin){
 800540e:	88fb      	ldrh	r3, [r7, #6]
 8005410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005414:	d102      	bne.n	800541c <HAL_GPIO_EXTI_Callback+0x18>
		lora.onDio0Rise();
 8005416:	4803      	ldr	r0, [pc, #12]	; (8005424 <HAL_GPIO_EXTI_Callback+0x20>)
 8005418:	f7ff fca4 	bl	8004d64 <_ZN9LoRaClass10onDio0RiseEv>
	}
}
 800541c:	bf00      	nop
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	200001dc 	.word	0x200001dc

08005428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800542c:	bf00      	nop
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <_Z41__static_initialization_and_destruction_0ii>:
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d107      	bne.n	8005458 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800544e:	4293      	cmp	r3, r2
 8005450:	d102      	bne.n	8005458 <_Z41__static_initialization_and_destruction_0ii+0x20>
LoRaClass lora;
 8005452:	4803      	ldr	r0, [pc, #12]	; (8005460 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8005454:	f7fe ff18 	bl	8004288 <_ZN9LoRaClassC1Ev>
}
 8005458:	bf00      	nop
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	200001dc 	.word	0x200001dc

08005464 <_GLOBAL__sub_I_hspi2>:
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
 8005468:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800546c:	2001      	movs	r0, #1
 800546e:	f7ff ffe3 	bl	8005438 <_Z41__static_initialization_and_destruction_0ii>
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800547a:	4b0f      	ldr	r3, [pc, #60]	; (80054b8 <HAL_MspInit+0x44>)
 800547c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547e:	4a0e      	ldr	r2, [pc, #56]	; (80054b8 <HAL_MspInit+0x44>)
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	6613      	str	r3, [r2, #96]	; 0x60
 8005486:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <HAL_MspInit+0x44>)
 8005488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	607b      	str	r3, [r7, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005492:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <HAL_MspInit+0x44>)
 8005494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005496:	4a08      	ldr	r2, [pc, #32]	; (80054b8 <HAL_MspInit+0x44>)
 8005498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549c:	6593      	str	r3, [r2, #88]	; 0x58
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <HAL_MspInit+0x44>)
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40021000 	.word	0x40021000

080054bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08a      	sub	sp, #40	; 0x28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c4:	f107 0314 	add.w	r3, r7, #20
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	605a      	str	r2, [r3, #4]
 80054ce:	609a      	str	r2, [r3, #8]
 80054d0:	60da      	str	r2, [r3, #12]
 80054d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a25      	ldr	r2, [pc, #148]	; (8005570 <HAL_SPI_MspInit+0xb4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d144      	bne.n	8005568 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80054de:	4b25      	ldr	r3, [pc, #148]	; (8005574 <HAL_SPI_MspInit+0xb8>)
 80054e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e2:	4a24      	ldr	r2, [pc, #144]	; (8005574 <HAL_SPI_MspInit+0xb8>)
 80054e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054e8:	6593      	str	r3, [r2, #88]	; 0x58
 80054ea:	4b22      	ldr	r3, [pc, #136]	; (8005574 <HAL_SPI_MspInit+0xb8>)
 80054ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054f6:	4b1f      	ldr	r3, [pc, #124]	; (8005574 <HAL_SPI_MspInit+0xb8>)
 80054f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fa:	4a1e      	ldr	r2, [pc, #120]	; (8005574 <HAL_SPI_MspInit+0xb8>)
 80054fc:	f043 0304 	orr.w	r3, r3, #4
 8005500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005502:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <HAL_SPI_MspInit+0xb8>)
 8005504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005506:	f003 0304 	and.w	r3, r3, #4
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800550e:	4b19      	ldr	r3, [pc, #100]	; (8005574 <HAL_SPI_MspInit+0xb8>)
 8005510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005512:	4a18      	ldr	r2, [pc, #96]	; (8005574 <HAL_SPI_MspInit+0xb8>)
 8005514:	f043 0302 	orr.w	r3, r3, #2
 8005518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800551a:	4b16      	ldr	r3, [pc, #88]	; (8005574 <HAL_SPI_MspInit+0xb8>)
 800551c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	60bb      	str	r3, [r7, #8]
 8005524:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005526:	230c      	movs	r3, #12
 8005528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552a:	2302      	movs	r3, #2
 800552c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552e:	2300      	movs	r3, #0
 8005530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005532:	2303      	movs	r3, #3
 8005534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005536:	2305      	movs	r3, #5
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800553a:	f107 0314 	add.w	r3, r7, #20
 800553e:	4619      	mov	r1, r3
 8005540:	480d      	ldr	r0, [pc, #52]	; (8005578 <HAL_SPI_MspInit+0xbc>)
 8005542:	f7fb fc0d 	bl	8000d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800554a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800554c:	2302      	movs	r3, #2
 800554e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005550:	2300      	movs	r3, #0
 8005552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005554:	2303      	movs	r3, #3
 8005556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005558:	2305      	movs	r3, #5
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800555c:	f107 0314 	add.w	r3, r7, #20
 8005560:	4619      	mov	r1, r3
 8005562:	4806      	ldr	r0, [pc, #24]	; (800557c <HAL_SPI_MspInit+0xc0>)
 8005564:	f7fb fbfc 	bl	8000d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005568:	bf00      	nop
 800556a:	3728      	adds	r7, #40	; 0x28
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40003800 	.word	0x40003800
 8005574:	40021000 	.word	0x40021000
 8005578:	48000800 	.word	0x48000800
 800557c:	48000400 	.word	0x48000400

08005580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a0a      	ldr	r2, [pc, #40]	; (80055b8 <HAL_TIM_Base_MspInit+0x38>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d10b      	bne.n	80055aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005592:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <HAL_TIM_Base_MspInit+0x3c>)
 8005594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005596:	4a09      	ldr	r2, [pc, #36]	; (80055bc <HAL_TIM_Base_MspInit+0x3c>)
 8005598:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800559c:	6613      	str	r3, [r2, #96]	; 0x60
 800559e:	4b07      	ldr	r3, [pc, #28]	; (80055bc <HAL_TIM_Base_MspInit+0x3c>)
 80055a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40021000 	.word	0x40021000

080055c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08a      	sub	sp, #40	; 0x28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055c8:	f107 0314 	add.w	r3, r7, #20
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	605a      	str	r2, [r3, #4]
 80055d2:	609a      	str	r2, [r3, #8]
 80055d4:	60da      	str	r2, [r3, #12]
 80055d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a17      	ldr	r2, [pc, #92]	; (800563c <HAL_UART_MspInit+0x7c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d128      	bne.n	8005634 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80055e2:	4b17      	ldr	r3, [pc, #92]	; (8005640 <HAL_UART_MspInit+0x80>)
 80055e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e6:	4a16      	ldr	r2, [pc, #88]	; (8005640 <HAL_UART_MspInit+0x80>)
 80055e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ec:	6593      	str	r3, [r2, #88]	; 0x58
 80055ee:	4b14      	ldr	r3, [pc, #80]	; (8005640 <HAL_UART_MspInit+0x80>)
 80055f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055fa:	4b11      	ldr	r3, [pc, #68]	; (8005640 <HAL_UART_MspInit+0x80>)
 80055fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fe:	4a10      	ldr	r2, [pc, #64]	; (8005640 <HAL_UART_MspInit+0x80>)
 8005600:	f043 0301 	orr.w	r3, r3, #1
 8005604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005606:	4b0e      	ldr	r3, [pc, #56]	; (8005640 <HAL_UART_MspInit+0x80>)
 8005608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005612:	230c      	movs	r3, #12
 8005614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005616:	2302      	movs	r3, #2
 8005618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561a:	2300      	movs	r3, #0
 800561c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800561e:	2303      	movs	r3, #3
 8005620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005622:	2307      	movs	r3, #7
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005626:	f107 0314 	add.w	r3, r7, #20
 800562a:	4619      	mov	r1, r3
 800562c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005630:	f7fb fb96 	bl	8000d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005634:	bf00      	nop
 8005636:	3728      	adds	r7, #40	; 0x28
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40004400 	.word	0x40004400
 8005640:	40021000 	.word	0x40021000

08005644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005648:	bf00      	nop
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005652:	b480      	push	{r7}
 8005654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005656:	e7fe      	b.n	8005656 <HardFault_Handler+0x4>

08005658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800565c:	e7fe      	b.n	800565c <MemManage_Handler+0x4>

0800565e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800565e:	b480      	push	{r7}
 8005660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005662:	e7fe      	b.n	8005662 <BusFault_Handler+0x4>

08005664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005668:	e7fe      	b.n	8005668 <UsageFault_Handler+0x4>

0800566a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800566a:	b480      	push	{r7}
 800566c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800566e:	bf00      	nop
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800567c:	bf00      	nop
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005686:	b480      	push	{r7}
 8005688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800568a:	bf00      	nop
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005698:	f7fb fa10 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800569c:	bf00      	nop
 800569e:	bd80      	pop	{r7, pc}

080056a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80056a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80056a8:	f7fb fd1a 	bl	80010e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80056ac:	bf00      	nop
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056bc:	2300      	movs	r3, #0
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	e00a      	b.n	80056d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80056c2:	f3af 8000 	nop.w
 80056c6:	4601      	mov	r1, r0
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	60ba      	str	r2, [r7, #8]
 80056ce:	b2ca      	uxtb	r2, r1
 80056d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	3301      	adds	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	429a      	cmp	r2, r3
 80056de:	dbf0      	blt.n	80056c2 <_read+0x12>
	}

return len;
 80056e0:	687b      	ldr	r3, [r7, #4]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b086      	sub	sp, #24
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056f6:	2300      	movs	r3, #0
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	e009      	b.n	8005710 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	60ba      	str	r2, [r7, #8]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	4618      	mov	r0, r3
 8005706:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	3301      	adds	r3, #1
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	429a      	cmp	r2, r3
 8005716:	dbf1      	blt.n	80056fc <_write+0x12>
	}
	return len;
 8005718:	687b      	ldr	r3, [r7, #4]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <_close>:

int _close(int file)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
	return -1;
 800572a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800574a:	605a      	str	r2, [r3, #4]
	return 0;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <_isatty>:

int _isatty(int file)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
	return 1;
 8005762:	2301      	movs	r3, #1
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
	return 0;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
	...

0800578c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005794:	4b11      	ldr	r3, [pc, #68]	; (80057dc <_sbrk+0x50>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d102      	bne.n	80057a2 <_sbrk+0x16>
		heap_end = &end;
 800579c:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <_sbrk+0x50>)
 800579e:	4a10      	ldr	r2, [pc, #64]	; (80057e0 <_sbrk+0x54>)
 80057a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80057a2:	4b0e      	ldr	r3, [pc, #56]	; (80057dc <_sbrk+0x50>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80057a8:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <_sbrk+0x50>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4413      	add	r3, r2
 80057b0:	466a      	mov	r2, sp
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d907      	bls.n	80057c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80057b6:	f000 f875 	bl	80058a4 <__errno>
 80057ba:	4602      	mov	r2, r0
 80057bc:	230c      	movs	r3, #12
 80057be:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80057c0:	f04f 33ff 	mov.w	r3, #4294967295
 80057c4:	e006      	b.n	80057d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80057c6:	4b05      	ldr	r3, [pc, #20]	; (80057dc <_sbrk+0x50>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4413      	add	r3, r2
 80057ce:	4a03      	ldr	r2, [pc, #12]	; (80057dc <_sbrk+0x50>)
 80057d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80057d2:	68fb      	ldr	r3, [r7, #12]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	2000020c 	.word	0x2000020c
 80057e0:	20000220 	.word	0x20000220

080057e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80057e8:	4b17      	ldr	r3, [pc, #92]	; (8005848 <SystemInit+0x64>)
 80057ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ee:	4a16      	ldr	r2, [pc, #88]	; (8005848 <SystemInit+0x64>)
 80057f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80057f8:	4b14      	ldr	r3, [pc, #80]	; (800584c <SystemInit+0x68>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a13      	ldr	r2, [pc, #76]	; (800584c <SystemInit+0x68>)
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005804:	4b11      	ldr	r3, [pc, #68]	; (800584c <SystemInit+0x68>)
 8005806:	2200      	movs	r2, #0
 8005808:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800580a:	4b10      	ldr	r3, [pc, #64]	; (800584c <SystemInit+0x68>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a0f      	ldr	r2, [pc, #60]	; (800584c <SystemInit+0x68>)
 8005810:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005814:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005818:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800581a:	4b0c      	ldr	r3, [pc, #48]	; (800584c <SystemInit+0x68>)
 800581c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005820:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005822:	4b0a      	ldr	r3, [pc, #40]	; (800584c <SystemInit+0x68>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a09      	ldr	r2, [pc, #36]	; (800584c <SystemInit+0x68>)
 8005828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800582c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800582e:	4b07      	ldr	r3, [pc, #28]	; (800584c <SystemInit+0x68>)
 8005830:	2200      	movs	r2, #0
 8005832:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005834:	4b04      	ldr	r3, [pc, #16]	; (8005848 <SystemInit+0x64>)
 8005836:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800583a:	609a      	str	r2, [r3, #8]
#endif
}
 800583c:	bf00      	nop
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	e000ed00 	.word	0xe000ed00
 800584c:	40021000 	.word	0x40021000

08005850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005888 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005854:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005856:	e003      	b.n	8005860 <LoopCopyDataInit>

08005858 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005858:	4b0c      	ldr	r3, [pc, #48]	; (800588c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800585a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800585c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800585e:	3104      	adds	r1, #4

08005860 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005860:	480b      	ldr	r0, [pc, #44]	; (8005890 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005862:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005864:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005866:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005868:	d3f6      	bcc.n	8005858 <CopyDataInit>
	ldr	r2, =_sbss
 800586a:	4a0b      	ldr	r2, [pc, #44]	; (8005898 <LoopForever+0x12>)
	b	LoopFillZerobss
 800586c:	e002      	b.n	8005874 <LoopFillZerobss>

0800586e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800586e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005870:	f842 3b04 	str.w	r3, [r2], #4

08005874 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005874:	4b09      	ldr	r3, [pc, #36]	; (800589c <LoopForever+0x16>)
	cmp	r2, r3
 8005876:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005878:	d3f9      	bcc.n	800586e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800587a:	f7ff ffb3 	bl	80057e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800587e:	f000 f817 	bl	80058b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005882:	f7ff fb4b 	bl	8004f1c <main>

08005886 <LoopForever>:

LoopForever:
    b LoopForever
 8005886:	e7fe      	b.n	8005886 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005888:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800588c:	0800691c 	.word	0x0800691c
	ldr	r0, =_sdata
 8005890:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005894:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8005898:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800589c:	20000220 	.word	0x20000220

080058a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80058a0:	e7fe      	b.n	80058a0 <ADC1_2_IRQHandler>
	...

080058a4 <__errno>:
 80058a4:	4b01      	ldr	r3, [pc, #4]	; (80058ac <__errno+0x8>)
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	2000000c 	.word	0x2000000c

080058b0 <__libc_init_array>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	4e0d      	ldr	r6, [pc, #52]	; (80058e8 <__libc_init_array+0x38>)
 80058b4:	4c0d      	ldr	r4, [pc, #52]	; (80058ec <__libc_init_array+0x3c>)
 80058b6:	1ba4      	subs	r4, r4, r6
 80058b8:	10a4      	asrs	r4, r4, #2
 80058ba:	2500      	movs	r5, #0
 80058bc:	42a5      	cmp	r5, r4
 80058be:	d109      	bne.n	80058d4 <__libc_init_array+0x24>
 80058c0:	4e0b      	ldr	r6, [pc, #44]	; (80058f0 <__libc_init_array+0x40>)
 80058c2:	4c0c      	ldr	r4, [pc, #48]	; (80058f4 <__libc_init_array+0x44>)
 80058c4:	f000 ff68 	bl	8006798 <_init>
 80058c8:	1ba4      	subs	r4, r4, r6
 80058ca:	10a4      	asrs	r4, r4, #2
 80058cc:	2500      	movs	r5, #0
 80058ce:	42a5      	cmp	r5, r4
 80058d0:	d105      	bne.n	80058de <__libc_init_array+0x2e>
 80058d2:	bd70      	pop	{r4, r5, r6, pc}
 80058d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058d8:	4798      	blx	r3
 80058da:	3501      	adds	r5, #1
 80058dc:	e7ee      	b.n	80058bc <__libc_init_array+0xc>
 80058de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058e2:	4798      	blx	r3
 80058e4:	3501      	adds	r5, #1
 80058e6:	e7f2      	b.n	80058ce <__libc_init_array+0x1e>
 80058e8:	0800690c 	.word	0x0800690c
 80058ec:	0800690c 	.word	0x0800690c
 80058f0:	0800690c 	.word	0x0800690c
 80058f4:	08006918 	.word	0x08006918

080058f8 <memset>:
 80058f8:	4402      	add	r2, r0
 80058fa:	4603      	mov	r3, r0
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d100      	bne.n	8005902 <memset+0xa>
 8005900:	4770      	bx	lr
 8005902:	f803 1b01 	strb.w	r1, [r3], #1
 8005906:	e7f9      	b.n	80058fc <memset+0x4>

08005908 <iprintf>:
 8005908:	b40f      	push	{r0, r1, r2, r3}
 800590a:	4b0a      	ldr	r3, [pc, #40]	; (8005934 <iprintf+0x2c>)
 800590c:	b513      	push	{r0, r1, r4, lr}
 800590e:	681c      	ldr	r4, [r3, #0]
 8005910:	b124      	cbz	r4, 800591c <iprintf+0x14>
 8005912:	69a3      	ldr	r3, [r4, #24]
 8005914:	b913      	cbnz	r3, 800591c <iprintf+0x14>
 8005916:	4620      	mov	r0, r4
 8005918:	f000 fa22 	bl	8005d60 <__sinit>
 800591c:	ab05      	add	r3, sp, #20
 800591e:	9a04      	ldr	r2, [sp, #16]
 8005920:	68a1      	ldr	r1, [r4, #8]
 8005922:	9301      	str	r3, [sp, #4]
 8005924:	4620      	mov	r0, r4
 8005926:	f000 fbdb 	bl	80060e0 <_vfiprintf_r>
 800592a:	b002      	add	sp, #8
 800592c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005930:	b004      	add	sp, #16
 8005932:	4770      	bx	lr
 8005934:	2000000c 	.word	0x2000000c

08005938 <_puts_r>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	460e      	mov	r6, r1
 800593c:	4605      	mov	r5, r0
 800593e:	b118      	cbz	r0, 8005948 <_puts_r+0x10>
 8005940:	6983      	ldr	r3, [r0, #24]
 8005942:	b90b      	cbnz	r3, 8005948 <_puts_r+0x10>
 8005944:	f000 fa0c 	bl	8005d60 <__sinit>
 8005948:	69ab      	ldr	r3, [r5, #24]
 800594a:	68ac      	ldr	r4, [r5, #8]
 800594c:	b913      	cbnz	r3, 8005954 <_puts_r+0x1c>
 800594e:	4628      	mov	r0, r5
 8005950:	f000 fa06 	bl	8005d60 <__sinit>
 8005954:	4b23      	ldr	r3, [pc, #140]	; (80059e4 <_puts_r+0xac>)
 8005956:	429c      	cmp	r4, r3
 8005958:	d117      	bne.n	800598a <_puts_r+0x52>
 800595a:	686c      	ldr	r4, [r5, #4]
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	071b      	lsls	r3, r3, #28
 8005960:	d51d      	bpl.n	800599e <_puts_r+0x66>
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	b1db      	cbz	r3, 800599e <_puts_r+0x66>
 8005966:	3e01      	subs	r6, #1
 8005968:	68a3      	ldr	r3, [r4, #8]
 800596a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800596e:	3b01      	subs	r3, #1
 8005970:	60a3      	str	r3, [r4, #8]
 8005972:	b9e9      	cbnz	r1, 80059b0 <_puts_r+0x78>
 8005974:	2b00      	cmp	r3, #0
 8005976:	da2e      	bge.n	80059d6 <_puts_r+0x9e>
 8005978:	4622      	mov	r2, r4
 800597a:	210a      	movs	r1, #10
 800597c:	4628      	mov	r0, r5
 800597e:	f000 f83f 	bl	8005a00 <__swbuf_r>
 8005982:	3001      	adds	r0, #1
 8005984:	d011      	beq.n	80059aa <_puts_r+0x72>
 8005986:	200a      	movs	r0, #10
 8005988:	e011      	b.n	80059ae <_puts_r+0x76>
 800598a:	4b17      	ldr	r3, [pc, #92]	; (80059e8 <_puts_r+0xb0>)
 800598c:	429c      	cmp	r4, r3
 800598e:	d101      	bne.n	8005994 <_puts_r+0x5c>
 8005990:	68ac      	ldr	r4, [r5, #8]
 8005992:	e7e3      	b.n	800595c <_puts_r+0x24>
 8005994:	4b15      	ldr	r3, [pc, #84]	; (80059ec <_puts_r+0xb4>)
 8005996:	429c      	cmp	r4, r3
 8005998:	bf08      	it	eq
 800599a:	68ec      	ldreq	r4, [r5, #12]
 800599c:	e7de      	b.n	800595c <_puts_r+0x24>
 800599e:	4621      	mov	r1, r4
 80059a0:	4628      	mov	r0, r5
 80059a2:	f000 f87f 	bl	8005aa4 <__swsetup_r>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d0dd      	beq.n	8005966 <_puts_r+0x2e>
 80059aa:	f04f 30ff 	mov.w	r0, #4294967295
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	da04      	bge.n	80059be <_puts_r+0x86>
 80059b4:	69a2      	ldr	r2, [r4, #24]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	dc06      	bgt.n	80059c8 <_puts_r+0x90>
 80059ba:	290a      	cmp	r1, #10
 80059bc:	d004      	beq.n	80059c8 <_puts_r+0x90>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	6022      	str	r2, [r4, #0]
 80059c4:	7019      	strb	r1, [r3, #0]
 80059c6:	e7cf      	b.n	8005968 <_puts_r+0x30>
 80059c8:	4622      	mov	r2, r4
 80059ca:	4628      	mov	r0, r5
 80059cc:	f000 f818 	bl	8005a00 <__swbuf_r>
 80059d0:	3001      	adds	r0, #1
 80059d2:	d1c9      	bne.n	8005968 <_puts_r+0x30>
 80059d4:	e7e9      	b.n	80059aa <_puts_r+0x72>
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	200a      	movs	r0, #10
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	6022      	str	r2, [r4, #0]
 80059de:	7018      	strb	r0, [r3, #0]
 80059e0:	e7e5      	b.n	80059ae <_puts_r+0x76>
 80059e2:	bf00      	nop
 80059e4:	08006890 	.word	0x08006890
 80059e8:	080068b0 	.word	0x080068b0
 80059ec:	08006870 	.word	0x08006870

080059f0 <puts>:
 80059f0:	4b02      	ldr	r3, [pc, #8]	; (80059fc <puts+0xc>)
 80059f2:	4601      	mov	r1, r0
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	f7ff bf9f 	b.w	8005938 <_puts_r>
 80059fa:	bf00      	nop
 80059fc:	2000000c 	.word	0x2000000c

08005a00 <__swbuf_r>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	460e      	mov	r6, r1
 8005a04:	4614      	mov	r4, r2
 8005a06:	4605      	mov	r5, r0
 8005a08:	b118      	cbz	r0, 8005a12 <__swbuf_r+0x12>
 8005a0a:	6983      	ldr	r3, [r0, #24]
 8005a0c:	b90b      	cbnz	r3, 8005a12 <__swbuf_r+0x12>
 8005a0e:	f000 f9a7 	bl	8005d60 <__sinit>
 8005a12:	4b21      	ldr	r3, [pc, #132]	; (8005a98 <__swbuf_r+0x98>)
 8005a14:	429c      	cmp	r4, r3
 8005a16:	d12a      	bne.n	8005a6e <__swbuf_r+0x6e>
 8005a18:	686c      	ldr	r4, [r5, #4]
 8005a1a:	69a3      	ldr	r3, [r4, #24]
 8005a1c:	60a3      	str	r3, [r4, #8]
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	071a      	lsls	r2, r3, #28
 8005a22:	d52e      	bpl.n	8005a82 <__swbuf_r+0x82>
 8005a24:	6923      	ldr	r3, [r4, #16]
 8005a26:	b363      	cbz	r3, 8005a82 <__swbuf_r+0x82>
 8005a28:	6923      	ldr	r3, [r4, #16]
 8005a2a:	6820      	ldr	r0, [r4, #0]
 8005a2c:	1ac0      	subs	r0, r0, r3
 8005a2e:	6963      	ldr	r3, [r4, #20]
 8005a30:	b2f6      	uxtb	r6, r6
 8005a32:	4283      	cmp	r3, r0
 8005a34:	4637      	mov	r7, r6
 8005a36:	dc04      	bgt.n	8005a42 <__swbuf_r+0x42>
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f000 f926 	bl	8005c8c <_fflush_r>
 8005a40:	bb28      	cbnz	r0, 8005a8e <__swbuf_r+0x8e>
 8005a42:	68a3      	ldr	r3, [r4, #8]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	60a3      	str	r3, [r4, #8]
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	6022      	str	r2, [r4, #0]
 8005a4e:	701e      	strb	r6, [r3, #0]
 8005a50:	6963      	ldr	r3, [r4, #20]
 8005a52:	3001      	adds	r0, #1
 8005a54:	4283      	cmp	r3, r0
 8005a56:	d004      	beq.n	8005a62 <__swbuf_r+0x62>
 8005a58:	89a3      	ldrh	r3, [r4, #12]
 8005a5a:	07db      	lsls	r3, r3, #31
 8005a5c:	d519      	bpl.n	8005a92 <__swbuf_r+0x92>
 8005a5e:	2e0a      	cmp	r6, #10
 8005a60:	d117      	bne.n	8005a92 <__swbuf_r+0x92>
 8005a62:	4621      	mov	r1, r4
 8005a64:	4628      	mov	r0, r5
 8005a66:	f000 f911 	bl	8005c8c <_fflush_r>
 8005a6a:	b190      	cbz	r0, 8005a92 <__swbuf_r+0x92>
 8005a6c:	e00f      	b.n	8005a8e <__swbuf_r+0x8e>
 8005a6e:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <__swbuf_r+0x9c>)
 8005a70:	429c      	cmp	r4, r3
 8005a72:	d101      	bne.n	8005a78 <__swbuf_r+0x78>
 8005a74:	68ac      	ldr	r4, [r5, #8]
 8005a76:	e7d0      	b.n	8005a1a <__swbuf_r+0x1a>
 8005a78:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <__swbuf_r+0xa0>)
 8005a7a:	429c      	cmp	r4, r3
 8005a7c:	bf08      	it	eq
 8005a7e:	68ec      	ldreq	r4, [r5, #12]
 8005a80:	e7cb      	b.n	8005a1a <__swbuf_r+0x1a>
 8005a82:	4621      	mov	r1, r4
 8005a84:	4628      	mov	r0, r5
 8005a86:	f000 f80d 	bl	8005aa4 <__swsetup_r>
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	d0cc      	beq.n	8005a28 <__swbuf_r+0x28>
 8005a8e:	f04f 37ff 	mov.w	r7, #4294967295
 8005a92:	4638      	mov	r0, r7
 8005a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a96:	bf00      	nop
 8005a98:	08006890 	.word	0x08006890
 8005a9c:	080068b0 	.word	0x080068b0
 8005aa0:	08006870 	.word	0x08006870

08005aa4 <__swsetup_r>:
 8005aa4:	4b32      	ldr	r3, [pc, #200]	; (8005b70 <__swsetup_r+0xcc>)
 8005aa6:	b570      	push	{r4, r5, r6, lr}
 8005aa8:	681d      	ldr	r5, [r3, #0]
 8005aaa:	4606      	mov	r6, r0
 8005aac:	460c      	mov	r4, r1
 8005aae:	b125      	cbz	r5, 8005aba <__swsetup_r+0x16>
 8005ab0:	69ab      	ldr	r3, [r5, #24]
 8005ab2:	b913      	cbnz	r3, 8005aba <__swsetup_r+0x16>
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f000 f953 	bl	8005d60 <__sinit>
 8005aba:	4b2e      	ldr	r3, [pc, #184]	; (8005b74 <__swsetup_r+0xd0>)
 8005abc:	429c      	cmp	r4, r3
 8005abe:	d10f      	bne.n	8005ae0 <__swsetup_r+0x3c>
 8005ac0:	686c      	ldr	r4, [r5, #4]
 8005ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	0715      	lsls	r5, r2, #28
 8005aca:	d42c      	bmi.n	8005b26 <__swsetup_r+0x82>
 8005acc:	06d0      	lsls	r0, r2, #27
 8005ace:	d411      	bmi.n	8005af4 <__swsetup_r+0x50>
 8005ad0:	2209      	movs	r2, #9
 8005ad2:	6032      	str	r2, [r6, #0]
 8005ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ad8:	81a3      	strh	r3, [r4, #12]
 8005ada:	f04f 30ff 	mov.w	r0, #4294967295
 8005ade:	e03e      	b.n	8005b5e <__swsetup_r+0xba>
 8005ae0:	4b25      	ldr	r3, [pc, #148]	; (8005b78 <__swsetup_r+0xd4>)
 8005ae2:	429c      	cmp	r4, r3
 8005ae4:	d101      	bne.n	8005aea <__swsetup_r+0x46>
 8005ae6:	68ac      	ldr	r4, [r5, #8]
 8005ae8:	e7eb      	b.n	8005ac2 <__swsetup_r+0x1e>
 8005aea:	4b24      	ldr	r3, [pc, #144]	; (8005b7c <__swsetup_r+0xd8>)
 8005aec:	429c      	cmp	r4, r3
 8005aee:	bf08      	it	eq
 8005af0:	68ec      	ldreq	r4, [r5, #12]
 8005af2:	e7e6      	b.n	8005ac2 <__swsetup_r+0x1e>
 8005af4:	0751      	lsls	r1, r2, #29
 8005af6:	d512      	bpl.n	8005b1e <__swsetup_r+0x7a>
 8005af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005afa:	b141      	cbz	r1, 8005b0e <__swsetup_r+0x6a>
 8005afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b00:	4299      	cmp	r1, r3
 8005b02:	d002      	beq.n	8005b0a <__swsetup_r+0x66>
 8005b04:	4630      	mov	r0, r6
 8005b06:	f000 fa19 	bl	8005f3c <_free_r>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b14:	81a3      	strh	r3, [r4, #12]
 8005b16:	2300      	movs	r3, #0
 8005b18:	6063      	str	r3, [r4, #4]
 8005b1a:	6923      	ldr	r3, [r4, #16]
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	f043 0308 	orr.w	r3, r3, #8
 8005b24:	81a3      	strh	r3, [r4, #12]
 8005b26:	6923      	ldr	r3, [r4, #16]
 8005b28:	b94b      	cbnz	r3, 8005b3e <__swsetup_r+0x9a>
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b34:	d003      	beq.n	8005b3e <__swsetup_r+0x9a>
 8005b36:	4621      	mov	r1, r4
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f000 f9bf 	bl	8005ebc <__smakebuf_r>
 8005b3e:	89a2      	ldrh	r2, [r4, #12]
 8005b40:	f012 0301 	ands.w	r3, r2, #1
 8005b44:	d00c      	beq.n	8005b60 <__swsetup_r+0xbc>
 8005b46:	2300      	movs	r3, #0
 8005b48:	60a3      	str	r3, [r4, #8]
 8005b4a:	6963      	ldr	r3, [r4, #20]
 8005b4c:	425b      	negs	r3, r3
 8005b4e:	61a3      	str	r3, [r4, #24]
 8005b50:	6923      	ldr	r3, [r4, #16]
 8005b52:	b953      	cbnz	r3, 8005b6a <__swsetup_r+0xc6>
 8005b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b58:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005b5c:	d1ba      	bne.n	8005ad4 <__swsetup_r+0x30>
 8005b5e:	bd70      	pop	{r4, r5, r6, pc}
 8005b60:	0792      	lsls	r2, r2, #30
 8005b62:	bf58      	it	pl
 8005b64:	6963      	ldrpl	r3, [r4, #20]
 8005b66:	60a3      	str	r3, [r4, #8]
 8005b68:	e7f2      	b.n	8005b50 <__swsetup_r+0xac>
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	e7f7      	b.n	8005b5e <__swsetup_r+0xba>
 8005b6e:	bf00      	nop
 8005b70:	2000000c 	.word	0x2000000c
 8005b74:	08006890 	.word	0x08006890
 8005b78:	080068b0 	.word	0x080068b0
 8005b7c:	08006870 	.word	0x08006870

08005b80 <__sflush_r>:
 8005b80:	898a      	ldrh	r2, [r1, #12]
 8005b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b86:	4605      	mov	r5, r0
 8005b88:	0710      	lsls	r0, r2, #28
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	d458      	bmi.n	8005c40 <__sflush_r+0xc0>
 8005b8e:	684b      	ldr	r3, [r1, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	dc05      	bgt.n	8005ba0 <__sflush_r+0x20>
 8005b94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	dc02      	bgt.n	8005ba0 <__sflush_r+0x20>
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ba2:	2e00      	cmp	r6, #0
 8005ba4:	d0f9      	beq.n	8005b9a <__sflush_r+0x1a>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bac:	682f      	ldr	r7, [r5, #0]
 8005bae:	6a21      	ldr	r1, [r4, #32]
 8005bb0:	602b      	str	r3, [r5, #0]
 8005bb2:	d032      	beq.n	8005c1a <__sflush_r+0x9a>
 8005bb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	075a      	lsls	r2, r3, #29
 8005bba:	d505      	bpl.n	8005bc8 <__sflush_r+0x48>
 8005bbc:	6863      	ldr	r3, [r4, #4]
 8005bbe:	1ac0      	subs	r0, r0, r3
 8005bc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bc2:	b10b      	cbz	r3, 8005bc8 <__sflush_r+0x48>
 8005bc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bc6:	1ac0      	subs	r0, r0, r3
 8005bc8:	2300      	movs	r3, #0
 8005bca:	4602      	mov	r2, r0
 8005bcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bce:	6a21      	ldr	r1, [r4, #32]
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	47b0      	blx	r6
 8005bd4:	1c43      	adds	r3, r0, #1
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	d106      	bne.n	8005be8 <__sflush_r+0x68>
 8005bda:	6829      	ldr	r1, [r5, #0]
 8005bdc:	291d      	cmp	r1, #29
 8005bde:	d848      	bhi.n	8005c72 <__sflush_r+0xf2>
 8005be0:	4a29      	ldr	r2, [pc, #164]	; (8005c88 <__sflush_r+0x108>)
 8005be2:	40ca      	lsrs	r2, r1
 8005be4:	07d6      	lsls	r6, r2, #31
 8005be6:	d544      	bpl.n	8005c72 <__sflush_r+0xf2>
 8005be8:	2200      	movs	r2, #0
 8005bea:	6062      	str	r2, [r4, #4]
 8005bec:	04d9      	lsls	r1, r3, #19
 8005bee:	6922      	ldr	r2, [r4, #16]
 8005bf0:	6022      	str	r2, [r4, #0]
 8005bf2:	d504      	bpl.n	8005bfe <__sflush_r+0x7e>
 8005bf4:	1c42      	adds	r2, r0, #1
 8005bf6:	d101      	bne.n	8005bfc <__sflush_r+0x7c>
 8005bf8:	682b      	ldr	r3, [r5, #0]
 8005bfa:	b903      	cbnz	r3, 8005bfe <__sflush_r+0x7e>
 8005bfc:	6560      	str	r0, [r4, #84]	; 0x54
 8005bfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c00:	602f      	str	r7, [r5, #0]
 8005c02:	2900      	cmp	r1, #0
 8005c04:	d0c9      	beq.n	8005b9a <__sflush_r+0x1a>
 8005c06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c0a:	4299      	cmp	r1, r3
 8005c0c:	d002      	beq.n	8005c14 <__sflush_r+0x94>
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 f994 	bl	8005f3c <_free_r>
 8005c14:	2000      	movs	r0, #0
 8005c16:	6360      	str	r0, [r4, #52]	; 0x34
 8005c18:	e7c0      	b.n	8005b9c <__sflush_r+0x1c>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	47b0      	blx	r6
 8005c20:	1c41      	adds	r1, r0, #1
 8005c22:	d1c8      	bne.n	8005bb6 <__sflush_r+0x36>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0c5      	beq.n	8005bb6 <__sflush_r+0x36>
 8005c2a:	2b1d      	cmp	r3, #29
 8005c2c:	d001      	beq.n	8005c32 <__sflush_r+0xb2>
 8005c2e:	2b16      	cmp	r3, #22
 8005c30:	d101      	bne.n	8005c36 <__sflush_r+0xb6>
 8005c32:	602f      	str	r7, [r5, #0]
 8005c34:	e7b1      	b.n	8005b9a <__sflush_r+0x1a>
 8005c36:	89a3      	ldrh	r3, [r4, #12]
 8005c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c3c:	81a3      	strh	r3, [r4, #12]
 8005c3e:	e7ad      	b.n	8005b9c <__sflush_r+0x1c>
 8005c40:	690f      	ldr	r7, [r1, #16]
 8005c42:	2f00      	cmp	r7, #0
 8005c44:	d0a9      	beq.n	8005b9a <__sflush_r+0x1a>
 8005c46:	0793      	lsls	r3, r2, #30
 8005c48:	680e      	ldr	r6, [r1, #0]
 8005c4a:	bf08      	it	eq
 8005c4c:	694b      	ldreq	r3, [r1, #20]
 8005c4e:	600f      	str	r7, [r1, #0]
 8005c50:	bf18      	it	ne
 8005c52:	2300      	movne	r3, #0
 8005c54:	eba6 0807 	sub.w	r8, r6, r7
 8005c58:	608b      	str	r3, [r1, #8]
 8005c5a:	f1b8 0f00 	cmp.w	r8, #0
 8005c5e:	dd9c      	ble.n	8005b9a <__sflush_r+0x1a>
 8005c60:	4643      	mov	r3, r8
 8005c62:	463a      	mov	r2, r7
 8005c64:	6a21      	ldr	r1, [r4, #32]
 8005c66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c68:	4628      	mov	r0, r5
 8005c6a:	47b0      	blx	r6
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	dc06      	bgt.n	8005c7e <__sflush_r+0xfe>
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c76:	81a3      	strh	r3, [r4, #12]
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7c:	e78e      	b.n	8005b9c <__sflush_r+0x1c>
 8005c7e:	4407      	add	r7, r0
 8005c80:	eba8 0800 	sub.w	r8, r8, r0
 8005c84:	e7e9      	b.n	8005c5a <__sflush_r+0xda>
 8005c86:	bf00      	nop
 8005c88:	20400001 	.word	0x20400001

08005c8c <_fflush_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	690b      	ldr	r3, [r1, #16]
 8005c90:	4605      	mov	r5, r0
 8005c92:	460c      	mov	r4, r1
 8005c94:	b1db      	cbz	r3, 8005cce <_fflush_r+0x42>
 8005c96:	b118      	cbz	r0, 8005ca0 <_fflush_r+0x14>
 8005c98:	6983      	ldr	r3, [r0, #24]
 8005c9a:	b90b      	cbnz	r3, 8005ca0 <_fflush_r+0x14>
 8005c9c:	f000 f860 	bl	8005d60 <__sinit>
 8005ca0:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <_fflush_r+0x48>)
 8005ca2:	429c      	cmp	r4, r3
 8005ca4:	d109      	bne.n	8005cba <_fflush_r+0x2e>
 8005ca6:	686c      	ldr	r4, [r5, #4]
 8005ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cac:	b17b      	cbz	r3, 8005cce <_fflush_r+0x42>
 8005cae:	4621      	mov	r1, r4
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cb6:	f7ff bf63 	b.w	8005b80 <__sflush_r>
 8005cba:	4b07      	ldr	r3, [pc, #28]	; (8005cd8 <_fflush_r+0x4c>)
 8005cbc:	429c      	cmp	r4, r3
 8005cbe:	d101      	bne.n	8005cc4 <_fflush_r+0x38>
 8005cc0:	68ac      	ldr	r4, [r5, #8]
 8005cc2:	e7f1      	b.n	8005ca8 <_fflush_r+0x1c>
 8005cc4:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <_fflush_r+0x50>)
 8005cc6:	429c      	cmp	r4, r3
 8005cc8:	bf08      	it	eq
 8005cca:	68ec      	ldreq	r4, [r5, #12]
 8005ccc:	e7ec      	b.n	8005ca8 <_fflush_r+0x1c>
 8005cce:	2000      	movs	r0, #0
 8005cd0:	bd38      	pop	{r3, r4, r5, pc}
 8005cd2:	bf00      	nop
 8005cd4:	08006890 	.word	0x08006890
 8005cd8:	080068b0 	.word	0x080068b0
 8005cdc:	08006870 	.word	0x08006870

08005ce0 <std>:
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	b510      	push	{r4, lr}
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	e9c0 3300 	strd	r3, r3, [r0]
 8005cea:	6083      	str	r3, [r0, #8]
 8005cec:	8181      	strh	r1, [r0, #12]
 8005cee:	6643      	str	r3, [r0, #100]	; 0x64
 8005cf0:	81c2      	strh	r2, [r0, #14]
 8005cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cf6:	6183      	str	r3, [r0, #24]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	2208      	movs	r2, #8
 8005cfc:	305c      	adds	r0, #92	; 0x5c
 8005cfe:	f7ff fdfb 	bl	80058f8 <memset>
 8005d02:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <std+0x38>)
 8005d04:	6263      	str	r3, [r4, #36]	; 0x24
 8005d06:	4b05      	ldr	r3, [pc, #20]	; (8005d1c <std+0x3c>)
 8005d08:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d0a:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <std+0x40>)
 8005d0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d0e:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <std+0x44>)
 8005d10:	6224      	str	r4, [r4, #32]
 8005d12:	6323      	str	r3, [r4, #48]	; 0x30
 8005d14:	bd10      	pop	{r4, pc}
 8005d16:	bf00      	nop
 8005d18:	0800663d 	.word	0x0800663d
 8005d1c:	0800665f 	.word	0x0800665f
 8005d20:	08006697 	.word	0x08006697
 8005d24:	080066bb 	.word	0x080066bb

08005d28 <_cleanup_r>:
 8005d28:	4901      	ldr	r1, [pc, #4]	; (8005d30 <_cleanup_r+0x8>)
 8005d2a:	f000 b885 	b.w	8005e38 <_fwalk_reent>
 8005d2e:	bf00      	nop
 8005d30:	08005c8d 	.word	0x08005c8d

08005d34 <__sfmoreglue>:
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	1e4a      	subs	r2, r1, #1
 8005d38:	2568      	movs	r5, #104	; 0x68
 8005d3a:	4355      	muls	r5, r2
 8005d3c:	460e      	mov	r6, r1
 8005d3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d42:	f000 f949 	bl	8005fd8 <_malloc_r>
 8005d46:	4604      	mov	r4, r0
 8005d48:	b140      	cbz	r0, 8005d5c <__sfmoreglue+0x28>
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	e9c0 1600 	strd	r1, r6, [r0]
 8005d50:	300c      	adds	r0, #12
 8005d52:	60a0      	str	r0, [r4, #8]
 8005d54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d58:	f7ff fdce 	bl	80058f8 <memset>
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}

08005d60 <__sinit>:
 8005d60:	6983      	ldr	r3, [r0, #24]
 8005d62:	b510      	push	{r4, lr}
 8005d64:	4604      	mov	r4, r0
 8005d66:	bb33      	cbnz	r3, 8005db6 <__sinit+0x56>
 8005d68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005d6c:	6503      	str	r3, [r0, #80]	; 0x50
 8005d6e:	4b12      	ldr	r3, [pc, #72]	; (8005db8 <__sinit+0x58>)
 8005d70:	4a12      	ldr	r2, [pc, #72]	; (8005dbc <__sinit+0x5c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6282      	str	r2, [r0, #40]	; 0x28
 8005d76:	4298      	cmp	r0, r3
 8005d78:	bf04      	itt	eq
 8005d7a:	2301      	moveq	r3, #1
 8005d7c:	6183      	streq	r3, [r0, #24]
 8005d7e:	f000 f81f 	bl	8005dc0 <__sfp>
 8005d82:	6060      	str	r0, [r4, #4]
 8005d84:	4620      	mov	r0, r4
 8005d86:	f000 f81b 	bl	8005dc0 <__sfp>
 8005d8a:	60a0      	str	r0, [r4, #8]
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f000 f817 	bl	8005dc0 <__sfp>
 8005d92:	2200      	movs	r2, #0
 8005d94:	60e0      	str	r0, [r4, #12]
 8005d96:	2104      	movs	r1, #4
 8005d98:	6860      	ldr	r0, [r4, #4]
 8005d9a:	f7ff ffa1 	bl	8005ce0 <std>
 8005d9e:	2201      	movs	r2, #1
 8005da0:	2109      	movs	r1, #9
 8005da2:	68a0      	ldr	r0, [r4, #8]
 8005da4:	f7ff ff9c 	bl	8005ce0 <std>
 8005da8:	2202      	movs	r2, #2
 8005daa:	2112      	movs	r1, #18
 8005dac:	68e0      	ldr	r0, [r4, #12]
 8005dae:	f7ff ff97 	bl	8005ce0 <std>
 8005db2:	2301      	movs	r3, #1
 8005db4:	61a3      	str	r3, [r4, #24]
 8005db6:	bd10      	pop	{r4, pc}
 8005db8:	0800686c 	.word	0x0800686c
 8005dbc:	08005d29 	.word	0x08005d29

08005dc0 <__sfp>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	4b1b      	ldr	r3, [pc, #108]	; (8005e30 <__sfp+0x70>)
 8005dc4:	681e      	ldr	r6, [r3, #0]
 8005dc6:	69b3      	ldr	r3, [r6, #24]
 8005dc8:	4607      	mov	r7, r0
 8005dca:	b913      	cbnz	r3, 8005dd2 <__sfp+0x12>
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f7ff ffc7 	bl	8005d60 <__sinit>
 8005dd2:	3648      	adds	r6, #72	; 0x48
 8005dd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	d503      	bpl.n	8005de4 <__sfp+0x24>
 8005ddc:	6833      	ldr	r3, [r6, #0]
 8005dde:	b133      	cbz	r3, 8005dee <__sfp+0x2e>
 8005de0:	6836      	ldr	r6, [r6, #0]
 8005de2:	e7f7      	b.n	8005dd4 <__sfp+0x14>
 8005de4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005de8:	b16d      	cbz	r5, 8005e06 <__sfp+0x46>
 8005dea:	3468      	adds	r4, #104	; 0x68
 8005dec:	e7f4      	b.n	8005dd8 <__sfp+0x18>
 8005dee:	2104      	movs	r1, #4
 8005df0:	4638      	mov	r0, r7
 8005df2:	f7ff ff9f 	bl	8005d34 <__sfmoreglue>
 8005df6:	6030      	str	r0, [r6, #0]
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d1f1      	bne.n	8005de0 <__sfp+0x20>
 8005dfc:	230c      	movs	r3, #12
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	4604      	mov	r4, r0
 8005e02:	4620      	mov	r0, r4
 8005e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e06:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <__sfp+0x74>)
 8005e08:	6665      	str	r5, [r4, #100]	; 0x64
 8005e0a:	e9c4 5500 	strd	r5, r5, [r4]
 8005e0e:	60a5      	str	r5, [r4, #8]
 8005e10:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005e14:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005e18:	2208      	movs	r2, #8
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e20:	f7ff fd6a 	bl	80058f8 <memset>
 8005e24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e2c:	e7e9      	b.n	8005e02 <__sfp+0x42>
 8005e2e:	bf00      	nop
 8005e30:	0800686c 	.word	0x0800686c
 8005e34:	ffff0001 	.word	0xffff0001

08005e38 <_fwalk_reent>:
 8005e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e3c:	4680      	mov	r8, r0
 8005e3e:	4689      	mov	r9, r1
 8005e40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e44:	2600      	movs	r6, #0
 8005e46:	b914      	cbnz	r4, 8005e4e <_fwalk_reent+0x16>
 8005e48:	4630      	mov	r0, r6
 8005e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e4e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005e52:	3f01      	subs	r7, #1
 8005e54:	d501      	bpl.n	8005e5a <_fwalk_reent+0x22>
 8005e56:	6824      	ldr	r4, [r4, #0]
 8005e58:	e7f5      	b.n	8005e46 <_fwalk_reent+0xe>
 8005e5a:	89ab      	ldrh	r3, [r5, #12]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d907      	bls.n	8005e70 <_fwalk_reent+0x38>
 8005e60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e64:	3301      	adds	r3, #1
 8005e66:	d003      	beq.n	8005e70 <_fwalk_reent+0x38>
 8005e68:	4629      	mov	r1, r5
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	47c8      	blx	r9
 8005e6e:	4306      	orrs	r6, r0
 8005e70:	3568      	adds	r5, #104	; 0x68
 8005e72:	e7ee      	b.n	8005e52 <_fwalk_reent+0x1a>

08005e74 <__swhatbuf_r>:
 8005e74:	b570      	push	{r4, r5, r6, lr}
 8005e76:	460e      	mov	r6, r1
 8005e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e7c:	2900      	cmp	r1, #0
 8005e7e:	b096      	sub	sp, #88	; 0x58
 8005e80:	4614      	mov	r4, r2
 8005e82:	461d      	mov	r5, r3
 8005e84:	da07      	bge.n	8005e96 <__swhatbuf_r+0x22>
 8005e86:	2300      	movs	r3, #0
 8005e88:	602b      	str	r3, [r5, #0]
 8005e8a:	89b3      	ldrh	r3, [r6, #12]
 8005e8c:	061a      	lsls	r2, r3, #24
 8005e8e:	d410      	bmi.n	8005eb2 <__swhatbuf_r+0x3e>
 8005e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e94:	e00e      	b.n	8005eb4 <__swhatbuf_r+0x40>
 8005e96:	466a      	mov	r2, sp
 8005e98:	f000 fc36 	bl	8006708 <_fstat_r>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	dbf2      	blt.n	8005e86 <__swhatbuf_r+0x12>
 8005ea0:	9a01      	ldr	r2, [sp, #4]
 8005ea2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ea6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005eaa:	425a      	negs	r2, r3
 8005eac:	415a      	adcs	r2, r3
 8005eae:	602a      	str	r2, [r5, #0]
 8005eb0:	e7ee      	b.n	8005e90 <__swhatbuf_r+0x1c>
 8005eb2:	2340      	movs	r3, #64	; 0x40
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	6023      	str	r3, [r4, #0]
 8005eb8:	b016      	add	sp, #88	; 0x58
 8005eba:	bd70      	pop	{r4, r5, r6, pc}

08005ebc <__smakebuf_r>:
 8005ebc:	898b      	ldrh	r3, [r1, #12]
 8005ebe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ec0:	079d      	lsls	r5, r3, #30
 8005ec2:	4606      	mov	r6, r0
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	d507      	bpl.n	8005ed8 <__smakebuf_r+0x1c>
 8005ec8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	6123      	str	r3, [r4, #16]
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	6163      	str	r3, [r4, #20]
 8005ed4:	b002      	add	sp, #8
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
 8005ed8:	ab01      	add	r3, sp, #4
 8005eda:	466a      	mov	r2, sp
 8005edc:	f7ff ffca 	bl	8005e74 <__swhatbuf_r>
 8005ee0:	9900      	ldr	r1, [sp, #0]
 8005ee2:	4605      	mov	r5, r0
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	f000 f877 	bl	8005fd8 <_malloc_r>
 8005eea:	b948      	cbnz	r0, 8005f00 <__smakebuf_r+0x44>
 8005eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ef0:	059a      	lsls	r2, r3, #22
 8005ef2:	d4ef      	bmi.n	8005ed4 <__smakebuf_r+0x18>
 8005ef4:	f023 0303 	bic.w	r3, r3, #3
 8005ef8:	f043 0302 	orr.w	r3, r3, #2
 8005efc:	81a3      	strh	r3, [r4, #12]
 8005efe:	e7e3      	b.n	8005ec8 <__smakebuf_r+0xc>
 8005f00:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <__smakebuf_r+0x7c>)
 8005f02:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f04:	89a3      	ldrh	r3, [r4, #12]
 8005f06:	6020      	str	r0, [r4, #0]
 8005f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0c:	81a3      	strh	r3, [r4, #12]
 8005f0e:	9b00      	ldr	r3, [sp, #0]
 8005f10:	6163      	str	r3, [r4, #20]
 8005f12:	9b01      	ldr	r3, [sp, #4]
 8005f14:	6120      	str	r0, [r4, #16]
 8005f16:	b15b      	cbz	r3, 8005f30 <__smakebuf_r+0x74>
 8005f18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f000 fc05 	bl	800672c <_isatty_r>
 8005f22:	b128      	cbz	r0, 8005f30 <__smakebuf_r+0x74>
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	f023 0303 	bic.w	r3, r3, #3
 8005f2a:	f043 0301 	orr.w	r3, r3, #1
 8005f2e:	81a3      	strh	r3, [r4, #12]
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	431d      	orrs	r5, r3
 8005f34:	81a5      	strh	r5, [r4, #12]
 8005f36:	e7cd      	b.n	8005ed4 <__smakebuf_r+0x18>
 8005f38:	08005d29 	.word	0x08005d29

08005f3c <_free_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4605      	mov	r5, r0
 8005f40:	2900      	cmp	r1, #0
 8005f42:	d045      	beq.n	8005fd0 <_free_r+0x94>
 8005f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f48:	1f0c      	subs	r4, r1, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bfb8      	it	lt
 8005f4e:	18e4      	addlt	r4, r4, r3
 8005f50:	f000 fc0e 	bl	8006770 <__malloc_lock>
 8005f54:	4a1f      	ldr	r2, [pc, #124]	; (8005fd4 <_free_r+0x98>)
 8005f56:	6813      	ldr	r3, [r2, #0]
 8005f58:	4610      	mov	r0, r2
 8005f5a:	b933      	cbnz	r3, 8005f6a <_free_r+0x2e>
 8005f5c:	6063      	str	r3, [r4, #4]
 8005f5e:	6014      	str	r4, [r2, #0]
 8005f60:	4628      	mov	r0, r5
 8005f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f66:	f000 bc04 	b.w	8006772 <__malloc_unlock>
 8005f6a:	42a3      	cmp	r3, r4
 8005f6c:	d90c      	bls.n	8005f88 <_free_r+0x4c>
 8005f6e:	6821      	ldr	r1, [r4, #0]
 8005f70:	1862      	adds	r2, r4, r1
 8005f72:	4293      	cmp	r3, r2
 8005f74:	bf04      	itt	eq
 8005f76:	681a      	ldreq	r2, [r3, #0]
 8005f78:	685b      	ldreq	r3, [r3, #4]
 8005f7a:	6063      	str	r3, [r4, #4]
 8005f7c:	bf04      	itt	eq
 8005f7e:	1852      	addeq	r2, r2, r1
 8005f80:	6022      	streq	r2, [r4, #0]
 8005f82:	6004      	str	r4, [r0, #0]
 8005f84:	e7ec      	b.n	8005f60 <_free_r+0x24>
 8005f86:	4613      	mov	r3, r2
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	b10a      	cbz	r2, 8005f90 <_free_r+0x54>
 8005f8c:	42a2      	cmp	r2, r4
 8005f8e:	d9fa      	bls.n	8005f86 <_free_r+0x4a>
 8005f90:	6819      	ldr	r1, [r3, #0]
 8005f92:	1858      	adds	r0, r3, r1
 8005f94:	42a0      	cmp	r0, r4
 8005f96:	d10b      	bne.n	8005fb0 <_free_r+0x74>
 8005f98:	6820      	ldr	r0, [r4, #0]
 8005f9a:	4401      	add	r1, r0
 8005f9c:	1858      	adds	r0, r3, r1
 8005f9e:	4282      	cmp	r2, r0
 8005fa0:	6019      	str	r1, [r3, #0]
 8005fa2:	d1dd      	bne.n	8005f60 <_free_r+0x24>
 8005fa4:	6810      	ldr	r0, [r2, #0]
 8005fa6:	6852      	ldr	r2, [r2, #4]
 8005fa8:	605a      	str	r2, [r3, #4]
 8005faa:	4401      	add	r1, r0
 8005fac:	6019      	str	r1, [r3, #0]
 8005fae:	e7d7      	b.n	8005f60 <_free_r+0x24>
 8005fb0:	d902      	bls.n	8005fb8 <_free_r+0x7c>
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	602b      	str	r3, [r5, #0]
 8005fb6:	e7d3      	b.n	8005f60 <_free_r+0x24>
 8005fb8:	6820      	ldr	r0, [r4, #0]
 8005fba:	1821      	adds	r1, r4, r0
 8005fbc:	428a      	cmp	r2, r1
 8005fbe:	bf04      	itt	eq
 8005fc0:	6811      	ldreq	r1, [r2, #0]
 8005fc2:	6852      	ldreq	r2, [r2, #4]
 8005fc4:	6062      	str	r2, [r4, #4]
 8005fc6:	bf04      	itt	eq
 8005fc8:	1809      	addeq	r1, r1, r0
 8005fca:	6021      	streq	r1, [r4, #0]
 8005fcc:	605c      	str	r4, [r3, #4]
 8005fce:	e7c7      	b.n	8005f60 <_free_r+0x24>
 8005fd0:	bd38      	pop	{r3, r4, r5, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000210 	.word	0x20000210

08005fd8 <_malloc_r>:
 8005fd8:	b570      	push	{r4, r5, r6, lr}
 8005fda:	1ccd      	adds	r5, r1, #3
 8005fdc:	f025 0503 	bic.w	r5, r5, #3
 8005fe0:	3508      	adds	r5, #8
 8005fe2:	2d0c      	cmp	r5, #12
 8005fe4:	bf38      	it	cc
 8005fe6:	250c      	movcc	r5, #12
 8005fe8:	2d00      	cmp	r5, #0
 8005fea:	4606      	mov	r6, r0
 8005fec:	db01      	blt.n	8005ff2 <_malloc_r+0x1a>
 8005fee:	42a9      	cmp	r1, r5
 8005ff0:	d903      	bls.n	8005ffa <_malloc_r+0x22>
 8005ff2:	230c      	movs	r3, #12
 8005ff4:	6033      	str	r3, [r6, #0]
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	bd70      	pop	{r4, r5, r6, pc}
 8005ffa:	f000 fbb9 	bl	8006770 <__malloc_lock>
 8005ffe:	4a21      	ldr	r2, [pc, #132]	; (8006084 <_malloc_r+0xac>)
 8006000:	6814      	ldr	r4, [r2, #0]
 8006002:	4621      	mov	r1, r4
 8006004:	b991      	cbnz	r1, 800602c <_malloc_r+0x54>
 8006006:	4c20      	ldr	r4, [pc, #128]	; (8006088 <_malloc_r+0xb0>)
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	b91b      	cbnz	r3, 8006014 <_malloc_r+0x3c>
 800600c:	4630      	mov	r0, r6
 800600e:	f000 fb05 	bl	800661c <_sbrk_r>
 8006012:	6020      	str	r0, [r4, #0]
 8006014:	4629      	mov	r1, r5
 8006016:	4630      	mov	r0, r6
 8006018:	f000 fb00 	bl	800661c <_sbrk_r>
 800601c:	1c43      	adds	r3, r0, #1
 800601e:	d124      	bne.n	800606a <_malloc_r+0x92>
 8006020:	230c      	movs	r3, #12
 8006022:	6033      	str	r3, [r6, #0]
 8006024:	4630      	mov	r0, r6
 8006026:	f000 fba4 	bl	8006772 <__malloc_unlock>
 800602a:	e7e4      	b.n	8005ff6 <_malloc_r+0x1e>
 800602c:	680b      	ldr	r3, [r1, #0]
 800602e:	1b5b      	subs	r3, r3, r5
 8006030:	d418      	bmi.n	8006064 <_malloc_r+0x8c>
 8006032:	2b0b      	cmp	r3, #11
 8006034:	d90f      	bls.n	8006056 <_malloc_r+0x7e>
 8006036:	600b      	str	r3, [r1, #0]
 8006038:	50cd      	str	r5, [r1, r3]
 800603a:	18cc      	adds	r4, r1, r3
 800603c:	4630      	mov	r0, r6
 800603e:	f000 fb98 	bl	8006772 <__malloc_unlock>
 8006042:	f104 000b 	add.w	r0, r4, #11
 8006046:	1d23      	adds	r3, r4, #4
 8006048:	f020 0007 	bic.w	r0, r0, #7
 800604c:	1ac3      	subs	r3, r0, r3
 800604e:	d0d3      	beq.n	8005ff8 <_malloc_r+0x20>
 8006050:	425a      	negs	r2, r3
 8006052:	50e2      	str	r2, [r4, r3]
 8006054:	e7d0      	b.n	8005ff8 <_malloc_r+0x20>
 8006056:	428c      	cmp	r4, r1
 8006058:	684b      	ldr	r3, [r1, #4]
 800605a:	bf16      	itet	ne
 800605c:	6063      	strne	r3, [r4, #4]
 800605e:	6013      	streq	r3, [r2, #0]
 8006060:	460c      	movne	r4, r1
 8006062:	e7eb      	b.n	800603c <_malloc_r+0x64>
 8006064:	460c      	mov	r4, r1
 8006066:	6849      	ldr	r1, [r1, #4]
 8006068:	e7cc      	b.n	8006004 <_malloc_r+0x2c>
 800606a:	1cc4      	adds	r4, r0, #3
 800606c:	f024 0403 	bic.w	r4, r4, #3
 8006070:	42a0      	cmp	r0, r4
 8006072:	d005      	beq.n	8006080 <_malloc_r+0xa8>
 8006074:	1a21      	subs	r1, r4, r0
 8006076:	4630      	mov	r0, r6
 8006078:	f000 fad0 	bl	800661c <_sbrk_r>
 800607c:	3001      	adds	r0, #1
 800607e:	d0cf      	beq.n	8006020 <_malloc_r+0x48>
 8006080:	6025      	str	r5, [r4, #0]
 8006082:	e7db      	b.n	800603c <_malloc_r+0x64>
 8006084:	20000210 	.word	0x20000210
 8006088:	20000214 	.word	0x20000214

0800608c <__sfputc_r>:
 800608c:	6893      	ldr	r3, [r2, #8]
 800608e:	3b01      	subs	r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	b410      	push	{r4}
 8006094:	6093      	str	r3, [r2, #8]
 8006096:	da08      	bge.n	80060aa <__sfputc_r+0x1e>
 8006098:	6994      	ldr	r4, [r2, #24]
 800609a:	42a3      	cmp	r3, r4
 800609c:	db01      	blt.n	80060a2 <__sfputc_r+0x16>
 800609e:	290a      	cmp	r1, #10
 80060a0:	d103      	bne.n	80060aa <__sfputc_r+0x1e>
 80060a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060a6:	f7ff bcab 	b.w	8005a00 <__swbuf_r>
 80060aa:	6813      	ldr	r3, [r2, #0]
 80060ac:	1c58      	adds	r0, r3, #1
 80060ae:	6010      	str	r0, [r2, #0]
 80060b0:	7019      	strb	r1, [r3, #0]
 80060b2:	4608      	mov	r0, r1
 80060b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <__sfputs_r>:
 80060ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060bc:	4606      	mov	r6, r0
 80060be:	460f      	mov	r7, r1
 80060c0:	4614      	mov	r4, r2
 80060c2:	18d5      	adds	r5, r2, r3
 80060c4:	42ac      	cmp	r4, r5
 80060c6:	d101      	bne.n	80060cc <__sfputs_r+0x12>
 80060c8:	2000      	movs	r0, #0
 80060ca:	e007      	b.n	80060dc <__sfputs_r+0x22>
 80060cc:	463a      	mov	r2, r7
 80060ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d2:	4630      	mov	r0, r6
 80060d4:	f7ff ffda 	bl	800608c <__sfputc_r>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d1f3      	bne.n	80060c4 <__sfputs_r+0xa>
 80060dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060e0 <_vfiprintf_r>:
 80060e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e4:	460c      	mov	r4, r1
 80060e6:	b09d      	sub	sp, #116	; 0x74
 80060e8:	4617      	mov	r7, r2
 80060ea:	461d      	mov	r5, r3
 80060ec:	4606      	mov	r6, r0
 80060ee:	b118      	cbz	r0, 80060f8 <_vfiprintf_r+0x18>
 80060f0:	6983      	ldr	r3, [r0, #24]
 80060f2:	b90b      	cbnz	r3, 80060f8 <_vfiprintf_r+0x18>
 80060f4:	f7ff fe34 	bl	8005d60 <__sinit>
 80060f8:	4b7c      	ldr	r3, [pc, #496]	; (80062ec <_vfiprintf_r+0x20c>)
 80060fa:	429c      	cmp	r4, r3
 80060fc:	d158      	bne.n	80061b0 <_vfiprintf_r+0xd0>
 80060fe:	6874      	ldr	r4, [r6, #4]
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	0718      	lsls	r0, r3, #28
 8006104:	d55e      	bpl.n	80061c4 <_vfiprintf_r+0xe4>
 8006106:	6923      	ldr	r3, [r4, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d05b      	beq.n	80061c4 <_vfiprintf_r+0xe4>
 800610c:	2300      	movs	r3, #0
 800610e:	9309      	str	r3, [sp, #36]	; 0x24
 8006110:	2320      	movs	r3, #32
 8006112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006116:	2330      	movs	r3, #48	; 0x30
 8006118:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800611c:	9503      	str	r5, [sp, #12]
 800611e:	f04f 0b01 	mov.w	fp, #1
 8006122:	46b8      	mov	r8, r7
 8006124:	4645      	mov	r5, r8
 8006126:	f815 3b01 	ldrb.w	r3, [r5], #1
 800612a:	b10b      	cbz	r3, 8006130 <_vfiprintf_r+0x50>
 800612c:	2b25      	cmp	r3, #37	; 0x25
 800612e:	d154      	bne.n	80061da <_vfiprintf_r+0xfa>
 8006130:	ebb8 0a07 	subs.w	sl, r8, r7
 8006134:	d00b      	beq.n	800614e <_vfiprintf_r+0x6e>
 8006136:	4653      	mov	r3, sl
 8006138:	463a      	mov	r2, r7
 800613a:	4621      	mov	r1, r4
 800613c:	4630      	mov	r0, r6
 800613e:	f7ff ffbc 	bl	80060ba <__sfputs_r>
 8006142:	3001      	adds	r0, #1
 8006144:	f000 80c2 	beq.w	80062cc <_vfiprintf_r+0x1ec>
 8006148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800614a:	4453      	add	r3, sl
 800614c:	9309      	str	r3, [sp, #36]	; 0x24
 800614e:	f898 3000 	ldrb.w	r3, [r8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 80ba 	beq.w	80062cc <_vfiprintf_r+0x1ec>
 8006158:	2300      	movs	r3, #0
 800615a:	f04f 32ff 	mov.w	r2, #4294967295
 800615e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006162:	9304      	str	r3, [sp, #16]
 8006164:	9307      	str	r3, [sp, #28]
 8006166:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800616a:	931a      	str	r3, [sp, #104]	; 0x68
 800616c:	46a8      	mov	r8, r5
 800616e:	2205      	movs	r2, #5
 8006170:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006174:	485e      	ldr	r0, [pc, #376]	; (80062f0 <_vfiprintf_r+0x210>)
 8006176:	f7fa f833 	bl	80001e0 <memchr>
 800617a:	9b04      	ldr	r3, [sp, #16]
 800617c:	bb78      	cbnz	r0, 80061de <_vfiprintf_r+0xfe>
 800617e:	06d9      	lsls	r1, r3, #27
 8006180:	bf44      	itt	mi
 8006182:	2220      	movmi	r2, #32
 8006184:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006188:	071a      	lsls	r2, r3, #28
 800618a:	bf44      	itt	mi
 800618c:	222b      	movmi	r2, #43	; 0x2b
 800618e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006192:	782a      	ldrb	r2, [r5, #0]
 8006194:	2a2a      	cmp	r2, #42	; 0x2a
 8006196:	d02a      	beq.n	80061ee <_vfiprintf_r+0x10e>
 8006198:	9a07      	ldr	r2, [sp, #28]
 800619a:	46a8      	mov	r8, r5
 800619c:	2000      	movs	r0, #0
 800619e:	250a      	movs	r5, #10
 80061a0:	4641      	mov	r1, r8
 80061a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061a6:	3b30      	subs	r3, #48	; 0x30
 80061a8:	2b09      	cmp	r3, #9
 80061aa:	d969      	bls.n	8006280 <_vfiprintf_r+0x1a0>
 80061ac:	b360      	cbz	r0, 8006208 <_vfiprintf_r+0x128>
 80061ae:	e024      	b.n	80061fa <_vfiprintf_r+0x11a>
 80061b0:	4b50      	ldr	r3, [pc, #320]	; (80062f4 <_vfiprintf_r+0x214>)
 80061b2:	429c      	cmp	r4, r3
 80061b4:	d101      	bne.n	80061ba <_vfiprintf_r+0xda>
 80061b6:	68b4      	ldr	r4, [r6, #8]
 80061b8:	e7a2      	b.n	8006100 <_vfiprintf_r+0x20>
 80061ba:	4b4f      	ldr	r3, [pc, #316]	; (80062f8 <_vfiprintf_r+0x218>)
 80061bc:	429c      	cmp	r4, r3
 80061be:	bf08      	it	eq
 80061c0:	68f4      	ldreq	r4, [r6, #12]
 80061c2:	e79d      	b.n	8006100 <_vfiprintf_r+0x20>
 80061c4:	4621      	mov	r1, r4
 80061c6:	4630      	mov	r0, r6
 80061c8:	f7ff fc6c 	bl	8005aa4 <__swsetup_r>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d09d      	beq.n	800610c <_vfiprintf_r+0x2c>
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	b01d      	add	sp, #116	; 0x74
 80061d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061da:	46a8      	mov	r8, r5
 80061dc:	e7a2      	b.n	8006124 <_vfiprintf_r+0x44>
 80061de:	4a44      	ldr	r2, [pc, #272]	; (80062f0 <_vfiprintf_r+0x210>)
 80061e0:	1a80      	subs	r0, r0, r2
 80061e2:	fa0b f000 	lsl.w	r0, fp, r0
 80061e6:	4318      	orrs	r0, r3
 80061e8:	9004      	str	r0, [sp, #16]
 80061ea:	4645      	mov	r5, r8
 80061ec:	e7be      	b.n	800616c <_vfiprintf_r+0x8c>
 80061ee:	9a03      	ldr	r2, [sp, #12]
 80061f0:	1d11      	adds	r1, r2, #4
 80061f2:	6812      	ldr	r2, [r2, #0]
 80061f4:	9103      	str	r1, [sp, #12]
 80061f6:	2a00      	cmp	r2, #0
 80061f8:	db01      	blt.n	80061fe <_vfiprintf_r+0x11e>
 80061fa:	9207      	str	r2, [sp, #28]
 80061fc:	e004      	b.n	8006208 <_vfiprintf_r+0x128>
 80061fe:	4252      	negs	r2, r2
 8006200:	f043 0302 	orr.w	r3, r3, #2
 8006204:	9207      	str	r2, [sp, #28]
 8006206:	9304      	str	r3, [sp, #16]
 8006208:	f898 3000 	ldrb.w	r3, [r8]
 800620c:	2b2e      	cmp	r3, #46	; 0x2e
 800620e:	d10e      	bne.n	800622e <_vfiprintf_r+0x14e>
 8006210:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006214:	2b2a      	cmp	r3, #42	; 0x2a
 8006216:	d138      	bne.n	800628a <_vfiprintf_r+0x1aa>
 8006218:	9b03      	ldr	r3, [sp, #12]
 800621a:	1d1a      	adds	r2, r3, #4
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	9203      	str	r2, [sp, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	bfb8      	it	lt
 8006224:	f04f 33ff 	movlt.w	r3, #4294967295
 8006228:	f108 0802 	add.w	r8, r8, #2
 800622c:	9305      	str	r3, [sp, #20]
 800622e:	4d33      	ldr	r5, [pc, #204]	; (80062fc <_vfiprintf_r+0x21c>)
 8006230:	f898 1000 	ldrb.w	r1, [r8]
 8006234:	2203      	movs	r2, #3
 8006236:	4628      	mov	r0, r5
 8006238:	f7f9 ffd2 	bl	80001e0 <memchr>
 800623c:	b140      	cbz	r0, 8006250 <_vfiprintf_r+0x170>
 800623e:	2340      	movs	r3, #64	; 0x40
 8006240:	1b40      	subs	r0, r0, r5
 8006242:	fa03 f000 	lsl.w	r0, r3, r0
 8006246:	9b04      	ldr	r3, [sp, #16]
 8006248:	4303      	orrs	r3, r0
 800624a:	f108 0801 	add.w	r8, r8, #1
 800624e:	9304      	str	r3, [sp, #16]
 8006250:	f898 1000 	ldrb.w	r1, [r8]
 8006254:	482a      	ldr	r0, [pc, #168]	; (8006300 <_vfiprintf_r+0x220>)
 8006256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800625a:	2206      	movs	r2, #6
 800625c:	f108 0701 	add.w	r7, r8, #1
 8006260:	f7f9 ffbe 	bl	80001e0 <memchr>
 8006264:	2800      	cmp	r0, #0
 8006266:	d037      	beq.n	80062d8 <_vfiprintf_r+0x1f8>
 8006268:	4b26      	ldr	r3, [pc, #152]	; (8006304 <_vfiprintf_r+0x224>)
 800626a:	bb1b      	cbnz	r3, 80062b4 <_vfiprintf_r+0x1d4>
 800626c:	9b03      	ldr	r3, [sp, #12]
 800626e:	3307      	adds	r3, #7
 8006270:	f023 0307 	bic.w	r3, r3, #7
 8006274:	3308      	adds	r3, #8
 8006276:	9303      	str	r3, [sp, #12]
 8006278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800627a:	444b      	add	r3, r9
 800627c:	9309      	str	r3, [sp, #36]	; 0x24
 800627e:	e750      	b.n	8006122 <_vfiprintf_r+0x42>
 8006280:	fb05 3202 	mla	r2, r5, r2, r3
 8006284:	2001      	movs	r0, #1
 8006286:	4688      	mov	r8, r1
 8006288:	e78a      	b.n	80061a0 <_vfiprintf_r+0xc0>
 800628a:	2300      	movs	r3, #0
 800628c:	f108 0801 	add.w	r8, r8, #1
 8006290:	9305      	str	r3, [sp, #20]
 8006292:	4619      	mov	r1, r3
 8006294:	250a      	movs	r5, #10
 8006296:	4640      	mov	r0, r8
 8006298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800629c:	3a30      	subs	r2, #48	; 0x30
 800629e:	2a09      	cmp	r2, #9
 80062a0:	d903      	bls.n	80062aa <_vfiprintf_r+0x1ca>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0c3      	beq.n	800622e <_vfiprintf_r+0x14e>
 80062a6:	9105      	str	r1, [sp, #20]
 80062a8:	e7c1      	b.n	800622e <_vfiprintf_r+0x14e>
 80062aa:	fb05 2101 	mla	r1, r5, r1, r2
 80062ae:	2301      	movs	r3, #1
 80062b0:	4680      	mov	r8, r0
 80062b2:	e7f0      	b.n	8006296 <_vfiprintf_r+0x1b6>
 80062b4:	ab03      	add	r3, sp, #12
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	4622      	mov	r2, r4
 80062ba:	4b13      	ldr	r3, [pc, #76]	; (8006308 <_vfiprintf_r+0x228>)
 80062bc:	a904      	add	r1, sp, #16
 80062be:	4630      	mov	r0, r6
 80062c0:	f3af 8000 	nop.w
 80062c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80062c8:	4681      	mov	r9, r0
 80062ca:	d1d5      	bne.n	8006278 <_vfiprintf_r+0x198>
 80062cc:	89a3      	ldrh	r3, [r4, #12]
 80062ce:	065b      	lsls	r3, r3, #25
 80062d0:	f53f af7e 	bmi.w	80061d0 <_vfiprintf_r+0xf0>
 80062d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062d6:	e77d      	b.n	80061d4 <_vfiprintf_r+0xf4>
 80062d8:	ab03      	add	r3, sp, #12
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	4622      	mov	r2, r4
 80062de:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <_vfiprintf_r+0x228>)
 80062e0:	a904      	add	r1, sp, #16
 80062e2:	4630      	mov	r0, r6
 80062e4:	f000 f888 	bl	80063f8 <_printf_i>
 80062e8:	e7ec      	b.n	80062c4 <_vfiprintf_r+0x1e4>
 80062ea:	bf00      	nop
 80062ec:	08006890 	.word	0x08006890
 80062f0:	080068d0 	.word	0x080068d0
 80062f4:	080068b0 	.word	0x080068b0
 80062f8:	08006870 	.word	0x08006870
 80062fc:	080068d6 	.word	0x080068d6
 8006300:	080068da 	.word	0x080068da
 8006304:	00000000 	.word	0x00000000
 8006308:	080060bb 	.word	0x080060bb

0800630c <_printf_common>:
 800630c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006310:	4691      	mov	r9, r2
 8006312:	461f      	mov	r7, r3
 8006314:	688a      	ldr	r2, [r1, #8]
 8006316:	690b      	ldr	r3, [r1, #16]
 8006318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800631c:	4293      	cmp	r3, r2
 800631e:	bfb8      	it	lt
 8006320:	4613      	movlt	r3, r2
 8006322:	f8c9 3000 	str.w	r3, [r9]
 8006326:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800632a:	4606      	mov	r6, r0
 800632c:	460c      	mov	r4, r1
 800632e:	b112      	cbz	r2, 8006336 <_printf_common+0x2a>
 8006330:	3301      	adds	r3, #1
 8006332:	f8c9 3000 	str.w	r3, [r9]
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	0699      	lsls	r1, r3, #26
 800633a:	bf42      	ittt	mi
 800633c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006340:	3302      	addmi	r3, #2
 8006342:	f8c9 3000 	strmi.w	r3, [r9]
 8006346:	6825      	ldr	r5, [r4, #0]
 8006348:	f015 0506 	ands.w	r5, r5, #6
 800634c:	d107      	bne.n	800635e <_printf_common+0x52>
 800634e:	f104 0a19 	add.w	sl, r4, #25
 8006352:	68e3      	ldr	r3, [r4, #12]
 8006354:	f8d9 2000 	ldr.w	r2, [r9]
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	42ab      	cmp	r3, r5
 800635c:	dc28      	bgt.n	80063b0 <_printf_common+0xa4>
 800635e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006362:	6822      	ldr	r2, [r4, #0]
 8006364:	3300      	adds	r3, #0
 8006366:	bf18      	it	ne
 8006368:	2301      	movne	r3, #1
 800636a:	0692      	lsls	r2, r2, #26
 800636c:	d42d      	bmi.n	80063ca <_printf_common+0xbe>
 800636e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006372:	4639      	mov	r1, r7
 8006374:	4630      	mov	r0, r6
 8006376:	47c0      	blx	r8
 8006378:	3001      	adds	r0, #1
 800637a:	d020      	beq.n	80063be <_printf_common+0xb2>
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	68e5      	ldr	r5, [r4, #12]
 8006380:	f8d9 2000 	ldr.w	r2, [r9]
 8006384:	f003 0306 	and.w	r3, r3, #6
 8006388:	2b04      	cmp	r3, #4
 800638a:	bf08      	it	eq
 800638c:	1aad      	subeq	r5, r5, r2
 800638e:	68a3      	ldr	r3, [r4, #8]
 8006390:	6922      	ldr	r2, [r4, #16]
 8006392:	bf0c      	ite	eq
 8006394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006398:	2500      	movne	r5, #0
 800639a:	4293      	cmp	r3, r2
 800639c:	bfc4      	itt	gt
 800639e:	1a9b      	subgt	r3, r3, r2
 80063a0:	18ed      	addgt	r5, r5, r3
 80063a2:	f04f 0900 	mov.w	r9, #0
 80063a6:	341a      	adds	r4, #26
 80063a8:	454d      	cmp	r5, r9
 80063aa:	d11a      	bne.n	80063e2 <_printf_common+0xd6>
 80063ac:	2000      	movs	r0, #0
 80063ae:	e008      	b.n	80063c2 <_printf_common+0xb6>
 80063b0:	2301      	movs	r3, #1
 80063b2:	4652      	mov	r2, sl
 80063b4:	4639      	mov	r1, r7
 80063b6:	4630      	mov	r0, r6
 80063b8:	47c0      	blx	r8
 80063ba:	3001      	adds	r0, #1
 80063bc:	d103      	bne.n	80063c6 <_printf_common+0xba>
 80063be:	f04f 30ff 	mov.w	r0, #4294967295
 80063c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c6:	3501      	adds	r5, #1
 80063c8:	e7c3      	b.n	8006352 <_printf_common+0x46>
 80063ca:	18e1      	adds	r1, r4, r3
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	2030      	movs	r0, #48	; 0x30
 80063d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063d4:	4422      	add	r2, r4
 80063d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063de:	3302      	adds	r3, #2
 80063e0:	e7c5      	b.n	800636e <_printf_common+0x62>
 80063e2:	2301      	movs	r3, #1
 80063e4:	4622      	mov	r2, r4
 80063e6:	4639      	mov	r1, r7
 80063e8:	4630      	mov	r0, r6
 80063ea:	47c0      	blx	r8
 80063ec:	3001      	adds	r0, #1
 80063ee:	d0e6      	beq.n	80063be <_printf_common+0xb2>
 80063f0:	f109 0901 	add.w	r9, r9, #1
 80063f4:	e7d8      	b.n	80063a8 <_printf_common+0x9c>
	...

080063f8 <_printf_i>:
 80063f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006400:	460c      	mov	r4, r1
 8006402:	7e09      	ldrb	r1, [r1, #24]
 8006404:	b085      	sub	sp, #20
 8006406:	296e      	cmp	r1, #110	; 0x6e
 8006408:	4617      	mov	r7, r2
 800640a:	4606      	mov	r6, r0
 800640c:	4698      	mov	r8, r3
 800640e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006410:	f000 80b3 	beq.w	800657a <_printf_i+0x182>
 8006414:	d822      	bhi.n	800645c <_printf_i+0x64>
 8006416:	2963      	cmp	r1, #99	; 0x63
 8006418:	d036      	beq.n	8006488 <_printf_i+0x90>
 800641a:	d80a      	bhi.n	8006432 <_printf_i+0x3a>
 800641c:	2900      	cmp	r1, #0
 800641e:	f000 80b9 	beq.w	8006594 <_printf_i+0x19c>
 8006422:	2958      	cmp	r1, #88	; 0x58
 8006424:	f000 8083 	beq.w	800652e <_printf_i+0x136>
 8006428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800642c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006430:	e032      	b.n	8006498 <_printf_i+0xa0>
 8006432:	2964      	cmp	r1, #100	; 0x64
 8006434:	d001      	beq.n	800643a <_printf_i+0x42>
 8006436:	2969      	cmp	r1, #105	; 0x69
 8006438:	d1f6      	bne.n	8006428 <_printf_i+0x30>
 800643a:	6820      	ldr	r0, [r4, #0]
 800643c:	6813      	ldr	r3, [r2, #0]
 800643e:	0605      	lsls	r5, r0, #24
 8006440:	f103 0104 	add.w	r1, r3, #4
 8006444:	d52a      	bpl.n	800649c <_printf_i+0xa4>
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6011      	str	r1, [r2, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	da03      	bge.n	8006456 <_printf_i+0x5e>
 800644e:	222d      	movs	r2, #45	; 0x2d
 8006450:	425b      	negs	r3, r3
 8006452:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006456:	486f      	ldr	r0, [pc, #444]	; (8006614 <_printf_i+0x21c>)
 8006458:	220a      	movs	r2, #10
 800645a:	e039      	b.n	80064d0 <_printf_i+0xd8>
 800645c:	2973      	cmp	r1, #115	; 0x73
 800645e:	f000 809d 	beq.w	800659c <_printf_i+0x1a4>
 8006462:	d808      	bhi.n	8006476 <_printf_i+0x7e>
 8006464:	296f      	cmp	r1, #111	; 0x6f
 8006466:	d020      	beq.n	80064aa <_printf_i+0xb2>
 8006468:	2970      	cmp	r1, #112	; 0x70
 800646a:	d1dd      	bne.n	8006428 <_printf_i+0x30>
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	f043 0320 	orr.w	r3, r3, #32
 8006472:	6023      	str	r3, [r4, #0]
 8006474:	e003      	b.n	800647e <_printf_i+0x86>
 8006476:	2975      	cmp	r1, #117	; 0x75
 8006478:	d017      	beq.n	80064aa <_printf_i+0xb2>
 800647a:	2978      	cmp	r1, #120	; 0x78
 800647c:	d1d4      	bne.n	8006428 <_printf_i+0x30>
 800647e:	2378      	movs	r3, #120	; 0x78
 8006480:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006484:	4864      	ldr	r0, [pc, #400]	; (8006618 <_printf_i+0x220>)
 8006486:	e055      	b.n	8006534 <_printf_i+0x13c>
 8006488:	6813      	ldr	r3, [r2, #0]
 800648a:	1d19      	adds	r1, r3, #4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6011      	str	r1, [r2, #0]
 8006490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006498:	2301      	movs	r3, #1
 800649a:	e08c      	b.n	80065b6 <_printf_i+0x1be>
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6011      	str	r1, [r2, #0]
 80064a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064a4:	bf18      	it	ne
 80064a6:	b21b      	sxthne	r3, r3
 80064a8:	e7cf      	b.n	800644a <_printf_i+0x52>
 80064aa:	6813      	ldr	r3, [r2, #0]
 80064ac:	6825      	ldr	r5, [r4, #0]
 80064ae:	1d18      	adds	r0, r3, #4
 80064b0:	6010      	str	r0, [r2, #0]
 80064b2:	0628      	lsls	r0, r5, #24
 80064b4:	d501      	bpl.n	80064ba <_printf_i+0xc2>
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	e002      	b.n	80064c0 <_printf_i+0xc8>
 80064ba:	0668      	lsls	r0, r5, #25
 80064bc:	d5fb      	bpl.n	80064b6 <_printf_i+0xbe>
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	4854      	ldr	r0, [pc, #336]	; (8006614 <_printf_i+0x21c>)
 80064c2:	296f      	cmp	r1, #111	; 0x6f
 80064c4:	bf14      	ite	ne
 80064c6:	220a      	movne	r2, #10
 80064c8:	2208      	moveq	r2, #8
 80064ca:	2100      	movs	r1, #0
 80064cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064d0:	6865      	ldr	r5, [r4, #4]
 80064d2:	60a5      	str	r5, [r4, #8]
 80064d4:	2d00      	cmp	r5, #0
 80064d6:	f2c0 8095 	blt.w	8006604 <_printf_i+0x20c>
 80064da:	6821      	ldr	r1, [r4, #0]
 80064dc:	f021 0104 	bic.w	r1, r1, #4
 80064e0:	6021      	str	r1, [r4, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d13d      	bne.n	8006562 <_printf_i+0x16a>
 80064e6:	2d00      	cmp	r5, #0
 80064e8:	f040 808e 	bne.w	8006608 <_printf_i+0x210>
 80064ec:	4665      	mov	r5, ip
 80064ee:	2a08      	cmp	r2, #8
 80064f0:	d10b      	bne.n	800650a <_printf_i+0x112>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	07db      	lsls	r3, r3, #31
 80064f6:	d508      	bpl.n	800650a <_printf_i+0x112>
 80064f8:	6923      	ldr	r3, [r4, #16]
 80064fa:	6862      	ldr	r2, [r4, #4]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	bfde      	ittt	le
 8006500:	2330      	movle	r3, #48	; 0x30
 8006502:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006506:	f105 35ff 	addle.w	r5, r5, #4294967295
 800650a:	ebac 0305 	sub.w	r3, ip, r5
 800650e:	6123      	str	r3, [r4, #16]
 8006510:	f8cd 8000 	str.w	r8, [sp]
 8006514:	463b      	mov	r3, r7
 8006516:	aa03      	add	r2, sp, #12
 8006518:	4621      	mov	r1, r4
 800651a:	4630      	mov	r0, r6
 800651c:	f7ff fef6 	bl	800630c <_printf_common>
 8006520:	3001      	adds	r0, #1
 8006522:	d14d      	bne.n	80065c0 <_printf_i+0x1c8>
 8006524:	f04f 30ff 	mov.w	r0, #4294967295
 8006528:	b005      	add	sp, #20
 800652a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800652e:	4839      	ldr	r0, [pc, #228]	; (8006614 <_printf_i+0x21c>)
 8006530:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006534:	6813      	ldr	r3, [r2, #0]
 8006536:	6821      	ldr	r1, [r4, #0]
 8006538:	1d1d      	adds	r5, r3, #4
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6015      	str	r5, [r2, #0]
 800653e:	060a      	lsls	r2, r1, #24
 8006540:	d50b      	bpl.n	800655a <_printf_i+0x162>
 8006542:	07ca      	lsls	r2, r1, #31
 8006544:	bf44      	itt	mi
 8006546:	f041 0120 	orrmi.w	r1, r1, #32
 800654a:	6021      	strmi	r1, [r4, #0]
 800654c:	b91b      	cbnz	r3, 8006556 <_printf_i+0x15e>
 800654e:	6822      	ldr	r2, [r4, #0]
 8006550:	f022 0220 	bic.w	r2, r2, #32
 8006554:	6022      	str	r2, [r4, #0]
 8006556:	2210      	movs	r2, #16
 8006558:	e7b7      	b.n	80064ca <_printf_i+0xd2>
 800655a:	064d      	lsls	r5, r1, #25
 800655c:	bf48      	it	mi
 800655e:	b29b      	uxthmi	r3, r3
 8006560:	e7ef      	b.n	8006542 <_printf_i+0x14a>
 8006562:	4665      	mov	r5, ip
 8006564:	fbb3 f1f2 	udiv	r1, r3, r2
 8006568:	fb02 3311 	mls	r3, r2, r1, r3
 800656c:	5cc3      	ldrb	r3, [r0, r3]
 800656e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006572:	460b      	mov	r3, r1
 8006574:	2900      	cmp	r1, #0
 8006576:	d1f5      	bne.n	8006564 <_printf_i+0x16c>
 8006578:	e7b9      	b.n	80064ee <_printf_i+0xf6>
 800657a:	6813      	ldr	r3, [r2, #0]
 800657c:	6825      	ldr	r5, [r4, #0]
 800657e:	6961      	ldr	r1, [r4, #20]
 8006580:	1d18      	adds	r0, r3, #4
 8006582:	6010      	str	r0, [r2, #0]
 8006584:	0628      	lsls	r0, r5, #24
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	d501      	bpl.n	800658e <_printf_i+0x196>
 800658a:	6019      	str	r1, [r3, #0]
 800658c:	e002      	b.n	8006594 <_printf_i+0x19c>
 800658e:	066a      	lsls	r2, r5, #25
 8006590:	d5fb      	bpl.n	800658a <_printf_i+0x192>
 8006592:	8019      	strh	r1, [r3, #0]
 8006594:	2300      	movs	r3, #0
 8006596:	6123      	str	r3, [r4, #16]
 8006598:	4665      	mov	r5, ip
 800659a:	e7b9      	b.n	8006510 <_printf_i+0x118>
 800659c:	6813      	ldr	r3, [r2, #0]
 800659e:	1d19      	adds	r1, r3, #4
 80065a0:	6011      	str	r1, [r2, #0]
 80065a2:	681d      	ldr	r5, [r3, #0]
 80065a4:	6862      	ldr	r2, [r4, #4]
 80065a6:	2100      	movs	r1, #0
 80065a8:	4628      	mov	r0, r5
 80065aa:	f7f9 fe19 	bl	80001e0 <memchr>
 80065ae:	b108      	cbz	r0, 80065b4 <_printf_i+0x1bc>
 80065b0:	1b40      	subs	r0, r0, r5
 80065b2:	6060      	str	r0, [r4, #4]
 80065b4:	6863      	ldr	r3, [r4, #4]
 80065b6:	6123      	str	r3, [r4, #16]
 80065b8:	2300      	movs	r3, #0
 80065ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065be:	e7a7      	b.n	8006510 <_printf_i+0x118>
 80065c0:	6923      	ldr	r3, [r4, #16]
 80065c2:	462a      	mov	r2, r5
 80065c4:	4639      	mov	r1, r7
 80065c6:	4630      	mov	r0, r6
 80065c8:	47c0      	blx	r8
 80065ca:	3001      	adds	r0, #1
 80065cc:	d0aa      	beq.n	8006524 <_printf_i+0x12c>
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	079b      	lsls	r3, r3, #30
 80065d2:	d413      	bmi.n	80065fc <_printf_i+0x204>
 80065d4:	68e0      	ldr	r0, [r4, #12]
 80065d6:	9b03      	ldr	r3, [sp, #12]
 80065d8:	4298      	cmp	r0, r3
 80065da:	bfb8      	it	lt
 80065dc:	4618      	movlt	r0, r3
 80065de:	e7a3      	b.n	8006528 <_printf_i+0x130>
 80065e0:	2301      	movs	r3, #1
 80065e2:	464a      	mov	r2, r9
 80065e4:	4639      	mov	r1, r7
 80065e6:	4630      	mov	r0, r6
 80065e8:	47c0      	blx	r8
 80065ea:	3001      	adds	r0, #1
 80065ec:	d09a      	beq.n	8006524 <_printf_i+0x12c>
 80065ee:	3501      	adds	r5, #1
 80065f0:	68e3      	ldr	r3, [r4, #12]
 80065f2:	9a03      	ldr	r2, [sp, #12]
 80065f4:	1a9b      	subs	r3, r3, r2
 80065f6:	42ab      	cmp	r3, r5
 80065f8:	dcf2      	bgt.n	80065e0 <_printf_i+0x1e8>
 80065fa:	e7eb      	b.n	80065d4 <_printf_i+0x1dc>
 80065fc:	2500      	movs	r5, #0
 80065fe:	f104 0919 	add.w	r9, r4, #25
 8006602:	e7f5      	b.n	80065f0 <_printf_i+0x1f8>
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1ac      	bne.n	8006562 <_printf_i+0x16a>
 8006608:	7803      	ldrb	r3, [r0, #0]
 800660a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800660e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006612:	e76c      	b.n	80064ee <_printf_i+0xf6>
 8006614:	080068e1 	.word	0x080068e1
 8006618:	080068f2 	.word	0x080068f2

0800661c <_sbrk_r>:
 800661c:	b538      	push	{r3, r4, r5, lr}
 800661e:	4c06      	ldr	r4, [pc, #24]	; (8006638 <_sbrk_r+0x1c>)
 8006620:	2300      	movs	r3, #0
 8006622:	4605      	mov	r5, r0
 8006624:	4608      	mov	r0, r1
 8006626:	6023      	str	r3, [r4, #0]
 8006628:	f7ff f8b0 	bl	800578c <_sbrk>
 800662c:	1c43      	adds	r3, r0, #1
 800662e:	d102      	bne.n	8006636 <_sbrk_r+0x1a>
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	b103      	cbz	r3, 8006636 <_sbrk_r+0x1a>
 8006634:	602b      	str	r3, [r5, #0]
 8006636:	bd38      	pop	{r3, r4, r5, pc}
 8006638:	2000021c 	.word	0x2000021c

0800663c <__sread>:
 800663c:	b510      	push	{r4, lr}
 800663e:	460c      	mov	r4, r1
 8006640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006644:	f000 f896 	bl	8006774 <_read_r>
 8006648:	2800      	cmp	r0, #0
 800664a:	bfab      	itete	ge
 800664c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800664e:	89a3      	ldrhlt	r3, [r4, #12]
 8006650:	181b      	addge	r3, r3, r0
 8006652:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006656:	bfac      	ite	ge
 8006658:	6563      	strge	r3, [r4, #84]	; 0x54
 800665a:	81a3      	strhlt	r3, [r4, #12]
 800665c:	bd10      	pop	{r4, pc}

0800665e <__swrite>:
 800665e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006662:	461f      	mov	r7, r3
 8006664:	898b      	ldrh	r3, [r1, #12]
 8006666:	05db      	lsls	r3, r3, #23
 8006668:	4605      	mov	r5, r0
 800666a:	460c      	mov	r4, r1
 800666c:	4616      	mov	r6, r2
 800666e:	d505      	bpl.n	800667c <__swrite+0x1e>
 8006670:	2302      	movs	r3, #2
 8006672:	2200      	movs	r2, #0
 8006674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006678:	f000 f868 	bl	800674c <_lseek_r>
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006686:	81a3      	strh	r3, [r4, #12]
 8006688:	4632      	mov	r2, r6
 800668a:	463b      	mov	r3, r7
 800668c:	4628      	mov	r0, r5
 800668e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006692:	f000 b817 	b.w	80066c4 <_write_r>

08006696 <__sseek>:
 8006696:	b510      	push	{r4, lr}
 8006698:	460c      	mov	r4, r1
 800669a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800669e:	f000 f855 	bl	800674c <_lseek_r>
 80066a2:	1c43      	adds	r3, r0, #1
 80066a4:	89a3      	ldrh	r3, [r4, #12]
 80066a6:	bf15      	itete	ne
 80066a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80066aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066b2:	81a3      	strheq	r3, [r4, #12]
 80066b4:	bf18      	it	ne
 80066b6:	81a3      	strhne	r3, [r4, #12]
 80066b8:	bd10      	pop	{r4, pc}

080066ba <__sclose>:
 80066ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066be:	f000 b813 	b.w	80066e8 <_close_r>
	...

080066c4 <_write_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4c07      	ldr	r4, [pc, #28]	; (80066e4 <_write_r+0x20>)
 80066c8:	4605      	mov	r5, r0
 80066ca:	4608      	mov	r0, r1
 80066cc:	4611      	mov	r1, r2
 80066ce:	2200      	movs	r2, #0
 80066d0:	6022      	str	r2, [r4, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	f7ff f809 	bl	80056ea <_write>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d102      	bne.n	80066e2 <_write_r+0x1e>
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	b103      	cbz	r3, 80066e2 <_write_r+0x1e>
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	2000021c 	.word	0x2000021c

080066e8 <_close_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4c06      	ldr	r4, [pc, #24]	; (8006704 <_close_r+0x1c>)
 80066ec:	2300      	movs	r3, #0
 80066ee:	4605      	mov	r5, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	6023      	str	r3, [r4, #0]
 80066f4:	f7ff f815 	bl	8005722 <_close>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d102      	bne.n	8006702 <_close_r+0x1a>
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	b103      	cbz	r3, 8006702 <_close_r+0x1a>
 8006700:	602b      	str	r3, [r5, #0]
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	2000021c 	.word	0x2000021c

08006708 <_fstat_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4c07      	ldr	r4, [pc, #28]	; (8006728 <_fstat_r+0x20>)
 800670c:	2300      	movs	r3, #0
 800670e:	4605      	mov	r5, r0
 8006710:	4608      	mov	r0, r1
 8006712:	4611      	mov	r1, r2
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	f7ff f810 	bl	800573a <_fstat>
 800671a:	1c43      	adds	r3, r0, #1
 800671c:	d102      	bne.n	8006724 <_fstat_r+0x1c>
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	b103      	cbz	r3, 8006724 <_fstat_r+0x1c>
 8006722:	602b      	str	r3, [r5, #0]
 8006724:	bd38      	pop	{r3, r4, r5, pc}
 8006726:	bf00      	nop
 8006728:	2000021c 	.word	0x2000021c

0800672c <_isatty_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4c06      	ldr	r4, [pc, #24]	; (8006748 <_isatty_r+0x1c>)
 8006730:	2300      	movs	r3, #0
 8006732:	4605      	mov	r5, r0
 8006734:	4608      	mov	r0, r1
 8006736:	6023      	str	r3, [r4, #0]
 8006738:	f7ff f80f 	bl	800575a <_isatty>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d102      	bne.n	8006746 <_isatty_r+0x1a>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	b103      	cbz	r3, 8006746 <_isatty_r+0x1a>
 8006744:	602b      	str	r3, [r5, #0]
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	2000021c 	.word	0x2000021c

0800674c <_lseek_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4c07      	ldr	r4, [pc, #28]	; (800676c <_lseek_r+0x20>)
 8006750:	4605      	mov	r5, r0
 8006752:	4608      	mov	r0, r1
 8006754:	4611      	mov	r1, r2
 8006756:	2200      	movs	r2, #0
 8006758:	6022      	str	r2, [r4, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	f7ff f808 	bl	8005770 <_lseek>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_lseek_r+0x1e>
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	b103      	cbz	r3, 800676a <_lseek_r+0x1e>
 8006768:	602b      	str	r3, [r5, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	2000021c 	.word	0x2000021c

08006770 <__malloc_lock>:
 8006770:	4770      	bx	lr

08006772 <__malloc_unlock>:
 8006772:	4770      	bx	lr

08006774 <_read_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4c07      	ldr	r4, [pc, #28]	; (8006794 <_read_r+0x20>)
 8006778:	4605      	mov	r5, r0
 800677a:	4608      	mov	r0, r1
 800677c:	4611      	mov	r1, r2
 800677e:	2200      	movs	r2, #0
 8006780:	6022      	str	r2, [r4, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	f7fe ff94 	bl	80056b0 <_read>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d102      	bne.n	8006792 <_read_r+0x1e>
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	b103      	cbz	r3, 8006792 <_read_r+0x1e>
 8006790:	602b      	str	r3, [r5, #0]
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	2000021c 	.word	0x2000021c

08006798 <_init>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	bf00      	nop
 800679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679e:	bc08      	pop	{r3}
 80067a0:	469e      	mov	lr, r3
 80067a2:	4770      	bx	lr

080067a4 <_fini>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	bf00      	nop
 80067a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067aa:	bc08      	pop	{r3}
 80067ac:	469e      	mov	lr, r3
 80067ae:	4770      	bx	lr
