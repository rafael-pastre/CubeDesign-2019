
CanReader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001edc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002064  08002064  00012064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020a4  080020a4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080020a4  080020a4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020a4  080020a4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020a4  080020a4  000120a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020a8  080020a8  000120a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080020ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000018  080020c4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080020c4  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083be  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000150b  00000000  00000000  00028406  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000700  00000000  00000000  00029918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  0002a018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025742  00000000  00000000  0002a660  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000617e  00000000  00000000  0004fda2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e6e4c  00000000  00000000  00055f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013cd6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac8  00000000  00000000  0013cde8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800204c 	.word	0x0800204c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	0800204c 	.word	0x0800204c

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
 80001d4:	f000 fc80 	bl	8000ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 f80d 	bl	80001f8 <HAL_InitTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ea:	f001 fd91 	bl	8001d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000204:	4b16      	ldr	r3, [pc, #88]	; (8000260 <HAL_InitTick+0x68>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d022      	beq.n	8000252 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800020c:	4b15      	ldr	r3, [pc, #84]	; (8000264 <HAL_InitTick+0x6c>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b13      	ldr	r3, [pc, #76]	; (8000260 <HAL_InitTick+0x68>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000218:	fbb1 f3f3 	udiv	r3, r1, r3
 800021c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fc80 	bl	8000b26 <HAL_SYSTICK_Config>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d10f      	bne.n	800024c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b0f      	cmp	r3, #15
 8000230:	d809      	bhi.n	8000246 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000232:	2200      	movs	r2, #0
 8000234:	6879      	ldr	r1, [r7, #4]
 8000236:	f04f 30ff 	mov.w	r0, #4294967295
 800023a:	f000 fc58 	bl	8000aee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <HAL_InitTick+0x70>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	6013      	str	r3, [r2, #0]
 8000244:	e007      	b.n	8000256 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000246:	2301      	movs	r3, #1
 8000248:	73fb      	strb	r3, [r7, #15]
 800024a:	e004      	b.n	8000256 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800024c:	2301      	movs	r3, #1
 800024e:	73fb      	strb	r3, [r7, #15]
 8000250:	e001      	b.n	8000256 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000252:	2301      	movs	r3, #1
 8000254:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000256:	7bfb      	ldrb	r3, [r7, #15]
}
 8000258:	4618      	mov	r0, r3
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000004 	.word	0x20000004
 8000264:	20000008 	.word	0x20000008
 8000268:	20000000 	.word	0x20000000

0800026c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <HAL_IncTick+0x1c>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <HAL_IncTick+0x20>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4413      	add	r3, r2
 800027a:	4a03      	ldr	r2, [pc, #12]	; (8000288 <HAL_IncTick+0x1c>)
 800027c:	6013      	str	r3, [r2, #0]
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	20000034 	.word	0x20000034
 800028c:	20000004 	.word	0x20000004

08000290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  return uwTick;
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <HAL_GetTick+0x14>)
 8000296:	681b      	ldr	r3, [r3, #0]
}
 8000298:	4618      	mov	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000034 	.word	0x20000034

080002a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b0:	f7ff ffee 	bl	8000290 <HAL_GetTick>
 80002b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002c0:	d004      	beq.n	80002cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <HAL_Delay+0x40>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	4413      	add	r3, r2
 80002ca:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	bf00      	nop
 80002ce:	f7ff ffdf 	bl	8000290 <HAL_GetTick>
 80002d2:	4602      	mov	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x26>
  {
  }
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000004 	.word	0x20000004

080002ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d101      	bne.n	80002fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80002fa:	2301      	movs	r3, #1
 80002fc:	e0ed      	b.n	80004da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000304:	b2db      	uxtb	r3, r3
 8000306:	2b00      	cmp	r3, #0
 8000308:	d102      	bne.n	8000310 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f001 fd24 	bl	8001d58 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f022 0202 	bic.w	r2, r2, #2
 800031e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000320:	f7ff ffb6 	bl	8000290 <HAL_GetTick>
 8000324:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000326:	e012      	b.n	800034e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000328:	f7ff ffb2 	bl	8000290 <HAL_GetTick>
 800032c:	4602      	mov	r2, r0
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	1ad3      	subs	r3, r2, r3
 8000332:	2b0a      	cmp	r3, #10
 8000334:	d90b      	bls.n	800034e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800033a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2205      	movs	r2, #5
 8000346:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800034a:	2301      	movs	r3, #1
 800034c:	e0c5      	b.n	80004da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	f003 0302 	and.w	r3, r3, #2
 8000358:	2b00      	cmp	r3, #0
 800035a:	d1e5      	bne.n	8000328 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f042 0201 	orr.w	r2, r2, #1
 800036a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800036c:	f7ff ff90 	bl	8000290 <HAL_GetTick>
 8000370:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000372:	e012      	b.n	800039a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000374:	f7ff ff8c 	bl	8000290 <HAL_GetTick>
 8000378:	4602      	mov	r2, r0
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	2b0a      	cmp	r3, #10
 8000380:	d90b      	bls.n	800039a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000386:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2205      	movs	r2, #5
 8000392:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000396:	2301      	movs	r3, #1
 8000398:	e09f      	b.n	80004da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d0e5      	beq.n	8000374 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	7e1b      	ldrb	r3, [r3, #24]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d108      	bne.n	80003c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	e007      	b.n	80003d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80003d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	7e5b      	ldrb	r3, [r3, #25]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d108      	bne.n	80003ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	e007      	b.n	80003fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80003fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	7e9b      	ldrb	r3, [r3, #26]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d108      	bne.n	8000416 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f042 0220 	orr.w	r2, r2, #32
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	e007      	b.n	8000426 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f022 0220 	bic.w	r2, r2, #32
 8000424:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	7edb      	ldrb	r3, [r3, #27]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d108      	bne.n	8000440 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f022 0210 	bic.w	r2, r2, #16
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	e007      	b.n	8000450 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f042 0210 	orr.w	r2, r2, #16
 800044e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	7f1b      	ldrb	r3, [r3, #28]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d108      	bne.n	800046a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f042 0208 	orr.w	r2, r2, #8
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	e007      	b.n	800047a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f022 0208 	bic.w	r2, r2, #8
 8000478:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	7f5b      	ldrb	r3, [r3, #29]
 800047e:	2b01      	cmp	r3, #1
 8000480:	d108      	bne.n	8000494 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f042 0204 	orr.w	r2, r2, #4
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	e007      	b.n	80004a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f022 0204 	bic.w	r2, r2, #4
 80004a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	689a      	ldr	r2, [r3, #8]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	431a      	orrs	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	691b      	ldr	r3, [r3, #16]
 80004b2:	431a      	orrs	r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	ea42 0103 	orr.w	r1, r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	1e5a      	subs	r2, r3, #1
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	430a      	orrs	r2, r1
 80004c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2200      	movs	r2, #0
 80004ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2201      	movs	r2, #1
 80004d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80004d8:	2300      	movs	r3, #0
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b087      	sub	sp, #28
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
 80004ea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004f8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80004fa:	7cfb      	ldrb	r3, [r7, #19]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d003      	beq.n	8000508 <HAL_CAN_ConfigFilter+0x26>
 8000500:	7cfb      	ldrb	r3, [r7, #19]
 8000502:	2b02      	cmp	r3, #2
 8000504:	f040 80aa 	bne.w	800065c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800050e:	f043 0201 	orr.w	r2, r3, #1
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f003 031f 	and.w	r3, r3, #31
 8000520:	2201      	movs	r2, #1
 8000522:	fa02 f303 	lsl.w	r3, r2, r3
 8000526:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	43db      	mvns	r3, r3
 8000532:	401a      	ands	r2, r3
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d123      	bne.n	800058a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	43db      	mvns	r3, r3
 800054c:	401a      	ands	r2, r3
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000564:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	3248      	adds	r2, #72	; 0x48
 800056a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800057e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000580:	6979      	ldr	r1, [r7, #20]
 8000582:	3348      	adds	r3, #72	; 0x48
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	440b      	add	r3, r1
 8000588:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d122      	bne.n	80005d8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	431a      	orrs	r2, r3
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80005b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3248      	adds	r2, #72	; 0x48
 80005b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80005ce:	6979      	ldr	r1, [r7, #20]
 80005d0:	3348      	adds	r3, #72	; 0x48
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	440b      	add	r3, r1
 80005d6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d109      	bne.n	80005f4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	43db      	mvns	r3, r3
 80005ea:	401a      	ands	r2, r3
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80005f2:	e007      	b.n	8000604 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	431a      	orrs	r2, r3
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d109      	bne.n	8000620 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	43db      	mvns	r3, r3
 8000616:	401a      	ands	r2, r3
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800061e:	e007      	b.n	8000630 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	431a      	orrs	r2, r3
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	6a1b      	ldr	r3, [r3, #32]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d107      	bne.n	8000648 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	431a      	orrs	r2, r3
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800064e:	f023 0201 	bic.w	r2, r3, #1
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000658:	2300      	movs	r3, #0
 800065a:	e006      	b.n	800066a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000660:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000668:	2301      	movs	r3, #1
  }
}
 800066a:	4618      	mov	r0, r3
 800066c:	371c      	adds	r7, #28
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b084      	sub	sp, #16
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b01      	cmp	r3, #1
 8000688:	d12e      	bne.n	80006e8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2202      	movs	r2, #2
 800068e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f022 0201 	bic.w	r2, r2, #1
 80006a0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80006a2:	f7ff fdf5 	bl	8000290 <HAL_GetTick>
 80006a6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80006a8:	e012      	b.n	80006d0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006aa:	f7ff fdf1 	bl	8000290 <HAL_GetTick>
 80006ae:	4602      	mov	r2, r0
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	2b0a      	cmp	r3, #10
 80006b6:	d90b      	bls.n	80006d0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2205      	movs	r2, #5
 80006c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80006cc:	2301      	movs	r3, #1
 80006ce:	e012      	b.n	80006f6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1e5      	bne.n	80006aa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80006e4:	2300      	movs	r3, #0
 80006e6:	e006      	b.n	80006f6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80006f4:	2301      	movs	r3, #1
  }
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80006fe:	b480      	push	{r7}
 8000700:	b087      	sub	sp, #28
 8000702:	af00      	add	r7, sp, #0
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	607a      	str	r2, [r7, #4]
 800070a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000712:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000714:	7dfb      	ldrb	r3, [r7, #23]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d003      	beq.n	8000722 <HAL_CAN_GetRxMessage+0x24>
 800071a:	7dfb      	ldrb	r3, [r7, #23]
 800071c:	2b02      	cmp	r3, #2
 800071e:	f040 80f4 	bne.w	800090a <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d10e      	bne.n	8000746 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	f003 0303 	and.w	r3, r3, #3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d116      	bne.n	8000764 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e0e8      	b.n	8000918 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	691b      	ldr	r3, [r3, #16]
 800074c:	f003 0303 	and.w	r3, r3, #3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d107      	bne.n	8000764 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000758:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	e0d9      	b.n	8000918 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	331b      	adds	r3, #27
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	4413      	add	r3, r2
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f003 0204 	and.w	r2, r3, #4
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d10c      	bne.n	800079c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	331b      	adds	r3, #27
 800078a:	011b      	lsls	r3, r3, #4
 800078c:	4413      	add	r3, r2
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	0d5b      	lsrs	r3, r3, #21
 8000792:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	e00b      	b.n	80007b4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	331b      	adds	r3, #27
 80007a4:	011b      	lsls	r3, r3, #4
 80007a6:	4413      	add	r3, r2
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	331b      	adds	r3, #27
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	4413      	add	r3, r2
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	085b      	lsrs	r3, r3, #1
 80007c4:	f003 0201 	and.w	r2, r3, #1
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	331b      	adds	r3, #27
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	4413      	add	r3, r2
 80007d8:	3304      	adds	r3, #4
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f003 020f 	and.w	r2, r3, #15
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	331b      	adds	r3, #27
 80007ec:	011b      	lsls	r3, r3, #4
 80007ee:	4413      	add	r3, r2
 80007f0:	3304      	adds	r3, #4
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	331b      	adds	r3, #27
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	4413      	add	r3, r2
 8000808:	3304      	adds	r3, #4
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	0c1b      	lsrs	r3, r3, #16
 800080e:	b29a      	uxth	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	4413      	add	r3, r2
 800081e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	011b      	lsls	r3, r3, #4
 8000832:	4413      	add	r3, r2
 8000834:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	0a1a      	lsrs	r2, r3, #8
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	3301      	adds	r3, #1
 8000840:	b2d2      	uxtb	r2, r2
 8000842:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	4413      	add	r3, r2
 800084e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	0c1a      	lsrs	r2, r3, #16
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	3302      	adds	r3, #2
 800085a:	b2d2      	uxtb	r2, r2
 800085c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	011b      	lsls	r3, r3, #4
 8000866:	4413      	add	r3, r2
 8000868:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	0e1a      	lsrs	r2, r3, #24
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	3303      	adds	r3, #3
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	4413      	add	r3, r2
 8000882:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	3304      	adds	r3, #4
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	011b      	lsls	r3, r3, #4
 8000898:	4413      	add	r3, r2
 800089a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	0a1a      	lsrs	r2, r3, #8
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	3305      	adds	r3, #5
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	011b      	lsls	r3, r3, #4
 80008b2:	4413      	add	r3, r2
 80008b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	0c1a      	lsrs	r2, r3, #16
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	3306      	adds	r3, #6
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	4413      	add	r3, r2
 80008ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	0e1a      	lsrs	r2, r3, #24
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	3307      	adds	r3, #7
 80008da:	b2d2      	uxtb	r2, r2
 80008dc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d108      	bne.n	80008f6 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	68da      	ldr	r2, [r3, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f042 0220 	orr.w	r2, r2, #32
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	e007      	b.n	8000906 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	691a      	ldr	r2, [r3, #16]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f042 0220 	orr.w	r2, r2, #32
 8000904:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	e006      	b.n	8000918 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
  }
}
 8000918:	4618      	mov	r0, r3
 800091a:	371c      	adds	r7, #28
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000938:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d002      	beq.n	8000946 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8000940:	7afb      	ldrb	r3, [r7, #11]
 8000942:	2b02      	cmp	r3, #2
 8000944:	d10f      	bne.n	8000966 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d106      	bne.n	800095a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	f003 0303 	and.w	r3, r3, #3
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	e005      	b.n	8000966 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	f003 0303 	and.w	r3, r3, #3
 8000964:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800099c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	60d3      	str	r3, [r2, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <__NVIC_GetPriorityGrouping+0x18>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	f003 0307 	and.w	r3, r3, #7
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	db0a      	blt.n	8000a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	490c      	ldr	r1, [pc, #48]	; (8000a24 <__NVIC_SetPriority+0x4c>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	440b      	add	r3, r1
 80009fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a00:	e00a      	b.n	8000a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4908      	ldr	r1, [pc, #32]	; (8000a28 <__NVIC_SetPriority+0x50>)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 030f 	and.w	r3, r3, #15
 8000a0e:	3b04      	subs	r3, #4
 8000a10:	0112      	lsls	r2, r2, #4
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	440b      	add	r3, r1
 8000a16:	761a      	strb	r2, [r3, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b089      	sub	sp, #36	; 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f1c3 0307 	rsb	r3, r3, #7
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	bf28      	it	cs
 8000a4a:	2304      	movcs	r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3304      	adds	r3, #4
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d902      	bls.n	8000a5c <NVIC_EncodePriority+0x30>
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	e000      	b.n	8000a5e <NVIC_EncodePriority+0x32>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	43d9      	mvns	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	4313      	orrs	r3, r2
         );
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3724      	adds	r7, #36	; 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa4:	d301      	bcc.n	8000aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00f      	b.n	8000aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <SysTick_Config+0x40>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab2:	210f      	movs	r1, #15
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f7ff ff8e 	bl	80009d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <SysTick_Config+0x40>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <SysTick_Config+0x40>)
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	e000e010 	.word	0xe000e010

08000ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff47 	bl	8000974 <__NVIC_SetPriorityGrouping>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b00:	f7ff ff5c 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000b04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	f7ff ff8e 	bl	8000a2c <NVIC_EncodePriority>
 8000b10:	4602      	mov	r2, r0
 8000b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff5d 	bl	80009d8 <__NVIC_SetPriority>
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ffb0 	bl	8000a94 <SysTick_Config>
 8000b34:	4603      	mov	r3, r0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4e:	e17f      	b.n	8000e50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	2101      	movs	r1, #1
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f000 8171 	beq.w	8000e4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d003      	beq.n	8000b78 <HAL_GPIO_Init+0x38>
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b12      	cmp	r3, #18
 8000b76:	d123      	bne.n	8000bc0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	08da      	lsrs	r2, r3, #3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3208      	adds	r2, #8
 8000b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f003 0307 	and.w	r3, r3, #7
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	220f      	movs	r2, #15
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	691a      	ldr	r2, [r3, #16]
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	08da      	lsrs	r2, r3, #3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3208      	adds	r2, #8
 8000bba:	6939      	ldr	r1, [r7, #16]
 8000bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	2203      	movs	r2, #3
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0203 	and.w	r2, r3, #3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d00b      	beq.n	8000c14 <HAL_GPIO_Init+0xd4>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d007      	beq.n	8000c14 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c08:	2b11      	cmp	r3, #17
 8000c0a:	d003      	beq.n	8000c14 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2b12      	cmp	r3, #18
 8000c12:	d130      	bne.n	8000c76 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	2203      	movs	r2, #3
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	091b      	lsrs	r3, r3, #4
 8000c60:	f003 0201 	and.w	r2, r3, #1
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d118      	bne.n	8000cb4 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c88:	2201      	movs	r2, #1
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	08db      	lsrs	r3, r3, #3
 8000c9e:	f003 0201 	and.w	r2, r3, #1
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 80ac 	beq.w	8000e4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	4b5e      	ldr	r3, [pc, #376]	; (8000e6c <HAL_GPIO_Init+0x32c>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf6:	4a5d      	ldr	r2, [pc, #372]	; (8000e6c <HAL_GPIO_Init+0x32c>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cfe:	4b5b      	ldr	r3, [pc, #364]	; (8000e6c <HAL_GPIO_Init+0x32c>)
 8000d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d0a:	4a59      	ldr	r2, [pc, #356]	; (8000e70 <HAL_GPIO_Init+0x330>)
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	089b      	lsrs	r3, r3, #2
 8000d10:	3302      	adds	r3, #2
 8000d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	220f      	movs	r2, #15
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d34:	d025      	beq.n	8000d82 <HAL_GPIO_Init+0x242>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a4e      	ldr	r2, [pc, #312]	; (8000e74 <HAL_GPIO_Init+0x334>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d01f      	beq.n	8000d7e <HAL_GPIO_Init+0x23e>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a4d      	ldr	r2, [pc, #308]	; (8000e78 <HAL_GPIO_Init+0x338>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d019      	beq.n	8000d7a <HAL_GPIO_Init+0x23a>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a4c      	ldr	r2, [pc, #304]	; (8000e7c <HAL_GPIO_Init+0x33c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d013      	beq.n	8000d76 <HAL_GPIO_Init+0x236>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a4b      	ldr	r2, [pc, #300]	; (8000e80 <HAL_GPIO_Init+0x340>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d00d      	beq.n	8000d72 <HAL_GPIO_Init+0x232>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4a      	ldr	r2, [pc, #296]	; (8000e84 <HAL_GPIO_Init+0x344>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d007      	beq.n	8000d6e <HAL_GPIO_Init+0x22e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a49      	ldr	r2, [pc, #292]	; (8000e88 <HAL_GPIO_Init+0x348>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d101      	bne.n	8000d6a <HAL_GPIO_Init+0x22a>
 8000d66:	2306      	movs	r3, #6
 8000d68:	e00c      	b.n	8000d84 <HAL_GPIO_Init+0x244>
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	e00a      	b.n	8000d84 <HAL_GPIO_Init+0x244>
 8000d6e:	2305      	movs	r3, #5
 8000d70:	e008      	b.n	8000d84 <HAL_GPIO_Init+0x244>
 8000d72:	2304      	movs	r3, #4
 8000d74:	e006      	b.n	8000d84 <HAL_GPIO_Init+0x244>
 8000d76:	2303      	movs	r3, #3
 8000d78:	e004      	b.n	8000d84 <HAL_GPIO_Init+0x244>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	e002      	b.n	8000d84 <HAL_GPIO_Init+0x244>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <HAL_GPIO_Init+0x244>
 8000d82:	2300      	movs	r3, #0
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	f002 0203 	and.w	r2, r2, #3
 8000d8a:	0092      	lsls	r2, r2, #2
 8000d8c:	4093      	lsls	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d94:	4936      	ldr	r1, [pc, #216]	; (8000e70 <HAL_GPIO_Init+0x330>)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000da2:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <HAL_GPIO_Init+0x34c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dc6:	4a31      	ldr	r2, [pc, #196]	; (8000e8c <HAL_GPIO_Init+0x34c>)
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <HAL_GPIO_Init+0x34c>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000df0:	4a26      	ldr	r2, [pc, #152]	; (8000e8c <HAL_GPIO_Init+0x34c>)
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000df6:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <HAL_GPIO_Init+0x34c>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e1a:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <HAL_GPIO_Init+0x34c>)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <HAL_GPIO_Init+0x34c>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e44:	4a11      	ldr	r2, [pc, #68]	; (8000e8c <HAL_GPIO_Init+0x34c>)
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f47f ae78 	bne.w	8000b50 <HAL_GPIO_Init+0x10>
  }
}
 8000e60:	bf00      	nop
 8000e62:	371c      	adds	r7, #28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010000 	.word	0x40010000
 8000e74:	48000400 	.word	0x48000400
 8000e78:	48000800 	.word	0x48000800
 8000e7c:	48000c00 	.word	0x48000c00
 8000e80:	48001000 	.word	0x48001000
 8000e84:	48001400 	.word	0x48001400
 8000e88:	48001800 	.word	0x48001800
 8000e8c:	40010400 	.word	0x40010400

08000e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eac:	e002      	b.n	8000eb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	695a      	ldr	r2, [r3, #20]
 8000ed0:	887b      	ldrh	r3, [r7, #2]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ed8:	887a      	ldrh	r2, [r7, #2]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000ede:	e002      	b.n	8000ee6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ee0:	887a      	ldrh	r2, [r7, #2]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	619a      	str	r2, [r3, #24]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <HAL_PWREx_GetVoltageRange+0x18>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40007000 	.word	0x40007000

08000f10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f1e:	d130      	bne.n	8000f82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f2c:	d038      	beq.n	8000fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f36:	4a1e      	ldr	r2, [pc, #120]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2232      	movs	r2, #50	; 0x32
 8000f44:	fb02 f303 	mul.w	r3, r2, r3
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	0c9b      	lsrs	r3, r3, #18
 8000f50:	3301      	adds	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f54:	e002      	b.n	8000f5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f68:	d102      	bne.n	8000f70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f2      	bne.n	8000f56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7c:	d110      	bne.n	8000fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e00f      	b.n	8000fa2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f8e:	d007      	beq.n	8000fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f98:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40007000 	.word	0x40007000
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	431bde83 	.word	0x431bde83

08000fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e39d      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fce:	4ba4      	ldr	r3, [pc, #656]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fd8:	4ba1      	ldr	r3, [pc, #644]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 80e1 	beq.w	80011b2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d007      	beq.n	8001006 <HAL_RCC_OscConfig+0x4a>
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	2b0c      	cmp	r3, #12
 8000ffa:	f040 8088 	bne.w	800110e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2b01      	cmp	r3, #1
 8001002:	f040 8084 	bne.w	800110e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001006:	4b96      	ldr	r3, [pc, #600]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <HAL_RCC_OscConfig+0x62>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e375      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a1a      	ldr	r2, [r3, #32]
 8001022:	4b8f      	ldr	r3, [pc, #572]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	2b00      	cmp	r3, #0
 800102c:	d004      	beq.n	8001038 <HAL_RCC_OscConfig+0x7c>
 800102e:	4b8c      	ldr	r3, [pc, #560]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001036:	e005      	b.n	8001044 <HAL_RCC_OscConfig+0x88>
 8001038:	4b89      	ldr	r3, [pc, #548]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800103a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001044:	4293      	cmp	r3, r2
 8001046:	d223      	bcs.n	8001090 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fcd1 	bl	80019f4 <RCC_SetFlashLatencyFromMSIRange>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e356      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800105c:	4b80      	ldr	r3, [pc, #512]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a7f      	ldr	r2, [pc, #508]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001062:	f043 0308 	orr.w	r3, r3, #8
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b7d      	ldr	r3, [pc, #500]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	497a      	ldr	r1, [pc, #488]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001076:	4313      	orrs	r3, r2
 8001078:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800107a:	4b79      	ldr	r3, [pc, #484]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	4975      	ldr	r1, [pc, #468]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800108a:	4313      	orrs	r3, r2
 800108c:	604b      	str	r3, [r1, #4]
 800108e:	e022      	b.n	80010d6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001090:	4b73      	ldr	r3, [pc, #460]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a72      	ldr	r2, [pc, #456]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b70      	ldr	r3, [pc, #448]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	496d      	ldr	r1, [pc, #436]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ae:	4b6c      	ldr	r3, [pc, #432]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	4968      	ldr	r1, [pc, #416]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fc94 	bl	80019f4 <RCC_SetFlashLatencyFromMSIRange>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e319      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010d6:	f000 fc03 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 80010da:	4601      	mov	r1, r0
 80010dc:	4b60      	ldr	r3, [pc, #384]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	4a5f      	ldr	r2, [pc, #380]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 80010e8:	5cd3      	ldrb	r3, [r2, r3]
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	fa21 f303 	lsr.w	r3, r1, r3
 80010f2:	4a5d      	ldr	r2, [pc, #372]	; (8001268 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010f6:	4b5d      	ldr	r3, [pc, #372]	; (800126c <HAL_RCC_OscConfig+0x2b0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f87c 	bl	80001f8 <HAL_InitTick>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d052      	beq.n	80011b0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	e2fd      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d032      	beq.n	800117c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001116:	4b52      	ldr	r3, [pc, #328]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a51      	ldr	r2, [pc, #324]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001122:	f7ff f8b5 	bl	8000290 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800112a:	f7ff f8b1 	bl	8000290 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e2e6      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800113c:	4b48      	ldr	r3, [pc, #288]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001148:	4b45      	ldr	r3, [pc, #276]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a44      	ldr	r2, [pc, #272]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b42      	ldr	r3, [pc, #264]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	493f      	ldr	r1, [pc, #252]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001166:	4b3e      	ldr	r3, [pc, #248]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	493a      	ldr	r1, [pc, #232]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001176:	4313      	orrs	r3, r2
 8001178:	604b      	str	r3, [r1, #4]
 800117a:	e01a      	b.n	80011b2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800117c:	4b38      	ldr	r3, [pc, #224]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a37      	ldr	r2, [pc, #220]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001182:	f023 0301 	bic.w	r3, r3, #1
 8001186:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001188:	f7ff f882 	bl	8000290 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001190:	f7ff f87e 	bl	8000290 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e2b3      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0x1d4>
 80011ae:	e000      	b.n	80011b2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d074      	beq.n	80012a8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d005      	beq.n	80011d0 <HAL_RCC_OscConfig+0x214>
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2b0c      	cmp	r3, #12
 80011c8:	d10e      	bne.n	80011e8 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d10b      	bne.n	80011e8 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d064      	beq.n	80012a6 <HAL_RCC_OscConfig+0x2ea>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d160      	bne.n	80012a6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e290      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f0:	d106      	bne.n	8001200 <HAL_RCC_OscConfig+0x244>
 80011f2:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e01d      	b.n	800123c <HAL_RCC_OscConfig+0x280>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0x268>
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a14      	ldr	r2, [pc, #80]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a11      	ldr	r2, [pc, #68]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e00b      	b.n	800123c <HAL_RCC_OscConfig+0x280>
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800122a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d01c      	beq.n	800127e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001244:	f7ff f824 	bl	8000290 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800124a:	e011      	b.n	8001270 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff f820 	bl	8000290 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d90a      	bls.n	8001270 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e255      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	08002064 	.word	0x08002064
 8001268:	20000008 	.word	0x20000008
 800126c:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001270:	4bae      	ldr	r3, [pc, #696]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0e7      	beq.n	800124c <HAL_RCC_OscConfig+0x290>
 800127c:	e014      	b.n	80012a8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127e:	f7ff f807 	bl	8000290 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001286:	f7ff f803 	bl	8000290 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b64      	cmp	r3, #100	; 0x64
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e238      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001298:	4ba4      	ldr	r3, [pc, #656]	; (800152c <HAL_RCC_OscConfig+0x570>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f0      	bne.n	8001286 <HAL_RCC_OscConfig+0x2ca>
 80012a4:	e000      	b.n	80012a8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d060      	beq.n	8001376 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d005      	beq.n	80012c6 <HAL_RCC_OscConfig+0x30a>
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b0c      	cmp	r3, #12
 80012be:	d119      	bne.n	80012f4 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d116      	bne.n	80012f4 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c6:	4b99      	ldr	r3, [pc, #612]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <HAL_RCC_OscConfig+0x322>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e215      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012de:	4b93      	ldr	r3, [pc, #588]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	061b      	lsls	r3, r3, #24
 80012ec:	498f      	ldr	r1, [pc, #572]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012f2:	e040      	b.n	8001376 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d023      	beq.n	8001344 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fc:	4b8b      	ldr	r3, [pc, #556]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a8a      	ldr	r2, [pc, #552]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7fe ffc2 	bl	8000290 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001310:	f7fe ffbe 	bl	8000290 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e1f3      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001322:	4b82      	ldr	r3, [pc, #520]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4b7f      	ldr	r3, [pc, #508]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	061b      	lsls	r3, r3, #24
 800133c:	497b      	ldr	r1, [pc, #492]	; (800152c <HAL_RCC_OscConfig+0x570>)
 800133e:	4313      	orrs	r3, r2
 8001340:	604b      	str	r3, [r1, #4]
 8001342:	e018      	b.n	8001376 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001344:	4b79      	ldr	r3, [pc, #484]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a78      	ldr	r2, [pc, #480]	; (800152c <HAL_RCC_OscConfig+0x570>)
 800134a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800134e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7fe ff9e 	bl	8000290 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001358:	f7fe ff9a 	bl	8000290 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e1cf      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800136a:	4b70      	ldr	r3, [pc, #448]	; (800152c <HAL_RCC_OscConfig+0x570>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d03c      	beq.n	80013fc <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d01c      	beq.n	80013c4 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	4b68      	ldr	r3, [pc, #416]	; (800152c <HAL_RCC_OscConfig+0x570>)
 800138c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001390:	4a66      	ldr	r2, [pc, #408]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139a:	f7fe ff79 	bl	8000290 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a2:	f7fe ff75 	bl	8000290 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e1aa      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013b4:	4b5d      	ldr	r3, [pc, #372]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80013b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0ef      	beq.n	80013a2 <HAL_RCC_OscConfig+0x3e6>
 80013c2:	e01b      	b.n	80013fc <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c4:	4b59      	ldr	r3, [pc, #356]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80013c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ca:	4a58      	ldr	r2, [pc, #352]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7fe ff5c 	bl	8000290 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013dc:	f7fe ff58 	bl	8000290 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e18d      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013ee:	4b4f      	ldr	r3, [pc, #316]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80013f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1ef      	bne.n	80013dc <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80a5 	beq.w	8001554 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800140e:	4b47      	ldr	r3, [pc, #284]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10d      	bne.n	8001436 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b44      	ldr	r3, [pc, #272]	; (800152c <HAL_RCC_OscConfig+0x570>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141e:	4a43      	ldr	r2, [pc, #268]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6593      	str	r3, [r2, #88]	; 0x58
 8001426:	4b41      	ldr	r3, [pc, #260]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001432:	2301      	movs	r3, #1
 8001434:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <HAL_RCC_OscConfig+0x574>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d118      	bne.n	8001474 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <HAL_RCC_OscConfig+0x574>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a3a      	ldr	r2, [pc, #232]	; (8001530 <HAL_RCC_OscConfig+0x574>)
 8001448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144e:	f7fe ff1f 	bl	8000290 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001456:	f7fe ff1b 	bl	8000290 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e150      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001468:	4b31      	ldr	r3, [pc, #196]	; (8001530 <HAL_RCC_OscConfig+0x574>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d108      	bne.n	800148e <HAL_RCC_OscConfig+0x4d2>
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <HAL_RCC_OscConfig+0x570>)
 800147e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001482:	4a2a      	ldr	r2, [pc, #168]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800148c:	e024      	b.n	80014d8 <HAL_RCC_OscConfig+0x51c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b05      	cmp	r3, #5
 8001494:	d110      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4fc>
 8001496:	4b25      	ldr	r3, [pc, #148]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149c:	4a23      	ldr	r2, [pc, #140]	; (800152c <HAL_RCC_OscConfig+0x570>)
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80014a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ac:	4a1f      	ldr	r2, [pc, #124]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014b6:	e00f      	b.n	80014d8 <HAL_RCC_OscConfig+0x51c>
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80014ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014be:	4a1b      	ldr	r2, [pc, #108]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80014ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80014d0:	f023 0304 	bic.w	r3, r3, #4
 80014d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d016      	beq.n	800150e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e0:	f7fe fed6 	bl	8000290 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014e6:	e00a      	b.n	80014fe <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e8:	f7fe fed2 	bl	8000290 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e105      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0ed      	beq.n	80014e8 <HAL_RCC_OscConfig+0x52c>
 800150c:	e019      	b.n	8001542 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150e:	f7fe febf 	bl	8000290 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001514:	e00e      	b.n	8001534 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001516:	f7fe febb 	bl	8000290 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	f241 3288 	movw	r2, #5000	; 0x1388
 8001524:	4293      	cmp	r3, r2
 8001526:	d905      	bls.n	8001534 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e0ee      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
 800152c:	40021000 	.word	0x40021000
 8001530:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001534:	4b77      	ldr	r3, [pc, #476]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 8001536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1e9      	bne.n	8001516 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001542:	7ffb      	ldrb	r3, [r7, #31]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d105      	bne.n	8001554 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001548:	4b72      	ldr	r3, [pc, #456]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 800154a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154c:	4a71      	ldr	r2, [pc, #452]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 800154e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001552:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80d5 	beq.w	8001708 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2b0c      	cmp	r3, #12
 8001562:	f000 808e 	beq.w	8001682 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	2b02      	cmp	r3, #2
 800156c:	d15b      	bne.n	8001626 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156e:	4b69      	ldr	r3, [pc, #420]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a68      	ldr	r2, [pc, #416]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 8001574:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7fe fe89 	bl	8000290 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001582:	f7fe fe85 	bl	8000290 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e0ba      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001594:	4b5f      	ldr	r3, [pc, #380]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f0      	bne.n	8001582 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a0:	4b5c      	ldr	r3, [pc, #368]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	4b5c      	ldr	r3, [pc, #368]	; (8001718 <HAL_RCC_OscConfig+0x75c>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015b0:	3a01      	subs	r2, #1
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	4311      	orrs	r1, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015ba:	0212      	lsls	r2, r2, #8
 80015bc:	4311      	orrs	r1, r2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015c2:	0852      	lsrs	r2, r2, #1
 80015c4:	3a01      	subs	r2, #1
 80015c6:	0552      	lsls	r2, r2, #21
 80015c8:	4311      	orrs	r1, r2
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015ce:	0852      	lsrs	r2, r2, #1
 80015d0:	3a01      	subs	r2, #1
 80015d2:	0652      	lsls	r2, r2, #25
 80015d4:	4311      	orrs	r1, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015da:	0912      	lsrs	r2, r2, #4
 80015dc:	0452      	lsls	r2, r2, #17
 80015de:	430a      	orrs	r2, r1
 80015e0:	494c      	ldr	r1, [pc, #304]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e6:	4b4b      	ldr	r3, [pc, #300]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a4a      	ldr	r2, [pc, #296]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 80015ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015f0:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015f2:	4b48      	ldr	r3, [pc, #288]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	4a47      	ldr	r2, [pc, #284]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 80015f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fe:	f7fe fe47 	bl	8000290 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001606:	f7fe fe43 	bl	8000290 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e078      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001618:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x64a>
 8001624:	e070      	b.n	8001708 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001626:	4b3b      	ldr	r3, [pc, #236]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a3a      	ldr	r2, [pc, #232]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 800162c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001630:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001632:	4b38      	ldr	r3, [pc, #224]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d105      	bne.n	800164a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800163e:	4b35      	ldr	r3, [pc, #212]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	4a34      	ldr	r2, [pc, #208]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 8001644:	f023 0303 	bic.w	r3, r3, #3
 8001648:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800164a:	4b32      	ldr	r3, [pc, #200]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	4a31      	ldr	r2, [pc, #196]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 8001650:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001658:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165a:	f7fe fe19 	bl	8000290 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001662:	f7fe fe15 	bl	8000290 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e04a      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001674:	4b27      	ldr	r3, [pc, #156]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f0      	bne.n	8001662 <HAL_RCC_OscConfig+0x6a6>
 8001680:	e042      	b.n	8001708 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e03d      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800168e:	4b21      	ldr	r3, [pc, #132]	; (8001714 <HAL_RCC_OscConfig+0x758>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f003 0203 	and.w	r2, r3, #3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	429a      	cmp	r2, r3
 80016a0:	d130      	bne.n	8001704 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	3b01      	subs	r3, #1
 80016ae:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d127      	bne.n	8001704 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016be:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d11f      	bne.n	8001704 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016ce:	2a07      	cmp	r2, #7
 80016d0:	bf14      	ite	ne
 80016d2:	2201      	movne	r2, #1
 80016d4:	2200      	moveq	r2, #0
 80016d6:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016d8:	4293      	cmp	r3, r2
 80016da:	d113      	bne.n	8001704 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	3b01      	subs	r3, #1
 80016ea:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d109      	bne.n	8001704 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	3b01      	subs	r3, #1
 80016fe:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3720      	adds	r7, #32
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	f99d808c 	.word	0xf99d808c

0800171c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0c8      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001730:	4b66      	ldr	r3, [pc, #408]	; (80018cc <HAL_RCC_ClockConfig+0x1b0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d910      	bls.n	8001760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b63      	ldr	r3, [pc, #396]	; (80018cc <HAL_RCC_ClockConfig+0x1b0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 0207 	bic.w	r2, r3, #7
 8001746:	4961      	ldr	r1, [pc, #388]	; (80018cc <HAL_RCC_ClockConfig+0x1b0>)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b5f      	ldr	r3, [pc, #380]	; (80018cc <HAL_RCC_ClockConfig+0x1b0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0b0      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d04c      	beq.n	8001806 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d107      	bne.n	8001784 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001774:	4b56      	ldr	r3, [pc, #344]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d121      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e09e      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d107      	bne.n	800179c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800178c:	4b50      	ldr	r3, [pc, #320]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d115      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e092      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017a4:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d109      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e086      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b4:	4b46      	ldr	r3, [pc, #280]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e07e      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017c4:	4b42      	ldr	r3, [pc, #264]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 0203 	bic.w	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	493f      	ldr	r1, [pc, #252]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017d6:	f7fe fd5b 	bl	8000290 <HAL_GetTick>
 80017da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017de:	f7fe fd57 	bl	8000290 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e066      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f4:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 020c 	and.w	r2, r3, #12
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	429a      	cmp	r2, r3
 8001804:	d1eb      	bne.n	80017de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d008      	beq.n	8001824 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001812:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	492c      	ldr	r1, [pc, #176]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001824:	4b29      	ldr	r3, [pc, #164]	; (80018cc <HAL_RCC_ClockConfig+0x1b0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d210      	bcs.n	8001854 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <HAL_RCC_ClockConfig+0x1b0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 0207 	bic.w	r2, r3, #7
 800183a:	4924      	ldr	r1, [pc, #144]	; (80018cc <HAL_RCC_ClockConfig+0x1b0>)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	4313      	orrs	r3, r2
 8001840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <HAL_RCC_ClockConfig+0x1b0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e036      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d008      	beq.n	8001872 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4918      	ldr	r1, [pc, #96]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d009      	beq.n	8001892 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4910      	ldr	r1, [pc, #64]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001892:	f000 f825 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 8001896:	4601      	mov	r1, r0
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 80018a4:	5cd3      	ldrb	r3, [r2, r3]
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	fa21 f303 	lsr.w	r3, r1, r3
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fc9e 	bl	80001f8 <HAL_InitTick>
 80018bc:	4603      	mov	r3, r0
 80018be:	72fb      	strb	r3, [r7, #11]

  return status;
 80018c0:	7afb      	ldrb	r3, [r7, #11]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40022000 	.word	0x40022000
 80018d0:	40021000 	.word	0x40021000
 80018d4:	08002064 	.word	0x08002064
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000000 	.word	0x20000000

080018e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ee:	4b3d      	ldr	r3, [pc, #244]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f8:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_GetSysClockFreq+0x34>
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	2b0c      	cmp	r3, #12
 800190c:	d121      	bne.n	8001952 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d11e      	bne.n	8001952 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001914:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d107      	bne.n	8001930 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001920:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	e005      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001930:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800193c:	4a2a      	ldr	r2, [pc, #168]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001944:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10d      	bne.n	8001968 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001950:	e00a      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	2b04      	cmp	r3, #4
 8001956:	d102      	bne.n	800195e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001958:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	e004      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	2b08      	cmp	r3, #8
 8001962:	d101      	bne.n	8001968 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001964:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001966:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	2b0c      	cmp	r3, #12
 800196c:	d133      	bne.n	80019d6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d002      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0xa4>
 800197e:	2b03      	cmp	r3, #3
 8001980:	d003      	beq.n	800198a <HAL_RCC_GetSysClockFreq+0xaa>
 8001982:	e005      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001986:	617b      	str	r3, [r7, #20]
      break;
 8001988:	e005      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800198a:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800198c:	617b      	str	r3, [r7, #20]
      break;
 800198e:	e002      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	617b      	str	r3, [r7, #20]
      break;
 8001994:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	091b      	lsrs	r3, r3, #4
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	3301      	adds	r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	fb02 f203 	mul.w	r2, r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0e5b      	lsrs	r3, r3, #25
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	3301      	adds	r3, #1
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019d6:	69bb      	ldr	r3, [r7, #24]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3724      	adds	r7, #36	; 0x24
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40021000 	.word	0x40021000
 80019e8:	08002074 	.word	0x08002074
 80019ec:	00f42400 	.word	0x00f42400
 80019f0:	007a1200 	.word	0x007a1200

080019f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a0c:	f7ff fa72 	bl	8000ef4 <HAL_PWREx_GetVoltageRange>
 8001a10:	6178      	str	r0, [r7, #20]
 8001a12:	e014      	b.n	8001a3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	4a24      	ldr	r2, [pc, #144]	; (8001aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a20:	4b22      	ldr	r3, [pc, #136]	; (8001aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a2c:	f7ff fa62 	bl	8000ef4 <HAL_PWREx_GetVoltageRange>
 8001a30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	4a1d      	ldr	r2, [pc, #116]	; (8001aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a44:	d10b      	bne.n	8001a5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b80      	cmp	r3, #128	; 0x80
 8001a4a:	d919      	bls.n	8001a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2ba0      	cmp	r3, #160	; 0xa0
 8001a50:	d902      	bls.n	8001a58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a52:	2302      	movs	r3, #2
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	e013      	b.n	8001a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a58:	2301      	movs	r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	e010      	b.n	8001a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b80      	cmp	r3, #128	; 0x80
 8001a62:	d902      	bls.n	8001a6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a64:	2303      	movs	r3, #3
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	e00a      	b.n	8001a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b80      	cmp	r3, #128	; 0x80
 8001a6e:	d102      	bne.n	8001a76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a70:	2302      	movs	r3, #2
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	e004      	b.n	8001a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b70      	cmp	r3, #112	; 0x70
 8001a7a:	d101      	bne.n	8001a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 0207 	bic.w	r2, r3, #7
 8001a88:	4909      	ldr	r1, [pc, #36]	; (8001ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d001      	beq.n	8001aa2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40022000 	.word	0x40022000

08001ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aba:	f7fe fb85 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001abe:	f000 f84d 	bl	8001b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac2:	f000 f8d3 	bl	8001c6c <MX_GPIO_Init>
  MX_CAN1_Init();
 8001ac6:	f000 f89b 	bl	8001c00 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // Initializing CAN Filter
  filterConfigCAN(&hcan1);
 8001aca:	4820      	ldr	r0, [pc, #128]	; (8001b4c <main+0x98>)
 8001acc:	f000 f9ec 	bl	8001ea8 <filterConfigCAN>
  HAL_CAN_Start(&hcan1);
 8001ad0:	481e      	ldr	r0, [pc, #120]	; (8001b4c <main+0x98>)
 8001ad2:	f7fe fdd0 	bl	8000676 <HAL_CAN_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	can_rx_pkg = readCanMessages(&hcan1);
 8001ad6:	4c1e      	ldr	r4, [pc, #120]	; (8001b50 <main+0x9c>)
 8001ad8:	463b      	mov	r3, r7
 8001ada:	491c      	ldr	r1, [pc, #112]	; (8001b4c <main+0x98>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 fa03 	bl	8001ee8 <readCanMessages>
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ae8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	if(!isEqual(can_rx_pkg, NULL_MSG)){
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <main+0xa0>)
 8001aee:	4a18      	ldr	r2, [pc, #96]	; (8001b50 <main+0x9c>)
 8001af0:	466c      	mov	r4, sp
 8001af2:	1d19      	adds	r1, r3, #4
 8001af4:	c903      	ldmia	r1, {r0, r1}
 8001af6:	e884 0003 	stmia.w	r4, {r0, r1}
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001afe:	f000 fa21 	bl	8001f44 <isEqual>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d11b      	bne.n	8001b40 <main+0x8c>
		if (can_rx_pkg.data[0] == 1){
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <main+0x9c>)
 8001b0a:	791b      	ldrb	r3, [r3, #4]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d105      	bne.n	8001b1c <main+0x68>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	2140      	movs	r1, #64	; 0x40
 8001b14:	4810      	ldr	r0, [pc, #64]	; (8001b58 <main+0xa4>)
 8001b16:	f7ff f9bb 	bl	8000e90 <HAL_GPIO_WritePin>
 8001b1a:	e011      	b.n	8001b40 <main+0x8c>
		}
		else if (can_rx_pkg.data[1] == 1){
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <main+0x9c>)
 8001b1e:	795b      	ldrb	r3, [r3, #5]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d104      	bne.n	8001b2e <main+0x7a>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001b24:	2140      	movs	r1, #64	; 0x40
 8001b26:	480c      	ldr	r0, [pc, #48]	; (8001b58 <main+0xa4>)
 8001b28:	f7ff f9ca 	bl	8000ec0 <HAL_GPIO_TogglePin>
 8001b2c:	e008      	b.n	8001b40 <main+0x8c>
		}
		else if(can_rx_pkg.data[2] == 1){
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <main+0x9c>)
 8001b30:	799b      	ldrb	r3, [r3, #6]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d104      	bne.n	8001b40 <main+0x8c>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2140      	movs	r1, #64	; 0x40
 8001b3a:	4807      	ldr	r0, [pc, #28]	; (8001b58 <main+0xa4>)
 8001b3c:	f7ff f9a8 	bl	8000e90 <HAL_GPIO_WritePin>
		}
	}
	HAL_Delay(1500);
 8001b40:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001b44:	f7fe fbb0 	bl	80002a8 <HAL_Delay>
	can_rx_pkg = readCanMessages(&hcan1);
 8001b48:	e7c5      	b.n	8001ad6 <main+0x22>
 8001b4a:	bf00      	nop
 8001b4c:	20000050 	.word	0x20000050
 8001b50:	20000044 	.word	0x20000044
 8001b54:	2000000c 	.word	0x2000000c
 8001b58:	48000800 	.word	0x48000800

08001b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b096      	sub	sp, #88	; 0x58
 8001b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	2244      	movs	r2, #68	; 0x44
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 fa66 	bl	800203c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b70:	463b      	mov	r3, r7
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b88:	2310      	movs	r3, #16
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b90:	2302      	movs	r3, #2
 8001b92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b94:	2301      	movs	r3, #1
 8001b96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001b98:	230a      	movs	r3, #10
 8001b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fa05 	bl	8000fbc <HAL_RCC_OscConfig>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001bb8:	f000 f8a2 	bl	8001d00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fda1 	bl	800171c <HAL_RCC_ClockConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001be0:	f000 f88e 	bl	8001d00 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001be4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001be8:	f7ff f992 	bl	8000f10 <HAL_PWREx_ControlVoltageScaling>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bf2:	f000 f885 	bl	8001d00 <Error_Handler>
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	3758      	adds	r7, #88	; 0x58
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <MX_CAN1_Init+0x64>)
 8001c06:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <MX_CAN1_Init+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <MX_CAN1_Init+0x64>)
 8001c0c:	2210      	movs	r2, #16
 8001c0e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <MX_CAN1_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <MX_CAN1_Init+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <MX_CAN1_Init+0x64>)
 8001c1e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c22:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <MX_CAN1_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <MX_CAN1_Init+0x64>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <MX_CAN1_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <MX_CAN1_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <MX_CAN1_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <MX_CAN1_Init+0x64>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <MX_CAN1_Init+0x64>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_CAN1_Init+0x64>)
 8001c50:	f7fe fb4c 	bl	80002ec <HAL_CAN_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001c5a:	f000 f851 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000050 	.word	0x20000050
 8001c68:	40006400 	.word	0x40006400

08001c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
 8001c80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <MX_GPIO_Init+0x8c>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <MX_GPIO_Init+0x8c>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <MX_GPIO_Init+0x8c>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <MX_GPIO_Init+0x8c>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	4a16      	ldr	r2, [pc, #88]	; (8001cf8 <MX_GPIO_Init+0x8c>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <MX_GPIO_Init+0x8c>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_GPIO_Init+0x8c>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	4a10      	ldr	r2, [pc, #64]	; (8001cf8 <MX_GPIO_Init+0x8c>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_GPIO_Init+0x8c>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LBK_Pin, GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	21c0      	movs	r1, #192	; 0xc0
 8001cce:	480b      	ldr	r0, [pc, #44]	; (8001cfc <MX_GPIO_Init+0x90>)
 8001cd0:	f7ff f8de 	bl	8000e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LBK_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LBK_Pin;
 8001cd4:	23c0      	movs	r3, #192	; 0xc0
 8001cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4804      	ldr	r0, [pc, #16]	; (8001cfc <MX_GPIO_Init+0x90>)
 8001cec:	f7fe ff28 	bl	8000b40 <HAL_GPIO_Init>

}
 8001cf0:	bf00      	nop
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	48000800 	.word	0x48000800

08001d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_MspInit+0x44>)
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <HAL_MspInit+0x44>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6613      	str	r3, [r2, #96]	; 0x60
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_MspInit+0x44>)
 8001d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_MspInit+0x44>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	4a08      	ldr	r2, [pc, #32]	; (8001d54 <HAL_MspInit+0x44>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d38:	6593      	str	r3, [r2, #88]	; 0x58
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_MspInit+0x44>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000

08001d58 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_CAN_MspInit+0x80>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d129      	bne.n	8001dce <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <HAL_CAN_MspInit+0x84>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <HAL_CAN_MspInit+0x84>)
 8001d80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d84:	6593      	str	r3, [r2, #88]	; 0x58
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_CAN_MspInit+0x84>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_CAN_MspInit+0x84>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	4a11      	ldr	r2, [pc, #68]	; (8001ddc <HAL_CAN_MspInit+0x84>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <HAL_CAN_MspInit+0x84>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001daa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001dbc:	2309      	movs	r3, #9
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dca:	f7fe feb9 	bl	8000b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001dce:	bf00      	nop
 8001dd0:	3728      	adds	r7, #40	; 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40006400 	.word	0x40006400
 8001ddc:	40021000 	.word	0x40021000

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e34:	f7fe fa1a 	bl	800026c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e40:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <SystemInit+0x64>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e46:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <SystemInit+0x64>)
 8001e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <SystemInit+0x68>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a13      	ldr	r2, [pc, #76]	; (8001ea4 <SystemInit+0x68>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <SystemInit+0x68>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <SystemInit+0x68>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <SystemInit+0x68>)
 8001e68:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001e6c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001e70:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <SystemInit+0x68>)
 8001e74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e78:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <SystemInit+0x68>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <SystemInit+0x68>)
 8001e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e84:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <SystemInit+0x68>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SystemInit+0x64>)
 8001e8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e92:	609a      	str	r2, [r3, #8]
#endif
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000ed00 	.word	0xe000ed00
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <filterConfigCAN>:
#include "zenith_can_lib.h"

Z_CAN_Package NULL_MSG = {-1, {0,0,0,0,0,0,0,0}};

void filterConfigCAN(CAN_HandleTypeDef *hcan1)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08c      	sub	sp, #48	; 0x30
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

	CAN_FilterTypeDef can1FilterInit;

	can1FilterInit.FilterActivation = ENABLE;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
	can1FilterInit.FilterBank = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
	can1FilterInit.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]
	can1FilterInit.FilterIdHigh = 0x0000;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
	can1FilterInit.FilterIdLow = 0x0000;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
	can1FilterInit.FilterMaskIdHigh = 0x0000;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	613b      	str	r3, [r7, #16]
	can1FilterInit.FilterMaskIdLow = 0x0000;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
	can1FilterInit.FilterMode = CAN_FILTERMODE_IDMASK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
	can1FilterInit.FilterScale = CAN_FILTERSCALE_32BIT;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcan1, &can1FilterInit);
 8001ed4:	f107 0308 	add.w	r3, r7, #8
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe fb01 	bl	80004e2 <HAL_CAN_ConfigFilter>
}
 8001ee0:	bf00      	nop
 8001ee2:	3730      	adds	r7, #48	; 0x30
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <readCanMessages>:
		return -1;
	}
}

Z_CAN_Package readCanMessages(CAN_HandleTypeDef *hcan1)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b08f      	sub	sp, #60	; 0x3c
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
	Z_CAN_Package package = NULL_MSG;
 8001ef2:	4a13      	ldr	r2, [pc, #76]	; (8001f40 <readCanMessages+0x58>)
 8001ef4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ef8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001efa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t RxFifo = CAN_RX_FIFO0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
	CAN_RxHeaderTypeDef pRxHeader;

	if(HAL_CAN_GetRxFifoFillLevel(hcan1, RxFifo) != 0){
 8001f02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f04:	6838      	ldr	r0, [r7, #0]
 8001f06:	f7fe fd0d 	bl	8000924 <HAL_CAN_GetRxFifoFillLevel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00a      	beq.n	8001f26 <readCanMessages+0x3e>
		HAL_CAN_GetRxMessage(hcan1, RxFifo, &pRxHeader, package.data);
 8001f10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f14:	3304      	adds	r3, #4
 8001f16:	f107 020c 	add.w	r2, r7, #12
 8001f1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f1c:	6838      	ldr	r0, [r7, #0]
 8001f1e:	f7fe fbee 	bl	80006fe <HAL_CAN_GetRxMessage>
		package.identifier = pRxHeader.StdId;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	return package;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	461c      	mov	r4, r3
 8001f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	373c      	adds	r7, #60	; 0x3c
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	2000000c 	.word	0x2000000c

08001f44 <isEqual>:

uint8_t isEqual(Z_CAN_Package p1, Z_CAN_Package p2){
 8001f44:	b082      	sub	sp, #8
 8001f46:	b490      	push	{r4, r7}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	1d3c      	adds	r4, r7, #4
 8001f4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;

	if(p1.identifier != p2.identifier){
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <isEqual+0x1c>
		return 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e018      	b.n	8001f92 <isEqual+0x4e>
	}

	for(i = 0; i < 8; i++){
 8001f60:	2300      	movs	r3, #0
 8001f62:	75fb      	strb	r3, [r7, #23]
 8001f64:	e011      	b.n	8001f8a <isEqual+0x46>
		if(p1.data[i] != p2.data[i]){
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
 8001f68:	f107 0218 	add.w	r2, r7, #24
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	f107 0120 	add.w	r1, r7, #32
 8001f78:	440b      	add	r3, r1
 8001f7a:	7a1b      	ldrb	r3, [r3, #8]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <isEqual+0x40>
			return 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	e006      	b.n	8001f92 <isEqual+0x4e>
	for(i = 0; i < 8; i++){
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
 8001f86:	3301      	adds	r3, #1
 8001f88:	75fb      	strb	r3, [r7, #23]
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
 8001f8c:	2b07      	cmp	r3, #7
 8001f8e:	d9ea      	bls.n	8001f66 <isEqual+0x22>
		}
	}

	return 1;
 8001f90:	2301      	movs	r3, #1
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc90      	pop	{r4, r7}
 8001f9a:	b002      	add	sp, #8
 8001f9c:	4770      	bx	lr
	...

08001fa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001fa4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001fa6:	e003      	b.n	8001fb0 <LoopCopyDataInit>

08001fa8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001faa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001fac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001fae:	3104      	adds	r1, #4

08001fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001fb0:	480b      	ldr	r0, [pc, #44]	; (8001fe0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001fb4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001fb6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001fb8:	d3f6      	bcc.n	8001fa8 <CopyDataInit>
	ldr	r2, =_sbss
 8001fba:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001fbc:	e002      	b.n	8001fc4 <LoopFillZerobss>

08001fbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001fbe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001fc0:	f842 3b04 	str.w	r3, [r2], #4

08001fc4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <LoopForever+0x16>)
	cmp	r2, r3
 8001fc6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fc8:	d3f9      	bcc.n	8001fbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fca:	f7ff ff37 	bl	8001e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fce:	f000 f811 	bl	8001ff4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fd2:	f7ff fd6f 	bl	8001ab4 <main>

08001fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fd6:	e7fe      	b.n	8001fd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fd8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001fdc:	080020ac 	.word	0x080020ac
	ldr	r0, =_sdata
 8001fe0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001fe4:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8001fe8:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8001fec:	20000078 	.word	0x20000078

08001ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <ADC1_2_IRQHandler>
	...

08001ff4 <__libc_init_array>:
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	4e0d      	ldr	r6, [pc, #52]	; (800202c <__libc_init_array+0x38>)
 8001ff8:	4c0d      	ldr	r4, [pc, #52]	; (8002030 <__libc_init_array+0x3c>)
 8001ffa:	1ba4      	subs	r4, r4, r6
 8001ffc:	10a4      	asrs	r4, r4, #2
 8001ffe:	2500      	movs	r5, #0
 8002000:	42a5      	cmp	r5, r4
 8002002:	d109      	bne.n	8002018 <__libc_init_array+0x24>
 8002004:	4e0b      	ldr	r6, [pc, #44]	; (8002034 <__libc_init_array+0x40>)
 8002006:	4c0c      	ldr	r4, [pc, #48]	; (8002038 <__libc_init_array+0x44>)
 8002008:	f000 f820 	bl	800204c <_init>
 800200c:	1ba4      	subs	r4, r4, r6
 800200e:	10a4      	asrs	r4, r4, #2
 8002010:	2500      	movs	r5, #0
 8002012:	42a5      	cmp	r5, r4
 8002014:	d105      	bne.n	8002022 <__libc_init_array+0x2e>
 8002016:	bd70      	pop	{r4, r5, r6, pc}
 8002018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800201c:	4798      	blx	r3
 800201e:	3501      	adds	r5, #1
 8002020:	e7ee      	b.n	8002000 <__libc_init_array+0xc>
 8002022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002026:	4798      	blx	r3
 8002028:	3501      	adds	r5, #1
 800202a:	e7f2      	b.n	8002012 <__libc_init_array+0x1e>
 800202c:	080020a4 	.word	0x080020a4
 8002030:	080020a4 	.word	0x080020a4
 8002034:	080020a4 	.word	0x080020a4
 8002038:	080020a8 	.word	0x080020a8

0800203c <memset>:
 800203c:	4402      	add	r2, r0
 800203e:	4603      	mov	r3, r0
 8002040:	4293      	cmp	r3, r2
 8002042:	d100      	bne.n	8002046 <memset+0xa>
 8002044:	4770      	bx	lr
 8002046:	f803 1b01 	strb.w	r1, [r3], #1
 800204a:	e7f9      	b.n	8002040 <memset+0x4>

0800204c <_init>:
 800204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204e:	bf00      	nop
 8002050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002052:	bc08      	pop	{r3}
 8002054:	469e      	mov	lr, r3
 8002056:	4770      	bx	lr

08002058 <_fini>:
 8002058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205a:	bf00      	nop
 800205c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800205e:	bc08      	pop	{r3}
 8002060:	469e      	mov	lr, r3
 8002062:	4770      	bx	lr
