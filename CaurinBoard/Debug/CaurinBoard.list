
CaurinBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077c4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800794c  0800794c  0001794c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a4c  08007a4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007a4c  08007a4c  00017a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a54  08007a54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007a54  08007a54  00017a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a5c  08007a5c  00017a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  20000070  08007ad0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08007ad0  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b68b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003030  00000000  00000000  0003b72b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001800  00000000  00000000  0003e760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016a8  00000000  00000000  0003ff60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d384  00000000  00000000  00041608  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011717  00000000  00000000  0006e98c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110058  00000000  00000000  000800a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001900fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ed0  00000000  00000000  00190178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007934 	.word	0x08007934

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08007934 	.word	0x08007934

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__gedf2>:
 8000540:	f04f 3cff 	mov.w	ip, #4294967295
 8000544:	e006      	b.n	8000554 <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__ledf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e002      	b.n	8000554 <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__cmpdf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800055c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	bf18      	it	ne
 8000566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056a:	d01b      	beq.n	80005a4 <__cmpdf2+0x54>
 800056c:	b001      	add	sp, #4
 800056e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000572:	bf0c      	ite	eq
 8000574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000578:	ea91 0f03 	teqne	r1, r3
 800057c:	bf02      	ittt	eq
 800057e:	ea90 0f02 	teqeq	r0, r2
 8000582:	2000      	moveq	r0, #0
 8000584:	4770      	bxeq	lr
 8000586:	f110 0f00 	cmn.w	r0, #0
 800058a:	ea91 0f03 	teq	r1, r3
 800058e:	bf58      	it	pl
 8000590:	4299      	cmppl	r1, r3
 8000592:	bf08      	it	eq
 8000594:	4290      	cmpeq	r0, r2
 8000596:	bf2c      	ite	cs
 8000598:	17d8      	asrcs	r0, r3, #31
 800059a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059e:	f040 0001 	orr.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ac:	d102      	bne.n	80005b4 <__cmpdf2+0x64>
 80005ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b2:	d107      	bne.n	80005c4 <__cmpdf2+0x74>
 80005b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d1d6      	bne.n	800056c <__cmpdf2+0x1c>
 80005be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c2:	d0d3      	beq.n	800056c <__cmpdf2+0x1c>
 80005c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__aeabi_cdrcmple>:
 80005cc:	4684      	mov	ip, r0
 80005ce:	4610      	mov	r0, r2
 80005d0:	4662      	mov	r2, ip
 80005d2:	468c      	mov	ip, r1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4663      	mov	r3, ip
 80005d8:	e000      	b.n	80005dc <__aeabi_cdcmpeq>
 80005da:	bf00      	nop

080005dc <__aeabi_cdcmpeq>:
 80005dc:	b501      	push	{r0, lr}
 80005de:	f7ff ffb7 	bl	8000550 <__cmpdf2>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	bf48      	it	mi
 80005e6:	f110 0f00 	cmnmi.w	r0, #0
 80005ea:	bd01      	pop	{r0, pc}

080005ec <__aeabi_dcmpeq>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff fff4 	bl	80005dc <__aeabi_cdcmpeq>
 80005f4:	bf0c      	ite	eq
 80005f6:	2001      	moveq	r0, #1
 80005f8:	2000      	movne	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmplt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffea 	bl	80005dc <__aeabi_cdcmpeq>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmple>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffe0 	bl	80005dc <__aeabi_cdcmpeq>
 800061c:	bf94      	ite	ls
 800061e:	2001      	movls	r0, #1
 8000620:	2000      	movhi	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmpge>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffce 	bl	80005cc <__aeabi_cdrcmple>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpgt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffc4 	bl	80005cc <__aeabi_cdrcmple>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_uldivmod>:
 8000650:	b953      	cbnz	r3, 8000668 <__aeabi_uldivmod+0x18>
 8000652:	b94a      	cbnz	r2, 8000668 <__aeabi_uldivmod+0x18>
 8000654:	2900      	cmp	r1, #0
 8000656:	bf08      	it	eq
 8000658:	2800      	cmpeq	r0, #0
 800065a:	bf1c      	itt	ne
 800065c:	f04f 31ff 	movne.w	r1, #4294967295
 8000660:	f04f 30ff 	movne.w	r0, #4294967295
 8000664:	f000 b972 	b.w	800094c <__aeabi_idiv0>
 8000668:	f1ad 0c08 	sub.w	ip, sp, #8
 800066c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000670:	f000 f806 	bl	8000680 <__udivmoddi4>
 8000674:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800067c:	b004      	add	sp, #16
 800067e:	4770      	bx	lr

08000680 <__udivmoddi4>:
 8000680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000684:	9e08      	ldr	r6, [sp, #32]
 8000686:	4604      	mov	r4, r0
 8000688:	4688      	mov	r8, r1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d14b      	bne.n	8000726 <__udivmoddi4+0xa6>
 800068e:	428a      	cmp	r2, r1
 8000690:	4615      	mov	r5, r2
 8000692:	d967      	bls.n	8000764 <__udivmoddi4+0xe4>
 8000694:	fab2 f282 	clz	r2, r2
 8000698:	b14a      	cbz	r2, 80006ae <__udivmoddi4+0x2e>
 800069a:	f1c2 0720 	rsb	r7, r2, #32
 800069e:	fa01 f302 	lsl.w	r3, r1, r2
 80006a2:	fa20 f707 	lsr.w	r7, r0, r7
 80006a6:	4095      	lsls	r5, r2
 80006a8:	ea47 0803 	orr.w	r8, r7, r3
 80006ac:	4094      	lsls	r4, r2
 80006ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006b2:	0c23      	lsrs	r3, r4, #16
 80006b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80006b8:	fa1f fc85 	uxth.w	ip, r5
 80006bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80006c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006c4:	fb07 f10c 	mul.w	r1, r7, ip
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d909      	bls.n	80006e0 <__udivmoddi4+0x60>
 80006cc:	18eb      	adds	r3, r5, r3
 80006ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80006d2:	f080 811b 	bcs.w	800090c <__udivmoddi4+0x28c>
 80006d6:	4299      	cmp	r1, r3
 80006d8:	f240 8118 	bls.w	800090c <__udivmoddi4+0x28c>
 80006dc:	3f02      	subs	r7, #2
 80006de:	442b      	add	r3, r5
 80006e0:	1a5b      	subs	r3, r3, r1
 80006e2:	b2a4      	uxth	r4, r4
 80006e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80006e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80006ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80006f4:	45a4      	cmp	ip, r4
 80006f6:	d909      	bls.n	800070c <__udivmoddi4+0x8c>
 80006f8:	192c      	adds	r4, r5, r4
 80006fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80006fe:	f080 8107 	bcs.w	8000910 <__udivmoddi4+0x290>
 8000702:	45a4      	cmp	ip, r4
 8000704:	f240 8104 	bls.w	8000910 <__udivmoddi4+0x290>
 8000708:	3802      	subs	r0, #2
 800070a:	442c      	add	r4, r5
 800070c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000710:	eba4 040c 	sub.w	r4, r4, ip
 8000714:	2700      	movs	r7, #0
 8000716:	b11e      	cbz	r6, 8000720 <__udivmoddi4+0xa0>
 8000718:	40d4      	lsrs	r4, r2
 800071a:	2300      	movs	r3, #0
 800071c:	e9c6 4300 	strd	r4, r3, [r6]
 8000720:	4639      	mov	r1, r7
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	428b      	cmp	r3, r1
 8000728:	d909      	bls.n	800073e <__udivmoddi4+0xbe>
 800072a:	2e00      	cmp	r6, #0
 800072c:	f000 80eb 	beq.w	8000906 <__udivmoddi4+0x286>
 8000730:	2700      	movs	r7, #0
 8000732:	e9c6 0100 	strd	r0, r1, [r6]
 8000736:	4638      	mov	r0, r7
 8000738:	4639      	mov	r1, r7
 800073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073e:	fab3 f783 	clz	r7, r3
 8000742:	2f00      	cmp	r7, #0
 8000744:	d147      	bne.n	80007d6 <__udivmoddi4+0x156>
 8000746:	428b      	cmp	r3, r1
 8000748:	d302      	bcc.n	8000750 <__udivmoddi4+0xd0>
 800074a:	4282      	cmp	r2, r0
 800074c:	f200 80fa 	bhi.w	8000944 <__udivmoddi4+0x2c4>
 8000750:	1a84      	subs	r4, r0, r2
 8000752:	eb61 0303 	sbc.w	r3, r1, r3
 8000756:	2001      	movs	r0, #1
 8000758:	4698      	mov	r8, r3
 800075a:	2e00      	cmp	r6, #0
 800075c:	d0e0      	beq.n	8000720 <__udivmoddi4+0xa0>
 800075e:	e9c6 4800 	strd	r4, r8, [r6]
 8000762:	e7dd      	b.n	8000720 <__udivmoddi4+0xa0>
 8000764:	b902      	cbnz	r2, 8000768 <__udivmoddi4+0xe8>
 8000766:	deff      	udf	#255	; 0xff
 8000768:	fab2 f282 	clz	r2, r2
 800076c:	2a00      	cmp	r2, #0
 800076e:	f040 808f 	bne.w	8000890 <__udivmoddi4+0x210>
 8000772:	1b49      	subs	r1, r1, r5
 8000774:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000778:	fa1f f885 	uxth.w	r8, r5
 800077c:	2701      	movs	r7, #1
 800077e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000782:	0c23      	lsrs	r3, r4, #16
 8000784:	fb0e 111c 	mls	r1, lr, ip, r1
 8000788:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800078c:	fb08 f10c 	mul.w	r1, r8, ip
 8000790:	4299      	cmp	r1, r3
 8000792:	d907      	bls.n	80007a4 <__udivmoddi4+0x124>
 8000794:	18eb      	adds	r3, r5, r3
 8000796:	f10c 30ff 	add.w	r0, ip, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x122>
 800079c:	4299      	cmp	r1, r3
 800079e:	f200 80cd 	bhi.w	800093c <__udivmoddi4+0x2bc>
 80007a2:	4684      	mov	ip, r0
 80007a4:	1a59      	subs	r1, r3, r1
 80007a6:	b2a3      	uxth	r3, r4
 80007a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80007ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80007b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007b4:	fb08 f800 	mul.w	r8, r8, r0
 80007b8:	45a0      	cmp	r8, r4
 80007ba:	d907      	bls.n	80007cc <__udivmoddi4+0x14c>
 80007bc:	192c      	adds	r4, r5, r4
 80007be:	f100 33ff 	add.w	r3, r0, #4294967295
 80007c2:	d202      	bcs.n	80007ca <__udivmoddi4+0x14a>
 80007c4:	45a0      	cmp	r8, r4
 80007c6:	f200 80b6 	bhi.w	8000936 <__udivmoddi4+0x2b6>
 80007ca:	4618      	mov	r0, r3
 80007cc:	eba4 0408 	sub.w	r4, r4, r8
 80007d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007d4:	e79f      	b.n	8000716 <__udivmoddi4+0x96>
 80007d6:	f1c7 0c20 	rsb	ip, r7, #32
 80007da:	40bb      	lsls	r3, r7
 80007dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80007e4:	fa01 f407 	lsl.w	r4, r1, r7
 80007e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80007ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80007f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007f4:	4325      	orrs	r5, r4
 80007f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80007fa:	0c2c      	lsrs	r4, r5, #16
 80007fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000800:	fa1f fa8e 	uxth.w	sl, lr
 8000804:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000808:	fb09 f40a 	mul.w	r4, r9, sl
 800080c:	429c      	cmp	r4, r3
 800080e:	fa02 f207 	lsl.w	r2, r2, r7
 8000812:	fa00 f107 	lsl.w	r1, r0, r7
 8000816:	d90b      	bls.n	8000830 <__udivmoddi4+0x1b0>
 8000818:	eb1e 0303 	adds.w	r3, lr, r3
 800081c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000820:	f080 8087 	bcs.w	8000932 <__udivmoddi4+0x2b2>
 8000824:	429c      	cmp	r4, r3
 8000826:	f240 8084 	bls.w	8000932 <__udivmoddi4+0x2b2>
 800082a:	f1a9 0902 	sub.w	r9, r9, #2
 800082e:	4473      	add	r3, lr
 8000830:	1b1b      	subs	r3, r3, r4
 8000832:	b2ad      	uxth	r5, r5
 8000834:	fbb3 f0f8 	udiv	r0, r3, r8
 8000838:	fb08 3310 	mls	r3, r8, r0, r3
 800083c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000840:	fb00 fa0a 	mul.w	sl, r0, sl
 8000844:	45a2      	cmp	sl, r4
 8000846:	d908      	bls.n	800085a <__udivmoddi4+0x1da>
 8000848:	eb1e 0404 	adds.w	r4, lr, r4
 800084c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000850:	d26b      	bcs.n	800092a <__udivmoddi4+0x2aa>
 8000852:	45a2      	cmp	sl, r4
 8000854:	d969      	bls.n	800092a <__udivmoddi4+0x2aa>
 8000856:	3802      	subs	r0, #2
 8000858:	4474      	add	r4, lr
 800085a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800085e:	fba0 8902 	umull	r8, r9, r0, r2
 8000862:	eba4 040a 	sub.w	r4, r4, sl
 8000866:	454c      	cmp	r4, r9
 8000868:	46c2      	mov	sl, r8
 800086a:	464b      	mov	r3, r9
 800086c:	d354      	bcc.n	8000918 <__udivmoddi4+0x298>
 800086e:	d051      	beq.n	8000914 <__udivmoddi4+0x294>
 8000870:	2e00      	cmp	r6, #0
 8000872:	d069      	beq.n	8000948 <__udivmoddi4+0x2c8>
 8000874:	ebb1 050a 	subs.w	r5, r1, sl
 8000878:	eb64 0403 	sbc.w	r4, r4, r3
 800087c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000880:	40fd      	lsrs	r5, r7
 8000882:	40fc      	lsrs	r4, r7
 8000884:	ea4c 0505 	orr.w	r5, ip, r5
 8000888:	e9c6 5400 	strd	r5, r4, [r6]
 800088c:	2700      	movs	r7, #0
 800088e:	e747      	b.n	8000720 <__udivmoddi4+0xa0>
 8000890:	f1c2 0320 	rsb	r3, r2, #32
 8000894:	fa20 f703 	lsr.w	r7, r0, r3
 8000898:	4095      	lsls	r5, r2
 800089a:	fa01 f002 	lsl.w	r0, r1, r2
 800089e:	fa21 f303 	lsr.w	r3, r1, r3
 80008a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008a6:	4338      	orrs	r0, r7
 80008a8:	0c01      	lsrs	r1, r0, #16
 80008aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80008ae:	fa1f f885 	uxth.w	r8, r5
 80008b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80008b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ba:	fb07 f308 	mul.w	r3, r7, r8
 80008be:	428b      	cmp	r3, r1
 80008c0:	fa04 f402 	lsl.w	r4, r4, r2
 80008c4:	d907      	bls.n	80008d6 <__udivmoddi4+0x256>
 80008c6:	1869      	adds	r1, r5, r1
 80008c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80008cc:	d22f      	bcs.n	800092e <__udivmoddi4+0x2ae>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d92d      	bls.n	800092e <__udivmoddi4+0x2ae>
 80008d2:	3f02      	subs	r7, #2
 80008d4:	4429      	add	r1, r5
 80008d6:	1acb      	subs	r3, r1, r3
 80008d8:	b281      	uxth	r1, r0
 80008da:	fbb3 f0fe 	udiv	r0, r3, lr
 80008de:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e6:	fb00 f308 	mul.w	r3, r0, r8
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d907      	bls.n	80008fe <__udivmoddi4+0x27e>
 80008ee:	1869      	adds	r1, r5, r1
 80008f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f4:	d217      	bcs.n	8000926 <__udivmoddi4+0x2a6>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d915      	bls.n	8000926 <__udivmoddi4+0x2a6>
 80008fa:	3802      	subs	r0, #2
 80008fc:	4429      	add	r1, r5
 80008fe:	1ac9      	subs	r1, r1, r3
 8000900:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000904:	e73b      	b.n	800077e <__udivmoddi4+0xfe>
 8000906:	4637      	mov	r7, r6
 8000908:	4630      	mov	r0, r6
 800090a:	e709      	b.n	8000720 <__udivmoddi4+0xa0>
 800090c:	4607      	mov	r7, r0
 800090e:	e6e7      	b.n	80006e0 <__udivmoddi4+0x60>
 8000910:	4618      	mov	r0, r3
 8000912:	e6fb      	b.n	800070c <__udivmoddi4+0x8c>
 8000914:	4541      	cmp	r1, r8
 8000916:	d2ab      	bcs.n	8000870 <__udivmoddi4+0x1f0>
 8000918:	ebb8 0a02 	subs.w	sl, r8, r2
 800091c:	eb69 020e 	sbc.w	r2, r9, lr
 8000920:	3801      	subs	r0, #1
 8000922:	4613      	mov	r3, r2
 8000924:	e7a4      	b.n	8000870 <__udivmoddi4+0x1f0>
 8000926:	4660      	mov	r0, ip
 8000928:	e7e9      	b.n	80008fe <__udivmoddi4+0x27e>
 800092a:	4618      	mov	r0, r3
 800092c:	e795      	b.n	800085a <__udivmoddi4+0x1da>
 800092e:	4667      	mov	r7, ip
 8000930:	e7d1      	b.n	80008d6 <__udivmoddi4+0x256>
 8000932:	4681      	mov	r9, r0
 8000934:	e77c      	b.n	8000830 <__udivmoddi4+0x1b0>
 8000936:	3802      	subs	r0, #2
 8000938:	442c      	add	r4, r5
 800093a:	e747      	b.n	80007cc <__udivmoddi4+0x14c>
 800093c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000940:	442b      	add	r3, r5
 8000942:	e72f      	b.n	80007a4 <__udivmoddi4+0x124>
 8000944:	4638      	mov	r0, r7
 8000946:	e708      	b.n	800075a <__udivmoddi4+0xda>
 8000948:	4637      	mov	r7, r6
 800094a:	e6e9      	b.n	8000720 <__udivmoddi4+0xa0>

0800094c <__aeabi_idiv0>:
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop

08000950 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095a:	2003      	movs	r0, #3
 800095c:	f001 fa6e 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000960:	2000      	movs	r0, #0
 8000962:	f000 f80d 	bl	8000980 <HAL_InitTick>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	71fb      	strb	r3, [r7, #7]
 8000970:	e001      	b.n	8000976 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000972:	f006 f851 	bl	8006a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000976:	79fb      	ldrb	r3, [r7, #7]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000988:	2300      	movs	r3, #0
 800098a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <HAL_InitTick+0x68>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d022      	beq.n	80009da <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <HAL_InitTick+0x6c>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <HAL_InitTick+0x68>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80009a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 fa7c 	bl	8001ea6 <HAL_SYSTICK_Config>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10f      	bne.n	80009d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b0f      	cmp	r3, #15
 80009b8:	d809      	bhi.n	80009ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ba:	2200      	movs	r2, #0
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	f04f 30ff 	mov.w	r0, #4294967295
 80009c2:	f001 fa46 	bl	8001e52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <HAL_InitTick+0x70>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6013      	str	r3, [r2, #0]
 80009cc:	e007      	b.n	80009de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	e004      	b.n	80009de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	e001      	b.n	80009de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009de:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000004 	.word	0x20000004
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000000 	.word	0x20000000

080009f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_IncTick+0x1c>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_IncTick+0x20>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4413      	add	r3, r2
 8000a02:	4a03      	ldr	r2, [pc, #12]	; (8000a10 <HAL_IncTick+0x1c>)
 8000a04:	6013      	str	r3, [r2, #0]
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	200003b4 	.word	0x200003b4
 8000a14:	20000004 	.word	0x20000004

08000a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_GetTick+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200003b4 	.word	0x200003b4

08000a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a38:	f7ff ffee 	bl	8000a18 <HAL_GetTick>
 8000a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a48:	d004      	beq.n	8000a54 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_Delay+0x40>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	4413      	add	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a54:	bf00      	nop
 8000a56:	f7ff ffdf 	bl	8000a18 <HAL_GetTick>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d8f7      	bhi.n	8000a56 <HAL_Delay+0x26>
  {
  }
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000004 	.word	0x20000004

08000a74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	431a      	orrs	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000adc:	b490      	push	{r4, r7}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	3360      	adds	r3, #96	; 0x60
 8000aee:	461a      	mov	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000af8:	6822      	ldr	r2, [r4, #0]
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <LL_ADC_SetOffset+0x40>)
 8000afc:	4013      	ands	r3, r2
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	430a      	orrs	r2, r1
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc90      	pop	{r4, r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	03fff000 	.word	0x03fff000

08000b20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000b20:	b490      	push	{r4, r7}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3360      	adds	r3, #96	; 0x60
 8000b2e:	461a      	mov	r2, r3
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	4413      	add	r3, r2
 8000b36:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000b38:	6823      	ldr	r3, [r4, #0]
 8000b3a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc90      	pop	{r4, r7}
 8000b46:	4770      	bx	lr

08000b48 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000b48:	b490      	push	{r4, r7}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	3360      	adds	r3, #96	; 0x60
 8000b58:	461a      	mov	r2, r3
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000b62:	6823      	ldr	r3, [r4, #0]
 8000b64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc90      	pop	{r4, r7}
 8000b76:	4770      	bx	lr

08000b78 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b78:	b490      	push	{r4, r7}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	3330      	adds	r3, #48	; 0x30
 8000b88:	461a      	mov	r2, r3
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	f003 030c 	and.w	r3, r3, #12
 8000b94:	4413      	add	r3, r2
 8000b96:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000b98:	6822      	ldr	r2, [r4, #0]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	f003 031f 	and.w	r3, r3, #31
 8000ba0:	211f      	movs	r1, #31
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	401a      	ands	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	0e9b      	lsrs	r3, r3, #26
 8000bae:	f003 011f 	and.w	r1, r3, #31
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	f003 031f 	and.w	r3, r3, #31
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc90      	pop	{r4, r7}
 8000bc8:	4770      	bx	lr

08000bca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000bca:	b490      	push	{r4, r7}
 8000bcc:	b084      	sub	sp, #16
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	3314      	adds	r3, #20
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	0e5b      	lsrs	r3, r3, #25
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	4413      	add	r3, r2
 8000be8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000bea:	6822      	ldr	r2, [r4, #0]
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	0d1b      	lsrs	r3, r3, #20
 8000bf0:	f003 031f 	and.w	r3, r3, #31
 8000bf4:	2107      	movs	r1, #7
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	0d1b      	lsrs	r3, r3, #20
 8000c02:	f003 031f 	and.w	r3, r3, #31
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc90      	pop	{r4, r7}
 8000c18:	4770      	bx	lr
	...

08000c1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c34:	43db      	mvns	r3, r3
 8000c36:	401a      	ands	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0318 	and.w	r3, r3, #24
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c40:	40d9      	lsrs	r1, r3
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	400b      	ands	r3, r1
 8000c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	0007ffff 	.word	0x0007ffff

08000c64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	6093      	str	r3, [r2, #8]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c9c:	d101      	bne.n	8000ca2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e000      	b.n	8000ca4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000cc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000cc4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cec:	d101      	bne.n	8000cf2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d101      	bne.n	8000d18 <LL_ADC_IsEnabled+0x18>
 8000d14:	2301      	movs	r3, #1
 8000d16:	e000      	b.n	8000d1a <LL_ADC_IsEnabled+0x1a>
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	d101      	bne.n	8000d3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e000      	b.n	8000d40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f003 0308 	and.w	r3, r3, #8
 8000d5c:	2b08      	cmp	r3, #8
 8000d5e:	d101      	bne.n	8000d64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000d60:	2301      	movs	r3, #1
 8000d62:	e000      	b.n	8000d66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e134      	b.n	8000ff8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d109      	bne.n	8000db0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f005 fe5f 	bl	8006a60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff67 	bl	8000c88 <LL_ADC_IsDeepPowerDownEnabled>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d004      	beq.n	8000dca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff4d 	bl	8000c64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff82 	bl	8000cd8 <LL_ADC_IsInternalRegulatorEnabled>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d113      	bne.n	8000e02 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff66 	bl	8000cb0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000de4:	4b86      	ldr	r3, [pc, #536]	; (8001000 <HAL_ADC_Init+0x28c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	099b      	lsrs	r3, r3, #6
 8000dea:	4a86      	ldr	r2, [pc, #536]	; (8001004 <HAL_ADC_Init+0x290>)
 8000dec:	fba2 2303 	umull	r2, r3, r2, r3
 8000df0:	099b      	lsrs	r3, r3, #6
 8000df2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000df4:	e002      	b.n	8000dfc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f9      	bne.n	8000df6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff66 	bl	8000cd8 <LL_ADC_IsInternalRegulatorEnabled>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10d      	bne.n	8000e2e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e16:	f043 0210 	orr.w	r2, r3, #16
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	f043 0201 	orr.w	r2, r3, #1
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff77 	bl	8000d26 <LL_ADC_REG_IsConversionOngoing>
 8000e38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 80cf 	bne.w	8000fe6 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f040 80cb 	bne.w	8000fe6 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e58:	f043 0202 	orr.w	r2, r3, #2
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff4b 	bl	8000d00 <LL_ADC_IsEnabled>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d115      	bne.n	8000e9c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e70:	4865      	ldr	r0, [pc, #404]	; (8001008 <HAL_ADC_Init+0x294>)
 8000e72:	f7ff ff45 	bl	8000d00 <LL_ADC_IsEnabled>
 8000e76:	4604      	mov	r4, r0
 8000e78:	4864      	ldr	r0, [pc, #400]	; (800100c <HAL_ADC_Init+0x298>)
 8000e7a:	f7ff ff41 	bl	8000d00 <LL_ADC_IsEnabled>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	431c      	orrs	r4, r3
 8000e82:	4863      	ldr	r0, [pc, #396]	; (8001010 <HAL_ADC_Init+0x29c>)
 8000e84:	f7ff ff3c 	bl	8000d00 <LL_ADC_IsEnabled>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4323      	orrs	r3, r4
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d105      	bne.n	8000e9c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	4619      	mov	r1, r3
 8000e96:	485f      	ldr	r0, [pc, #380]	; (8001014 <HAL_ADC_Init+0x2a0>)
 8000e98:	f7ff fdec 	bl	8000a74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7e5b      	ldrb	r3, [r3, #25]
 8000ea0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ea6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000eac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000eb2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d106      	bne.n	8000ed8 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	045b      	lsls	r3, r3, #17
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d009      	beq.n	8000ef4 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	4b47      	ldr	r3, [pc, #284]	; (8001018 <HAL_ADC_Init+0x2a4>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	69b9      	ldr	r1, [r7, #24]
 8000f04:	430b      	orrs	r3, r1
 8000f06:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff0a 	bl	8000d26 <LL_ADC_REG_IsConversionOngoing>
 8000f12:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff17 	bl	8000d4c <LL_ADC_INJ_IsConversionOngoing>
 8000f1e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d13d      	bne.n	8000fa2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d13a      	bne.n	8000fa2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f30:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f38:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f48:	f023 0302 	bic.w	r3, r3, #2
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6812      	ldr	r2, [r2, #0]
 8000f50:	69b9      	ldr	r1, [r7, #24]
 8000f52:	430b      	orrs	r3, r1
 8000f54:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d118      	bne.n	8000f92 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000f6a:	f023 0304 	bic.w	r3, r3, #4
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000f76:	4311      	orrs	r1, r2
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000f7c:	4311      	orrs	r1, r2
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000f82:	430a      	orrs	r2, r1
 8000f84:	431a      	orrs	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f042 0201 	orr.w	r2, r2, #1
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	e007      	b.n	8000fa2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	691a      	ldr	r2, [r3, #16]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0201 	bic.w	r2, r2, #1
 8000fa0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d10c      	bne.n	8000fc4 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	f023 010f 	bic.w	r1, r3, #15
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	1e5a      	subs	r2, r3, #1
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc2:	e007      	b.n	8000fd4 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 020f 	bic.w	r2, r2, #15
 8000fd2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd8:	f023 0303 	bic.w	r3, r3, #3
 8000fdc:	f043 0201 	orr.w	r2, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	655a      	str	r2, [r3, #84]	; 0x54
 8000fe4:	e007      	b.n	8000ff6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fea:	f043 0210 	orr.w	r2, r3, #16
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000ff6:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3724      	adds	r7, #36	; 0x24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	20000008 	.word	0x20000008
 8001004:	053e2d63 	.word	0x053e2d63
 8001008:	50040000 	.word	0x50040000
 800100c:	50040100 	.word	0x50040100
 8001010:	50040200 	.word	0x50040200
 8001014:	50040300 	.word	0x50040300
 8001018:	fff0c007 	.word	0xfff0c007

0800101c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0a6      	sub	sp, #152	; 0x98
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001036:	2b01      	cmp	r3, #1
 8001038:	d101      	bne.n	800103e <HAL_ADC_ConfigChannel+0x22>
 800103a:	2302      	movs	r3, #2
 800103c:	e348      	b.n	80016d0 <HAL_ADC_ConfigChannel+0x6b4>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fe6b 	bl	8000d26 <LL_ADC_REG_IsConversionOngoing>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	f040 8329 	bne.w	80016aa <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b05      	cmp	r3, #5
 800105e:	d824      	bhi.n	80010aa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	3b02      	subs	r3, #2
 8001066:	2b03      	cmp	r3, #3
 8001068:	d81b      	bhi.n	80010a2 <HAL_ADC_ConfigChannel+0x86>
 800106a:	a201      	add	r2, pc, #4	; (adr r2, 8001070 <HAL_ADC_ConfigChannel+0x54>)
 800106c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001070:	08001081 	.word	0x08001081
 8001074:	08001089 	.word	0x08001089
 8001078:	08001091 	.word	0x08001091
 800107c:	08001099 	.word	0x08001099
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	220c      	movs	r2, #12
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	e011      	b.n	80010ac <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2212      	movs	r2, #18
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	e00d      	b.n	80010ac <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2218      	movs	r2, #24
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	e009      	b.n	80010ac <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	e004      	b.n	80010ac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	2206      	movs	r2, #6
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	e000      	b.n	80010ac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80010aa:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	6859      	ldr	r1, [r3, #4]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	f7ff fd5d 	bl	8000b78 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fe2f 	bl	8000d26 <LL_ADC_REG_IsConversionOngoing>
 80010c8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fe3b 	bl	8000d4c <LL_ADC_INJ_IsConversionOngoing>
 80010d6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f040 8148 	bne.w	8001374 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f040 8143 	bne.w	8001374 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	6819      	ldr	r1, [r3, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	461a      	mov	r2, r3
 80010fc:	f7ff fd65 	bl	8000bca <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	695a      	ldr	r2, [r3, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	08db      	lsrs	r3, r3, #3
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	2b04      	cmp	r3, #4
 8001120:	d00a      	beq.n	8001138 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	6919      	ldr	r1, [r3, #16]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001132:	f7ff fcd3 	bl	8000adc <LL_ADC_SetOffset>
 8001136:	e11d      	b.n	8001374 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fcee 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10a      	bne.n	8001164 <HAL_ADC_ConfigChannel+0x148>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fce3 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	0e9b      	lsrs	r3, r3, #26
 800115e:	f003 021f 	and.w	r2, r3, #31
 8001162:	e012      	b.n	800118a <HAL_ADC_ConfigChannel+0x16e>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fcd8 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 8001170:	4603      	mov	r3, r0
 8001172:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001176:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800117a:	fa93 f3a3 	rbit	r3, r3
 800117e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001180:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001192:	2b00      	cmp	r3, #0
 8001194:	d105      	bne.n	80011a2 <HAL_ADC_ConfigChannel+0x186>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	0e9b      	lsrs	r3, r3, #26
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	e00a      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x19c>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80011b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011b2:	fab3 f383 	clz	r3, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d106      	bne.n	80011ca <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fcbf 	bl	8000b48 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2101      	movs	r1, #1
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fca5 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d10a      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x1da>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2101      	movs	r1, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fc9a 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	0e9b      	lsrs	r3, r3, #26
 80011f0:	f003 021f 	and.w	r2, r3, #31
 80011f4:	e010      	b.n	8001218 <HAL_ADC_ConfigChannel+0x1fc>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2101      	movs	r1, #1
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fc8f 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001208:	fa93 f3a3 	rbit	r3, r3
 800120c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800120e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001210:	fab3 f383 	clz	r3, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	461a      	mov	r2, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001220:	2b00      	cmp	r3, #0
 8001222:	d105      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x214>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0e9b      	lsrs	r3, r3, #26
 800122a:	f003 031f 	and.w	r3, r3, #31
 800122e:	e00a      	b.n	8001246 <HAL_ADC_ConfigChannel+0x22a>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001236:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001238:	fa93 f3a3 	rbit	r3, r3
 800123c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800123e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001240:	fab3 f383 	clz	r3, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	429a      	cmp	r2, r3
 8001248:	d106      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2200      	movs	r2, #0
 8001250:	2101      	movs	r1, #1
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fc78 	bl	8000b48 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2102      	movs	r1, #2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fc5e 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10a      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x268>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2102      	movs	r1, #2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fc53 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	0e9b      	lsrs	r3, r3, #26
 800127e:	f003 021f 	and.w	r2, r3, #31
 8001282:	e010      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x28a>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2102      	movs	r1, #2
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fc48 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800129c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800129e:	fab3 f383 	clz	r3, r3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d105      	bne.n	80012be <HAL_ADC_ConfigChannel+0x2a2>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	0e9b      	lsrs	r3, r3, #26
 80012b8:	f003 031f 	and.w	r3, r3, #31
 80012bc:	e00a      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x2b8>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80012cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d106      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2200      	movs	r2, #0
 80012de:	2102      	movs	r1, #2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fc31 	bl	8000b48 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2103      	movs	r1, #3
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fc17 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10a      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x2f6>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2103      	movs	r1, #3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fc0c 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	0e9b      	lsrs	r3, r3, #26
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	e010      	b.n	8001334 <HAL_ADC_ConfigChannel+0x318>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2103      	movs	r1, #3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fc01 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001324:	fa93 f3a3 	rbit	r3, r3
 8001328:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800132a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800132c:	fab3 f383 	clz	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800133c:	2b00      	cmp	r3, #0
 800133e:	d105      	bne.n	800134c <HAL_ADC_ConfigChannel+0x330>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0e9b      	lsrs	r3, r3, #26
 8001346:	f003 031f 	and.w	r3, r3, #31
 800134a:	e00a      	b.n	8001362 <HAL_ADC_ConfigChannel+0x346>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001354:	fa93 f3a3 	rbit	r3, r3
 8001358:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800135a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800135c:	fab3 f383 	clz	r3, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	429a      	cmp	r2, r3
 8001364:	d106      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2200      	movs	r2, #0
 800136c:	2103      	movs	r1, #3
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fbea 	bl	8000b48 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fcc1 	bl	8000d00 <LL_ADC_IsEnabled>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	f040 810c 	bne.w	800159e <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	6819      	ldr	r1, [r3, #0]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	461a      	mov	r2, r3
 8001394:	f7ff fc42 	bl	8000c1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4aad      	ldr	r2, [pc, #692]	; (8001654 <HAL_ADC_ConfigChannel+0x638>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	f040 80fd 	bne.w	800159e <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10b      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x3b0>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	0e9b      	lsrs	r3, r3, #26
 80013ba:	3301      	adds	r3, #1
 80013bc:	f003 031f 	and.w	r3, r3, #31
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	bf94      	ite	ls
 80013c4:	2301      	movls	r3, #1
 80013c6:	2300      	movhi	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	e012      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x3d6>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013d4:	fa93 f3a3 	rbit	r3, r3
 80013d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80013da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013dc:	fab3 f383 	clz	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	3301      	adds	r3, #1
 80013e4:	f003 031f 	and.w	r3, r3, #31
 80013e8:	2b09      	cmp	r3, #9
 80013ea:	bf94      	ite	ls
 80013ec:	2301      	movls	r3, #1
 80013ee:	2300      	movhi	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d064      	beq.n	80014c0 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d107      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x3f6>
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	0e9b      	lsrs	r3, r3, #26
 8001408:	3301      	adds	r3, #1
 800140a:	069b      	lsls	r3, r3, #26
 800140c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001410:	e00e      	b.n	8001430 <HAL_ADC_ConfigChannel+0x414>
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001422:	fab3 f383 	clz	r3, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	3301      	adds	r3, #1
 800142a:	069b      	lsls	r3, r3, #26
 800142c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x434>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	0e9b      	lsrs	r3, r3, #26
 8001442:	3301      	adds	r3, #1
 8001444:	f003 031f 	and.w	r3, r3, #31
 8001448:	2101      	movs	r1, #1
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	e010      	b.n	8001472 <HAL_ADC_ConfigChannel+0x456>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001458:	fa93 f3a3 	rbit	r3, r3
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800145e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001460:	fab3 f383 	clz	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	3301      	adds	r3, #1
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	2101      	movs	r1, #1
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	ea42 0103 	orr.w	r1, r2, r3
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10a      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x47c>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	0e9b      	lsrs	r3, r3, #26
 8001488:	3301      	adds	r3, #1
 800148a:	f003 021f 	and.w	r2, r3, #31
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	051b      	lsls	r3, r3, #20
 8001496:	e011      	b.n	80014bc <HAL_ADC_ConfigChannel+0x4a0>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	fab3 f383 	clz	r3, r3
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	3301      	adds	r3, #1
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014bc:	430b      	orrs	r3, r1
 80014be:	e069      	b.n	8001594 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d107      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x4c0>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	0e9b      	lsrs	r3, r3, #26
 80014d2:	3301      	adds	r3, #1
 80014d4:	069b      	lsls	r3, r3, #26
 80014d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014da:	e00e      	b.n	80014fa <HAL_ADC_ConfigChannel+0x4de>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	fa93 f3a3 	rbit	r3, r3
 80014e8:	61fb      	str	r3, [r7, #28]
  return result;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fab3 f383 	clz	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	3301      	adds	r3, #1
 80014f4:	069b      	lsls	r3, r3, #26
 80014f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001502:	2b00      	cmp	r3, #0
 8001504:	d109      	bne.n	800151a <HAL_ADC_ConfigChannel+0x4fe>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	0e9b      	lsrs	r3, r3, #26
 800150c:	3301      	adds	r3, #1
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	e010      	b.n	800153c <HAL_ADC_ConfigChannel+0x520>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	617b      	str	r3, [r7, #20]
  return result;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fab3 f383 	clz	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	3301      	adds	r3, #1
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	2101      	movs	r1, #1
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	ea42 0103 	orr.w	r1, r2, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10d      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x54c>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	0e9b      	lsrs	r3, r3, #26
 8001552:	3301      	adds	r3, #1
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	3b1e      	subs	r3, #30
 8001560:	051b      	lsls	r3, r3, #20
 8001562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001566:	e014      	b.n	8001592 <HAL_ADC_ConfigChannel+0x576>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	fa93 f3a3 	rbit	r3, r3
 8001574:	60fb      	str	r3, [r7, #12]
  return result;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	fab3 f383 	clz	r3, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	3301      	adds	r3, #1
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	3b1e      	subs	r3, #30
 800158c:	051b      	lsls	r3, r3, #20
 800158e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001592:	430b      	orrs	r3, r1
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	6892      	ldr	r2, [r2, #8]
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff fb16 	bl	8000bca <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <HAL_ADC_ConfigChannel+0x63c>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 808c 	beq.w	80016c4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015ac:	482b      	ldr	r0, [pc, #172]	; (800165c <HAL_ADC_ConfigChannel+0x640>)
 80015ae:	f7ff fa87 	bl	8000ac0 <LL_ADC_GetCommonPathInternalCh>
 80015b2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a29      	ldr	r2, [pc, #164]	; (8001660 <HAL_ADC_ConfigChannel+0x644>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d12b      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x5fc>
 80015c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d125      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a24      	ldr	r2, [pc, #144]	; (8001664 <HAL_ADC_ConfigChannel+0x648>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d004      	beq.n	80015e0 <HAL_ADC_ConfigChannel+0x5c4>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a23      	ldr	r2, [pc, #140]	; (8001668 <HAL_ADC_ConfigChannel+0x64c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d16e      	bne.n	80016be <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015e8:	4619      	mov	r1, r3
 80015ea:	481c      	ldr	r0, [pc, #112]	; (800165c <HAL_ADC_ConfigChannel+0x640>)
 80015ec:	f7ff fa55 	bl	8000a9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80015f0:	4b1e      	ldr	r3, [pc, #120]	; (800166c <HAL_ADC_ConfigChannel+0x650>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	099b      	lsrs	r3, r3, #6
 80015f6:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <HAL_ADC_ConfigChannel+0x654>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	099a      	lsrs	r2, r3, #6
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001608:	e002      	b.n	8001610 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3b01      	subs	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f9      	bne.n	800160a <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001616:	e052      	b.n	80016be <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a15      	ldr	r2, [pc, #84]	; (8001674 <HAL_ADC_ConfigChannel+0x658>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12a      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x65c>
 8001622:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d124      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a0c      	ldr	r2, [pc, #48]	; (8001664 <HAL_ADC_ConfigChannel+0x648>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d004      	beq.n	8001642 <HAL_ADC_ConfigChannel+0x626>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_ADC_ConfigChannel+0x64c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d13f      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001642:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164a:	4619      	mov	r1, r3
 800164c:	4803      	ldr	r0, [pc, #12]	; (800165c <HAL_ADC_ConfigChannel+0x640>)
 800164e:	f7ff fa24 	bl	8000a9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001652:	e036      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x6a6>
 8001654:	407f0000 	.word	0x407f0000
 8001658:	80080000 	.word	0x80080000
 800165c:	50040300 	.word	0x50040300
 8001660:	c7520000 	.word	0xc7520000
 8001664:	50040000 	.word	0x50040000
 8001668:	50040200 	.word	0x50040200
 800166c:	20000008 	.word	0x20000008
 8001670:	053e2d63 	.word	0x053e2d63
 8001674:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a16      	ldr	r2, [pc, #88]	; (80016d8 <HAL_ADC_ConfigChannel+0x6bc>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d120      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001682:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d11a      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <HAL_ADC_ConfigChannel+0x6c0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d115      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001698:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800169c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016a0:	4619      	mov	r1, r3
 80016a2:	480f      	ldr	r0, [pc, #60]	; (80016e0 <HAL_ADC_ConfigChannel+0x6c4>)
 80016a4:	f7ff f9f9 	bl	8000a9a <LL_ADC_SetCommonPathInternalCh>
 80016a8:	e00c      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ae:	f043 0220 	orr.w	r2, r3, #32
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80016bc:	e002      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016be:	bf00      	nop
 80016c0:	e000      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016c2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80016cc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3798      	adds	r7, #152	; 0x98
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	80000001 	.word	0x80000001
 80016dc:	50040000 	.word	0x50040000
 80016e0:	50040300 	.word	0x50040300

080016e4 <LL_ADC_IsEnabled>:
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <LL_ADC_IsEnabled+0x18>
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <LL_ADC_IsEnabled+0x1a>
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <LL_ADC_REG_IsConversionOngoing>:
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	2b04      	cmp	r3, #4
 800171c:	d101      	bne.n	8001722 <LL_ADC_REG_IsConversionOngoing+0x18>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b09f      	sub	sp, #124	; 0x7c
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800174a:	2302      	movs	r3, #2
 800174c:	e08f      	b.n	800186e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a47      	ldr	r2, [pc, #284]	; (8001878 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d102      	bne.n	8001766 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001760:	4b46      	ldr	r3, [pc, #280]	; (800187c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	e001      	b.n	800176a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10b      	bne.n	8001788 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001774:	f043 0220 	orr.w	r2, r3, #32
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e072      	b.n	800186e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ffbd 	bl	800170a <LL_ADC_REG_IsConversionOngoing>
 8001790:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ffb7 	bl	800170a <LL_ADC_REG_IsConversionOngoing>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d154      	bne.n	800184c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80017a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d151      	bne.n	800184c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80017a8:	4b35      	ldr	r3, [pc, #212]	; (8001880 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80017aa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d02c      	beq.n	800180e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80017b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6859      	ldr	r1, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017c6:	035b      	lsls	r3, r3, #13
 80017c8:	430b      	orrs	r3, r1
 80017ca:	431a      	orrs	r2, r3
 80017cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017d0:	4829      	ldr	r0, [pc, #164]	; (8001878 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80017d2:	f7ff ff87 	bl	80016e4 <LL_ADC_IsEnabled>
 80017d6:	4604      	mov	r4, r0
 80017d8:	4828      	ldr	r0, [pc, #160]	; (800187c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80017da:	f7ff ff83 	bl	80016e4 <LL_ADC_IsEnabled>
 80017de:	4603      	mov	r3, r0
 80017e0:	431c      	orrs	r4, r3
 80017e2:	4828      	ldr	r0, [pc, #160]	; (8001884 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80017e4:	f7ff ff7e 	bl	80016e4 <LL_ADC_IsEnabled>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4323      	orrs	r3, r4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d137      	bne.n	8001860 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80017f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80017f8:	f023 030f 	bic.w	r3, r3, #15
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	6811      	ldr	r1, [r2, #0]
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	6892      	ldr	r2, [r2, #8]
 8001804:	430a      	orrs	r2, r1
 8001806:	431a      	orrs	r2, r3
 8001808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800180a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800180c:	e028      	b.n	8001860 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800180e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001818:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800181a:	4817      	ldr	r0, [pc, #92]	; (8001878 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800181c:	f7ff ff62 	bl	80016e4 <LL_ADC_IsEnabled>
 8001820:	4604      	mov	r4, r0
 8001822:	4816      	ldr	r0, [pc, #88]	; (800187c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001824:	f7ff ff5e 	bl	80016e4 <LL_ADC_IsEnabled>
 8001828:	4603      	mov	r3, r0
 800182a:	431c      	orrs	r4, r3
 800182c:	4815      	ldr	r0, [pc, #84]	; (8001884 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800182e:	f7ff ff59 	bl	80016e4 <LL_ADC_IsEnabled>
 8001832:	4603      	mov	r3, r0
 8001834:	4323      	orrs	r3, r4
 8001836:	2b00      	cmp	r3, #0
 8001838:	d112      	bne.n	8001860 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800183a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001842:	f023 030f 	bic.w	r3, r3, #15
 8001846:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001848:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800184a:	e009      	b.n	8001860 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001850:	f043 0220 	orr.w	r2, r3, #32
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800185e:	e000      	b.n	8001862 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001860:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800186a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800186e:	4618      	mov	r0, r3
 8001870:	377c      	adds	r7, #124	; 0x7c
 8001872:	46bd      	mov	sp, r7
 8001874:	bd90      	pop	{r4, r7, pc}
 8001876:	bf00      	nop
 8001878:	50040000 	.word	0x50040000
 800187c:	50040100 	.word	0x50040100
 8001880:	50040300 	.word	0x50040300
 8001884:	50040200 	.word	0x50040200

08001888 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e0ed      	b.n	8001a76 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d102      	bne.n	80018ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f005 f918 	bl	8006adc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0202 	bic.w	r2, r2, #2
 80018ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018bc:	f7ff f8ac 	bl	8000a18 <HAL_GetTick>
 80018c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018c2:	e012      	b.n	80018ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018c4:	f7ff f8a8 	bl	8000a18 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b0a      	cmp	r3, #10
 80018d0:	d90b      	bls.n	80018ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2205      	movs	r2, #5
 80018e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0c5      	b.n	8001a76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1e5      	bne.n	80018c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001908:	f7ff f886 	bl	8000a18 <HAL_GetTick>
 800190c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800190e:	e012      	b.n	8001936 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001910:	f7ff f882 	bl	8000a18 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b0a      	cmp	r3, #10
 800191c:	d90b      	bls.n	8001936 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2205      	movs	r2, #5
 800192e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e09f      	b.n	8001a76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0e5      	beq.n	8001910 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7e1b      	ldrb	r3, [r3, #24]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d108      	bne.n	800195e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e007      	b.n	800196e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7e5b      	ldrb	r3, [r3, #25]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d108      	bne.n	8001988 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e007      	b.n	8001998 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001996:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7e9b      	ldrb	r3, [r3, #26]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d108      	bne.n	80019b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0220 	orr.w	r2, r2, #32
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	e007      	b.n	80019c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0220 	bic.w	r2, r2, #32
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7edb      	ldrb	r3, [r3, #27]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d108      	bne.n	80019dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0210 	bic.w	r2, r2, #16
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	e007      	b.n	80019ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0210 	orr.w	r2, r2, #16
 80019ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7f1b      	ldrb	r3, [r3, #28]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d108      	bne.n	8001a06 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0208 	orr.w	r2, r2, #8
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	e007      	b.n	8001a16 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0208 	bic.w	r2, r2, #8
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7f5b      	ldrb	r3, [r3, #29]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d108      	bne.n	8001a30 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0204 	orr.w	r2, r2, #4
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e007      	b.n	8001a40 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0204 	bic.w	r2, r2, #4
 8001a3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	ea42 0103 	orr.w	r1, r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	1e5a      	subs	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b087      	sub	sp, #28
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a94:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a96:	7cfb      	ldrb	r3, [r7, #19]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d003      	beq.n	8001aa4 <HAL_CAN_ConfigFilter+0x26>
 8001a9c:	7cfb      	ldrb	r3, [r7, #19]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	f040 80aa 	bne.w	8001bf8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aaa:	f043 0201 	orr.w	r2, r3, #1
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	2201      	movs	r2, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d123      	bne.n	8001b26 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	401a      	ands	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3248      	adds	r2, #72	; 0x48
 8001b06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b1c:	6979      	ldr	r1, [r7, #20]
 8001b1e:	3348      	adds	r3, #72	; 0x48
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	440b      	add	r3, r1
 8001b24:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d122      	bne.n	8001b74 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	431a      	orrs	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3248      	adds	r2, #72	; 0x48
 8001b54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b6a:	6979      	ldr	r1, [r7, #20]
 8001b6c:	3348      	adds	r3, #72	; 0x48
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b8e:	e007      	b.n	8001ba0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001bba:	e007      	b.n	8001bcc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d107      	bne.n	8001be4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bea:	f023 0201 	bic.w	r2, r3, #1
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e006      	b.n	8001c06 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d12e      	bne.n	8001c84 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2202      	movs	r2, #2
 8001c2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c3e:	f7fe feeb 	bl	8000a18 <HAL_GetTick>
 8001c42:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c44:	e012      	b.n	8001c6c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c46:	f7fe fee7 	bl	8000a18 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b0a      	cmp	r3, #10
 8001c52:	d90b      	bls.n	8001c6c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2205      	movs	r2, #5
 8001c64:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e012      	b.n	8001c92 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1e5      	bne.n	8001c46 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e006      	b.n	8001c92 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
  }
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <__NVIC_GetPriorityGrouping+0x18>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	f003 0307 	and.w	r3, r3, #7
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db0b      	blt.n	8001d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4907      	ldr	r1, [pc, #28]	; (8001d38 <__NVIC_EnableIRQ+0x38>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2001      	movs	r0, #1
 8001d22:	fa00 f202 	lsl.w	r2, r0, r2
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	; (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	; (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e08:	d301      	bcc.n	8001e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00f      	b.n	8001e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <SysTick_Config+0x40>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e16:	210f      	movs	r1, #15
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f7ff ff8e 	bl	8001d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <SysTick_Config+0x40>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <SysTick_Config+0x40>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff29 	bl	8001c9c <__NVIC_SetPriorityGrouping>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e64:	f7ff ff3e 	bl	8001ce4 <__NVIC_GetPriorityGrouping>
 8001e68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	6978      	ldr	r0, [r7, #20]
 8001e70:	f7ff ff8e 	bl	8001d90 <NVIC_EncodePriority>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff5d 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff31 	bl	8001d00 <__NVIC_EnableIRQ>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ffa2 	bl	8001df8 <SysTick_Config>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ece:	e17f      	b.n	80021d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8171 	beq.w	80021ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x38>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b12      	cmp	r3, #18
 8001ef6:	d123      	bne.n	8001f40 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	08da      	lsrs	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3208      	adds	r2, #8
 8001f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	08da      	lsrs	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3208      	adds	r2, #8
 8001f3a:	6939      	ldr	r1, [r7, #16]
 8001f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0203 	and.w	r2, r3, #3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d00b      	beq.n	8001f94 <HAL_GPIO_Init+0xd4>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d007      	beq.n	8001f94 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f88:	2b11      	cmp	r3, #17
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b12      	cmp	r3, #18
 8001f92:	d130      	bne.n	8001ff6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fca:	2201      	movs	r2, #1
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	f003 0201 	and.w	r2, r3, #1
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d118      	bne.n	8002034 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002008:	2201      	movs	r2, #1
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	08db      	lsrs	r3, r3, #3
 800201e:	f003 0201 	and.w	r2, r3, #1
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	2203      	movs	r2, #3
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80ac 	beq.w	80021ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002072:	4b5e      	ldr	r3, [pc, #376]	; (80021ec <HAL_GPIO_Init+0x32c>)
 8002074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002076:	4a5d      	ldr	r2, [pc, #372]	; (80021ec <HAL_GPIO_Init+0x32c>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6613      	str	r3, [r2, #96]	; 0x60
 800207e:	4b5b      	ldr	r3, [pc, #364]	; (80021ec <HAL_GPIO_Init+0x32c>)
 8002080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800208a:	4a59      	ldr	r2, [pc, #356]	; (80021f0 <HAL_GPIO_Init+0x330>)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020b4:	d025      	beq.n	8002102 <HAL_GPIO_Init+0x242>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4e      	ldr	r2, [pc, #312]	; (80021f4 <HAL_GPIO_Init+0x334>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01f      	beq.n	80020fe <HAL_GPIO_Init+0x23e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4d      	ldr	r2, [pc, #308]	; (80021f8 <HAL_GPIO_Init+0x338>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d019      	beq.n	80020fa <HAL_GPIO_Init+0x23a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4c      	ldr	r2, [pc, #304]	; (80021fc <HAL_GPIO_Init+0x33c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_GPIO_Init+0x236>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4b      	ldr	r2, [pc, #300]	; (8002200 <HAL_GPIO_Init+0x340>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00d      	beq.n	80020f2 <HAL_GPIO_Init+0x232>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4a      	ldr	r2, [pc, #296]	; (8002204 <HAL_GPIO_Init+0x344>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <HAL_GPIO_Init+0x22e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a49      	ldr	r2, [pc, #292]	; (8002208 <HAL_GPIO_Init+0x348>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_GPIO_Init+0x22a>
 80020e6:	2306      	movs	r3, #6
 80020e8:	e00c      	b.n	8002104 <HAL_GPIO_Init+0x244>
 80020ea:	2307      	movs	r3, #7
 80020ec:	e00a      	b.n	8002104 <HAL_GPIO_Init+0x244>
 80020ee:	2305      	movs	r3, #5
 80020f0:	e008      	b.n	8002104 <HAL_GPIO_Init+0x244>
 80020f2:	2304      	movs	r3, #4
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x244>
 80020f6:	2303      	movs	r3, #3
 80020f8:	e004      	b.n	8002104 <HAL_GPIO_Init+0x244>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e002      	b.n	8002104 <HAL_GPIO_Init+0x244>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_GPIO_Init+0x244>
 8002102:	2300      	movs	r3, #0
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	f002 0203 	and.w	r2, r2, #3
 800210a:	0092      	lsls	r2, r2, #2
 800210c:	4093      	lsls	r3, r2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002114:	4936      	ldr	r1, [pc, #216]	; (80021f0 <HAL_GPIO_Init+0x330>)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	3302      	adds	r3, #2
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002122:	4b3a      	ldr	r3, [pc, #232]	; (800220c <HAL_GPIO_Init+0x34c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	43db      	mvns	r3, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002146:	4a31      	ldr	r2, [pc, #196]	; (800220c <HAL_GPIO_Init+0x34c>)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800214c:	4b2f      	ldr	r3, [pc, #188]	; (800220c <HAL_GPIO_Init+0x34c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002170:	4a26      	ldr	r2, [pc, #152]	; (800220c <HAL_GPIO_Init+0x34c>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002176:	4b25      	ldr	r3, [pc, #148]	; (800220c <HAL_GPIO_Init+0x34c>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800219a:	4a1c      	ldr	r2, [pc, #112]	; (800220c <HAL_GPIO_Init+0x34c>)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HAL_GPIO_Init+0x34c>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021c4:	4a11      	ldr	r2, [pc, #68]	; (800220c <HAL_GPIO_Init+0x34c>)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	3301      	adds	r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa22 f303 	lsr.w	r3, r2, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f47f ae78 	bne.w	8001ed0 <HAL_GPIO_Init+0x10>
  }
}
 80021e0:	bf00      	nop
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010000 	.word	0x40010000
 80021f4:	48000400 	.word	0x48000400
 80021f8:	48000800 	.word	0x48000800
 80021fc:	48000c00 	.word	0x48000c00
 8002200:	48001000 	.word	0x48001000
 8002204:	48001400 	.word	0x48001400
 8002208:	48001800 	.word	0x48001800
 800220c:	40010400 	.word	0x40010400

08002210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
 800221c:	4613      	mov	r3, r2
 800221e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002220:	787b      	ldrb	r3, [r7, #1]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800222c:	e002      	b.n	8002234 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	695a      	ldr	r2, [r3, #20]
 8002250:	887b      	ldrh	r3, [r7, #2]
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002258:	887a      	ldrh	r2, [r7, #2]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800225e:	e002      	b.n	8002266 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002260:	887a      	ldrh	r2, [r7, #2]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	619a      	str	r2, [r3, #24]
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002280:	695a      	ldr	r2, [r3, #20]
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	4013      	ands	r3, r2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d006      	beq.n	8002298 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800228a:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	4618      	mov	r0, r3
 8002294:	f004 fb78 	bl	8006988 <HAL_GPIO_EXTI_Callback>
  }
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40010400 	.word	0x40010400

080022a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <HAL_PWREx_GetVoltageRange+0x18>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40007000 	.word	0x40007000

080022c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ce:	d130      	bne.n	8002332 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022d0:	4b23      	ldr	r3, [pc, #140]	; (8002360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022dc:	d038      	beq.n	8002350 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022e6:	4a1e      	ldr	r2, [pc, #120]	; (8002360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022ee:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2232      	movs	r2, #50	; 0x32
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	4a1b      	ldr	r2, [pc, #108]	; (8002368 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	0c9b      	lsrs	r3, r3, #18
 8002300:	3301      	adds	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002304:	e002      	b.n	800230c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3b01      	subs	r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800230c:	4b14      	ldr	r3, [pc, #80]	; (8002360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002318:	d102      	bne.n	8002320 <HAL_PWREx_ControlVoltageScaling+0x60>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f2      	bne.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232c:	d110      	bne.n	8002350 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e00f      	b.n	8002352 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800233a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800233e:	d007      	beq.n	8002350 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002348:	4a05      	ldr	r2, [pc, #20]	; (8002360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800234a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800234e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40007000 	.word	0x40007000
 8002364:	20000008 	.word	0x20000008
 8002368:	431bde83 	.word	0x431bde83

0800236c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e39d      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237e:	4ba4      	ldr	r3, [pc, #656]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002388:	4ba1      	ldr	r3, [pc, #644]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 80e1 	beq.w	8002562 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <HAL_RCC_OscConfig+0x4a>
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b0c      	cmp	r3, #12
 80023aa:	f040 8088 	bne.w	80024be <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	f040 8084 	bne.w	80024be <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023b6:	4b96      	ldr	r3, [pc, #600]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <HAL_RCC_OscConfig+0x62>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e375      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1a      	ldr	r2, [r3, #32]
 80023d2:	4b8f      	ldr	r3, [pc, #572]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d004      	beq.n	80023e8 <HAL_RCC_OscConfig+0x7c>
 80023de:	4b8c      	ldr	r3, [pc, #560]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e6:	e005      	b.n	80023f4 <HAL_RCC_OscConfig+0x88>
 80023e8:	4b89      	ldr	r3, [pc, #548]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80023ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d223      	bcs.n	8002440 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fd09 	bl	8002e14 <RCC_SetFlashLatencyFromMSIRange>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e356      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800240c:	4b80      	ldr	r3, [pc, #512]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a7f      	ldr	r2, [pc, #508]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 8002412:	f043 0308 	orr.w	r3, r3, #8
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b7d      	ldr	r3, [pc, #500]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	497a      	ldr	r1, [pc, #488]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800242a:	4b79      	ldr	r3, [pc, #484]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	4975      	ldr	r1, [pc, #468]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 800243a:	4313      	orrs	r3, r2
 800243c:	604b      	str	r3, [r1, #4]
 800243e:	e022      	b.n	8002486 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002440:	4b73      	ldr	r3, [pc, #460]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a72      	ldr	r2, [pc, #456]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 8002446:	f043 0308 	orr.w	r3, r3, #8
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b70      	ldr	r3, [pc, #448]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	496d      	ldr	r1, [pc, #436]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800245e:	4b6c      	ldr	r3, [pc, #432]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	4968      	ldr	r1, [pc, #416]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fccc 	bl	8002e14 <RCC_SetFlashLatencyFromMSIRange>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e319      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002486:	f000 fc03 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 800248a:	4601      	mov	r1, r0
 800248c:	4b60      	ldr	r3, [pc, #384]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	4a5f      	ldr	r2, [pc, #380]	; (8002614 <HAL_RCC_OscConfig+0x2a8>)
 8002498:	5cd3      	ldrb	r3, [r2, r3]
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	fa21 f303 	lsr.w	r3, r1, r3
 80024a2:	4a5d      	ldr	r2, [pc, #372]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024a6:	4b5d      	ldr	r3, [pc, #372]	; (800261c <HAL_RCC_OscConfig+0x2b0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fa68 	bl	8000980 <HAL_InitTick>
 80024b0:	4603      	mov	r3, r0
 80024b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d052      	beq.n	8002560 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	e2fd      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d032      	beq.n	800252c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024c6:	4b52      	ldr	r3, [pc, #328]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a51      	ldr	r2, [pc, #324]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024d2:	f7fe faa1 	bl	8000a18 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024da:	f7fe fa9d 	bl	8000a18 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e2e6      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ec:	4b48      	ldr	r3, [pc, #288]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024f8:	4b45      	ldr	r3, [pc, #276]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a44      	ldr	r2, [pc, #272]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80024fe:	f043 0308 	orr.w	r3, r3, #8
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b42      	ldr	r3, [pc, #264]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	493f      	ldr	r1, [pc, #252]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002516:	4b3e      	ldr	r3, [pc, #248]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	493a      	ldr	r1, [pc, #232]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
 800252a:	e01a      	b.n	8002562 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800252c:	4b38      	ldr	r3, [pc, #224]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a37      	ldr	r2, [pc, #220]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002538:	f7fe fa6e 	bl	8000a18 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002540:	f7fe fa6a 	bl	8000a18 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e2b3      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002552:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x1d4>
 800255e:	e000      	b.n	8002562 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002560:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d074      	beq.n	8002658 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d005      	beq.n	8002580 <HAL_RCC_OscConfig+0x214>
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2b0c      	cmp	r3, #12
 8002578:	d10e      	bne.n	8002598 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2b03      	cmp	r3, #3
 800257e:	d10b      	bne.n	8002598 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	4b23      	ldr	r3, [pc, #140]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d064      	beq.n	8002656 <HAL_RCC_OscConfig+0x2ea>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d160      	bne.n	8002656 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e290      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d106      	bne.n	80025b0 <HAL_RCC_OscConfig+0x244>
 80025a2:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a1a      	ldr	r2, [pc, #104]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e01d      	b.n	80025ec <HAL_RCC_OscConfig+0x280>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x268>
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a14      	ldr	r2, [pc, #80]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a11      	ldr	r2, [pc, #68]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0x280>
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80025da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <HAL_RCC_OscConfig+0x2a4>)
 80025e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01c      	beq.n	800262e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fa10 	bl	8000a18 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fa:	e011      	b.n	8002620 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7fe fa0c 	bl	8000a18 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d90a      	bls.n	8002620 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e255      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	080079a0 	.word	0x080079a0
 8002618:	20000008 	.word	0x20000008
 800261c:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002620:	4bae      	ldr	r3, [pc, #696]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0e7      	beq.n	80025fc <HAL_RCC_OscConfig+0x290>
 800262c:	e014      	b.n	8002658 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7fe f9f3 	bl	8000a18 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002636:	f7fe f9ef 	bl	8000a18 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b64      	cmp	r3, #100	; 0x64
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e238      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002648:	4ba4      	ldr	r3, [pc, #656]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <HAL_RCC_OscConfig+0x2ca>
 8002654:	e000      	b.n	8002658 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002656:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d060      	beq.n	8002726 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b04      	cmp	r3, #4
 8002668:	d005      	beq.n	8002676 <HAL_RCC_OscConfig+0x30a>
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b0c      	cmp	r3, #12
 800266e:	d119      	bne.n	80026a4 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d116      	bne.n	80026a4 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002676:	4b99      	ldr	r3, [pc, #612]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_RCC_OscConfig+0x322>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e215      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268e:	4b93      	ldr	r3, [pc, #588]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	061b      	lsls	r3, r3, #24
 800269c:	498f      	ldr	r1, [pc, #572]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a2:	e040      	b.n	8002726 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d023      	beq.n	80026f4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ac:	4b8b      	ldr	r3, [pc, #556]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a8a      	ldr	r2, [pc, #552]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 80026b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7fe f9ae 	bl	8000a18 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c0:	f7fe f9aa 	bl	8000a18 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e1f3      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d2:	4b82      	ldr	r3, [pc, #520]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026de:	4b7f      	ldr	r3, [pc, #508]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	061b      	lsls	r3, r3, #24
 80026ec:	497b      	ldr	r1, [pc, #492]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
 80026f2:	e018      	b.n	8002726 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f4:	4b79      	ldr	r3, [pc, #484]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a78      	ldr	r2, [pc, #480]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 80026fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe f98a 	bl	8000a18 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002708:	f7fe f986 	bl	8000a18 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e1cf      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800271a:	4b70      	ldr	r3, [pc, #448]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d03c      	beq.n	80027ac <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d01c      	beq.n	8002774 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273a:	4b68      	ldr	r3, [pc, #416]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 800273c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002740:	4a66      	ldr	r2, [pc, #408]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274a:	f7fe f965 	bl	8000a18 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002752:	f7fe f961 	bl	8000a18 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e1aa      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002764:	4b5d      	ldr	r3, [pc, #372]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 8002766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ef      	beq.n	8002752 <HAL_RCC_OscConfig+0x3e6>
 8002772:	e01b      	b.n	80027ac <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002774:	4b59      	ldr	r3, [pc, #356]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 8002776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800277a:	4a58      	ldr	r2, [pc, #352]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7fe f948 	bl	8000a18 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800278c:	f7fe f944 	bl	8000a18 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e18d      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800279e:	4b4f      	ldr	r3, [pc, #316]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 80027a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1ef      	bne.n	800278c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80a5 	beq.w	8002904 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027be:	4b47      	ldr	r3, [pc, #284]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10d      	bne.n	80027e6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	4b44      	ldr	r3, [pc, #272]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	4a43      	ldr	r2, [pc, #268]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 80027d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d4:	6593      	str	r3, [r2, #88]	; 0x58
 80027d6:	4b41      	ldr	r3, [pc, #260]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e2:	2301      	movs	r3, #1
 80027e4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e6:	4b3e      	ldr	r3, [pc, #248]	; (80028e0 <HAL_RCC_OscConfig+0x574>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d118      	bne.n	8002824 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f2:	4b3b      	ldr	r3, [pc, #236]	; (80028e0 <HAL_RCC_OscConfig+0x574>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a3a      	ldr	r2, [pc, #232]	; (80028e0 <HAL_RCC_OscConfig+0x574>)
 80027f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fe:	f7fe f90b 	bl	8000a18 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002806:	f7fe f907 	bl	8000a18 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e150      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002818:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <HAL_RCC_OscConfig+0x574>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d108      	bne.n	800283e <HAL_RCC_OscConfig+0x4d2>
 800282c:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	4a2a      	ldr	r2, [pc, #168]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800283c:	e024      	b.n	8002888 <HAL_RCC_OscConfig+0x51c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b05      	cmp	r3, #5
 8002844:	d110      	bne.n	8002868 <HAL_RCC_OscConfig+0x4fc>
 8002846:	4b25      	ldr	r3, [pc, #148]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284c:	4a23      	ldr	r2, [pc, #140]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 800284e:	f043 0304 	orr.w	r3, r3, #4
 8002852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002856:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285c:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002866:	e00f      	b.n	8002888 <HAL_RCC_OscConfig+0x51c>
 8002868:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002878:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	4a17      	ldr	r2, [pc, #92]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 8002880:	f023 0304 	bic.w	r3, r3, #4
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d016      	beq.n	80028be <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002890:	f7fe f8c2 	bl	8000a18 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002896:	e00a      	b.n	80028ae <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002898:	f7fe f8be 	bl	8000a18 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e105      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_OscConfig+0x570>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0ed      	beq.n	8002898 <HAL_RCC_OscConfig+0x52c>
 80028bc:	e019      	b.n	80028f2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028be:	f7fe f8ab 	bl	8000a18 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c4:	e00e      	b.n	80028e4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7fe f8a7 	bl	8000a18 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d905      	bls.n	80028e4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e0ee      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028e4:	4b77      	ldr	r3, [pc, #476]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1e9      	bne.n	80028c6 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f2:	7ffb      	ldrb	r3, [r7, #31]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d105      	bne.n	8002904 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f8:	4b72      	ldr	r3, [pc, #456]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	4a71      	ldr	r2, [pc, #452]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 80028fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002902:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80d5 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	2b0c      	cmp	r3, #12
 8002912:	f000 808e 	beq.w	8002a32 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	2b02      	cmp	r3, #2
 800291c:	d15b      	bne.n	80029d6 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291e:	4b69      	ldr	r3, [pc, #420]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a68      	ldr	r2, [pc, #416]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 8002924:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7fe f875 	bl	8000a18 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002932:	f7fe f871 	bl	8000a18 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e0ba      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002944:	4b5f      	ldr	r3, [pc, #380]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f0      	bne.n	8002932 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002950:	4b5c      	ldr	r3, [pc, #368]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	4b5c      	ldr	r3, [pc, #368]	; (8002ac8 <HAL_RCC_OscConfig+0x75c>)
 8002956:	4013      	ands	r3, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002960:	3a01      	subs	r2, #1
 8002962:	0112      	lsls	r2, r2, #4
 8002964:	4311      	orrs	r1, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800296a:	0212      	lsls	r2, r2, #8
 800296c:	4311      	orrs	r1, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002972:	0852      	lsrs	r2, r2, #1
 8002974:	3a01      	subs	r2, #1
 8002976:	0552      	lsls	r2, r2, #21
 8002978:	4311      	orrs	r1, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800297e:	0852      	lsrs	r2, r2, #1
 8002980:	3a01      	subs	r2, #1
 8002982:	0652      	lsls	r2, r2, #25
 8002984:	4311      	orrs	r1, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800298a:	0912      	lsrs	r2, r2, #4
 800298c:	0452      	lsls	r2, r2, #17
 800298e:	430a      	orrs	r2, r1
 8002990:	494c      	ldr	r1, [pc, #304]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 8002992:	4313      	orrs	r3, r2
 8002994:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002996:	4b4b      	ldr	r3, [pc, #300]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a4a      	ldr	r2, [pc, #296]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 800299c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029a0:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029a2:	4b48      	ldr	r3, [pc, #288]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	4a47      	ldr	r2, [pc, #284]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 80029a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ac:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7fe f833 	bl	8000a18 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b6:	f7fe f82f 	bl	8000a18 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e078      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c8:	4b3e      	ldr	r3, [pc, #248]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x64a>
 80029d4:	e070      	b.n	8002ab8 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d6:	4b3b      	ldr	r3, [pc, #236]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a3a      	ldr	r2, [pc, #232]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 80029dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029e0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80029e2:	4b38      	ldr	r3, [pc, #224]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d105      	bne.n	80029fa <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029ee:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	4a34      	ldr	r2, [pc, #208]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 80029f4:	f023 0303 	bic.w	r3, r3, #3
 80029f8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029fa:	4b32      	ldr	r3, [pc, #200]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4a31      	ldr	r2, [pc, #196]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 8002a00:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a08:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7fe f805 	bl	8000a18 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a12:	f7fe f801 	bl	8000a18 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e04a      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a24:	4b27      	ldr	r3, [pc, #156]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f0      	bne.n	8002a12 <HAL_RCC_OscConfig+0x6a6>
 8002a30:	e042      	b.n	8002ab8 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e03d      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002a3e:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <HAL_RCC_OscConfig+0x758>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f003 0203 	and.w	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d130      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d127      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d11f      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a7e:	2a07      	cmp	r2, #7
 8002a80:	bf14      	ite	ne
 8002a82:	2201      	movne	r2, #1
 8002a84:	2200      	moveq	r2, #0
 8002a86:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d113      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	085b      	lsrs	r3, r3, #1
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d109      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	085b      	lsrs	r3, r3, #1
 8002aac:	3b01      	subs	r3, #1
 8002aae:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3720      	adds	r7, #32
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	f99d808c 	.word	0xf99d808c

08002acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0c8      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b66      	ldr	r3, [pc, #408]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d910      	bls.n	8002b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b63      	ldr	r3, [pc, #396]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 0207 	bic.w	r2, r3, #7
 8002af6:	4961      	ldr	r1, [pc, #388]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b5f      	ldr	r3, [pc, #380]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0b0      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d04c      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b24:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d121      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e09e      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b3c:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d115      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e092      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b54:	4b4a      	ldr	r3, [pc, #296]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e086      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b64:	4b46      	ldr	r3, [pc, #280]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e07e      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b74:	4b42      	ldr	r3, [pc, #264]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 0203 	bic.w	r2, r3, #3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	493f      	ldr	r1, [pc, #252]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b86:	f7fd ff47 	bl	8000a18 <HAL_GetTick>
 8002b8a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8e:	f7fd ff43 	bl	8000a18 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e066      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba4:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 020c 	and.w	r2, r3, #12
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d1eb      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc2:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	492c      	ldr	r1, [pc, #176]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b29      	ldr	r3, [pc, #164]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d210      	bcs.n	8002c04 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 0207 	bic.w	r2, r3, #7
 8002bea:	4924      	ldr	r1, [pc, #144]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e036      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4918      	ldr	r1, [pc, #96]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c2e:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4910      	ldr	r1, [pc, #64]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c42:	f000 f825 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8002c46:	4601      	mov	r1, r0
 8002c48:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	4a0c      	ldr	r2, [pc, #48]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	5cd3      	ldrb	r3, [r2, r3]
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd fe8a 	bl	8000980 <HAL_InitTick>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c70:	7afb      	ldrb	r3, [r7, #11]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40022000 	.word	0x40022000
 8002c80:	40021000 	.word	0x40021000
 8002c84:	080079a0 	.word	0x080079a0
 8002c88:	20000008 	.word	0x20000008
 8002c8c:	20000000 	.word	0x20000000

08002c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b089      	sub	sp, #36	; 0x24
 8002c94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9e:	4b3d      	ldr	r3, [pc, #244]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca8:	4b3a      	ldr	r3, [pc, #232]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	d121      	bne.n	8002d02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d11e      	bne.n	8002d02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cc4:	4b33      	ldr	r3, [pc, #204]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cd0:	4b30      	ldr	r3, [pc, #192]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd6:	0a1b      	lsrs	r3, r3, #8
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	e005      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cec:	4a2a      	ldr	r2, [pc, #168]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10d      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d00:	e00a      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d102      	bne.n	8002d0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d08:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d0a:	61bb      	str	r3, [r7, #24]
 8002d0c:	e004      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d14:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b0c      	cmp	r3, #12
 8002d1c:	d133      	bne.n	8002d86 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d1e:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d002      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0xa4>
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d003      	beq.n	8002d3a <HAL_RCC_GetSysClockFreq+0xaa>
 8002d32:	e005      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d34:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d36:	617b      	str	r3, [r7, #20]
      break;
 8002d38:	e005      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d3a:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d3c:	617b      	str	r3, [r7, #20]
      break;
 8002d3e:	e002      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	617b      	str	r3, [r7, #20]
      break;
 8002d44:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d46:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	3301      	adds	r3, #1
 8002d52:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	fb02 f203 	mul.w	r2, r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0e5b      	lsrs	r3, r3, #25
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	3301      	adds	r3, #1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d86:	69bb      	ldr	r3, [r7, #24]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3724      	adds	r7, #36	; 0x24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40021000 	.word	0x40021000
 8002d98:	080079b8 	.word	0x080079b8
 8002d9c:	00f42400 	.word	0x00f42400
 8002da0:	007a1200 	.word	0x007a1200

08002da4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002daa:	681b      	ldr	r3, [r3, #0]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000008 	.word	0x20000008

08002dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dc0:	f7ff fff0 	bl	8002da4 <HAL_RCC_GetHCLKFreq>
 8002dc4:	4601      	mov	r1, r0
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dd2:	5cd3      	ldrb	r3, [r2, r3]
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	080079b0 	.word	0x080079b0

08002de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dec:	f7ff ffda 	bl	8002da4 <HAL_RCC_GetHCLKFreq>
 8002df0:	4601      	mov	r1, r0
 8002df2:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0adb      	lsrs	r3, r3, #11
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dfe:	5cd3      	ldrb	r3, [r2, r3]
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	080079b0 	.word	0x080079b0

08002e14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e20:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e2c:	f7ff fa3a 	bl	80022a4 <HAL_PWREx_GetVoltageRange>
 8002e30:	6178      	str	r0, [r7, #20]
 8002e32:	e014      	b.n	8002e5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e34:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	4a24      	ldr	r2, [pc, #144]	; (8002ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e40:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e4c:	f7ff fa2a 	bl	80022a4 <HAL_PWREx_GetVoltageRange>
 8002e50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e52:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e56:	4a1d      	ldr	r2, [pc, #116]	; (8002ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e64:	d10b      	bne.n	8002e7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b80      	cmp	r3, #128	; 0x80
 8002e6a:	d919      	bls.n	8002ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2ba0      	cmp	r3, #160	; 0xa0
 8002e70:	d902      	bls.n	8002e78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e72:	2302      	movs	r3, #2
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	e013      	b.n	8002ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e78:	2301      	movs	r3, #1
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	e010      	b.n	8002ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b80      	cmp	r3, #128	; 0x80
 8002e82:	d902      	bls.n	8002e8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e84:	2303      	movs	r3, #3
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	e00a      	b.n	8002ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b80      	cmp	r3, #128	; 0x80
 8002e8e:	d102      	bne.n	8002e96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e90:	2302      	movs	r3, #2
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	e004      	b.n	8002ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b70      	cmp	r3, #112	; 0x70
 8002e9a:	d101      	bne.n	8002ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 0207 	bic.w	r2, r3, #7
 8002ea8:	4909      	ldr	r1, [pc, #36]	; (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002eb0:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d001      	beq.n	8002ec2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40022000 	.word	0x40022000

08002ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002edc:	2300      	movs	r3, #0
 8002ede:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d03f      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef8:	d01c      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002efe:	d802      	bhi.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00e      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002f04:	e01f      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002f06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f0a:	d003      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002f0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f10:	d01c      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002f12:	e018      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f14:	4b85      	ldr	r3, [pc, #532]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4a84      	ldr	r2, [pc, #528]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f20:	e015      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3304      	adds	r3, #4
 8002f26:	2100      	movs	r1, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fab9 	bl	80034a0 <RCCEx_PLLSAI1_Config>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f32:	e00c      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3320      	adds	r3, #32
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fba0 	bl	8003680 <RCCEx_PLLSAI2_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f44:	e003      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	74fb      	strb	r3, [r7, #19]
      break;
 8002f4a:	e000      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10b      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f54:	4b75      	ldr	r3, [pc, #468]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f62:	4972      	ldr	r1, [pc, #456]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f6a:	e001      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d03f      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f84:	d01c      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f8a:	d802      	bhi.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00e      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002f90:	e01f      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f96:	d003      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002f98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f9c:	d01c      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002f9e:	e018      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fa0:	4b62      	ldr	r3, [pc, #392]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4a61      	ldr	r2, [pc, #388]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002faa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fac:	e015      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fa73 	bl	80034a0 <RCCEx_PLLSAI1_Config>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fbe:	e00c      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3320      	adds	r3, #32
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fb5a 	bl	8003680 <RCCEx_PLLSAI2_Config>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fd0:	e003      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	74fb      	strb	r3, [r7, #19]
      break;
 8002fd6:	e000      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fda:	7cfb      	ldrb	r3, [r7, #19]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10b      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fe0:	4b52      	ldr	r3, [pc, #328]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fee:	494f      	ldr	r1, [pc, #316]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ff6:	e001      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff8:	7cfb      	ldrb	r3, [r7, #19]
 8002ffa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80a0 	beq.w	800314a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800300a:	2300      	movs	r3, #0
 800300c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800300e:	4b47      	ldr	r3, [pc, #284]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800301e:	2300      	movs	r3, #0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00d      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003024:	4b41      	ldr	r3, [pc, #260]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	4a40      	ldr	r2, [pc, #256]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800302a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302e:	6593      	str	r3, [r2, #88]	; 0x58
 8003030:	4b3e      	ldr	r3, [pc, #248]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800303c:	2301      	movs	r3, #1
 800303e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003040:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a3a      	ldr	r2, [pc, #232]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800304c:	f7fd fce4 	bl	8000a18 <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003052:	e009      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003054:	f7fd fce0 	bl	8000a18 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d902      	bls.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	74fb      	strb	r3, [r7, #19]
        break;
 8003066:	e005      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003068:	4b31      	ldr	r3, [pc, #196]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0ef      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d15c      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800307a:	4b2c      	ldr	r3, [pc, #176]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003084:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01f      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	429a      	cmp	r2, r3
 8003096:	d019      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003098:	4b24      	ldr	r3, [pc, #144]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030a4:	4b21      	ldr	r3, [pc, #132]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	4a20      	ldr	r2, [pc, #128]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	4a1c      	ldr	r2, [pc, #112]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030c4:	4a19      	ldr	r2, [pc, #100]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d016      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d6:	f7fd fc9f 	bl	8000a18 <HAL_GetTick>
 80030da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030dc:	e00b      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7fd fc9b 	bl	8000a18 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d902      	bls.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	74fb      	strb	r3, [r7, #19]
            break;
 80030f4:	e006      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0ec      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10c      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800310a:	4b08      	ldr	r3, [pc, #32]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800310c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800311a:	4904      	ldr	r1, [pc, #16]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003122:	e009      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003124:	7cfb      	ldrb	r3, [r7, #19]
 8003126:	74bb      	strb	r3, [r7, #18]
 8003128:	e006      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003138:	7c7b      	ldrb	r3, [r7, #17]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d105      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800313e:	4b9e      	ldr	r3, [pc, #632]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	4a9d      	ldr	r2, [pc, #628]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003148:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003156:	4b98      	ldr	r3, [pc, #608]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315c:	f023 0203 	bic.w	r2, r3, #3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	4994      	ldr	r1, [pc, #592]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003178:	4b8f      	ldr	r3, [pc, #572]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	f023 020c 	bic.w	r2, r3, #12
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003186:	498c      	ldr	r1, [pc, #560]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800319a:	4b87      	ldr	r3, [pc, #540]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	4983      	ldr	r1, [pc, #524]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031bc:	4b7e      	ldr	r3, [pc, #504]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	497b      	ldr	r1, [pc, #492]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031de:	4b76      	ldr	r3, [pc, #472]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ec:	4972      	ldr	r1, [pc, #456]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003200:	4b6d      	ldr	r3, [pc, #436]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320e:	496a      	ldr	r1, [pc, #424]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003222:	4b65      	ldr	r3, [pc, #404]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003230:	4961      	ldr	r1, [pc, #388]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003244:	4b5c      	ldr	r3, [pc, #368]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003252:	4959      	ldr	r1, [pc, #356]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003266:	4b54      	ldr	r3, [pc, #336]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003274:	4950      	ldr	r1, [pc, #320]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003288:	4b4b      	ldr	r3, [pc, #300]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003296:	4948      	ldr	r1, [pc, #288]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032aa:	4b43      	ldr	r3, [pc, #268]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	493f      	ldr	r1, [pc, #252]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d028      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032cc:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032da:	4937      	ldr	r1, [pc, #220]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ea:	d106      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032ec:	4b32      	ldr	r3, [pc, #200]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4a31      	ldr	r2, [pc, #196]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032f6:	60d3      	str	r3, [r2, #12]
 80032f8:	e011      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003302:	d10c      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3304      	adds	r3, #4
 8003308:	2101      	movs	r1, #1
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f8c8 	bl	80034a0 <RCCEx_PLLSAI1_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800331a:	7cfb      	ldrb	r3, [r7, #19]
 800331c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d028      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800332a:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003330:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	491f      	ldr	r1, [pc, #124]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003348:	d106      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800334a:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	4a1a      	ldr	r2, [pc, #104]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003354:	60d3      	str	r3, [r2, #12]
 8003356:	e011      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003360:	d10c      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	2101      	movs	r1, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f899 	bl	80034a0 <RCCEx_PLLSAI1_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d02b      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003396:	4908      	ldr	r1, [pc, #32]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033a6:	d109      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4a02      	ldr	r2, [pc, #8]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033b2:	60d3      	str	r3, [r2, #12]
 80033b4:	e014      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3304      	adds	r3, #4
 80033ca:	2101      	movs	r1, #1
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f867 	bl	80034a0 <RCCEx_PLLSAI1_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d02f      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033ec:	4b2b      	ldr	r3, [pc, #172]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033fa:	4928      	ldr	r1, [pc, #160]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800340a:	d10d      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	2102      	movs	r1, #2
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f844 	bl	80034a0 <RCCEx_PLLSAI1_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d014      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	74bb      	strb	r3, [r7, #18]
 8003426:	e011      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800342c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003430:	d10c      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3320      	adds	r3, #32
 8003436:	2102      	movs	r1, #2
 8003438:	4618      	mov	r0, r3
 800343a:	f000 f921 	bl	8003680 <RCCEx_PLLSAI2_Config>
 800343e:	4603      	mov	r3, r0
 8003440:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003442:	7cfb      	ldrb	r3, [r7, #19]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003448:	7cfb      	ldrb	r3, [r7, #19]
 800344a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003458:	4b10      	ldr	r3, [pc, #64]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003466:	490d      	ldr	r1, [pc, #52]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00b      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003480:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800348a:	4904      	ldr	r1, [pc, #16]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003492:	7cbb      	ldrb	r3, [r7, #18]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000

080034a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034ae:	4b73      	ldr	r3, [pc, #460]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d018      	beq.n	80034ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034ba:	4b70      	ldr	r3, [pc, #448]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f003 0203 	and.w	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d10d      	bne.n	80034e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
       ||
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034d2:	4b6a      	ldr	r3, [pc, #424]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	091b      	lsrs	r3, r3, #4
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
       ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d044      	beq.n	8003570 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
 80034ea:	e041      	b.n	8003570 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d00c      	beq.n	800350e <RCCEx_PLLSAI1_Config+0x6e>
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d013      	beq.n	8003520 <RCCEx_PLLSAI1_Config+0x80>
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d120      	bne.n	800353e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034fc:	4b5f      	ldr	r3, [pc, #380]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d11d      	bne.n	8003544 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350c:	e01a      	b.n	8003544 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800350e:	4b5b      	ldr	r3, [pc, #364]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003516:	2b00      	cmp	r3, #0
 8003518:	d116      	bne.n	8003548 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800351e:	e013      	b.n	8003548 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003520:	4b56      	ldr	r3, [pc, #344]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10f      	bne.n	800354c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800352c:	4b53      	ldr	r3, [pc, #332]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800353c:	e006      	b.n	800354c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	73fb      	strb	r3, [r7, #15]
      break;
 8003542:	e004      	b.n	800354e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003544:	bf00      	nop
 8003546:	e002      	b.n	800354e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003548:	bf00      	nop
 800354a:	e000      	b.n	800354e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800354c:	bf00      	nop
    }

    if(status == HAL_OK)
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10d      	bne.n	8003570 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003554:	4b49      	ldr	r3, [pc, #292]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6819      	ldr	r1, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	3b01      	subs	r3, #1
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	430b      	orrs	r3, r1
 800356a:	4944      	ldr	r1, [pc, #272]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 800356c:	4313      	orrs	r3, r2
 800356e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d17d      	bne.n	8003672 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003576:	4b41      	ldr	r3, [pc, #260]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a40      	ldr	r2, [pc, #256]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 800357c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003582:	f7fd fa49 	bl	8000a18 <HAL_GetTick>
 8003586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003588:	e009      	b.n	800359e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800358a:	f7fd fa45 	bl	8000a18 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d902      	bls.n	800359e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	73fb      	strb	r3, [r7, #15]
        break;
 800359c:	e005      	b.n	80035aa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800359e:	4b37      	ldr	r3, [pc, #220]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1ef      	bne.n	800358a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d160      	bne.n	8003672 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d111      	bne.n	80035da <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035b6:	4b31      	ldr	r3, [pc, #196]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6892      	ldr	r2, [r2, #8]
 80035c6:	0211      	lsls	r1, r2, #8
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	68d2      	ldr	r2, [r2, #12]
 80035cc:	0912      	lsrs	r2, r2, #4
 80035ce:	0452      	lsls	r2, r2, #17
 80035d0:	430a      	orrs	r2, r1
 80035d2:	492a      	ldr	r1, [pc, #168]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	610b      	str	r3, [r1, #16]
 80035d8:	e027      	b.n	800362a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d112      	bne.n	8003606 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035e0:	4b26      	ldr	r3, [pc, #152]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6892      	ldr	r2, [r2, #8]
 80035f0:	0211      	lsls	r1, r2, #8
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6912      	ldr	r2, [r2, #16]
 80035f6:	0852      	lsrs	r2, r2, #1
 80035f8:	3a01      	subs	r2, #1
 80035fa:	0552      	lsls	r2, r2, #21
 80035fc:	430a      	orrs	r2, r1
 80035fe:	491f      	ldr	r1, [pc, #124]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003600:	4313      	orrs	r3, r2
 8003602:	610b      	str	r3, [r1, #16]
 8003604:	e011      	b.n	800362a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003606:	4b1d      	ldr	r3, [pc, #116]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800360e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6892      	ldr	r2, [r2, #8]
 8003616:	0211      	lsls	r1, r2, #8
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6952      	ldr	r2, [r2, #20]
 800361c:	0852      	lsrs	r2, r2, #1
 800361e:	3a01      	subs	r2, #1
 8003620:	0652      	lsls	r2, r2, #25
 8003622:	430a      	orrs	r2, r1
 8003624:	4915      	ldr	r1, [pc, #84]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800362a:	4b14      	ldr	r3, [pc, #80]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a13      	ldr	r2, [pc, #76]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003630:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003634:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003636:	f7fd f9ef 	bl	8000a18 <HAL_GetTick>
 800363a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800363c:	e009      	b.n	8003652 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800363e:	f7fd f9eb 	bl	8000a18 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d902      	bls.n	8003652 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	73fb      	strb	r3, [r7, #15]
          break;
 8003650:	e005      	b.n	800365e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0ef      	beq.n	800363e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d106      	bne.n	8003672 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	4903      	ldr	r1, [pc, #12]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 800366e:	4313      	orrs	r3, r2
 8003670:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003672:	7bfb      	ldrb	r3, [r7, #15]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000

08003680 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800368e:	4b68      	ldr	r3, [pc, #416]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d018      	beq.n	80036cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800369a:	4b65      	ldr	r3, [pc, #404]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0203 	and.w	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d10d      	bne.n	80036c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
       ||
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036b2:	4b5f      	ldr	r3, [pc, #380]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	091b      	lsrs	r3, r3, #4
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
       ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d044      	beq.n	8003750 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
 80036ca:	e041      	b.n	8003750 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d00c      	beq.n	80036ee <RCCEx_PLLSAI2_Config+0x6e>
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d013      	beq.n	8003700 <RCCEx_PLLSAI2_Config+0x80>
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d120      	bne.n	800371e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036dc:	4b54      	ldr	r3, [pc, #336]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d11d      	bne.n	8003724 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ec:	e01a      	b.n	8003724 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036ee:	4b50      	ldr	r3, [pc, #320]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d116      	bne.n	8003728 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fe:	e013      	b.n	8003728 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003700:	4b4b      	ldr	r3, [pc, #300]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10f      	bne.n	800372c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800370c:	4b48      	ldr	r3, [pc, #288]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d109      	bne.n	800372c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800371c:	e006      	b.n	800372c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
      break;
 8003722:	e004      	b.n	800372e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003724:	bf00      	nop
 8003726:	e002      	b.n	800372e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003728:	bf00      	nop
 800372a:	e000      	b.n	800372e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800372c:	bf00      	nop
    }

    if(status == HAL_OK)
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10d      	bne.n	8003750 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003734:	4b3e      	ldr	r3, [pc, #248]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6819      	ldr	r1, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	3b01      	subs	r3, #1
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	430b      	orrs	r3, r1
 800374a:	4939      	ldr	r1, [pc, #228]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 800374c:	4313      	orrs	r3, r2
 800374e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d167      	bne.n	8003826 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003756:	4b36      	ldr	r3, [pc, #216]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a35      	ldr	r2, [pc, #212]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 800375c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003762:	f7fd f959 	bl	8000a18 <HAL_GetTick>
 8003766:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003768:	e009      	b.n	800377e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800376a:	f7fd f955 	bl	8000a18 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d902      	bls.n	800377e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	73fb      	strb	r3, [r7, #15]
        break;
 800377c:	e005      	b.n	800378a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800377e:	4b2c      	ldr	r3, [pc, #176]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1ef      	bne.n	800376a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d14a      	bne.n	8003826 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d111      	bne.n	80037ba <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003796:	4b26      	ldr	r3, [pc, #152]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800379e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6892      	ldr	r2, [r2, #8]
 80037a6:	0211      	lsls	r1, r2, #8
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	68d2      	ldr	r2, [r2, #12]
 80037ac:	0912      	lsrs	r2, r2, #4
 80037ae:	0452      	lsls	r2, r2, #17
 80037b0:	430a      	orrs	r2, r1
 80037b2:	491f      	ldr	r1, [pc, #124]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	614b      	str	r3, [r1, #20]
 80037b8:	e011      	b.n	80037de <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037ba:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6892      	ldr	r2, [r2, #8]
 80037ca:	0211      	lsls	r1, r2, #8
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6912      	ldr	r2, [r2, #16]
 80037d0:	0852      	lsrs	r2, r2, #1
 80037d2:	3a01      	subs	r2, #1
 80037d4:	0652      	lsls	r2, r2, #25
 80037d6:	430a      	orrs	r2, r1
 80037d8:	4915      	ldr	r1, [pc, #84]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037de:	4b14      	ldr	r3, [pc, #80]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a13      	ldr	r2, [pc, #76]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ea:	f7fd f915 	bl	8000a18 <HAL_GetTick>
 80037ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037f0:	e009      	b.n	8003806 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037f2:	f7fd f911 	bl	8000a18 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d902      	bls.n	8003806 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	73fb      	strb	r3, [r7, #15]
          break;
 8003804:	e005      	b.n	8003812 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0ef      	beq.n	80037f2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d106      	bne.n	8003826 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	4903      	ldr	r1, [pc, #12]	; (8003830 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003822:	4313      	orrs	r3, r2
 8003824:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003826:	7bfb      	ldrb	r3, [r7, #15]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40021000 	.word	0x40021000

08003834 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e07c      	b.n	8003940 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d106      	bne.n	8003866 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f003 f97f 	bl	8006b64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800387c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003886:	d902      	bls.n	800388e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e002      	b.n	8003894 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800388e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003892:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800389c:	d007      	beq.n	80038ae <HAL_SPI_Init+0x7a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038a6:	d002      	beq.n	80038ae <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038be:	d903      	bls.n	80038c8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
 80038c6:	e002      	b.n	80038ce <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	ea42 0103 	orr.w	r1, r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	f003 0204 	and.w	r2, r3, #4
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	ea42 0103 	orr.w	r1, r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	4613      	mov	r3, r2
 8003956:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_SPI_Transmit+0x22>
 8003966:	2302      	movs	r3, #2
 8003968:	e150      	b.n	8003c0c <HAL_SPI_Transmit+0x2c4>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003972:	f7fd f851 	bl	8000a18 <HAL_GetTick>
 8003976:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d002      	beq.n	800398e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003988:	2302      	movs	r3, #2
 800398a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800398c:	e135      	b.n	8003bfa <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <HAL_SPI_Transmit+0x52>
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800399e:	e12c      	b.n	8003bfa <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2203      	movs	r2, #3
 80039a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	88fa      	ldrh	r2, [r7, #6]
 80039b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	88fa      	ldrh	r2, [r7, #6]
 80039be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ea:	d107      	bne.n	80039fc <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	d007      	beq.n	8003a1a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a22:	d94b      	bls.n	8003abc <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_SPI_Transmit+0xea>
 8003a2c:	8afb      	ldrh	r3, [r7, #22]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d13e      	bne.n	8003ab0 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	881a      	ldrh	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	1c9a      	adds	r2, r3, #2
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a56:	e02b      	b.n	8003ab0 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d112      	bne.n	8003a8c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	1c9a      	adds	r2, r3, #2
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a8a:	e011      	b.n	8003ab0 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a8c:	f7fc ffc4 	bl	8000a18 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d803      	bhi.n	8003aa4 <HAL_SPI_Transmit+0x15c>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa2:	d102      	bne.n	8003aaa <HAL_SPI_Transmit+0x162>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003aae:	e0a4      	b.n	8003bfa <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1ce      	bne.n	8003a58 <HAL_SPI_Transmit+0x110>
 8003aba:	e07c      	b.n	8003bb6 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_SPI_Transmit+0x182>
 8003ac4:	8afb      	ldrh	r3, [r7, #22]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d170      	bne.n	8003bac <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d912      	bls.n	8003afa <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	881a      	ldrh	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	1c9a      	adds	r2, r3, #2
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b02      	subs	r3, #2
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003af8:	e058      	b.n	8003bac <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	330c      	adds	r3, #12
 8003b04:	7812      	ldrb	r2, [r2, #0]
 8003b06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003b20:	e044      	b.n	8003bac <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d12b      	bne.n	8003b88 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d912      	bls.n	8003b60 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	881a      	ldrh	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	1c9a      	adds	r2, r3, #2
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b02      	subs	r3, #2
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b5e:	e025      	b.n	8003bac <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	7812      	ldrb	r2, [r2, #0]
 8003b6c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b86:	e011      	b.n	8003bac <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b88:	f7fc ff46 	bl	8000a18 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d803      	bhi.n	8003ba0 <HAL_SPI_Transmit+0x258>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9e:	d102      	bne.n	8003ba6 <HAL_SPI_Transmit+0x25e>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003baa:	e026      	b.n	8003bfa <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1b5      	bne.n	8003b22 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	6839      	ldr	r1, [r7, #0]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fc94 	bl	80044e8 <SPI_EndRxTxTransaction>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	77fb      	strb	r3, [r7, #31]
 8003bf6:	e000      	b.n	8003bfa <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003bf8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	4613      	mov	r3, r2
 8003c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c30:	d112      	bne.n	8003c58 <HAL_SPI_Receive+0x44>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10e      	bne.n	8003c58 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c42:	88fa      	ldrh	r2, [r7, #6]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f908 	bl	8003e64 <HAL_SPI_TransmitReceive>
 8003c54:	4603      	mov	r3, r0
 8003c56:	e101      	b.n	8003e5c <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_SPI_Receive+0x52>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e0fa      	b.n	8003e5c <HAL_SPI_Receive+0x248>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c6e:	f7fc fed3 	bl	8000a18 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d002      	beq.n	8003c86 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c80:	2302      	movs	r3, #2
 8003c82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c84:	e0e1      	b.n	8003e4a <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <HAL_SPI_Receive+0x7e>
 8003c8c:	88fb      	ldrh	r3, [r7, #6]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c96:	e0d8      	b.n	8003e4a <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2204      	movs	r2, #4
 8003c9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	88fa      	ldrh	r2, [r7, #6]
 8003cb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	88fa      	ldrh	r2, [r7, #6]
 8003cb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ce2:	d908      	bls.n	8003cf6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cf2:	605a      	str	r2, [r3, #4]
 8003cf4:	e007      	b.n	8003d06 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d04:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0e:	d107      	bne.n	8003d20 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d1e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2a:	2b40      	cmp	r3, #64	; 0x40
 8003d2c:	d007      	beq.n	8003d3e <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d3c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d46:	d867      	bhi.n	8003e18 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d48:	e030      	b.n	8003dac <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d117      	bne.n	8003d88 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f103 020c 	add.w	r2, r3, #12
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	7812      	ldrb	r2, [r2, #0]
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003d86:	e011      	b.n	8003dac <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d88:	f7fc fe46 	bl	8000a18 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d803      	bhi.n	8003da0 <HAL_SPI_Receive+0x18c>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9e:	d102      	bne.n	8003da6 <HAL_SPI_Receive+0x192>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003daa:	e04e      	b.n	8003e4a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1c8      	bne.n	8003d4a <HAL_SPI_Receive+0x136>
 8003db8:	e034      	b.n	8003e24 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d115      	bne.n	8003df4 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	1c9a      	adds	r2, r3, #2
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003df2:	e011      	b.n	8003e18 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003df4:	f7fc fe10 	bl	8000a18 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d803      	bhi.n	8003e0c <HAL_SPI_Receive+0x1f8>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0a:	d102      	bne.n	8003e12 <HAL_SPI_Receive+0x1fe>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e16:	e018      	b.n	8003e4a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1ca      	bne.n	8003dba <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	6839      	ldr	r1, [r7, #0]
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 fb05 	bl	8004438 <SPI_EndRxTransaction>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	75fb      	strb	r3, [r7, #23]
 8003e46:	e000      	b.n	8003e4a <HAL_SPI_Receive+0x236>
  }

error :
 8003e48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	; 0x28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e72:	2301      	movs	r3, #1
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_SPI_TransmitReceive+0x26>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e1fb      	b.n	8004282 <HAL_SPI_TransmitReceive+0x41e>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e92:	f7fc fdc1 	bl	8000a18 <HAL_GetTick>
 8003e96:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e9e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003ea6:	887b      	ldrh	r3, [r7, #2]
 8003ea8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003eaa:	887b      	ldrh	r3, [r7, #2]
 8003eac:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003eae:	7efb      	ldrb	r3, [r7, #27]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_SPI_TransmitReceive+0x6e>
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eba:	d106      	bne.n	8003eca <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d102      	bne.n	8003eca <HAL_SPI_TransmitReceive+0x66>
 8003ec4:	7efb      	ldrb	r3, [r7, #27]
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d003      	beq.n	8003ed2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ed0:	e1cd      	b.n	800426e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_SPI_TransmitReceive+0x80>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_SPI_TransmitReceive+0x80>
 8003ede:	887b      	ldrh	r3, [r7, #2]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d103      	bne.n	8003eec <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003eea:	e1c0      	b.n	800426e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d003      	beq.n	8003f00 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2205      	movs	r2, #5
 8003efc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	887a      	ldrh	r2, [r7, #2]
 8003f10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	887a      	ldrh	r2, [r7, #2]
 8003f26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	887a      	ldrh	r2, [r7, #2]
 8003f2c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f42:	d802      	bhi.n	8003f4a <HAL_SPI_TransmitReceive+0xe6>
 8003f44:	8a3b      	ldrh	r3, [r7, #16]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d908      	bls.n	8003f5c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	e007      	b.n	8003f6c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f6a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f76:	2b40      	cmp	r3, #64	; 0x40
 8003f78:	d007      	beq.n	8003f8a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f92:	d97c      	bls.n	800408e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_SPI_TransmitReceive+0x13e>
 8003f9c:	8a7b      	ldrh	r3, [r7, #18]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d169      	bne.n	8004076 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	881a      	ldrh	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	1c9a      	adds	r2, r3, #2
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fc6:	e056      	b.n	8004076 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d11b      	bne.n	800400e <HAL_SPI_TransmitReceive+0x1aa>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d016      	beq.n	800400e <HAL_SPI_TransmitReceive+0x1aa>
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d113      	bne.n	800400e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fea:	881a      	ldrh	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	1c9a      	adds	r2, r3, #2
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b01      	cmp	r3, #1
 800401a:	d11c      	bne.n	8004056 <HAL_SPI_TransmitReceive+0x1f2>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d016      	beq.n	8004056 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	b292      	uxth	r2, r2
 8004034:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	1c9a      	adds	r2, r3, #2
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004052:	2301      	movs	r3, #1
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004056:	f7fc fcdf 	bl	8000a18 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004062:	429a      	cmp	r2, r3
 8004064:	d807      	bhi.n	8004076 <HAL_SPI_TransmitReceive+0x212>
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406c:	d003      	beq.n	8004076 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004074:	e0fb      	b.n	800426e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1a3      	bne.n	8003fc8 <HAL_SPI_TransmitReceive+0x164>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d19d      	bne.n	8003fc8 <HAL_SPI_TransmitReceive+0x164>
 800408c:	e0df      	b.n	800424e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_SPI_TransmitReceive+0x23a>
 8004096:	8a7b      	ldrh	r3, [r7, #18]
 8004098:	2b01      	cmp	r3, #1
 800409a:	f040 80cb 	bne.w	8004234 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d912      	bls.n	80040ce <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ac:	881a      	ldrh	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	1c9a      	adds	r2, r3, #2
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b02      	subs	r3, #2
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040cc:	e0b2      	b.n	8004234 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	330c      	adds	r3, #12
 80040d8:	7812      	ldrb	r2, [r2, #0]
 80040da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f4:	e09e      	b.n	8004234 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b02      	cmp	r3, #2
 8004102:	d134      	bne.n	800416e <HAL_SPI_TransmitReceive+0x30a>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d02f      	beq.n	800416e <HAL_SPI_TransmitReceive+0x30a>
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	2b01      	cmp	r3, #1
 8004112:	d12c      	bne.n	800416e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b01      	cmp	r3, #1
 800411c:	d912      	bls.n	8004144 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	881a      	ldrh	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	1c9a      	adds	r2, r3, #2
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b02      	subs	r3, #2
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004142:	e012      	b.n	800416a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	7812      	ldrb	r2, [r2, #0]
 8004150:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b01      	cmp	r3, #1
 800417a:	d148      	bne.n	800420e <HAL_SPI_TransmitReceive+0x3aa>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d042      	beq.n	800420e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	d923      	bls.n	80041dc <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	b292      	uxth	r2, r2
 80041a0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	1c9a      	adds	r2, r3, #2
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b02      	subs	r3, #2
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d81f      	bhi.n	800420a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	e016      	b.n	800420a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f103 020c 	add.w	r2, r3, #12
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	7812      	ldrb	r2, [r2, #0]
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800420a:	2301      	movs	r3, #1
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800420e:	f7fc fc03 	bl	8000a18 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800421a:	429a      	cmp	r2, r3
 800421c:	d803      	bhi.n	8004226 <HAL_SPI_TransmitReceive+0x3c2>
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004224:	d102      	bne.n	800422c <HAL_SPI_TransmitReceive+0x3c8>
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	2b00      	cmp	r3, #0
 800422a:	d103      	bne.n	8004234 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004232:	e01c      	b.n	800426e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	f47f af5b 	bne.w	80040f6 <HAL_SPI_TransmitReceive+0x292>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	f47f af54 	bne.w	80040f6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f948 	bl	80044e8 <SPI_EndRxTxTransaction>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d006      	beq.n	800426c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	661a      	str	r2, [r3, #96]	; 0x60
 800426a:	e000      	b.n	800426e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800426c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800427e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004282:	4618      	mov	r0, r3
 8004284:	3728      	adds	r7, #40	; 0x28
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	603b      	str	r3, [r7, #0]
 8004296:	4613      	mov	r3, r2
 8004298:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800429a:	e04c      	b.n	8004336 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d048      	beq.n	8004336 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80042a4:	f7fc fbb8 	bl	8000a18 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d902      	bls.n	80042ba <SPI_WaitFlagStateUntilTimeout+0x30>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d13d      	bne.n	8004336 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042d2:	d111      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042dc:	d004      	beq.n	80042e8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e6:	d107      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004300:	d10f      	bne.n	8004322 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004320:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e00f      	b.n	8004356 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4013      	ands	r3, r2
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	429a      	cmp	r2, r3
 8004344:	bf0c      	ite	eq
 8004346:	2301      	moveq	r3, #1
 8004348:	2300      	movne	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	429a      	cmp	r2, r3
 8004352:	d1a3      	bne.n	800429c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800436c:	e057      	b.n	800441e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004374:	d106      	bne.n	8004384 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d103      	bne.n	8004384 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d048      	beq.n	800441e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800438c:	f7fc fb44 	bl	8000a18 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d902      	bls.n	80043a2 <SPI_WaitFifoStateUntilTimeout+0x44>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d13d      	bne.n	800441e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ba:	d111      	bne.n	80043e0 <SPI_WaitFifoStateUntilTimeout+0x82>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c4:	d004      	beq.n	80043d0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ce:	d107      	bne.n	80043e0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e8:	d10f      	bne.n	800440a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004408:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e008      	b.n	8004430 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4013      	ands	r3, r2
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	429a      	cmp	r2, r3
 800442c:	d19f      	bne.n	800436e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800444c:	d111      	bne.n	8004472 <SPI_EndRxTransaction+0x3a>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004456:	d004      	beq.n	8004462 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004460:	d107      	bne.n	8004472 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004470:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2200      	movs	r2, #0
 800447a:	2180      	movs	r1, #128	; 0x80
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f7ff ff04 	bl	800428a <SPI_WaitFlagStateUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e023      	b.n	80044e0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044a0:	d11d      	bne.n	80044de <SPI_EndRxTransaction+0xa6>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044aa:	d004      	beq.n	80044b6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b4:	d113      	bne.n	80044de <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2200      	movs	r2, #0
 80044be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f7ff ff4b 	bl	800435e <SPI_WaitFifoStateUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d007      	beq.n	80044de <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d2:	f043 0220 	orr.w	r2, r3, #32
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e000      	b.n	80044e0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff ff2c 	bl	800435e <SPI_WaitFifoStateUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004510:	f043 0220 	orr.w	r2, r3, #32
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e027      	b.n	800456c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2200      	movs	r2, #0
 8004524:	2180      	movs	r1, #128	; 0x80
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f7ff feaf 	bl	800428a <SPI_WaitFlagStateUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d007      	beq.n	8004542 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004536:	f043 0220 	orr.w	r2, r3, #32
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e014      	b.n	800456c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2200      	movs	r2, #0
 800454a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f7ff ff05 	bl	800435e <SPI_WaitFifoStateUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455e:	f043 0220 	orr.w	r2, r3, #32
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e000      	b.n	800456c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e01d      	b.n	80045c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f002 fb44 	bl	8006c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3304      	adds	r3, #4
 80045b0:	4619      	mov	r1, r3
 80045b2:	4610      	mov	r0, r2
 80045b4:	f000 f8c2 	bl	800473c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_TIM_ConfigClockSource+0x18>
 80045de:	2302      	movs	r3, #2
 80045e0:	e0a8      	b.n	8004734 <HAL_TIM_ConfigClockSource+0x16a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2202      	movs	r2, #2
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004600:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004604:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800460c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b40      	cmp	r3, #64	; 0x40
 800461c:	d067      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x124>
 800461e:	2b40      	cmp	r3, #64	; 0x40
 8004620:	d80b      	bhi.n	800463a <HAL_TIM_ConfigClockSource+0x70>
 8004622:	2b10      	cmp	r3, #16
 8004624:	d073      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x144>
 8004626:	2b10      	cmp	r3, #16
 8004628:	d802      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x66>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d06f      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800462e:	e078      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004630:	2b20      	cmp	r3, #32
 8004632:	d06c      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x144>
 8004634:	2b30      	cmp	r3, #48	; 0x30
 8004636:	d06a      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004638:	e073      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800463a:	2b70      	cmp	r3, #112	; 0x70
 800463c:	d00d      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x90>
 800463e:	2b70      	cmp	r3, #112	; 0x70
 8004640:	d804      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x82>
 8004642:	2b50      	cmp	r3, #80	; 0x50
 8004644:	d033      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0xe4>
 8004646:	2b60      	cmp	r3, #96	; 0x60
 8004648:	d041      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0x104>
      break;
 800464a:	e06a      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800464c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004650:	d066      	beq.n	8004720 <HAL_TIM_ConfigClockSource+0x156>
 8004652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004656:	d017      	beq.n	8004688 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004658:	e063      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6899      	ldr	r1, [r3, #8]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f000 f97b 	bl	8004964 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800467c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	609a      	str	r2, [r3, #8]
      break;
 8004686:	e04c      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6899      	ldr	r1, [r3, #8]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f000 f964 	bl	8004964 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046aa:	609a      	str	r2, [r3, #8]
      break;
 80046ac:	e039      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6859      	ldr	r1, [r3, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f000 f8d8 	bl	8004870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2150      	movs	r1, #80	; 0x50
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 f931 	bl	800492e <TIM_ITRx_SetConfig>
      break;
 80046cc:	e029      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6859      	ldr	r1, [r3, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	461a      	mov	r2, r3
 80046dc:	f000 f8f7 	bl	80048ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2160      	movs	r1, #96	; 0x60
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 f921 	bl	800492e <TIM_ITRx_SetConfig>
      break;
 80046ec:	e019      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	6859      	ldr	r1, [r3, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f000 f8b8 	bl	8004870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2140      	movs	r1, #64	; 0x40
 8004706:	4618      	mov	r0, r3
 8004708:	f000 f911 	bl	800492e <TIM_ITRx_SetConfig>
      break;
 800470c:	e009      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f000 f908 	bl	800492e <TIM_ITRx_SetConfig>
      break;
 800471e:	e000      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004720:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a40      	ldr	r2, [pc, #256]	; (8004850 <TIM_Base_SetConfig+0x114>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d013      	beq.n	800477c <TIM_Base_SetConfig+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475a:	d00f      	beq.n	800477c <TIM_Base_SetConfig+0x40>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a3d      	ldr	r2, [pc, #244]	; (8004854 <TIM_Base_SetConfig+0x118>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00b      	beq.n	800477c <TIM_Base_SetConfig+0x40>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a3c      	ldr	r2, [pc, #240]	; (8004858 <TIM_Base_SetConfig+0x11c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d007      	beq.n	800477c <TIM_Base_SetConfig+0x40>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a3b      	ldr	r2, [pc, #236]	; (800485c <TIM_Base_SetConfig+0x120>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_Base_SetConfig+0x40>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a3a      	ldr	r2, [pc, #232]	; (8004860 <TIM_Base_SetConfig+0x124>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d108      	bne.n	800478e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2f      	ldr	r2, [pc, #188]	; (8004850 <TIM_Base_SetConfig+0x114>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d01f      	beq.n	80047d6 <TIM_Base_SetConfig+0x9a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479c:	d01b      	beq.n	80047d6 <TIM_Base_SetConfig+0x9a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a2c      	ldr	r2, [pc, #176]	; (8004854 <TIM_Base_SetConfig+0x118>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d017      	beq.n	80047d6 <TIM_Base_SetConfig+0x9a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a2b      	ldr	r2, [pc, #172]	; (8004858 <TIM_Base_SetConfig+0x11c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <TIM_Base_SetConfig+0x9a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a2a      	ldr	r2, [pc, #168]	; (800485c <TIM_Base_SetConfig+0x120>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00f      	beq.n	80047d6 <TIM_Base_SetConfig+0x9a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a29      	ldr	r2, [pc, #164]	; (8004860 <TIM_Base_SetConfig+0x124>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00b      	beq.n	80047d6 <TIM_Base_SetConfig+0x9a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a28      	ldr	r2, [pc, #160]	; (8004864 <TIM_Base_SetConfig+0x128>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <TIM_Base_SetConfig+0x9a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a27      	ldr	r2, [pc, #156]	; (8004868 <TIM_Base_SetConfig+0x12c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <TIM_Base_SetConfig+0x9a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a26      	ldr	r2, [pc, #152]	; (800486c <TIM_Base_SetConfig+0x130>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d108      	bne.n	80047e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a10      	ldr	r2, [pc, #64]	; (8004850 <TIM_Base_SetConfig+0x114>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00f      	beq.n	8004834 <TIM_Base_SetConfig+0xf8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a12      	ldr	r2, [pc, #72]	; (8004860 <TIM_Base_SetConfig+0x124>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00b      	beq.n	8004834 <TIM_Base_SetConfig+0xf8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a11      	ldr	r2, [pc, #68]	; (8004864 <TIM_Base_SetConfig+0x128>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d007      	beq.n	8004834 <TIM_Base_SetConfig+0xf8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a10      	ldr	r2, [pc, #64]	; (8004868 <TIM_Base_SetConfig+0x12c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_Base_SetConfig+0xf8>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a0f      	ldr	r2, [pc, #60]	; (800486c <TIM_Base_SetConfig+0x130>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d103      	bne.n	800483c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	615a      	str	r2, [r3, #20]
}
 8004842:	bf00      	nop
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40012c00 	.word	0x40012c00
 8004854:	40000400 	.word	0x40000400
 8004858:	40000800 	.word	0x40000800
 800485c:	40000c00 	.word	0x40000c00
 8004860:	40013400 	.word	0x40013400
 8004864:	40014000 	.word	0x40014000
 8004868:	40014400 	.word	0x40014400
 800486c:	40014800 	.word	0x40014800

08004870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f023 0201 	bic.w	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800489a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f023 030a 	bic.w	r3, r3, #10
 80048ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b087      	sub	sp, #28
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f023 0210 	bic.w	r2, r3, #16
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	031b      	lsls	r3, r3, #12
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800490a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	621a      	str	r2, [r3, #32]
}
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	f043 0307 	orr.w	r3, r3, #7
 8004950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	609a      	str	r2, [r3, #8]
}
 8004958:	bf00      	nop
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800497e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	021a      	lsls	r2, r3, #8
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	431a      	orrs	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4313      	orrs	r3, r2
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	609a      	str	r2, [r3, #8]
}
 8004998:	bf00      	nop
 800499a:	371c      	adds	r7, #28
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e045      	b.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1b      	ldr	r2, [pc, #108]	; (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d108      	bne.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a1a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	40012c00 	.word	0x40012c00
 8004a58:	40013400 	.word	0x40013400

08004a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e040      	b.n	8004af0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f002 f8f2 	bl	8006c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2224      	movs	r2, #36	; 0x24
 8004a88:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0201 	bic.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f82c 	bl	8004af8 <UART_SetConfig>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e022      	b.n	8004af0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fb68 	bl	8005188 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ac6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ad6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0201 	orr.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fbef 	bl	80052cc <UART_CheckIdleState>
 8004aee:	4603      	mov	r3, r0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004afc:	b088      	sub	sp, #32
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4bac      	ldr	r3, [pc, #688]	; (8004de0 <UART_SetConfig+0x2e8>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	69f9      	ldr	r1, [r7, #28]
 8004b36:	430b      	orrs	r3, r1
 8004b38:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4aa2      	ldr	r2, [pc, #648]	; (8004de4 <UART_SetConfig+0x2ec>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d004      	beq.n	8004b6a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69fa      	ldr	r2, [r7, #28]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a99      	ldr	r2, [pc, #612]	; (8004de8 <UART_SetConfig+0x2f0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d121      	bne.n	8004bcc <UART_SetConfig+0xd4>
 8004b88:	4b98      	ldr	r3, [pc, #608]	; (8004dec <UART_SetConfig+0x2f4>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d816      	bhi.n	8004bc4 <UART_SetConfig+0xcc>
 8004b96:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <UART_SetConfig+0xa4>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004bad 	.word	0x08004bad
 8004ba0:	08004bb9 	.word	0x08004bb9
 8004ba4:	08004bb3 	.word	0x08004bb3
 8004ba8:	08004bbf 	.word	0x08004bbf
 8004bac:	2301      	movs	r3, #1
 8004bae:	76fb      	strb	r3, [r7, #27]
 8004bb0:	e0e8      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	76fb      	strb	r3, [r7, #27]
 8004bb6:	e0e5      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004bb8:	2304      	movs	r3, #4
 8004bba:	76fb      	strb	r3, [r7, #27]
 8004bbc:	e0e2      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004bbe:	2308      	movs	r3, #8
 8004bc0:	76fb      	strb	r3, [r7, #27]
 8004bc2:	e0df      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	76fb      	strb	r3, [r7, #27]
 8004bc8:	bf00      	nop
 8004bca:	e0db      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a87      	ldr	r2, [pc, #540]	; (8004df0 <UART_SetConfig+0x2f8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d134      	bne.n	8004c40 <UART_SetConfig+0x148>
 8004bd6:	4b85      	ldr	r3, [pc, #532]	; (8004dec <UART_SetConfig+0x2f4>)
 8004bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bdc:	f003 030c 	and.w	r3, r3, #12
 8004be0:	2b0c      	cmp	r3, #12
 8004be2:	d829      	bhi.n	8004c38 <UART_SetConfig+0x140>
 8004be4:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <UART_SetConfig+0xf4>)
 8004be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bea:	bf00      	nop
 8004bec:	08004c21 	.word	0x08004c21
 8004bf0:	08004c39 	.word	0x08004c39
 8004bf4:	08004c39 	.word	0x08004c39
 8004bf8:	08004c39 	.word	0x08004c39
 8004bfc:	08004c2d 	.word	0x08004c2d
 8004c00:	08004c39 	.word	0x08004c39
 8004c04:	08004c39 	.word	0x08004c39
 8004c08:	08004c39 	.word	0x08004c39
 8004c0c:	08004c27 	.word	0x08004c27
 8004c10:	08004c39 	.word	0x08004c39
 8004c14:	08004c39 	.word	0x08004c39
 8004c18:	08004c39 	.word	0x08004c39
 8004c1c:	08004c33 	.word	0x08004c33
 8004c20:	2300      	movs	r3, #0
 8004c22:	76fb      	strb	r3, [r7, #27]
 8004c24:	e0ae      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004c26:	2302      	movs	r3, #2
 8004c28:	76fb      	strb	r3, [r7, #27]
 8004c2a:	e0ab      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	76fb      	strb	r3, [r7, #27]
 8004c30:	e0a8      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004c32:	2308      	movs	r3, #8
 8004c34:	76fb      	strb	r3, [r7, #27]
 8004c36:	e0a5      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004c38:	2310      	movs	r3, #16
 8004c3a:	76fb      	strb	r3, [r7, #27]
 8004c3c:	bf00      	nop
 8004c3e:	e0a1      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a6b      	ldr	r2, [pc, #428]	; (8004df4 <UART_SetConfig+0x2fc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d120      	bne.n	8004c8c <UART_SetConfig+0x194>
 8004c4a:	4b68      	ldr	r3, [pc, #416]	; (8004dec <UART_SetConfig+0x2f4>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c54:	2b10      	cmp	r3, #16
 8004c56:	d00f      	beq.n	8004c78 <UART_SetConfig+0x180>
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d802      	bhi.n	8004c62 <UART_SetConfig+0x16a>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <UART_SetConfig+0x174>
 8004c60:	e010      	b.n	8004c84 <UART_SetConfig+0x18c>
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d005      	beq.n	8004c72 <UART_SetConfig+0x17a>
 8004c66:	2b30      	cmp	r3, #48	; 0x30
 8004c68:	d009      	beq.n	8004c7e <UART_SetConfig+0x186>
 8004c6a:	e00b      	b.n	8004c84 <UART_SetConfig+0x18c>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	76fb      	strb	r3, [r7, #27]
 8004c70:	e088      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004c72:	2302      	movs	r3, #2
 8004c74:	76fb      	strb	r3, [r7, #27]
 8004c76:	e085      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	76fb      	strb	r3, [r7, #27]
 8004c7c:	e082      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004c7e:	2308      	movs	r3, #8
 8004c80:	76fb      	strb	r3, [r7, #27]
 8004c82:	e07f      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004c84:	2310      	movs	r3, #16
 8004c86:	76fb      	strb	r3, [r7, #27]
 8004c88:	bf00      	nop
 8004c8a:	e07b      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a59      	ldr	r2, [pc, #356]	; (8004df8 <UART_SetConfig+0x300>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d120      	bne.n	8004cd8 <UART_SetConfig+0x1e0>
 8004c96:	4b55      	ldr	r3, [pc, #340]	; (8004dec <UART_SetConfig+0x2f4>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ca0:	2b40      	cmp	r3, #64	; 0x40
 8004ca2:	d00f      	beq.n	8004cc4 <UART_SetConfig+0x1cc>
 8004ca4:	2b40      	cmp	r3, #64	; 0x40
 8004ca6:	d802      	bhi.n	8004cae <UART_SetConfig+0x1b6>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <UART_SetConfig+0x1c0>
 8004cac:	e010      	b.n	8004cd0 <UART_SetConfig+0x1d8>
 8004cae:	2b80      	cmp	r3, #128	; 0x80
 8004cb0:	d005      	beq.n	8004cbe <UART_SetConfig+0x1c6>
 8004cb2:	2bc0      	cmp	r3, #192	; 0xc0
 8004cb4:	d009      	beq.n	8004cca <UART_SetConfig+0x1d2>
 8004cb6:	e00b      	b.n	8004cd0 <UART_SetConfig+0x1d8>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	76fb      	strb	r3, [r7, #27]
 8004cbc:	e062      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	76fb      	strb	r3, [r7, #27]
 8004cc2:	e05f      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	76fb      	strb	r3, [r7, #27]
 8004cc8:	e05c      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004cca:	2308      	movs	r3, #8
 8004ccc:	76fb      	strb	r3, [r7, #27]
 8004cce:	e059      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	76fb      	strb	r3, [r7, #27]
 8004cd4:	bf00      	nop
 8004cd6:	e055      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a47      	ldr	r2, [pc, #284]	; (8004dfc <UART_SetConfig+0x304>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d124      	bne.n	8004d2c <UART_SetConfig+0x234>
 8004ce2:	4b42      	ldr	r3, [pc, #264]	; (8004dec <UART_SetConfig+0x2f4>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf0:	d012      	beq.n	8004d18 <UART_SetConfig+0x220>
 8004cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf6:	d802      	bhi.n	8004cfe <UART_SetConfig+0x206>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <UART_SetConfig+0x214>
 8004cfc:	e012      	b.n	8004d24 <UART_SetConfig+0x22c>
 8004cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d02:	d006      	beq.n	8004d12 <UART_SetConfig+0x21a>
 8004d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d08:	d009      	beq.n	8004d1e <UART_SetConfig+0x226>
 8004d0a:	e00b      	b.n	8004d24 <UART_SetConfig+0x22c>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	76fb      	strb	r3, [r7, #27]
 8004d10:	e038      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004d12:	2302      	movs	r3, #2
 8004d14:	76fb      	strb	r3, [r7, #27]
 8004d16:	e035      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	76fb      	strb	r3, [r7, #27]
 8004d1c:	e032      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004d1e:	2308      	movs	r3, #8
 8004d20:	76fb      	strb	r3, [r7, #27]
 8004d22:	e02f      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004d24:	2310      	movs	r3, #16
 8004d26:	76fb      	strb	r3, [r7, #27]
 8004d28:	bf00      	nop
 8004d2a:	e02b      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a2c      	ldr	r2, [pc, #176]	; (8004de4 <UART_SetConfig+0x2ec>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d124      	bne.n	8004d80 <UART_SetConfig+0x288>
 8004d36:	4b2d      	ldr	r3, [pc, #180]	; (8004dec <UART_SetConfig+0x2f4>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d44:	d012      	beq.n	8004d6c <UART_SetConfig+0x274>
 8004d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4a:	d802      	bhi.n	8004d52 <UART_SetConfig+0x25a>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d007      	beq.n	8004d60 <UART_SetConfig+0x268>
 8004d50:	e012      	b.n	8004d78 <UART_SetConfig+0x280>
 8004d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d56:	d006      	beq.n	8004d66 <UART_SetConfig+0x26e>
 8004d58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d5c:	d009      	beq.n	8004d72 <UART_SetConfig+0x27a>
 8004d5e:	e00b      	b.n	8004d78 <UART_SetConfig+0x280>
 8004d60:	2300      	movs	r3, #0
 8004d62:	76fb      	strb	r3, [r7, #27]
 8004d64:	e00e      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004d66:	2302      	movs	r3, #2
 8004d68:	76fb      	strb	r3, [r7, #27]
 8004d6a:	e00b      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	76fb      	strb	r3, [r7, #27]
 8004d70:	e008      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004d72:	2308      	movs	r3, #8
 8004d74:	76fb      	strb	r3, [r7, #27]
 8004d76:	e005      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	76fb      	strb	r3, [r7, #27]
 8004d7c:	bf00      	nop
 8004d7e:	e001      	b.n	8004d84 <UART_SetConfig+0x28c>
 8004d80:	2310      	movs	r3, #16
 8004d82:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a16      	ldr	r2, [pc, #88]	; (8004de4 <UART_SetConfig+0x2ec>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	f040 80fa 	bne.w	8004f84 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d90:	7efb      	ldrb	r3, [r7, #27]
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d836      	bhi.n	8004e04 <UART_SetConfig+0x30c>
 8004d96:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <UART_SetConfig+0x2a4>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004e05 	.word	0x08004e05
 8004da4:	08004dc9 	.word	0x08004dc9
 8004da8:	08004e05 	.word	0x08004e05
 8004dac:	08004dcf 	.word	0x08004dcf
 8004db0:	08004e05 	.word	0x08004e05
 8004db4:	08004e05 	.word	0x08004e05
 8004db8:	08004e05 	.word	0x08004e05
 8004dbc:	08004dd7 	.word	0x08004dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004dc0:	f7fd fffc 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 8004dc4:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004dc6:	e020      	b.n	8004e0a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004dc8:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <UART_SetConfig+0x308>)
 8004dca:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004dcc:	e01d      	b.n	8004e0a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004dce:	f7fd ff5f 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8004dd2:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004dd4:	e019      	b.n	8004e0a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dda:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ddc:	e015      	b.n	8004e0a <UART_SetConfig+0x312>
 8004dde:	bf00      	nop
 8004de0:	efff69f3 	.word	0xefff69f3
 8004de4:	40008000 	.word	0x40008000
 8004de8:	40013800 	.word	0x40013800
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40004400 	.word	0x40004400
 8004df4:	40004800 	.word	0x40004800
 8004df8:	40004c00 	.word	0x40004c00
 8004dfc:	40005000 	.word	0x40005000
 8004e00:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	74fb      	strb	r3, [r7, #19]
        break;
 8004e08:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 81ac 	beq.w	800516a <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	4413      	add	r3, r2
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d305      	bcc.n	8004e2e <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d902      	bls.n	8004e34 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	74fb      	strb	r3, [r7, #19]
 8004e32:	e19a      	b.n	800516a <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8004e34:	7efb      	ldrb	r3, [r7, #27]
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	f200 8091 	bhi.w	8004f5e <UART_SetConfig+0x466>
 8004e3c:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <UART_SetConfig+0x34c>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e69 	.word	0x08004e69
 8004e48:	08004f5f 	.word	0x08004f5f
 8004e4c:	08004eb5 	.word	0x08004eb5
 8004e50:	08004f5f 	.word	0x08004f5f
 8004e54:	08004ee9 	.word	0x08004ee9
 8004e58:	08004f5f 	.word	0x08004f5f
 8004e5c:	08004f5f 	.word	0x08004f5f
 8004e60:	08004f5f 	.word	0x08004f5f
 8004e64:	08004f35 	.word	0x08004f35
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004e68:	f7fd ffa8 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	4619      	mov	r1, r3
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	f04f 0400 	mov.w	r4, #0
 8004e7c:	0214      	lsls	r4, r2, #8
 8004e7e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004e82:	020b      	lsls	r3, r1, #8
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6852      	ldr	r2, [r2, #4]
 8004e88:	0852      	lsrs	r2, r2, #1
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	eb13 0b01 	adds.w	fp, r3, r1
 8004e94:	eb44 0c02 	adc.w	ip, r4, r2
 8004e98:	4658      	mov	r0, fp
 8004e9a:	4661      	mov	r1, ip
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f04f 0400 	mov.w	r4, #0
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	f7fb fbd2 	bl	8000650 <__aeabi_uldivmod>
 8004eac:	4603      	mov	r3, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004eb2:	e057      	b.n	8004f64 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	085b      	lsrs	r3, r3, #1
 8004eba:	f04f 0400 	mov.w	r4, #0
 8004ebe:	49b1      	ldr	r1, [pc, #708]	; (8005184 <UART_SetConfig+0x68c>)
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	eb13 0b01 	adds.w	fp, r3, r1
 8004ec8:	eb44 0c02 	adc.w	ip, r4, r2
 8004ecc:	4658      	mov	r0, fp
 8004ece:	4661      	mov	r1, ip
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f04f 0400 	mov.w	r4, #0
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4623      	mov	r3, r4
 8004edc:	f7fb fbb8 	bl	8000650 <__aeabi_uldivmod>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004ee6:	e03d      	b.n	8004f64 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004ee8:	f7fd fed2 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4619      	mov	r1, r3
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	f04f 0400 	mov.w	r4, #0
 8004efc:	0214      	lsls	r4, r2, #8
 8004efe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004f02:	020b      	lsls	r3, r1, #8
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6852      	ldr	r2, [r2, #4]
 8004f08:	0852      	lsrs	r2, r2, #1
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	eb13 0b01 	adds.w	fp, r3, r1
 8004f14:	eb44 0c02 	adc.w	ip, r4, r2
 8004f18:	4658      	mov	r0, fp
 8004f1a:	4661      	mov	r1, ip
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f04f 0400 	mov.w	r4, #0
 8004f24:	461a      	mov	r2, r3
 8004f26:	4623      	mov	r3, r4
 8004f28:	f7fb fb92 	bl	8000650 <__aeabi_uldivmod>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004f32:	e017      	b.n	8004f64 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	085b      	lsrs	r3, r3, #1
 8004f3a:	f04f 0400 	mov.w	r4, #0
 8004f3e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004f42:	f144 0100 	adc.w	r1, r4, #0
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f04f 0400 	mov.w	r4, #0
 8004f4e:	461a      	mov	r2, r3
 8004f50:	4623      	mov	r3, r4
 8004f52:	f7fb fb7d 	bl	8000650 <__aeabi_uldivmod>
 8004f56:	4603      	mov	r3, r0
 8004f58:	460c      	mov	r4, r1
 8004f5a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004f5c:	e002      	b.n	8004f64 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	74fb      	strb	r3, [r7, #19]
            break;
 8004f62:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f6a:	d308      	bcc.n	8004f7e <UART_SetConfig+0x486>
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f72:	d204      	bcs.n	8004f7e <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	60da      	str	r2, [r3, #12]
 8004f7c:	e0f5      	b.n	800516a <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	74fb      	strb	r3, [r7, #19]
 8004f82:	e0f2      	b.n	800516a <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8c:	d17f      	bne.n	800508e <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8004f8e:	7efb      	ldrb	r3, [r7, #27]
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d85c      	bhi.n	800504e <UART_SetConfig+0x556>
 8004f94:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0x4a4>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fdf 	.word	0x08004fdf
 8004fa4:	08004ffd 	.word	0x08004ffd
 8004fa8:	0800504f 	.word	0x0800504f
 8004fac:	08005019 	.word	0x08005019
 8004fb0:	0800504f 	.word	0x0800504f
 8004fb4:	0800504f 	.word	0x0800504f
 8004fb8:	0800504f 	.word	0x0800504f
 8004fbc:	08005037 	.word	0x08005037
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004fc0:	f7fd fefc 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	005a      	lsls	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	085b      	lsrs	r3, r3, #1
 8004fce:	441a      	add	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fdc:	e03a      	b.n	8005054 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004fde:	f7fd ff03 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	005a      	lsls	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	085b      	lsrs	r3, r3, #1
 8004fec:	441a      	add	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ffa:	e02b      	b.n	8005054 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	085b      	lsrs	r3, r3, #1
 8005002:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005006:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6852      	ldr	r2, [r2, #4]
 800500e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005012:	b29b      	uxth	r3, r3
 8005014:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005016:	e01d      	b.n	8005054 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005018:	f7fd fe3a 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 800501c:	4603      	mov	r3, r0
 800501e:	005a      	lsls	r2, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	441a      	add	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	b29b      	uxth	r3, r3
 8005032:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005034:	e00e      	b.n	8005054 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	fbb2 f3f3 	udiv	r3, r2, r3
 8005048:	b29b      	uxth	r3, r3
 800504a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800504c:	e002      	b.n	8005054 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	74fb      	strb	r3, [r7, #19]
        break;
 8005052:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b0f      	cmp	r3, #15
 8005058:	d916      	bls.n	8005088 <UART_SetConfig+0x590>
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005060:	d212      	bcs.n	8005088 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	b29b      	uxth	r3, r3
 8005066:	f023 030f 	bic.w	r3, r3, #15
 800506a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	085b      	lsrs	r3, r3, #1
 8005070:	b29b      	uxth	r3, r3
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	b29a      	uxth	r2, r3
 8005078:	897b      	ldrh	r3, [r7, #10]
 800507a:	4313      	orrs	r3, r2
 800507c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	897a      	ldrh	r2, [r7, #10]
 8005084:	60da      	str	r2, [r3, #12]
 8005086:	e070      	b.n	800516a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	74fb      	strb	r3, [r7, #19]
 800508c:	e06d      	b.n	800516a <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800508e:	7efb      	ldrb	r3, [r7, #27]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d859      	bhi.n	8005148 <UART_SetConfig+0x650>
 8005094:	a201      	add	r2, pc, #4	; (adr r2, 800509c <UART_SetConfig+0x5a4>)
 8005096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509a:	bf00      	nop
 800509c:	080050c1 	.word	0x080050c1
 80050a0:	080050dd 	.word	0x080050dd
 80050a4:	080050f9 	.word	0x080050f9
 80050a8:	08005149 	.word	0x08005149
 80050ac:	08005115 	.word	0x08005115
 80050b0:	08005149 	.word	0x08005149
 80050b4:	08005149 	.word	0x08005149
 80050b8:	08005149 	.word	0x08005149
 80050bc:	08005131 	.word	0x08005131
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80050c0:	f7fd fe7c 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 80050c4:	4602      	mov	r2, r0
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	441a      	add	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80050da:	e038      	b.n	800514e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80050dc:	f7fd fe84 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 80050e0:	4602      	mov	r2, r0
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	085b      	lsrs	r3, r3, #1
 80050e8:	441a      	add	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80050f6:	e02a      	b.n	800514e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	085b      	lsrs	r3, r3, #1
 80050fe:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005102:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6852      	ldr	r2, [r2, #4]
 800510a:	fbb3 f3f2 	udiv	r3, r3, r2
 800510e:	b29b      	uxth	r3, r3
 8005110:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005112:	e01c      	b.n	800514e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005114:	f7fd fdbc 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8005118:	4602      	mov	r2, r0
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	441a      	add	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	fbb2 f3f3 	udiv	r3, r2, r3
 800512a:	b29b      	uxth	r3, r3
 800512c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800512e:	e00e      	b.n	800514e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005142:	b29b      	uxth	r3, r3
 8005144:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005146:	e002      	b.n	800514e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	74fb      	strb	r3, [r7, #19]
        break;
 800514c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b0f      	cmp	r3, #15
 8005152:	d908      	bls.n	8005166 <UART_SetConfig+0x66e>
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515a:	d204      	bcs.n	8005166 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	60da      	str	r2, [r3, #12]
 8005164:	e001      	b.n	800516a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005176:	7cfb      	ldrb	r3, [r7, #19]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3720      	adds	r7, #32
 800517c:	46bd      	mov	sp, r7
 800517e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005182:	bf00      	nop
 8005184:	f4240000 	.word	0xf4240000

08005188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01a      	beq.n	800529e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005286:	d10a      	bne.n	800529e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80052da:	f7fb fb9d 	bl	8000a18 <HAL_GetTick>
 80052de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d10e      	bne.n	800530c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f82a 	bl	8005356 <UART_WaitOnFlagUntilTimeout>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e020      	b.n	800534e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0304 	and.w	r3, r3, #4
 8005316:	2b04      	cmp	r3, #4
 8005318:	d10e      	bne.n	8005338 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800531a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f814 	bl	8005356 <UART_WaitOnFlagUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e00a      	b.n	800534e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2220      	movs	r2, #32
 8005342:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	603b      	str	r3, [r7, #0]
 8005362:	4613      	mov	r3, r2
 8005364:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005366:	e02a      	b.n	80053be <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536e:	d026      	beq.n	80053be <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005370:	f7fb fb52 	bl	8000a18 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	429a      	cmp	r2, r3
 800537e:	d302      	bcc.n	8005386 <UART_WaitOnFlagUntilTimeout+0x30>
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d11b      	bne.n	80053be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005394:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0201 	bic.w	r2, r2, #1
 80053a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2220      	movs	r2, #32
 80053aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2220      	movs	r2, #32
 80053b0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e00f      	b.n	80053de <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69da      	ldr	r2, [r3, #28]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4013      	ands	r3, r2
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	bf0c      	ite	eq
 80053ce:	2301      	moveq	r3, #1
 80053d0:	2300      	movne	r3, #0
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	461a      	mov	r2, r3
 80053d6:	79fb      	ldrb	r3, [r7, #7]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d0c5      	beq.n	8005368 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <_ZN9LoRaClassC1Ev>:
#define IRQ_PAYLOAD_CRC_ERROR_MASK 0x20
#define IRQ_RX_DONE_MASK           0x40

#define MAX_PKT_LENGTH           255

LoRaClass::LoRaClass() :
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(NULL)
 80053f0:	4a0a      	ldr	r2, [pc, #40]	; (800541c <_ZN9LoRaClassC1Ev+0x34>)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	61da      	str	r2, [r3, #28]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	621a      	str	r2, [r3, #32]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	625a      	str	r2, [r3, #36]	; 0x24
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	629a      	str	r2, [r3, #40]	; 0x28
{
  // overide Stream timeout value
  //setTimeout(0);
}
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4618      	mov	r0, r3
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	08007988 	.word	0x08007988

08005420 <_ZN9LoRaClass10sendPacketEPvj>:

//New methods
int LoRaClass::sendPacket(void* pData, size_t dataSize){
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
	size_t i;
	beginPacket();
 800542c:	2100      	movs	r1, #0
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f8d2 	bl	80055d8 <_ZN9LoRaClass11beginPacketEi>
	for(i = 0; i < dataSize; i++)
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	429a      	cmp	r2, r3
 800543e:	d20b      	bcs.n	8005458 <_ZN9LoRaClass10sendPacketEPvj+0x38>
		print(((char*)pData)[i]);
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	4413      	add	r3, r2
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	4619      	mov	r1, r3
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 fe50 	bl	80060f0 <_ZN9LoRaClass5printEc>
	for(i = 0; i < dataSize; i++)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	3301      	adds	r3, #1
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	e7ef      	b.n	8005438 <_ZN9LoRaClass10sendPacketEPvj+0x18>
	endPacket();
 8005458:	2100      	movs	r1, #0
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 f902 	bl	8005664 <_ZN9LoRaClass9endPacketEb>

	return 1;
 8005460:	2301      	movs	r3, #1
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <_ZN9LoRaClass10readPacketEPvj>:

int LoRaClass::readPacket(void* pBuffer, size_t bufferSize){
 800546a:	b580      	push	{r7, lr}
 800546c:	b086      	sub	sp, #24
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	607a      	str	r2, [r7, #4]
	size_t i = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	617b      	str	r3, [r7, #20]
	size_t packetSize;

	packetSize = parsePacket();
 800547a:	2100      	movs	r1, #0
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f949 	bl	8005714 <_ZN9LoRaClass11parsePacketEi>
 8005482:	4603      	mov	r3, r0
 8005484:	613b      	str	r3, [r7, #16]

	while (available() && i < bufferSize && i < packetSize) {
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3308      	adds	r3, #8
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	4798      	blx	r3
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d009      	beq.n	80054ac <_ZN9LoRaClass10readPacketEPvj+0x42>
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	429a      	cmp	r2, r3
 800549e:	d205      	bcs.n	80054ac <_ZN9LoRaClass10readPacketEPvj+0x42>
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d201      	bcs.n	80054ac <_ZN9LoRaClass10readPacketEPvj+0x42>
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <_ZN9LoRaClass10readPacketEPvj+0x44>
 80054ac:	2300      	movs	r3, #0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00e      	beq.n	80054d0 <_ZN9LoRaClass10readPacketEPvj+0x66>
		((char*)pBuffer)[i++] = (char)read();
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	330c      	adds	r3, #12
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	4798      	blx	r3
 80054be:	4601      	mov	r1, r0
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	617a      	str	r2, [r7, #20]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	4413      	add	r3, r2
 80054ca:	b2ca      	uxtb	r2, r1
 80054cc:	701a      	strb	r2, [r3, #0]
	while (available() && i < bufferSize && i < packetSize) {
 80054ce:	e7da      	b.n	8005486 <_ZN9LoRaClass10readPacketEPvj+0x1c>
	}

	reset();
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f805 	bl	80054e0 <_ZN9LoRaClass5resetEv>

	return 1;
 80054d6:	2301      	movs	r3, #1
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <_ZN9LoRaClass5resetEv>:

void LoRaClass::reset(){
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	begin(_frequency);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	4619      	mov	r1, r3
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f816 	bl	8005520 <_ZN9LoRaClass5beginEl>

	setSignalBandwidth(125E3);
 80054f4:	4909      	ldr	r1, [pc, #36]	; (800551c <_ZN9LoRaClass5resetEv+0x3c>)
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fba2 	bl	8005c40 <_ZN9LoRaClass18setSignalBandwidthEl>
	setSpreadingFactor(11);
 80054fc:	210b      	movs	r1, #11
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fb0a 	bl	8005b18 <_ZN9LoRaClass18setSpreadingFactorEi>
	enableCrc();
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fc96 	bl	8005e36 <_ZN9LoRaClass9enableCrcEv>
	receive();
 800550a:	2100      	movs	r1, #0
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fa23 	bl	8005958 <_ZN9LoRaClass7receiveEi>
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	0001e848 	.word	0x0001e848

08005520 <_ZN9LoRaClass5beginEl>:

//LoRa Padrao
int LoRaClass::begin(long frequency)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]

  if (_reset_pin != 65535) {
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	8b1b      	ldrh	r3, [r3, #24]
 800552e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005532:	4293      	cmp	r3, r2
 8005534:	d015      	beq.n	8005562 <_ZN9LoRaClass5beginEl+0x42>

    // perform reset
	HAL_GPIO_WritePin(_reset_gpio_port, _reset_pin, GPIO_PIN_RESET);	//digitalWrite(_reset, LOW);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6958      	ldr	r0, [r3, #20]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	8b1b      	ldrh	r3, [r3, #24]
 800553e:	2200      	movs	r2, #0
 8005540:	4619      	mov	r1, r3
 8005542:	f7fc fe65 	bl	8002210 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8005546:	200a      	movs	r0, #10
 8005548:	f7fb fa72 	bl	8000a30 <HAL_Delay>
    HAL_GPIO_WritePin(_reset_gpio_port, _reset_pin, GPIO_PIN_SET);		//digitalWrite(_reset, HIGH);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6958      	ldr	r0, [r3, #20]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	8b1b      	ldrh	r3, [r3, #24]
 8005554:	2201      	movs	r2, #1
 8005556:	4619      	mov	r1, r3
 8005558:	f7fc fe5a 	bl	8002210 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800555c:	200a      	movs	r0, #10
 800555e:	f7fb fa67 	bl	8000a30 <HAL_Delay>

  // start SPI
  //_spi->begin();

  // check version
  uint8_t version = readRegister(REG_VERSION);
 8005562:	2142      	movs	r1, #66	; 0x42
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fd5c 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 800556a:	4603      	mov	r3, r0
 800556c:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	2b12      	cmp	r3, #18
 8005572:	d001      	beq.n	8005578 <_ZN9LoRaClass5beginEl+0x58>
    return 0;
 8005574:	2300      	movs	r3, #0
 8005576:	e02b      	b.n	80055d0 <_ZN9LoRaClass5beginEl+0xb0>
  }

  // put in sleep mode
  sleep();
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fa19 	bl	80059b0 <_ZN9LoRaClass5sleepEv>

  // set frequency
  setFrequency(frequency);
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fa77 	bl	8005a74 <_ZN9LoRaClass12setFrequencyEl>

  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8005586:	2200      	movs	r2, #0
 8005588:	210e      	movs	r1, #14
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fd7a 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8005590:	2200      	movs	r2, #0
 8005592:	210f      	movs	r1, #15
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fd75 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>

  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 800559a:	210c      	movs	r1, #12
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fd40 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 80055a2:	4603      	mov	r3, r0
 80055a4:	f043 0303 	orr.w	r3, r3, #3
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	210c      	movs	r1, #12
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fd68 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>

  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 80055b4:	2204      	movs	r2, #4
 80055b6:	2126      	movs	r1, #38	; 0x26
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fd63 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>

  // set output power to 17 dBm
  setTxPower(17);
 80055be:	2201      	movs	r2, #1
 80055c0:	2111      	movs	r1, #17
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa01 	bl	80059ca <_ZN9LoRaClass10setTxPowerEii>

  // put in standby mode
  idle();
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f9e4 	bl	8005996 <_ZN9LoRaClass4idleEv>

  return 1;
 80055ce:	2301      	movs	r3, #1
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <_ZN9LoRaClass11beginPacketEi>:
  //_spi->end();
}

//LATER
int LoRaClass::beginPacket(int implicitHeader)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  if (isTransmitting()) {
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f86a 	bl	80056bc <_ZN9LoRaClass14isTransmittingEv>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <_ZN9LoRaClass11beginPacketEi+0x1a>
    return 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e017      	b.n	8005622 <_ZN9LoRaClass11beginPacketEi+0x4a>
  }

  // put in standby mode
  idle();
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f9cf 	bl	8005996 <_ZN9LoRaClass4idleEv>

  if (implicitHeader) {
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <_ZN9LoRaClass11beginPacketEi+0x2e>
    implicitHeaderMode();
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fcb3 	bl	8005f6a <_ZN9LoRaClass18implicitHeaderModeEv>
 8005604:	e002      	b.n	800560c <_ZN9LoRaClass11beginPacketEi+0x34>
  } else {
    explicitHeaderMode();
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fc97 	bl	8005f3a <_ZN9LoRaClass18explicitHeaderModeEv>
  }

  // reset FIFO address and paload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
 800560c:	2200      	movs	r2, #0
 800560e:	210d      	movs	r1, #13
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fd37 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 8005616:	2200      	movs	r2, #0
 8005618:	2122      	movs	r1, #34	; 0x22
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fd32 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>

  return 1;
 8005620:	2301      	movs	r3, #1
}
 8005622:	4618      	mov	r0, r3
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <_ZN9LoRaClass7delayUSEj>:

//NEW
void LoRaClass::delayUS(unsigned int us){
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
	_htim->Instance->CNT = 0;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2200      	movs	r2, #0
 800563c:	625a      	str	r2, [r3, #36]	; 0x24
	while(_htim->Instance->CNT < us);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	bf8c      	ite	hi
 800564c:	2301      	movhi	r3, #1
 800564e:	2300      	movls	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d000      	beq.n	8005658 <_ZN9LoRaClass7delayUSEj+0x2e>
 8005656:	e7f2      	b.n	800563e <_ZN9LoRaClass7delayUSEj+0x14>
	return;
 8005658:	bf00      	nop
}
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <_ZN9LoRaClass9endPacketEb>:

//writeRegister(), delayMicroseconds(), yield()
int LoRaClass::endPacket(bool async)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8005670:	2283      	movs	r2, #131	; 0x83
 8005672:	2101      	movs	r1, #1
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fd05 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>

  if (async) {
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <_ZN9LoRaClass9endPacketEb+0x26>
    // grace time is required for the radio
    delayUS(150);
 8005680:	2196      	movs	r1, #150	; 0x96
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff ffd1 	bl	800562a <_ZN9LoRaClass7delayUSEj>
 8005688:	e013      	b.n	80056b2 <_ZN9LoRaClass9endPacketEb+0x4e>
  } else {
    // wait for TX done
    while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 800568a:	2112      	movs	r1, #18
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fcc8 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005692:	4603      	mov	r3, r0
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b00      	cmp	r3, #0
 800569a:	bf0c      	ite	eq
 800569c:	2301      	moveq	r3, #1
 800569e:	2300      	movne	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d000      	beq.n	80056a8 <_ZN9LoRaClass9endPacketEb+0x44>
 80056a6:	e7f0      	b.n	800568a <_ZN9LoRaClass9endPacketEb+0x26>

      //yield();
    }
    // clear IRQ's
    writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80056a8:	2208      	movs	r2, #8
 80056aa:	2112      	movs	r1, #18
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fce9 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
  }

  return 1;
 80056b2:	2301      	movs	r3, #1
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <_ZN9LoRaClass14isTransmittingEv>:

//readRegister(), writeRegister()
bool LoRaClass::isTransmitting()
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  if ((readRegister(REG_OP_MODE) & MODE_TX) == MODE_TX) {
 80056c4:	2101      	movs	r1, #1
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fcab 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	bf0c      	ite	eq
 80056d6:	2301      	moveq	r3, #1
 80056d8:	2300      	movne	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <_ZN9LoRaClass14isTransmittingEv+0x28>
    return true;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e013      	b.n	800570c <_ZN9LoRaClass14isTransmittingEv+0x50>
  }

  if (readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) {
 80056e4:	2112      	movs	r1, #18
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fc9b 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bf14      	ite	ne
 80056f6:	2301      	movne	r3, #1
 80056f8:	2300      	moveq	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d004      	beq.n	800570a <_ZN9LoRaClass14isTransmittingEv+0x4e>
    // clear IRQ's
    writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8005700:	2208      	movs	r2, #8
 8005702:	2112      	movs	r1, #18
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fcbd 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
  }

  return false;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <_ZN9LoRaClass11parsePacketEi>:

//LATER
int LoRaClass::parsePacket(int size)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8005722:	2112      	movs	r1, #18
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fc7c 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 800572a:	4603      	mov	r3, r0
 800572c:	60bb      	str	r3, [r7, #8]

  if (size > 0) {
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	dd0a      	ble.n	800574a <_ZN9LoRaClass11parsePacketEi+0x36>
    implicitHeaderMode();
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fc18 	bl	8005f6a <_ZN9LoRaClass18implicitHeaderModeEv>

    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	b2db      	uxtb	r3, r3
 800573e:	461a      	mov	r2, r3
 8005740:	2122      	movs	r1, #34	; 0x22
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fc9e 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
 8005748:	e002      	b.n	8005750 <_ZN9LoRaClass11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fbf5 	bl	8005f3a <_ZN9LoRaClass18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	b2db      	uxtb	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	2112      	movs	r1, #18
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fc93 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>

  if (!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK))) {
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005764:	2b00      	cmp	r3, #0
 8005766:	d004      	beq.n	8005772 <_ZN9LoRaClass11parsePacketEi+0x5e>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b00      	cmp	r3, #0
 8005770:	d121      	bne.n	80057b6 <_ZN9LoRaClass11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	621a      	str	r2, [r3, #32]

    // read packet length
    if (_implicitHeaderMode) {
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	2b00      	cmp	r3, #0
 800577e:	d006      	beq.n	800578e <_ZN9LoRaClass11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8005780:	2122      	movs	r1, #34	; 0x22
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fc4d 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005788:	4603      	mov	r3, r0
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e005      	b.n	800579a <_ZN9LoRaClass11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 800578e:	2113      	movs	r1, #19
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fc46 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005796:	4603      	mov	r3, r0
 8005798:	60fb      	str	r3, [r7, #12]
    }

    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 800579a:	2110      	movs	r1, #16
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fc40 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 80057a2:	4603      	mov	r3, r0
 80057a4:	461a      	mov	r2, r3
 80057a6:	210d      	movs	r1, #13
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fc6b 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>

    // put in standby mode
    idle();
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f8f1 	bl	8005996 <_ZN9LoRaClass4idleEv>
 80057b4:	e015      	b.n	80057e2 <_ZN9LoRaClass11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 80057b6:	2101      	movs	r1, #1
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fc32 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b86      	cmp	r3, #134	; 0x86
 80057c2:	bf14      	ite	ne
 80057c4:	2301      	movne	r3, #1
 80057c6:	2300      	moveq	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d009      	beq.n	80057e2 <_ZN9LoRaClass11parsePacketEi+0xce>
    // not currently in RX mode

    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 80057ce:	2200      	movs	r2, #0
 80057d0:	210d      	movs	r1, #13
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fc56 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>

    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 80057d8:	2286      	movs	r2, #134	; 0x86
 80057da:	2101      	movs	r1, #1
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fc51 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
  }

  return packetLength;
 80057e2:	68fb      	ldr	r3, [r7, #12]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <_ZN9LoRaClass5writeEh>:
  return static_cast<long>(fError);
}

//readRegister(), writeRegister()
size_t LoRaClass::write(uint8_t byte)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3304      	adds	r3, #4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	1cf9      	adds	r1, r7, #3
 8005802:	2201      	movs	r2, #1
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	4798      	blx	r3
 8005808:	4603      	mov	r3, r0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <_ZN9LoRaClass5writeEPKhj>:

//readRegister(), writeRegister()
size_t LoRaClass::write(const uint8_t *buffer, size_t size)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b086      	sub	sp, #24
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 800581e:	2122      	movs	r1, #34	; 0x22
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 fbfe 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005826:	4603      	mov	r3, r0
 8005828:	613b      	str	r3, [r7, #16]

  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4413      	add	r3, r2
 8005830:	2bff      	cmp	r3, #255	; 0xff
 8005832:	d903      	bls.n	800583c <_ZN9LoRaClass5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800583a:	607b      	str	r3, [r7, #4]
  }

  // write data
  for (size_t i = 0; i < size; i++) {
 800583c:	2300      	movs	r3, #0
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	429a      	cmp	r2, r3
 8005846:	d20c      	bcs.n	8005862 <_ZN9LoRaClass5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	4413      	add	r3, r2
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	2100      	movs	r1, #0
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fc15 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	3301      	adds	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	e7ee      	b.n	8005840 <_ZN9LoRaClass5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	b2da      	uxtb	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	4413      	add	r3, r2
 800586c:	b2db      	uxtb	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	2122      	movs	r1, #34	; 0x22
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 fc06 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>

  return size;
 8005878:	687b      	ldr	r3, [r7, #4]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <_ZN9LoRaClass9availableEv>:

//readRegister()
int LoRaClass::available()
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b082      	sub	sp, #8
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 800588a:	2113      	movs	r1, #19
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fbc8 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005892:	4603      	mov	r3, r0
 8005894:	461a      	mov	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	1ad3      	subs	r3, r2, r3
}
 800589c:	4618      	mov	r0, r3
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <_ZN9LoRaClass4readEv>:

//readRegister(), available()
int LoRaClass::read()
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  if (!available()) {
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3308      	adds	r3, #8
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	4798      	blx	r3
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bf0c      	ite	eq
 80058be:	2301      	moveq	r3, #1
 80058c0:	2300      	movne	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <_ZN9LoRaClass4readEv+0x2a>
    return -1;
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295
 80058cc:	e009      	b.n	80058e2 <_ZN9LoRaClass4readEv+0x3e>
  }

  _packetIndex++;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	621a      	str	r2, [r3, #32]

  return readRegister(REG_FIFO);
 80058d8:	2100      	movs	r1, #0
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fba1 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 80058e0:	4603      	mov	r3, r0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <_ZN9LoRaClass4peekEv>:

//writeRegister(), readRegister()
int LoRaClass::peek()
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  if (!available()) {
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3308      	adds	r3, #8
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	4798      	blx	r3
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <_ZN9LoRaClass4peekEv+0x2a>
    return -1;
 800590e:	f04f 33ff 	mov.w	r3, #4294967295
 8005912:	e013      	b.n	800593c <_ZN9LoRaClass4peekEv+0x52>
  }

  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8005914:	210d      	movs	r1, #13
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fb83 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 800591c:	4603      	mov	r3, r0
 800591e:	60fb      	str	r3, [r7, #12]

  // read
  uint8_t b = readRegister(REG_FIFO);
 8005920:	2100      	movs	r1, #0
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fb7d 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005928:	4603      	mov	r3, r0
 800592a:	72fb      	strb	r3, [r7, #11]

  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	210d      	movs	r1, #13
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fba5 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>

  return b;
 800593a:	7afb      	ldrb	r3, [r7, #11]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <_ZN9LoRaClass5flushEv>:

//DONE
void LoRaClass::flush()
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <_ZN9LoRaClass7receiveEi>:
  }
}

//writeRegister(), explicitHeaderMode()
void LoRaClass::receive(int size)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  if (size > 0) {
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	dd0a      	ble.n	800597e <_ZN9LoRaClass7receiveEi+0x26>
    implicitHeaderMode();
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fafe 	bl	8005f6a <_ZN9LoRaClass18implicitHeaderModeEv>

    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	b2db      	uxtb	r3, r3
 8005972:	461a      	mov	r2, r3
 8005974:	2122      	movs	r1, #34	; 0x22
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fb84 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
 800597c:	e002      	b.n	8005984 <_ZN9LoRaClass7receiveEi+0x2c>
  } else {
    explicitHeaderMode();
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fadb 	bl	8005f3a <_ZN9LoRaClass18explicitHeaderModeEv>
  }

  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8005984:	2285      	movs	r2, #133	; 0x85
 8005986:	2101      	movs	r1, #1
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fb7b 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <_ZN9LoRaClass4idleEv>:

//writeRegister()
void LoRaClass::idle()
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b082      	sub	sp, #8
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 800599e:	2281      	movs	r2, #129	; 0x81
 80059a0:	2101      	movs	r1, #1
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fb6e 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
}
 80059a8:	bf00      	nop
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <_ZN9LoRaClass5sleepEv>:

//writeRegister()
void LoRaClass::sleep()
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 80059b8:	2280      	movs	r2, #128	; 0x80
 80059ba:	2101      	movs	r1, #1
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fb61 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <_ZN9LoRaClass10setTxPowerEii>:

//writeRegister()
void LoRaClass::setTxPower(int level, int outputPin)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d116      	bne.n	8005a0a <_ZN9LoRaClass10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	da02      	bge.n	80059e8 <_ZN9LoRaClass10setTxPowerEii+0x1e>
      level = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60bb      	str	r3, [r7, #8]
 80059e6:	e004      	b.n	80059f2 <_ZN9LoRaClass10setTxPowerEii+0x28>
    } else if (level > 14) {
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b0e      	cmp	r3, #14
 80059ec:	dd01      	ble.n	80059f2 <_ZN9LoRaClass10setTxPowerEii+0x28>
      level = 14;
 80059ee:	230e      	movs	r3, #14
 80059f0:	60bb      	str	r3, [r7, #8]
    }

    writeRegister(REG_PA_CONFIG, 0x70 | level);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	b25b      	sxtb	r3, r3
 80059f6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80059fa:	b25b      	sxtb	r3, r3
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	2109      	movs	r1, #9
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 fb3e 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
      setOCP(100);
    }

    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8005a08:	e030      	b.n	8005a6c <_ZN9LoRaClass10setTxPowerEii+0xa2>
    if (level > 17) {
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b11      	cmp	r3, #17
 8005a0e:	dd11      	ble.n	8005a34 <_ZN9LoRaClass10setTxPowerEii+0x6a>
      if (level > 20) {
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b14      	cmp	r3, #20
 8005a14:	dd01      	ble.n	8005a1a <_ZN9LoRaClass10setTxPowerEii+0x50>
        level = 20;
 8005a16:	2314      	movs	r3, #20
 8005a18:	60bb      	str	r3, [r7, #8]
      level -= 3;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	3b03      	subs	r3, #3
 8005a1e:	60bb      	str	r3, [r7, #8]
      writeRegister(REG_PA_DAC, 0x87);
 8005a20:	2287      	movs	r2, #135	; 0x87
 8005a22:	214d      	movs	r1, #77	; 0x4d
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 fb2d 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
      setOCP(140);
 8005a2a:	218c      	movs	r1, #140	; 0x8c
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 fa17 	bl	8005e60 <_ZN9LoRaClass6setOCPEh>
 8005a32:	e00d      	b.n	8005a50 <_ZN9LoRaClass10setTxPowerEii+0x86>
      if (level < 2) {
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	dc01      	bgt.n	8005a3e <_ZN9LoRaClass10setTxPowerEii+0x74>
        level = 2;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	60bb      	str	r3, [r7, #8]
      writeRegister(REG_PA_DAC, 0x84);
 8005a3e:	2284      	movs	r2, #132	; 0x84
 8005a40:	214d      	movs	r1, #77	; 0x4d
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 fb1e 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
      setOCP(100);
 8005a48:	2164      	movs	r1, #100	; 0x64
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fa08 	bl	8005e60 <_ZN9LoRaClass6setOCPEh>
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	3b02      	subs	r3, #2
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	b25b      	sxtb	r3, r3
 8005a5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a5e:	b25b      	sxtb	r3, r3
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	461a      	mov	r2, r3
 8005a64:	2109      	movs	r1, #9
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 fb0c 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
}
 8005a6c:	bf00      	nop
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <_ZN9LoRaClass12setFrequencyEl>:

//writeRegister()
void LoRaClass::setFrequency(long frequency)
{
 8005a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	61da      	str	r2, [r3, #28]

  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8005a8a:	135e      	asrs	r6, r3, #13
 8005a8c:	04dd      	lsls	r5, r3, #19
 8005a8e:	4a1a      	ldr	r2, [pc, #104]	; (8005af8 <_ZN9LoRaClass12setFrequencyEl+0x84>)
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	4628      	mov	r0, r5
 8005a96:	4631      	mov	r1, r6
 8005a98:	f7fa fdda 	bl	8000650 <__aeabi_uldivmod>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	e9c7 3402 	strd	r3, r4, [r7, #8]

  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8005aa4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	f04f 0400 	mov.w	r4, #0
 8005ab0:	0c0b      	lsrs	r3, r1, #16
 8005ab2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ab6:	0c14      	lsrs	r4, r2, #16
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	461a      	mov	r2, r3
 8005abc:	2106      	movs	r1, #6
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fae0 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8005ac4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	f04f 0400 	mov.w	r4, #0
 8005ad0:	0a0b      	lsrs	r3, r1, #8
 8005ad2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ad6:	0a14      	lsrs	r4, r2, #8
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	2107      	movs	r1, #7
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fad0 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8005ae4:	7a3b      	ldrb	r3, [r7, #8]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	2108      	movs	r1, #8
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 faca 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005af8:	01e84800 	.word	0x01e84800

08005afc <_ZN9LoRaClass18getSpreadingFactorEv>:

//readRegister()
int LoRaClass::getSpreadingFactor()
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  return readRegister(REG_MODEM_CONFIG_2) >> 4;
 8005b04:	211e      	movs	r1, #30
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fa8b 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	111b      	asrs	r3, r3, #4
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <_ZN9LoRaClass18setSpreadingFactorEi>:

//writeRegister(), setLdoFlag(), readRegister()
void LoRaClass::setSpreadingFactor(int sf)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b05      	cmp	r3, #5
 8005b26:	dc02      	bgt.n	8005b2e <_ZN9LoRaClass18setSpreadingFactorEi+0x16>
    sf = 6;
 8005b28:	2306      	movs	r3, #6
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	e004      	b.n	8005b38 <_ZN9LoRaClass18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b0c      	cmp	r3, #12
 8005b32:	dd01      	ble.n	8005b38 <_ZN9LoRaClass18setSpreadingFactorEi+0x20>
    sf = 12;
 8005b34:	230c      	movs	r3, #12
 8005b36:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b06      	cmp	r3, #6
 8005b3c:	d10a      	bne.n	8005b54 <_ZN9LoRaClass18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 8005b3e:	22c5      	movs	r2, #197	; 0xc5
 8005b40:	2131      	movs	r1, #49	; 0x31
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fa9e 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8005b48:	220c      	movs	r2, #12
 8005b4a:	2137      	movs	r1, #55	; 0x37
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fa99 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
 8005b52:	e009      	b.n	8005b68 <_ZN9LoRaClass18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 8005b54:	22c3      	movs	r2, #195	; 0xc3
 8005b56:	2131      	movs	r1, #49	; 0x31
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fa93 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8005b5e:	220a      	movs	r2, #10
 8005b60:	2137      	movs	r1, #55	; 0x37
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fa8e 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
  }

  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8005b68:	211e      	movs	r1, #30
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fa59 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005b70:	4603      	mov	r3, r0
 8005b72:	b25b      	sxtb	r3, r3
 8005b74:	f003 030f 	and.w	r3, r3, #15
 8005b78:	b25a      	sxtb	r2, r3
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	b25b      	sxtb	r3, r3
 8005b80:	4313      	orrs	r3, r2
 8005b82:	b25b      	sxtb	r3, r3
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	211e      	movs	r1, #30
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fa7a 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
  setLdoFlag();
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f919 	bl	8005dc8 <_ZN9LoRaClass10setLdoFlagEv>
}
 8005b96:	bf00      	nop
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <_ZN9LoRaClass18getSignalBandwidthEv>:

//readRegister()
long LoRaClass::getSignalBandwidth()
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint8_t bw = (readRegister(REG_MODEM_CONFIG_1) >> 4);
 8005ba8:	211d      	movs	r1, #29
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fa39 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	111b      	asrs	r3, r3, #4
 8005bb4:	73fb      	strb	r3, [r7, #15]

  switch (bw) {
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
 8005bb8:	2b09      	cmp	r3, #9
 8005bba:	d832      	bhi.n	8005c22 <_ZN9LoRaClass18getSignalBandwidthEv+0x82>
 8005bbc:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <_ZN9LoRaClass18getSignalBandwidthEv+0x24>)
 8005bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc2:	bf00      	nop
 8005bc4:	08005bed 	.word	0x08005bed
 8005bc8:	08005bf3 	.word	0x08005bf3
 8005bcc:	08005bf9 	.word	0x08005bf9
 8005bd0:	08005bff 	.word	0x08005bff
 8005bd4:	08005c05 	.word	0x08005c05
 8005bd8:	08005c0b 	.word	0x08005c0b
 8005bdc:	08005c11 	.word	0x08005c11
 8005be0:	08005c17 	.word	0x08005c17
 8005be4:	08005c1b 	.word	0x08005c1b
 8005be8:	08005c1f 	.word	0x08005c1f
    case 0: return 7.8E3;
 8005bec:	f641 6378 	movw	r3, #7800	; 0x1e78
 8005bf0:	e019      	b.n	8005c26 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 1: return 10.4E3;
 8005bf2:	f642 03a0 	movw	r3, #10400	; 0x28a0
 8005bf6:	e016      	b.n	8005c26 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 2: return 15.6E3;
 8005bf8:	f643 43f0 	movw	r3, #15600	; 0x3cf0
 8005bfc:	e013      	b.n	8005c26 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 3: return 20.8E3;
 8005bfe:	f245 1340 	movw	r3, #20800	; 0x5140
 8005c02:	e010      	b.n	8005c26 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 4: return 31.25E3;
 8005c04:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005c08:	e00d      	b.n	8005c26 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 5: return 41.7E3;
 8005c0a:	f24a 23e4 	movw	r3, #41700	; 0xa2e4
 8005c0e:	e00a      	b.n	8005c26 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 6: return 62.5E3;
 8005c10:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005c14:	e007      	b.n	8005c26 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 7: return 125E3;
 8005c16:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <_ZN9LoRaClass18getSignalBandwidthEv+0x90>)
 8005c18:	e005      	b.n	8005c26 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 8: return 250E3;
 8005c1a:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <_ZN9LoRaClass18getSignalBandwidthEv+0x94>)
 8005c1c:	e003      	b.n	8005c26 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 9: return 500E3;
 8005c1e:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <_ZN9LoRaClass18getSignalBandwidthEv+0x98>)
 8005c20:	e001      	b.n	8005c26 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
  }

  return -1;
 8005c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	0001e848 	.word	0x0001e848
 8005c34:	0003d090 	.word	0x0003d090
 8005c38:	0007a120 	.word	0x0007a120
 8005c3c:	00000000 	.word	0x00000000

08005c40 <_ZN9LoRaClass18setSignalBandwidthEl>:

//writeRegister(), setLdoFlag()
void LoRaClass::setSignalBandwidth(long sbw)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  int bw;

  if (sbw <= 7.8E3) {
 8005c4a:	6838      	ldr	r0, [r7, #0]
 8005c4c:	f7fa fc0e 	bl	800046c <__aeabi_i2d>
 8005c50:	a34b      	add	r3, pc, #300	; (adr r3, 8005d80 <_ZN9LoRaClass18setSignalBandwidthEl+0x140>)
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	f7fa fcdd 	bl	8000614 <__aeabi_dcmple>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <_ZN9LoRaClass18setSignalBandwidthEl+0x26>
    bw = 0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	e071      	b.n	8005d4a <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 10.4E3) {
 8005c66:	6838      	ldr	r0, [r7, #0]
 8005c68:	f7fa fc00 	bl	800046c <__aeabi_i2d>
 8005c6c:	a346      	add	r3, pc, #280	; (adr r3, 8005d88 <_ZN9LoRaClass18setSignalBandwidthEl+0x148>)
 8005c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c72:	f7fa fccf 	bl	8000614 <__aeabi_dcmple>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <_ZN9LoRaClass18setSignalBandwidthEl+0x42>
    bw = 1;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	e063      	b.n	8005d4a <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 15.6E3) {
 8005c82:	6838      	ldr	r0, [r7, #0]
 8005c84:	f7fa fbf2 	bl	800046c <__aeabi_i2d>
 8005c88:	a341      	add	r3, pc, #260	; (adr r3, 8005d90 <_ZN9LoRaClass18setSignalBandwidthEl+0x150>)
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	f7fa fcc1 	bl	8000614 <__aeabi_dcmple>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <_ZN9LoRaClass18setSignalBandwidthEl+0x5e>
    bw = 2;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	e055      	b.n	8005d4a <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 20.8E3) {
 8005c9e:	6838      	ldr	r0, [r7, #0]
 8005ca0:	f7fa fbe4 	bl	800046c <__aeabi_i2d>
 8005ca4:	a33c      	add	r3, pc, #240	; (adr r3, 8005d98 <_ZN9LoRaClass18setSignalBandwidthEl+0x158>)
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	f7fa fcb3 	bl	8000614 <__aeabi_dcmple>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <_ZN9LoRaClass18setSignalBandwidthEl+0x7a>
    bw = 3;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	e047      	b.n	8005d4a <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 31.25E3) {
 8005cba:	6838      	ldr	r0, [r7, #0]
 8005cbc:	f7fa fbd6 	bl	800046c <__aeabi_i2d>
 8005cc0:	a337      	add	r3, pc, #220	; (adr r3, 8005da0 <_ZN9LoRaClass18setSignalBandwidthEl+0x160>)
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	f7fa fca5 	bl	8000614 <__aeabi_dcmple>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <_ZN9LoRaClass18setSignalBandwidthEl+0x96>
    bw = 4;
 8005cd0:	2304      	movs	r3, #4
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	e039      	b.n	8005d4a <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 41.7E3) {
 8005cd6:	6838      	ldr	r0, [r7, #0]
 8005cd8:	f7fa fbc8 	bl	800046c <__aeabi_i2d>
 8005cdc:	a332      	add	r3, pc, #200	; (adr r3, 8005da8 <_ZN9LoRaClass18setSignalBandwidthEl+0x168>)
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	f7fa fc97 	bl	8000614 <__aeabi_dcmple>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <_ZN9LoRaClass18setSignalBandwidthEl+0xb2>
    bw = 5;
 8005cec:	2305      	movs	r3, #5
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e02b      	b.n	8005d4a <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 62.5E3) {
 8005cf2:	6838      	ldr	r0, [r7, #0]
 8005cf4:	f7fa fbba 	bl	800046c <__aeabi_i2d>
 8005cf8:	a32d      	add	r3, pc, #180	; (adr r3, 8005db0 <_ZN9LoRaClass18setSignalBandwidthEl+0x170>)
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f7fa fc89 	bl	8000614 <__aeabi_dcmple>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <_ZN9LoRaClass18setSignalBandwidthEl+0xce>
    bw = 6;
 8005d08:	2306      	movs	r3, #6
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	e01d      	b.n	8005d4a <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 125E3) {
 8005d0e:	6838      	ldr	r0, [r7, #0]
 8005d10:	f7fa fbac 	bl	800046c <__aeabi_i2d>
 8005d14:	a328      	add	r3, pc, #160	; (adr r3, 8005db8 <_ZN9LoRaClass18setSignalBandwidthEl+0x178>)
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	f7fa fc7b 	bl	8000614 <__aeabi_dcmple>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <_ZN9LoRaClass18setSignalBandwidthEl+0xea>
    bw = 7;
 8005d24:	2307      	movs	r3, #7
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	e00f      	b.n	8005d4a <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 250E3) {
 8005d2a:	6838      	ldr	r0, [r7, #0]
 8005d2c:	f7fa fb9e 	bl	800046c <__aeabi_i2d>
 8005d30:	a323      	add	r3, pc, #140	; (adr r3, 8005dc0 <_ZN9LoRaClass18setSignalBandwidthEl+0x180>)
 8005d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d36:	f7fa fc6d 	bl	8000614 <__aeabi_dcmple>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <_ZN9LoRaClass18setSignalBandwidthEl+0x106>
    bw = 8;
 8005d40:	2308      	movs	r3, #8
 8005d42:	60fb      	str	r3, [r7, #12]
 8005d44:	e001      	b.n	8005d4a <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 8005d46:	2309      	movs	r3, #9
 8005d48:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8005d4a:	211d      	movs	r1, #29
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f968 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005d52:	4603      	mov	r3, r0
 8005d54:	b25b      	sxtb	r3, r3
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	b25a      	sxtb	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	b25b      	sxtb	r3, r3
 8005d62:	4313      	orrs	r3, r2
 8005d64:	b25b      	sxtb	r3, r3
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	211d      	movs	r1, #29
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f989 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
  setLdoFlag();
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f828 	bl	8005dc8 <_ZN9LoRaClass10setLdoFlagEv>
}
 8005d78:	bf00      	nop
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	00000000 	.word	0x00000000
 8005d84:	40be7800 	.word	0x40be7800
 8005d88:	00000000 	.word	0x00000000
 8005d8c:	40c45000 	.word	0x40c45000
 8005d90:	00000000 	.word	0x00000000
 8005d94:	40ce7800 	.word	0x40ce7800
 8005d98:	00000000 	.word	0x00000000
 8005d9c:	40d45000 	.word	0x40d45000
 8005da0:	00000000 	.word	0x00000000
 8005da4:	40de8480 	.word	0x40de8480
 8005da8:	00000000 	.word	0x00000000
 8005dac:	40e45c80 	.word	0x40e45c80
 8005db0:	00000000 	.word	0x00000000
 8005db4:	40ee8480 	.word	0x40ee8480
 8005db8:	00000000 	.word	0x00000000
 8005dbc:	40fe8480 	.word	0x40fe8480
 8005dc0:	00000000 	.word	0x00000000
 8005dc4:	410e8480 	.word	0x410e8480

08005dc8 <_ZN9LoRaClass10setLdoFlagEv>:

//writeRegister(), readRegister(), getSignalBandwidth(), getSpreadingFactor(), bitWrite()
void LoRaClass::setLdoFlag()
{
 8005dc8:	b590      	push	{r4, r7, lr}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  // Section 4.1.1.5
  long symbolDuration = 1000 / ( getSignalBandwidth() / (1L << getSpreadingFactor()) ) ;
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff fee5 	bl	8005ba0 <_ZN9LoRaClass18getSignalBandwidthEv>
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff fe8f 	bl	8005afc <_ZN9LoRaClass18getSpreadingFactorEv>
 8005dde:	4602      	mov	r2, r0
 8005de0:	2301      	movs	r3, #1
 8005de2:	4093      	lsls	r3, r2
 8005de4:	fb94 f3f3 	sdiv	r3, r4, r3
 8005de8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dec:	fb92 f3f3 	sdiv	r3, r2, r3
 8005df0:	613b      	str	r3, [r7, #16]

  // Section 4.1.1.6
  bool ldoOn = symbolDuration > 16;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b10      	cmp	r3, #16
 8005df6:	bfcc      	ite	gt
 8005df8:	2301      	movgt	r3, #1
 8005dfa:	2300      	movle	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]

  uint8_t config3 = readRegister(REG_MODEM_CONFIG_3);
 8005dfe:	2126      	movs	r1, #38	; 0x26
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f90e 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005e06:	4603      	mov	r3, r0
 8005e08:	75fb      	strb	r3, [r7, #23]

  //bitWrite(config3, 3, ldoOn);
  //NEW
  if(ldoOn == true){
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d004      	beq.n	8005e1a <_ZN9LoRaClass10setLdoFlagEv+0x52>
	  config3 ^= 0b00001000;
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
 8005e12:	f083 0308 	eor.w	r3, r3, #8
 8005e16:	75fb      	strb	r3, [r7, #23]
 8005e18:	e003      	b.n	8005e22 <_ZN9LoRaClass10setLdoFlagEv+0x5a>
  }
  else{
	  config3 &= 0b11110111;
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	f023 0308 	bic.w	r3, r3, #8
 8005e20:	75fb      	strb	r3, [r7, #23]
  }

  writeRegister(REG_MODEM_CONFIG_3, config3);
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
 8005e24:	461a      	mov	r2, r3
 8005e26:	2126      	movs	r1, #38	; 0x26
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f92b 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd90      	pop	{r4, r7, pc}

08005e36 <_ZN9LoRaClass9enableCrcEv>:
  writeRegister(REG_SYNC_WORD, sw);
}

//writeRegister()
void LoRaClass::enableCrc()
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  writeRegister(REG_MODEM_CONFIG_2, readRegister(REG_MODEM_CONFIG_2) | 0x04);
 8005e3e:	211e      	movs	r1, #30
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f8ee 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005e46:	4603      	mov	r3, r0
 8005e48:	f043 0304 	orr.w	r3, r3, #4
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	211e      	movs	r1, #30
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f916 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <_ZN9LoRaClass6setOCPEh>:
  writeRegister(REG_INVERTIQ2, 0x1d);
}

//writeRegister()
void LoRaClass::setOCP(uint8_t mA)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
  uint8_t ocpTrim = 27;
 8005e6c:	231b      	movs	r3, #27
 8005e6e:	73fb      	strb	r3, [r7, #15]

  if (mA <= 120) {
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	2b78      	cmp	r3, #120	; 0x78
 8005e74:	d809      	bhi.n	8005e8a <_ZN9LoRaClass6setOCPEh+0x2a>
    ocpTrim = (mA - 45) / 5;
 8005e76:	78fb      	ldrb	r3, [r7, #3]
 8005e78:	3b2d      	subs	r3, #45	; 0x2d
 8005e7a:	4a12      	ldr	r2, [pc, #72]	; (8005ec4 <_ZN9LoRaClass6setOCPEh+0x64>)
 8005e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8005e80:	1052      	asrs	r2, r2, #1
 8005e82:	17db      	asrs	r3, r3, #31
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	73fb      	strb	r3, [r7, #15]
 8005e88:	e00b      	b.n	8005ea2 <_ZN9LoRaClass6setOCPEh+0x42>
  } else if (mA <=240) {
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	2bf0      	cmp	r3, #240	; 0xf0
 8005e8e:	d808      	bhi.n	8005ea2 <_ZN9LoRaClass6setOCPEh+0x42>
    ocpTrim = (mA + 30) / 10;
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	331e      	adds	r3, #30
 8005e94:	4a0b      	ldr	r2, [pc, #44]	; (8005ec4 <_ZN9LoRaClass6setOCPEh+0x64>)
 8005e96:	fb82 1203 	smull	r1, r2, r2, r3
 8005e9a:	1092      	asrs	r2, r2, #2
 8005e9c:	17db      	asrs	r3, r3, #31
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	73fb      	strb	r3, [r7, #15]
  }

  writeRegister(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	f003 031f 	and.w	r3, r3, #31
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f043 0320 	orr.w	r3, r3, #32
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	210b      	movs	r1, #11
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f8e5 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
}
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	66666667 	.word	0x66666667

08005ec8 <_ZN9LoRaClass7setPinsEP12GPIO_TypeDeftS1_t9IRQn_Type>:
  return readRegister(REG_RSSI_WIDEBAND);
}

//internal setting
void LoRaClass::setPins(GPIO_TypeDef * nss_gpio_port, uint16_t nss_pin, GPIO_TypeDef * reset_gpio_port, uint16_t reset_pin, IRQn_Type dio0_IRQ)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	80fb      	strh	r3, [r7, #6]
	_nss_gpio_port = nss_gpio_port;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	60da      	str	r2, [r3, #12]
	_nss_pin = nss_pin,
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	88fa      	ldrh	r2, [r7, #6]
 8005ee2:	821a      	strh	r2, [r3, #16]
	_reset_gpio_port = reset_gpio_port;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	615a      	str	r2, [r3, #20]
	_reset_pin = reset_pin;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8b3a      	ldrh	r2, [r7, #24]
 8005eee:	831a      	strh	r2, [r3, #24]
	_dio0_IRQ = dio0_IRQ;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	7f3a      	ldrb	r2, [r7, #28]
 8005ef4:	769a      	strb	r2, [r3, #26]
}
 8005ef6:	bf00      	nop
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <_ZN9LoRaClass6setSPIEP19__SPI_HandleTypeDef>:

//internal setting
void LoRaClass::setSPI(SPI_HandleTypeDef* hspi)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
  _hspi = hspi;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	605a      	str	r2, [r3, #4]
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <_ZN9LoRaClass6setTIMEP17TIM_HandleTypeDef>:

//NEW
void LoRaClass::setTIM(TIM_HandleTypeDef* htim)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	6039      	str	r1, [r7, #0]
  _htim = htim;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	609a      	str	r2, [r3, #8]
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <_ZN9LoRaClass18explicitHeaderModeEv>:
  }
}

//writeRegister()
void LoRaClass::explicitHeaderMode()
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	625a      	str	r2, [r3, #36]	; 0x24

  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8005f48:	211d      	movs	r1, #29
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f869 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005f50:	4603      	mov	r3, r0
 8005f52:	f023 0301 	bic.w	r3, r3, #1
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	211d      	movs	r1, #29
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f891 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
}
 8005f62:	bf00      	nop
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <_ZN9LoRaClass18implicitHeaderModeEv>:

//writeRegister()
void LoRaClass::implicitHeaderMode()
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	625a      	str	r2, [r3, #36]	; 0x24

  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8005f78:	211d      	movs	r1, #29
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f851 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f043 0301 	orr.w	r3, r3, #1
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	211d      	movs	r1, #29
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f879 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
}
 8005f92:	bf00      	nop
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <_ZN9LoRaClass14handleDio0RiseEv>:

//readRegister(), writeRegister(), _onReceive
void LoRaClass::handleDio0Rise()
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8005fa2:	2112      	movs	r1, #18
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f83c 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005faa:	4603      	mov	r3, r0
 8005fac:	60fb      	str	r3, [r7, #12]

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	2112      	movs	r1, #18
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f864 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>

  if ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d129      	bne.n	800601a <_ZN9LoRaClass14handleDio0RiseEv+0x80>
    // received a packet
    _packetIndex = 0;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	621a      	str	r2, [r3, #32]

    // read packet length
    int packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <_ZN9LoRaClass14handleDio0RiseEv+0x46>
 8005fd4:	2122      	movs	r1, #34	; 0x22
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f823 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	e004      	b.n	8005fea <_ZN9LoRaClass14handleDio0RiseEv+0x50>
 8005fe0:	2113      	movs	r1, #19
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f81d 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	60bb      	str	r3, [r7, #8]

    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8005fec:	2110      	movs	r1, #16
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f817 	bl	8006022 <_ZN9LoRaClass12readRegisterEh>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	210d      	movs	r1, #13
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f842 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>

    if (_onReceive) {
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <_ZN9LoRaClass14handleDio0RiseEv+0x76>
      _onReceive(packetLength);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600c:	68b8      	ldr	r0, [r7, #8]
 800600e:	4798      	blx	r3
    }

    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8006010:	2200      	movs	r2, #0
 8006012:	210d      	movs	r1, #13
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f835 	bl	8006084 <_ZN9LoRaClass13writeRegisterEhh>
  }
}
 800601a:	bf00      	nop
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <_ZN9LoRaClass12readRegisterEh>:

//NEW
uint8_t LoRaClass::readRegister(uint8_t address)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	460b      	mov	r3, r1
 800602c:	70fb      	strb	r3, [r7, #3]
  //return singleTransfer(address & 0x7f, 0x00);
	uint8_t value = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	73fb      	strb	r3, [r7, #15]
	address = address & 0x7f;
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006038:	b2db      	uxtb	r3, r3
 800603a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(_nss_gpio_port, _nss_pin, GPIO_PIN_RESET);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68d8      	ldr	r0, [r3, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	8a1b      	ldrh	r3, [r3, #16]
 8006044:	2200      	movs	r2, #0
 8006046:	4619      	mov	r1, r3
 8006048:	f7fc f8e2 	bl	8002210 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (_hspi, &address, 1, 100);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6858      	ldr	r0, [r3, #4]
 8006050:	1cf9      	adds	r1, r7, #3
 8006052:	2364      	movs	r3, #100	; 0x64
 8006054:	2201      	movs	r2, #1
 8006056:	f7fd fc77 	bl	8003948 <HAL_SPI_Transmit>
	HAL_SPI_Receive (_hspi, &value, 1, 100);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6858      	ldr	r0, [r3, #4]
 800605e:	f107 010f 	add.w	r1, r7, #15
 8006062:	2364      	movs	r3, #100	; 0x64
 8006064:	2201      	movs	r2, #1
 8006066:	f7fd fdd5 	bl	8003c14 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_nss_gpio_port, _nss_pin, GPIO_PIN_SET);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68d8      	ldr	r0, [r3, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	8a1b      	ldrh	r3, [r3, #16]
 8006072:	2201      	movs	r2, #1
 8006074:	4619      	mov	r1, r3
 8006076:	f7fc f8cb 	bl	8002210 <HAL_GPIO_WritePin>
	return value;
 800607a:	7bfb      	ldrb	r3, [r7, #15]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <_ZN9LoRaClass13writeRegisterEhh>:

//NEW
void LoRaClass::writeRegister(uint8_t address, uint8_t value)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	70fb      	strb	r3, [r7, #3]
 8006090:	4613      	mov	r3, r2
 8006092:	70bb      	strb	r3, [r7, #2]
  //singleTransfer(address | 0x80, value);
	uint8_t MOSIBuffer[2];
	MOSIBuffer[0] = address | 0x80;
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800609a:	b2db      	uxtb	r3, r3
 800609c:	733b      	strb	r3, [r7, #12]
	MOSIBuffer[1] = value;
 800609e:	78bb      	ldrb	r3, [r7, #2]
 80060a0:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(_nss_gpio_port, _nss_pin, GPIO_PIN_RESET);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68d8      	ldr	r0, [r3, #12]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	8a1b      	ldrh	r3, [r3, #16]
 80060aa:	2200      	movs	r2, #0
 80060ac:	4619      	mov	r1, r3
 80060ae:	f7fc f8af 	bl	8002210 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (_hspi, MOSIBuffer, 2, 100);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6858      	ldr	r0, [r3, #4]
 80060b6:	f107 010c 	add.w	r1, r7, #12
 80060ba:	2364      	movs	r3, #100	; 0x64
 80060bc:	2202      	movs	r2, #2
 80060be:	f7fd fc43 	bl	8003948 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_nss_gpio_port, _nss_pin, GPIO_PIN_SET);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68d8      	ldr	r0, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	8a1b      	ldrh	r3, [r3, #16]
 80060ca:	2201      	movs	r2, #1
 80060cc:	4619      	mov	r1, r3
 80060ce:	f7fc f89f 	bl	8002210 <HAL_GPIO_WritePin>
}
 80060d2:	bf00      	nop
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <_ZN9LoRaClass10onDio0RiseEv>:
  return response;
}

//handleDio0Rise()
void LoRaClass::onDio0Rise()
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b082      	sub	sp, #8
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  handleDio0Rise();
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7ff ff59 	bl	8005f9a <_ZN9LoRaClass14handleDio0RiseEv>
}
 80060e8:	bf00      	nop
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <_ZN9LoRaClass5printEc>:
{
  return write(str);
}

size_t LoRaClass::print(char c)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	78fa      	ldrb	r2, [r7, #3]
 8006104:	4611      	mov	r1, r2
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	4798      	blx	r3
 800610a:	4603      	mov	r3, r0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006114:	b590      	push	{r4, r7, lr}
 8006116:	b095      	sub	sp, #84	; 0x54
 8006118:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800611a:	f7fa fc19 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800611e:	f000 f8ff 	bl	8006320 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006122:	f000 fb63 	bl	80067ec <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 8006126:	f000 fa59 	bl	80065dc <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 800612a:	f000 fa99 	bl	8006660 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 800612e:	f000 fb29 	bl	8006784 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8006132:	f000 f993 	bl	800645c <_ZL12MX_ADC1_Initv>
  MX_CAN1_Init();
 8006136:	f000 fa17 	bl	8006568 <_ZL12MX_CAN1_Initv>
  MX_UART4_Init();
 800613a:	f000 faef 	bl	800671c <_ZL13MX_UART4_Initv>
  // OBSERCACOES
  // Falta mudar a frequencia de um dos radios na funcao begin()
  // Falta verificar como a interupcao (DIO0) funciona

  //Inicializacao LoRa RX
  loraRX.setPins(SS_COMM_RX_GPIO_Port, SS_COMM_RX_Pin, RESET_COMM_RX_GPIO_Port, RESET_COMM_RX_Pin, EXTI15_10_IRQn);
 800613e:	2328      	movs	r3, #40	; 0x28
 8006140:	9301      	str	r3, [sp, #4]
 8006142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	4b65      	ldr	r3, [pc, #404]	; (80062e0 <main+0x1cc>)
 800614a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800614e:	4964      	ldr	r1, [pc, #400]	; (80062e0 <main+0x1cc>)
 8006150:	4864      	ldr	r0, [pc, #400]	; (80062e4 <main+0x1d0>)
 8006152:	f7ff feb9 	bl	8005ec8 <_ZN9LoRaClass7setPinsEP12GPIO_TypeDeftS1_t9IRQn_Type>
  loraRX.setSPI(&hspi2);
 8006156:	4964      	ldr	r1, [pc, #400]	; (80062e8 <main+0x1d4>)
 8006158:	4862      	ldr	r0, [pc, #392]	; (80062e4 <main+0x1d0>)
 800615a:	f7ff fed2 	bl	8005f02 <_ZN9LoRaClass6setSPIEP19__SPI_HandleTypeDef>
  loraRX.setTIM(&htim3);
 800615e:	4963      	ldr	r1, [pc, #396]	; (80062ec <main+0x1d8>)
 8006160:	4860      	ldr	r0, [pc, #384]	; (80062e4 <main+0x1d0>)
 8006162:	f7ff fedc 	bl	8005f1e <_ZN9LoRaClass6setTIMEP17TIM_HandleTypeDef>

  if (!loraRX.begin(433.123E6)) {
 8006166:	4962      	ldr	r1, [pc, #392]	; (80062f0 <main+0x1dc>)
 8006168:	485e      	ldr	r0, [pc, #376]	; (80062e4 <main+0x1d0>)
 800616a:	f7ff f9d9 	bl	8005520 <_ZN9LoRaClass5beginEl>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf0c      	ite	eq
 8006174:	2301      	moveq	r3, #1
 8006176:	2300      	movne	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d000      	beq.n	8006180 <main+0x6c>
   	  //printf("Starting LoRa RX failed!\n");
	  //memcpy(consoleData, "Starting LoRa RX failed!\n", 26);
	  //HAL_UART_Transmit(&huart2, consoleData, 26, 100);
   	  while (1);
 800617e:	e7fe      	b.n	800617e <main+0x6a>
  }

  loraRX.setSignalBandwidth(125E3);
 8006180:	495c      	ldr	r1, [pc, #368]	; (80062f4 <main+0x1e0>)
 8006182:	4858      	ldr	r0, [pc, #352]	; (80062e4 <main+0x1d0>)
 8006184:	f7ff fd5c 	bl	8005c40 <_ZN9LoRaClass18setSignalBandwidthEl>
  loraRX.setSpreadingFactor(11);
 8006188:	210b      	movs	r1, #11
 800618a:	4856      	ldr	r0, [pc, #344]	; (80062e4 <main+0x1d0>)
 800618c:	f7ff fcc4 	bl	8005b18 <_ZN9LoRaClass18setSpreadingFactorEi>
  loraRX.enableCrc();
 8006190:	4854      	ldr	r0, [pc, #336]	; (80062e4 <main+0x1d0>)
 8006192:	f7ff fe50 	bl	8005e36 <_ZN9LoRaClass9enableCrcEv>
  loraRX.receive();
 8006196:	2100      	movs	r1, #0
 8006198:	4852      	ldr	r0, [pc, #328]	; (80062e4 <main+0x1d0>)
 800619a:	f7ff fbdd 	bl	8005958 <_ZN9LoRaClass7receiveEi>
  //printf("LoRa RX started\n");
  //memcpy(consoleData, "LoRa RX started\n", 17);
  //HAL_UART_Transmit(&huart2, consoleData, 17, 100);

  //Inicializacao LoRa TX
  loraTX.setPins(SS_COMM_TX_GPIO_Port, SS_COMM_TX_Pin, RESET_COMM_TX_GPIO_Port, RESET_COMM_TX_Pin, EXTI9_5_IRQn);
 800619e:	2317      	movs	r3, #23
 80061a0:	9301      	str	r3, [sp, #4]
 80061a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	4b53      	ldr	r3, [pc, #332]	; (80062f8 <main+0x1e4>)
 80061aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061ae:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80061b2:	4852      	ldr	r0, [pc, #328]	; (80062fc <main+0x1e8>)
 80061b4:	f7ff fe88 	bl	8005ec8 <_ZN9LoRaClass7setPinsEP12GPIO_TypeDeftS1_t9IRQn_Type>
  loraTX.setSPI(&hspi2);
 80061b8:	494b      	ldr	r1, [pc, #300]	; (80062e8 <main+0x1d4>)
 80061ba:	4850      	ldr	r0, [pc, #320]	; (80062fc <main+0x1e8>)
 80061bc:	f7ff fea1 	bl	8005f02 <_ZN9LoRaClass6setSPIEP19__SPI_HandleTypeDef>
  loraTX.setTIM(&htim3);
 80061c0:	494a      	ldr	r1, [pc, #296]	; (80062ec <main+0x1d8>)
 80061c2:	484e      	ldr	r0, [pc, #312]	; (80062fc <main+0x1e8>)
 80061c4:	f7ff feab 	bl	8005f1e <_ZN9LoRaClass6setTIMEP17TIM_HandleTypeDef>

  if (!loraTX.begin(433.123E6)) {
 80061c8:	4949      	ldr	r1, [pc, #292]	; (80062f0 <main+0x1dc>)
 80061ca:	484c      	ldr	r0, [pc, #304]	; (80062fc <main+0x1e8>)
 80061cc:	f7ff f9a8 	bl	8005520 <_ZN9LoRaClass5beginEl>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bf0c      	ite	eq
 80061d6:	2301      	moveq	r3, #1
 80061d8:	2300      	movne	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <main+0xd4>
     printf("Starting LoRa RX failed!\n");
 80061e0:	4847      	ldr	r0, [pc, #284]	; (8006300 <main+0x1ec>)
 80061e2:	f000 ff9b 	bl	800711c <puts>
     while (1);
 80061e6:	e7fe      	b.n	80061e6 <main+0xd2>
  }
  loraTX.setTxPower(20, 1);
 80061e8:	2201      	movs	r2, #1
 80061ea:	2114      	movs	r1, #20
 80061ec:	4843      	ldr	r0, [pc, #268]	; (80062fc <main+0x1e8>)
 80061ee:	f7ff fbec 	bl	80059ca <_ZN9LoRaClass10setTxPowerEii>
  loraTX.setSignalBandwidth(125E3);
 80061f2:	4940      	ldr	r1, [pc, #256]	; (80062f4 <main+0x1e0>)
 80061f4:	4841      	ldr	r0, [pc, #260]	; (80062fc <main+0x1e8>)
 80061f6:	f7ff fd23 	bl	8005c40 <_ZN9LoRaClass18setSignalBandwidthEl>
  loraTX.setSpreadingFactor(11);
 80061fa:	210b      	movs	r1, #11
 80061fc:	483f      	ldr	r0, [pc, #252]	; (80062fc <main+0x1e8>)
 80061fe:	f7ff fc8b 	bl	8005b18 <_ZN9LoRaClass18setSpreadingFactorEi>
  loraTX.enableCrc();
 8006202:	483e      	ldr	r0, [pc, #248]	; (80062fc <main+0x1e8>)
 8006204:	f7ff fe17 	bl	8005e36 <_ZN9LoRaClass9enableCrcEv>
  printf("LoRa TX started\n");
 8006208:	483e      	ldr	r0, [pc, #248]	; (8006304 <main+0x1f0>)
 800620a:	f000 ff87 	bl	800711c <puts>

  // Initializing CAN Filter
  filterConfigCAN(&hcan1);
 800620e:	483e      	ldr	r0, [pc, #248]	; (8006308 <main+0x1f4>)
 8006210:	f000 feac 	bl	8006f6c <_Z15filterConfigCANP19__CAN_HandleTypeDef>
  HAL_CAN_Start(&hcan1);
 8006214:	483c      	ldr	r0, [pc, #240]	; (8006308 <main+0x1f4>)
 8006216:	f7fb fcfc 	bl	8001c12 <HAL_CAN_Start>

  uint32_t lorareset = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	647b      	str	r3, [r7, #68]	; 0x44
  memcpy(&lorapacket, "To vivo", sizeof(lorapacket));
 800621e:	4a3b      	ldr	r2, [pc, #236]	; (800630c <main+0x1f8>)
 8006220:	4b3b      	ldr	r3, [pc, #236]	; (8006310 <main+0x1fc>)
 8006222:	4614      	mov	r4, r2
 8006224:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Receber comando
	  if(i++ == 1 || RxData[4] == 'I'){
 800622a:	4b3a      	ldr	r3, [pc, #232]	; (8006314 <main+0x200>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	4938      	ldr	r1, [pc, #224]	; (8006314 <main+0x200>)
 8006232:	600a      	str	r2, [r1, #0]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d003      	beq.n	8006240 <main+0x12c>
 8006238:	4b37      	ldr	r3, [pc, #220]	; (8006318 <main+0x204>)
 800623a:	791b      	ldrb	r3, [r3, #4]
 800623c:	2b49      	cmp	r3, #73	; 0x49
 800623e:	d101      	bne.n	8006244 <main+0x130>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <main+0x132>
 8006244:	2300      	movs	r3, #0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00b      	beq.n	8006262 <main+0x14e>
		  HAL_Delay(1000);
 800624a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800624e:	f7fa fbef 	bl	8000a30 <HAL_Delay>
	  	  loraRX.readPacket(&RxData, 10);
 8006252:	220a      	movs	r2, #10
 8006254:	4930      	ldr	r1, [pc, #192]	; (8006318 <main+0x204>)
 8006256:	4823      	ldr	r0, [pc, #140]	; (80062e4 <main+0x1d0>)
 8006258:	f7ff f907 	bl	800546a <_ZN9LoRaClass10readPacketEPvj>
	  	  i = 0;
 800625c:	4b2d      	ldr	r3, [pc, #180]	; (8006314 <main+0x200>)
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
	  }
	  if( RxData[2] == 'M' && RxData[3] == 'M'){
 8006262:	4b2d      	ldr	r3, [pc, #180]	; (8006318 <main+0x204>)
 8006264:	789b      	ldrb	r3, [r3, #2]
 8006266:	2b4d      	cmp	r3, #77	; 0x4d
 8006268:	d12a      	bne.n	80062c0 <main+0x1ac>
 800626a:	4b2b      	ldr	r3, [pc, #172]	; (8006318 <main+0x204>)
 800626c:	78db      	ldrb	r3, [r3, #3]
 800626e:	2b4d      	cmp	r3, #77	; 0x4d
 8006270:	d126      	bne.n	80062c0 <main+0x1ac>
		  if(RxData[4] == 'I'){					//INAs
 8006272:	4b29      	ldr	r3, [pc, #164]	; (8006318 <main+0x204>)
 8006274:	791b      	ldrb	r3, [r3, #4]
 8006276:	2b49      	cmp	r3, #73	; 0x49
 8006278:	d10c      	bne.n	8006294 <main+0x180>
			  HAL_GPIO_TogglePin(TEST_LED_GPIO_Port, TEST_LED_Pin);
 800627a:	2140      	movs	r1, #64	; 0x40
 800627c:	481e      	ldr	r0, [pc, #120]	; (80062f8 <main+0x1e4>)
 800627e:	f7fb ffdf 	bl	8002240 <HAL_GPIO_TogglePin>
			  loraTX.sendPacket(&lorapacket, sizeof(lorapacket));
 8006282:	2210      	movs	r2, #16
 8006284:	4921      	ldr	r1, [pc, #132]	; (800630c <main+0x1f8>)
 8006286:	481d      	ldr	r0, [pc, #116]	; (80062fc <main+0x1e8>)
 8006288:	f7ff f8ca 	bl	8005420 <_ZN9LoRaClass10sendPacketEPvj>
			  loraRX.reset();
 800628c:	4815      	ldr	r0, [pc, #84]	; (80062e4 <main+0x1d0>)
 800628e:	f7ff f927 	bl	80054e0 <_ZN9LoRaClass5resetEv>
 8006292:	e015      	b.n	80062c0 <main+0x1ac>
		  }
		  else if(RxData[4] == 'D'){			//DEPLOY
 8006294:	4b20      	ldr	r3, [pc, #128]	; (8006318 <main+0x204>)
 8006296:	791b      	ldrb	r3, [r3, #4]
 8006298:	2b44      	cmp	r3, #68	; 0x44
 800629a:	d10e      	bne.n	80062ba <main+0x1a6>
			  HAL_GPIO_WritePin(DEPLOY_GPIO_Port, DEPLOY_Pin, GPIO_PIN_SET);
 800629c:	2201      	movs	r2, #1
 800629e:	2104      	movs	r1, #4
 80062a0:	481e      	ldr	r0, [pc, #120]	; (800631c <main+0x208>)
 80062a2:	f7fb ffb5 	bl	8002210 <HAL_GPIO_WritePin>
			  HAL_Delay(4000);
 80062a6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80062aa:	f7fa fbc1 	bl	8000a30 <HAL_Delay>
			  HAL_GPIO_WritePin(DEPLOY_GPIO_Port, DEPLOY_Pin, GPIO_PIN_RESET);
 80062ae:	2200      	movs	r2, #0
 80062b0:	2104      	movs	r1, #4
 80062b2:	481a      	ldr	r0, [pc, #104]	; (800631c <main+0x208>)
 80062b4:	f7fb ffac 	bl	8002210 <HAL_GPIO_WritePin>
 80062b8:	e002      	b.n	80062c0 <main+0x1ac>
		  }
		  else if(RxData[4] == 'E'){			//ESTABILIZACAO
 80062ba:	4b17      	ldr	r3, [pc, #92]	; (8006318 <main+0x204>)
 80062bc:	791b      	ldrb	r3, [r3, #4]
 80062be:	2b45      	cmp	r3, #69	; 0x45
		  else if(RxData[4] == 'A'){			//APONTAMENTO

		  }
	  }

	  lorareset++;
 80062c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062c2:	3301      	adds	r3, #1
 80062c4:	647b      	str	r3, [r7, #68]	; 0x44
	  if(lorareset > 10){
 80062c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062c8:	2b0a      	cmp	r3, #10
 80062ca:	d9ae      	bls.n	800622a <main+0x116>
		  loraTX.reset();
 80062cc:	480b      	ldr	r0, [pc, #44]	; (80062fc <main+0x1e8>)
 80062ce:	f7ff f907 	bl	80054e0 <_ZN9LoRaClass5resetEv>
		  loraRX.reset();
 80062d2:	4804      	ldr	r0, [pc, #16]	; (80062e4 <main+0x1d0>)
 80062d4:	f7ff f904 	bl	80054e0 <_ZN9LoRaClass5resetEv>
		  lorareset = 0;
 80062d8:	2300      	movs	r3, #0
 80062da:	647b      	str	r3, [r7, #68]	; 0x44
	  while (loraRX.available()) {
	  	//printf("%c", (char)loraRX.read());
		RxData[RxDataLength++] = (char)loraRX.read();
	  }
	  HAL_Delay(1500);
  }
 80062dc:	e7a5      	b.n	800622a <main+0x116>
 80062de:	bf00      	nop
 80062e0:	48000400 	.word	0x48000400
 80062e4:	200002bc 	.word	0x200002bc
 80062e8:	20000118 	.word	0x20000118
 80062ec:	2000017c 	.word	0x2000017c
 80062f0:	19d0eeb8 	.word	0x19d0eeb8
 80062f4:	0001e848 	.word	0x0001e848
 80062f8:	48000800 	.word	0x48000800
 80062fc:	200002e8 	.word	0x200002e8
 8006300:	0800794c 	.word	0x0800794c
 8006304:	08007968 	.word	0x08007968
 8006308:	200000f0 	.word	0x200000f0
 800630c:	20000394 	.word	0x20000394
 8006310:	08007978 	.word	0x08007978
 8006314:	200003a4 	.word	0x200003a4
 8006318:	20000314 	.word	0x20000314
 800631c:	48000c00 	.word	0x48000c00

08006320 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b0b8      	sub	sp, #224	; 0xe0
 8006324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006326:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800632a:	2244      	movs	r2, #68	; 0x44
 800632c:	2100      	movs	r1, #0
 800632e:	4618      	mov	r0, r3
 8006330:	f000 fe90 	bl	8007054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006334:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	605a      	str	r2, [r3, #4]
 800633e:	609a      	str	r2, [r3, #8]
 8006340:	60da      	str	r2, [r3, #12]
 8006342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006344:	463b      	mov	r3, r7
 8006346:	2288      	movs	r2, #136	; 0x88
 8006348:	2100      	movs	r1, #0
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fe82 	bl	8007054 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006350:	2302      	movs	r3, #2
 8006352:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800635a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800635e:	2310      	movs	r3, #16
 8006360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006364:	2302      	movs	r3, #2
 8006366:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800636a:	2302      	movs	r3, #2
 800636c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006370:	2301      	movs	r3, #1
 8006372:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8006376:	230a      	movs	r3, #10
 8006378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800637c:	2307      	movs	r3, #7
 800637e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006382:	2302      	movs	r3, #2
 8006384:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006388:	2302      	movs	r3, #2
 800638a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800638e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006392:	4618      	mov	r0, r3
 8006394:	f7fb ffea 	bl	800236c <HAL_RCC_OscConfig>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	bf14      	ite	ne
 800639e:	2301      	movne	r3, #1
 80063a0:	2300      	moveq	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 80063a8:	f000 fb0a 	bl	80069c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063ac:	230f      	movs	r3, #15
 80063ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80063b2:	2303      	movs	r3, #3
 80063b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063b8:	2300      	movs	r3, #0
 80063ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80063be:	2300      	movs	r3, #0
 80063c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80063c4:	2300      	movs	r3, #0
 80063c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80063ca:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80063ce:	2104      	movs	r1, #4
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fc fb7b 	bl	8002acc <HAL_RCC_ClockConfig>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bf14      	ite	ne
 80063dc:	2301      	movne	r3, #1
 80063de:	2300      	moveq	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 80063e6:	f000 faeb 	bl	80069c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 80063ea:	f244 030a 	movw	r3, #16394	; 0x400a
 80063ee:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80063f0:	2300      	movs	r3, #0
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80063f4:	2300      	movs	r3, #0
 80063f6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80063f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063fc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80063fe:	2302      	movs	r3, #2
 8006400:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8006402:	2301      	movs	r3, #1
 8006404:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8006406:	2308      	movs	r3, #8
 8006408:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800640a:	2307      	movs	r3, #7
 800640c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800640e:	2302      	movs	r3, #2
 8006410:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8006412:	2302      	movs	r3, #2
 8006414:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8006416:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800641a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800641c:	463b      	mov	r3, r7
 800641e:	4618      	mov	r0, r3
 8006420:	f7fc fd58 	bl	8002ed4 <HAL_RCCEx_PeriphCLKConfig>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	bf14      	ite	ne
 800642a:	2301      	movne	r3, #1
 800642c:	2300      	moveq	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <_Z18SystemClock_Configv+0x118>
  {
    Error_Handler();
 8006434:	f000 fac4 	bl	80069c0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006438:	f44f 7000 	mov.w	r0, #512	; 0x200
 800643c:	f7fb ff40 	bl	80022c0 <HAL_PWREx_ControlVoltageScaling>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	bf14      	ite	ne
 8006446:	2301      	movne	r3, #1
 8006448:	2300      	moveq	r3, #0
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <_Z18SystemClock_Configv+0x134>
  {
    Error_Handler();
 8006450:	f000 fab6 	bl	80069c0 <Error_Handler>
  }
}
 8006454:	bf00      	nop
 8006456:	37e0      	adds	r7, #224	; 0xe0
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	; 0x28
 8006460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8006462:	f107 031c 	add.w	r3, r7, #28
 8006466:	2200      	movs	r2, #0
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	605a      	str	r2, [r3, #4]
 800646c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800646e:	1d3b      	adds	r3, r7, #4
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	605a      	str	r2, [r3, #4]
 8006476:	609a      	str	r2, [r3, #8]
 8006478:	60da      	str	r2, [r3, #12]
 800647a:	611a      	str	r2, [r3, #16]
 800647c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800647e:	4b37      	ldr	r3, [pc, #220]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 8006480:	4a37      	ldr	r2, [pc, #220]	; (8006560 <_ZL12MX_ADC1_Initv+0x104>)
 8006482:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006484:	4b35      	ldr	r3, [pc, #212]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 8006486:	2200      	movs	r2, #0
 8006488:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800648a:	4b34      	ldr	r3, [pc, #208]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 800648c:	2200      	movs	r2, #0
 800648e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006490:	4b32      	ldr	r3, [pc, #200]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 8006492:	2200      	movs	r2, #0
 8006494:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006496:	4b31      	ldr	r3, [pc, #196]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 8006498:	2200      	movs	r2, #0
 800649a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800649c:	4b2f      	ldr	r3, [pc, #188]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 800649e:	2204      	movs	r2, #4
 80064a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80064a2:	4b2e      	ldr	r3, [pc, #184]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80064a8:	4b2c      	ldr	r3, [pc, #176]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80064ae:	4b2b      	ldr	r3, [pc, #172]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 80064b0:	2201      	movs	r2, #1
 80064b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80064b4:	4b29      	ldr	r3, [pc, #164]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80064bc:	4b27      	ldr	r3, [pc, #156]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 80064be:	2200      	movs	r2, #0
 80064c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80064c2:	4b26      	ldr	r3, [pc, #152]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80064c8:	4b24      	ldr	r3, [pc, #144]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80064d0:	4b22      	ldr	r3, [pc, #136]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80064d6:	4b21      	ldr	r3, [pc, #132]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80064de:	481f      	ldr	r0, [pc, #124]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 80064e0:	f7fa fc48 	bl	8000d74 <HAL_ADC_Init>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	bf14      	ite	ne
 80064ea:	2301      	movne	r3, #1
 80064ec:	2300      	moveq	r3, #0
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 80064f4:	f000 fa64 	bl	80069c0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80064f8:	2300      	movs	r3, #0
 80064fa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80064fc:	f107 031c 	add.w	r3, r7, #28
 8006500:	4619      	mov	r1, r3
 8006502:	4816      	ldr	r0, [pc, #88]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 8006504:	f7fb f914 	bl	8001730 <HAL_ADCEx_MultiModeConfigChannel>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	bf14      	ite	ne
 800650e:	2301      	movne	r3, #1
 8006510:	2300      	moveq	r3, #0
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8006518:	f000 fa52 	bl	80069c0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800651c:	4b11      	ldr	r3, [pc, #68]	; (8006564 <_ZL12MX_ADC1_Initv+0x108>)
 800651e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006520:	2306      	movs	r3, #6
 8006522:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006528:	237f      	movs	r3, #127	; 0x7f
 800652a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800652c:	2304      	movs	r3, #4
 800652e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006534:	1d3b      	adds	r3, r7, #4
 8006536:	4619      	mov	r1, r3
 8006538:	4808      	ldr	r0, [pc, #32]	; (800655c <_ZL12MX_ADC1_Initv+0x100>)
 800653a:	f7fa fd6f 	bl	800101c <HAL_ADC_ConfigChannel>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	bf14      	ite	ne
 8006544:	2301      	movne	r3, #1
 8006546:	2300      	moveq	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 800654e:	f000 fa37 	bl	80069c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006552:	bf00      	nop
 8006554:	3728      	adds	r7, #40	; 0x28
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	2000008c 	.word	0x2000008c
 8006560:	50040000 	.word	0x50040000
 8006564:	25b00200 	.word	0x25b00200

08006568 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800656c:	4b19      	ldr	r3, [pc, #100]	; (80065d4 <_ZL12MX_CAN1_Initv+0x6c>)
 800656e:	4a1a      	ldr	r2, [pc, #104]	; (80065d8 <_ZL12MX_CAN1_Initv+0x70>)
 8006570:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8006572:	4b18      	ldr	r3, [pc, #96]	; (80065d4 <_ZL12MX_CAN1_Initv+0x6c>)
 8006574:	2210      	movs	r2, #16
 8006576:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006578:	4b16      	ldr	r3, [pc, #88]	; (80065d4 <_ZL12MX_CAN1_Initv+0x6c>)
 800657a:	2200      	movs	r2, #0
 800657c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800657e:	4b15      	ldr	r3, [pc, #84]	; (80065d4 <_ZL12MX_CAN1_Initv+0x6c>)
 8006580:	2200      	movs	r2, #0
 8006582:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8006584:	4b13      	ldr	r3, [pc, #76]	; (80065d4 <_ZL12MX_CAN1_Initv+0x6c>)
 8006586:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800658a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800658c:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <_ZL12MX_CAN1_Initv+0x6c>)
 800658e:	2200      	movs	r2, #0
 8006590:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006592:	4b10      	ldr	r3, [pc, #64]	; (80065d4 <_ZL12MX_CAN1_Initv+0x6c>)
 8006594:	2200      	movs	r2, #0
 8006596:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006598:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <_ZL12MX_CAN1_Initv+0x6c>)
 800659a:	2200      	movs	r2, #0
 800659c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800659e:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <_ZL12MX_CAN1_Initv+0x6c>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80065a4:	4b0b      	ldr	r3, [pc, #44]	; (80065d4 <_ZL12MX_CAN1_Initv+0x6c>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80065aa:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <_ZL12MX_CAN1_Initv+0x6c>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80065b0:	4b08      	ldr	r3, [pc, #32]	; (80065d4 <_ZL12MX_CAN1_Initv+0x6c>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80065b6:	4807      	ldr	r0, [pc, #28]	; (80065d4 <_ZL12MX_CAN1_Initv+0x6c>)
 80065b8:	f7fb f966 	bl	8001888 <HAL_CAN_Init>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bf14      	ite	ne
 80065c2:	2301      	movne	r3, #1
 80065c4:	2300      	moveq	r3, #0
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 80065cc:	f000 f9f8 	bl	80069c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80065d0:	bf00      	nop
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	200000f0 	.word	0x200000f0
 80065d8:	40006400 	.word	0x40006400

080065dc <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80065e0:	4b1d      	ldr	r3, [pc, #116]	; (8006658 <_ZL12MX_SPI2_Initv+0x7c>)
 80065e2:	4a1e      	ldr	r2, [pc, #120]	; (800665c <_ZL12MX_SPI2_Initv+0x80>)
 80065e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80065e6:	4b1c      	ldr	r3, [pc, #112]	; (8006658 <_ZL12MX_SPI2_Initv+0x7c>)
 80065e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80065ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80065ee:	4b1a      	ldr	r3, [pc, #104]	; (8006658 <_ZL12MX_SPI2_Initv+0x7c>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80065f4:	4b18      	ldr	r3, [pc, #96]	; (8006658 <_ZL12MX_SPI2_Initv+0x7c>)
 80065f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80065fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80065fc:	4b16      	ldr	r3, [pc, #88]	; (8006658 <_ZL12MX_SPI2_Initv+0x7c>)
 80065fe:	2200      	movs	r2, #0
 8006600:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006602:	4b15      	ldr	r3, [pc, #84]	; (8006658 <_ZL12MX_SPI2_Initv+0x7c>)
 8006604:	2200      	movs	r2, #0
 8006606:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006608:	4b13      	ldr	r3, [pc, #76]	; (8006658 <_ZL12MX_SPI2_Initv+0x7c>)
 800660a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800660e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006610:	4b11      	ldr	r3, [pc, #68]	; (8006658 <_ZL12MX_SPI2_Initv+0x7c>)
 8006612:	2220      	movs	r2, #32
 8006614:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006616:	4b10      	ldr	r3, [pc, #64]	; (8006658 <_ZL12MX_SPI2_Initv+0x7c>)
 8006618:	2200      	movs	r2, #0
 800661a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800661c:	4b0e      	ldr	r3, [pc, #56]	; (8006658 <_ZL12MX_SPI2_Initv+0x7c>)
 800661e:	2200      	movs	r2, #0
 8006620:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006622:	4b0d      	ldr	r3, [pc, #52]	; (8006658 <_ZL12MX_SPI2_Initv+0x7c>)
 8006624:	2200      	movs	r2, #0
 8006626:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8006628:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <_ZL12MX_SPI2_Initv+0x7c>)
 800662a:	2207      	movs	r2, #7
 800662c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800662e:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <_ZL12MX_SPI2_Initv+0x7c>)
 8006630:	2200      	movs	r2, #0
 8006632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006634:	4b08      	ldr	r3, [pc, #32]	; (8006658 <_ZL12MX_SPI2_Initv+0x7c>)
 8006636:	2208      	movs	r2, #8
 8006638:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800663a:	4807      	ldr	r0, [pc, #28]	; (8006658 <_ZL12MX_SPI2_Initv+0x7c>)
 800663c:	f7fd f8fa 	bl	8003834 <HAL_SPI_Init>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	bf14      	ite	ne
 8006646:	2301      	movne	r3, #1
 8006648:	2300      	moveq	r3, #0
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8006650:	f000 f9b6 	bl	80069c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006654:	bf00      	nop
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20000118 	.word	0x20000118
 800665c:	40003800 	.word	0x40003800

08006660 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b088      	sub	sp, #32
 8006664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006666:	f107 0310 	add.w	r3, r7, #16
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	605a      	str	r2, [r3, #4]
 8006670:	609a      	str	r2, [r3, #8]
 8006672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006674:	1d3b      	adds	r3, r7, #4
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	605a      	str	r2, [r3, #4]
 800667c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800667e:	4b25      	ldr	r3, [pc, #148]	; (8006714 <_ZL12MX_TIM3_Initv+0xb4>)
 8006680:	4a25      	ldr	r2, [pc, #148]	; (8006718 <_ZL12MX_TIM3_Initv+0xb8>)
 8006682:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8006684:	4b23      	ldr	r3, [pc, #140]	; (8006714 <_ZL12MX_TIM3_Initv+0xb4>)
 8006686:	224f      	movs	r2, #79	; 0x4f
 8006688:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800668a:	4b22      	ldr	r3, [pc, #136]	; (8006714 <_ZL12MX_TIM3_Initv+0xb4>)
 800668c:	2200      	movs	r2, #0
 800668e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8006690:	4b20      	ldr	r3, [pc, #128]	; (8006714 <_ZL12MX_TIM3_Initv+0xb4>)
 8006692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006696:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006698:	4b1e      	ldr	r3, [pc, #120]	; (8006714 <_ZL12MX_TIM3_Initv+0xb4>)
 800669a:	2200      	movs	r2, #0
 800669c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800669e:	4b1d      	ldr	r3, [pc, #116]	; (8006714 <_ZL12MX_TIM3_Initv+0xb4>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80066a4:	481b      	ldr	r0, [pc, #108]	; (8006714 <_ZL12MX_TIM3_Initv+0xb4>)
 80066a6:	f7fd ff65 	bl	8004574 <HAL_TIM_Base_Init>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	bf14      	ite	ne
 80066b0:	2301      	movne	r3, #1
 80066b2:	2300      	moveq	r3, #0
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 80066ba:	f000 f981 	bl	80069c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80066be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80066c4:	f107 0310 	add.w	r3, r7, #16
 80066c8:	4619      	mov	r1, r3
 80066ca:	4812      	ldr	r0, [pc, #72]	; (8006714 <_ZL12MX_TIM3_Initv+0xb4>)
 80066cc:	f7fd ff7d 	bl	80045ca <HAL_TIM_ConfigClockSource>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	bf14      	ite	ne
 80066d6:	2301      	movne	r3, #1
 80066d8:	2300      	moveq	r3, #0
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 80066e0:	f000 f96e 	bl	80069c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066e4:	2300      	movs	r3, #0
 80066e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80066ec:	1d3b      	adds	r3, r7, #4
 80066ee:	4619      	mov	r1, r3
 80066f0:	4808      	ldr	r0, [pc, #32]	; (8006714 <_ZL12MX_TIM3_Initv+0xb4>)
 80066f2:	f7fe f957 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	bf14      	ite	ne
 80066fc:	2301      	movne	r3, #1
 80066fe:	2300      	moveq	r3, #0
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8006706:	f000 f95b 	bl	80069c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800670a:	bf00      	nop
 800670c:	3720      	adds	r7, #32
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	2000017c 	.word	0x2000017c
 8006718:	40000400 	.word	0x40000400

0800671c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8006720:	4b16      	ldr	r3, [pc, #88]	; (800677c <_ZL13MX_UART4_Initv+0x60>)
 8006722:	4a17      	ldr	r2, [pc, #92]	; (8006780 <_ZL13MX_UART4_Initv+0x64>)
 8006724:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8006726:	4b15      	ldr	r3, [pc, #84]	; (800677c <_ZL13MX_UART4_Initv+0x60>)
 8006728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800672c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800672e:	4b13      	ldr	r3, [pc, #76]	; (800677c <_ZL13MX_UART4_Initv+0x60>)
 8006730:	2200      	movs	r2, #0
 8006732:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006734:	4b11      	ldr	r3, [pc, #68]	; (800677c <_ZL13MX_UART4_Initv+0x60>)
 8006736:	2200      	movs	r2, #0
 8006738:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800673a:	4b10      	ldr	r3, [pc, #64]	; (800677c <_ZL13MX_UART4_Initv+0x60>)
 800673c:	2200      	movs	r2, #0
 800673e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006740:	4b0e      	ldr	r3, [pc, #56]	; (800677c <_ZL13MX_UART4_Initv+0x60>)
 8006742:	220c      	movs	r2, #12
 8006744:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006746:	4b0d      	ldr	r3, [pc, #52]	; (800677c <_ZL13MX_UART4_Initv+0x60>)
 8006748:	2200      	movs	r2, #0
 800674a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800674c:	4b0b      	ldr	r3, [pc, #44]	; (800677c <_ZL13MX_UART4_Initv+0x60>)
 800674e:	2200      	movs	r2, #0
 8006750:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006752:	4b0a      	ldr	r3, [pc, #40]	; (800677c <_ZL13MX_UART4_Initv+0x60>)
 8006754:	2200      	movs	r2, #0
 8006756:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006758:	4b08      	ldr	r3, [pc, #32]	; (800677c <_ZL13MX_UART4_Initv+0x60>)
 800675a:	2200      	movs	r2, #0
 800675c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800675e:	4807      	ldr	r0, [pc, #28]	; (800677c <_ZL13MX_UART4_Initv+0x60>)
 8006760:	f7fe f97c 	bl	8004a5c <HAL_UART_Init>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	bf14      	ite	ne
 800676a:	2301      	movne	r3, #1
 800676c:	2300      	moveq	r3, #0
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 8006774:	f000 f924 	bl	80069c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8006778:	bf00      	nop
 800677a:	bd80      	pop	{r7, pc}
 800677c:	200001bc 	.word	0x200001bc
 8006780:	40004c00 	.word	0x40004c00

08006784 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006788:	4b16      	ldr	r3, [pc, #88]	; (80067e4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800678a:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <_ZL19MX_USART2_UART_Initv+0x64>)
 800678c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800678e:	4b15      	ldr	r3, [pc, #84]	; (80067e4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8006790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006796:	4b13      	ldr	r3, [pc, #76]	; (80067e4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8006798:	2200      	movs	r2, #0
 800679a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800679c:	4b11      	ldr	r3, [pc, #68]	; (80067e4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800679e:	2200      	movs	r2, #0
 80067a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80067a2:	4b10      	ldr	r3, [pc, #64]	; (80067e4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80067a8:	4b0e      	ldr	r3, [pc, #56]	; (80067e4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80067aa:	220c      	movs	r2, #12
 80067ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067ae:	4b0d      	ldr	r3, [pc, #52]	; (80067e4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80067b4:	4b0b      	ldr	r3, [pc, #44]	; (80067e4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80067ba:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80067bc:	2200      	movs	r2, #0
 80067be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80067c0:	4b08      	ldr	r3, [pc, #32]	; (80067e4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80067c6:	4807      	ldr	r0, [pc, #28]	; (80067e4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80067c8:	f7fe f948 	bl	8004a5c <HAL_UART_Init>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	bf14      	ite	ne
 80067d2:	2301      	movne	r3, #1
 80067d4:	2300      	moveq	r3, #0
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80067dc:	f000 f8f0 	bl	80069c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80067e0:	bf00      	nop
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	2000023c 	.word	0x2000023c
 80067e8:	40004400 	.word	0x40004400

080067ec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08a      	sub	sp, #40	; 0x28
 80067f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f2:	f107 0314 	add.w	r3, r7, #20
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	605a      	str	r2, [r3, #4]
 80067fc:	609a      	str	r2, [r3, #8]
 80067fe:	60da      	str	r2, [r3, #12]
 8006800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006802:	4b5c      	ldr	r3, [pc, #368]	; (8006974 <_ZL12MX_GPIO_Initv+0x188>)
 8006804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006806:	4a5b      	ldr	r2, [pc, #364]	; (8006974 <_ZL12MX_GPIO_Initv+0x188>)
 8006808:	f043 0304 	orr.w	r3, r3, #4
 800680c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800680e:	4b59      	ldr	r3, [pc, #356]	; (8006974 <_ZL12MX_GPIO_Initv+0x188>)
 8006810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006812:	f003 0304 	and.w	r3, r3, #4
 8006816:	613b      	str	r3, [r7, #16]
 8006818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800681a:	4b56      	ldr	r3, [pc, #344]	; (8006974 <_ZL12MX_GPIO_Initv+0x188>)
 800681c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800681e:	4a55      	ldr	r2, [pc, #340]	; (8006974 <_ZL12MX_GPIO_Initv+0x188>)
 8006820:	f043 0301 	orr.w	r3, r3, #1
 8006824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006826:	4b53      	ldr	r3, [pc, #332]	; (8006974 <_ZL12MX_GPIO_Initv+0x188>)
 8006828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006832:	4b50      	ldr	r3, [pc, #320]	; (8006974 <_ZL12MX_GPIO_Initv+0x188>)
 8006834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006836:	4a4f      	ldr	r2, [pc, #316]	; (8006974 <_ZL12MX_GPIO_Initv+0x188>)
 8006838:	f043 0302 	orr.w	r3, r3, #2
 800683c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800683e:	4b4d      	ldr	r3, [pc, #308]	; (8006974 <_ZL12MX_GPIO_Initv+0x188>)
 8006840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	60bb      	str	r3, [r7, #8]
 8006848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800684a:	4b4a      	ldr	r3, [pc, #296]	; (8006974 <_ZL12MX_GPIO_Initv+0x188>)
 800684c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800684e:	4a49      	ldr	r2, [pc, #292]	; (8006974 <_ZL12MX_GPIO_Initv+0x188>)
 8006850:	f043 0308 	orr.w	r3, r3, #8
 8006854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006856:	4b47      	ldr	r3, [pc, #284]	; (8006974 <_ZL12MX_GPIO_Initv+0x188>)
 8006858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	607b      	str	r3, [r7, #4]
 8006860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_COMM_RX_Pin|SS_COMM_RX_Pin, GPIO_PIN_SET);
 8006862:	2201      	movs	r2, #1
 8006864:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006868:	4843      	ldr	r0, [pc, #268]	; (8006978 <_ZL12MX_GPIO_Initv+0x18c>)
 800686a:	f7fb fcd1 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 800686e:	2200      	movs	r2, #0
 8006870:	2140      	movs	r1, #64	; 0x40
 8006872:	4842      	ldr	r0, [pc, #264]	; (800697c <_ZL12MX_GPIO_Initv+0x190>)
 8006874:	f7fb fccc 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_COMM_TX_GPIO_Port, RESET_COMM_TX_Pin, GPIO_PIN_SET);
 8006878:	2201      	movs	r2, #1
 800687a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800687e:	483f      	ldr	r0, [pc, #252]	; (800697c <_ZL12MX_GPIO_Initv+0x190>)
 8006880:	f7fb fcc6 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_COMM_TX_GPIO_Port, SS_COMM_TX_Pin, GPIO_PIN_SET);
 8006884:	2201      	movs	r2, #1
 8006886:	f44f 7180 	mov.w	r1, #256	; 0x100
 800688a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800688e:	f7fb fcbf 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEPLOY_GPIO_Port, DEPLOY_Pin, GPIO_PIN_RESET);
 8006892:	2200      	movs	r2, #0
 8006894:	2104      	movs	r1, #4
 8006896:	483a      	ldr	r0, [pc, #232]	; (8006980 <_ZL12MX_GPIO_Initv+0x194>)
 8006898:	f7fb fcba 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RESET_COMM_RX_Pin SS_COMM_RX_Pin */
  GPIO_InitStruct.Pin = RESET_COMM_RX_Pin|SS_COMM_RX_Pin;
 800689c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80068a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068a2:	2301      	movs	r3, #1
 80068a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068aa:	2300      	movs	r3, #0
 80068ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068ae:	f107 0314 	add.w	r3, r7, #20
 80068b2:	4619      	mov	r1, r3
 80068b4:	4830      	ldr	r0, [pc, #192]	; (8006978 <_ZL12MX_GPIO_Initv+0x18c>)
 80068b6:	f7fb fb03 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_RX_Pin */
  GPIO_InitStruct.Pin = DIO0_RX_Pin;
 80068ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80068c0:	4b30      	ldr	r3, [pc, #192]	; (8006984 <_ZL12MX_GPIO_Initv+0x198>)
 80068c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068c4:	2300      	movs	r3, #0
 80068c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_RX_GPIO_Port, &GPIO_InitStruct);
 80068c8:	f107 0314 	add.w	r3, r7, #20
 80068cc:	4619      	mov	r1, r3
 80068ce:	482a      	ldr	r0, [pc, #168]	; (8006978 <_ZL12MX_GPIO_Initv+0x18c>)
 80068d0:	f7fb faf6 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_LED_Pin RESET_COMM_TX_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin|RESET_COMM_TX_Pin;
 80068d4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80068d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068da:	2301      	movs	r3, #1
 80068dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068de:	2300      	movs	r3, #0
 80068e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068e2:	2300      	movs	r3, #0
 80068e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068e6:	f107 0314 	add.w	r3, r7, #20
 80068ea:	4619      	mov	r1, r3
 80068ec:	4823      	ldr	r0, [pc, #140]	; (800697c <_ZL12MX_GPIO_Initv+0x190>)
 80068ee:	f7fb fae7 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_COMM_TX_Pin */
  GPIO_InitStruct.Pin = SS_COMM_TX_Pin;
 80068f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068f8:	2301      	movs	r3, #1
 80068fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006900:	2300      	movs	r3, #0
 8006902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_COMM_TX_GPIO_Port, &GPIO_InitStruct);
 8006904:	f107 0314 	add.w	r3, r7, #20
 8006908:	4619      	mov	r1, r3
 800690a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800690e:	f7fb fad7 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_COMM_TX_Pin */
  GPIO_InitStruct.Pin = DIO0_COMM_TX_Pin;
 8006912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006918:	4b1a      	ldr	r3, [pc, #104]	; (8006984 <_ZL12MX_GPIO_Initv+0x198>)
 800691a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800691c:	2300      	movs	r3, #0
 800691e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_COMM_TX_GPIO_Port, &GPIO_InitStruct);
 8006920:	f107 0314 	add.w	r3, r7, #20
 8006924:	4619      	mov	r1, r3
 8006926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800692a:	f7fb fac9 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEPLOY_Pin */
  GPIO_InitStruct.Pin = DEPLOY_Pin;
 800692e:	2304      	movs	r3, #4
 8006930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006932:	2301      	movs	r3, #1
 8006934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006936:	2300      	movs	r3, #0
 8006938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800693a:	2300      	movs	r3, #0
 800693c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DEPLOY_GPIO_Port, &GPIO_InitStruct);
 800693e:	f107 0314 	add.w	r3, r7, #20
 8006942:	4619      	mov	r1, r3
 8006944:	480e      	ldr	r0, [pc, #56]	; (8006980 <_ZL12MX_GPIO_Initv+0x194>)
 8006946:	f7fb fabb 	bl	8001ec0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800694a:	2200      	movs	r2, #0
 800694c:	2100      	movs	r1, #0
 800694e:	2017      	movs	r0, #23
 8006950:	f7fb fa7f 	bl	8001e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006954:	2017      	movs	r0, #23
 8006956:	f7fb fa98 	bl	8001e8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800695a:	2200      	movs	r2, #0
 800695c:	2100      	movs	r1, #0
 800695e:	2028      	movs	r0, #40	; 0x28
 8006960:	f7fb fa77 	bl	8001e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006964:	2028      	movs	r0, #40	; 0x28
 8006966:	f7fb fa90 	bl	8001e8a <HAL_NVIC_EnableIRQ>

}
 800696a:	bf00      	nop
 800696c:	3728      	adds	r7, #40	; 0x28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40021000 	.word	0x40021000
 8006978:	48000400 	.word	0x48000400
 800697c:	48000800 	.word	0x48000800
 8006980:	48000c00 	.word	0x48000c00
 8006984:	10110000 	.word	0x10110000

08006988 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	4603      	mov	r3, r0
 8006990:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DIO0_COMM_TX_Pin){
 8006992:	88fb      	ldrh	r3, [r7, #6]
 8006994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006998:	d102      	bne.n	80069a0 <HAL_GPIO_EXTI_Callback+0x18>
		loraTX.onDio0Rise();
 800699a:	4807      	ldr	r0, [pc, #28]	; (80069b8 <HAL_GPIO_EXTI_Callback+0x30>)
 800699c:	f7ff fb9d 	bl	80060da <_ZN9LoRaClass10onDio0RiseEv>
	}
	if(GPIO_Pin == DIO0_RX_Pin){
 80069a0:	88fb      	ldrh	r3, [r7, #6]
 80069a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069a6:	d102      	bne.n	80069ae <HAL_GPIO_EXTI_Callback+0x26>
		loraRX.onDio0Rise();
 80069a8:	4804      	ldr	r0, [pc, #16]	; (80069bc <HAL_GPIO_EXTI_Callback+0x34>)
 80069aa:	f7ff fb96 	bl	80060da <_ZN9LoRaClass10onDio0RiseEv>
	}
}
 80069ae:	bf00      	nop
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	200002e8 	.word	0x200002e8
 80069bc:	200002bc 	.word	0x200002bc

080069c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80069c4:	bf00      	nop
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <_Z41__static_initialization_and_destruction_0ii>:
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d10a      	bne.n	80069f6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d105      	bne.n	80069f6 <_Z41__static_initialization_and_destruction_0ii+0x26>
LoRaClass loraRX, loraTX;
 80069ea:	4805      	ldr	r0, [pc, #20]	; (8006a00 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80069ec:	f7fe fcfc 	bl	80053e8 <_ZN9LoRaClassC1Ev>
 80069f0:	4804      	ldr	r0, [pc, #16]	; (8006a04 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80069f2:	f7fe fcf9 	bl	80053e8 <_ZN9LoRaClassC1Ev>
}
 80069f6:	bf00      	nop
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	200002bc 	.word	0x200002bc
 8006a04:	200002e8 	.word	0x200002e8

08006a08 <_GLOBAL__sub_I_ina219_i2caddr>:
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006a10:	2001      	movs	r0, #1
 8006a12:	f7ff ffdd 	bl	80069d0 <_Z41__static_initialization_and_destruction_0ii>
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a1e:	4b0f      	ldr	r3, [pc, #60]	; (8006a5c <HAL_MspInit+0x44>)
 8006a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a22:	4a0e      	ldr	r2, [pc, #56]	; (8006a5c <HAL_MspInit+0x44>)
 8006a24:	f043 0301 	orr.w	r3, r3, #1
 8006a28:	6613      	str	r3, [r2, #96]	; 0x60
 8006a2a:	4b0c      	ldr	r3, [pc, #48]	; (8006a5c <HAL_MspInit+0x44>)
 8006a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	607b      	str	r3, [r7, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a36:	4b09      	ldr	r3, [pc, #36]	; (8006a5c <HAL_MspInit+0x44>)
 8006a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3a:	4a08      	ldr	r2, [pc, #32]	; (8006a5c <HAL_MspInit+0x44>)
 8006a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a40:	6593      	str	r3, [r2, #88]	; 0x58
 8006a42:	4b06      	ldr	r3, [pc, #24]	; (8006a5c <HAL_MspInit+0x44>)
 8006a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a4e:	bf00      	nop
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40021000 	.word	0x40021000

08006a60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08a      	sub	sp, #40	; 0x28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a68:	f107 0314 	add.w	r3, r7, #20
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	605a      	str	r2, [r3, #4]
 8006a72:	609a      	str	r2, [r3, #8]
 8006a74:	60da      	str	r2, [r3, #12]
 8006a76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a15      	ldr	r2, [pc, #84]	; (8006ad4 <HAL_ADC_MspInit+0x74>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d124      	bne.n	8006acc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8006a82:	4b15      	ldr	r3, [pc, #84]	; (8006ad8 <HAL_ADC_MspInit+0x78>)
 8006a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a86:	4a14      	ldr	r2, [pc, #80]	; (8006ad8 <HAL_ADC_MspInit+0x78>)
 8006a88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a8e:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <HAL_ADC_MspInit+0x78>)
 8006a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a96:	613b      	str	r3, [r7, #16]
 8006a98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a9a:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <HAL_ADC_MspInit+0x78>)
 8006a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a9e:	4a0e      	ldr	r2, [pc, #56]	; (8006ad8 <HAL_ADC_MspInit+0x78>)
 8006aa0:	f043 0301 	orr.w	r3, r3, #1
 8006aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006aa6:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <HAL_ADC_MspInit+0x78>)
 8006aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = THERM_Pin;
 8006ab2:	2310      	movs	r3, #16
 8006ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006ab6:	230b      	movs	r3, #11
 8006ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(THERM_GPIO_Port, &GPIO_InitStruct);
 8006abe:	f107 0314 	add.w	r3, r7, #20
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ac8:	f7fb f9fa 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006acc:	bf00      	nop
 8006ace:	3728      	adds	r7, #40	; 0x28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	50040000 	.word	0x50040000
 8006ad8:	40021000 	.word	0x40021000

08006adc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	; 0x28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ae4:	f107 0314 	add.w	r3, r7, #20
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	605a      	str	r2, [r3, #4]
 8006aee:	609a      	str	r2, [r3, #8]
 8006af0:	60da      	str	r2, [r3, #12]
 8006af2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <HAL_CAN_MspInit+0x80>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d129      	bne.n	8006b52 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006afe:	4b18      	ldr	r3, [pc, #96]	; (8006b60 <HAL_CAN_MspInit+0x84>)
 8006b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b02:	4a17      	ldr	r2, [pc, #92]	; (8006b60 <HAL_CAN_MspInit+0x84>)
 8006b04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b08:	6593      	str	r3, [r2, #88]	; 0x58
 8006b0a:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <HAL_CAN_MspInit+0x84>)
 8006b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b12:	613b      	str	r3, [r7, #16]
 8006b14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b16:	4b12      	ldr	r3, [pc, #72]	; (8006b60 <HAL_CAN_MspInit+0x84>)
 8006b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1a:	4a11      	ldr	r2, [pc, #68]	; (8006b60 <HAL_CAN_MspInit+0x84>)
 8006b1c:	f043 0301 	orr.w	r3, r3, #1
 8006b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b22:	4b0f      	ldr	r3, [pc, #60]	; (8006b60 <HAL_CAN_MspInit+0x84>)
 8006b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b34:	2302      	movs	r3, #2
 8006b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006b40:	2309      	movs	r3, #9
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b44:	f107 0314 	add.w	r3, r7, #20
 8006b48:	4619      	mov	r1, r3
 8006b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b4e:	f7fb f9b7 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8006b52:	bf00      	nop
 8006b54:	3728      	adds	r7, #40	; 0x28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	40006400 	.word	0x40006400
 8006b60:	40021000 	.word	0x40021000

08006b64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	; 0x28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b6c:	f107 0314 	add.w	r3, r7, #20
 8006b70:	2200      	movs	r2, #0
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	605a      	str	r2, [r3, #4]
 8006b76:	609a      	str	r2, [r3, #8]
 8006b78:	60da      	str	r2, [r3, #12]
 8006b7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a25      	ldr	r2, [pc, #148]	; (8006c18 <HAL_SPI_MspInit+0xb4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d144      	bne.n	8006c10 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006b86:	4b25      	ldr	r3, [pc, #148]	; (8006c1c <HAL_SPI_MspInit+0xb8>)
 8006b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8a:	4a24      	ldr	r2, [pc, #144]	; (8006c1c <HAL_SPI_MspInit+0xb8>)
 8006b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b90:	6593      	str	r3, [r2, #88]	; 0x58
 8006b92:	4b22      	ldr	r3, [pc, #136]	; (8006c1c <HAL_SPI_MspInit+0xb8>)
 8006b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b9e:	4b1f      	ldr	r3, [pc, #124]	; (8006c1c <HAL_SPI_MspInit+0xb8>)
 8006ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba2:	4a1e      	ldr	r2, [pc, #120]	; (8006c1c <HAL_SPI_MspInit+0xb8>)
 8006ba4:	f043 0304 	orr.w	r3, r3, #4
 8006ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006baa:	4b1c      	ldr	r3, [pc, #112]	; (8006c1c <HAL_SPI_MspInit+0xb8>)
 8006bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bae:	f003 0304 	and.w	r3, r3, #4
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bb6:	4b19      	ldr	r3, [pc, #100]	; (8006c1c <HAL_SPI_MspInit+0xb8>)
 8006bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bba:	4a18      	ldr	r2, [pc, #96]	; (8006c1c <HAL_SPI_MspInit+0xb8>)
 8006bbc:	f043 0302 	orr.w	r3, r3, #2
 8006bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bc2:	4b16      	ldr	r3, [pc, #88]	; (8006c1c <HAL_SPI_MspInit+0xb8>)
 8006bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	60bb      	str	r3, [r7, #8]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = MISO_COMM_Pin|MOSI_COMM_Pin;
 8006bce:	230c      	movs	r3, #12
 8006bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006bde:	2305      	movs	r3, #5
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006be2:	f107 0314 	add.w	r3, r7, #20
 8006be6:	4619      	mov	r1, r3
 8006be8:	480d      	ldr	r0, [pc, #52]	; (8006c20 <HAL_SPI_MspInit+0xbc>)
 8006bea:	f7fb f969 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_COMM_Pin;
 8006bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006c00:	2305      	movs	r3, #5
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCK_COMM_GPIO_Port, &GPIO_InitStruct);
 8006c04:	f107 0314 	add.w	r3, r7, #20
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4806      	ldr	r0, [pc, #24]	; (8006c24 <HAL_SPI_MspInit+0xc0>)
 8006c0c:	f7fb f958 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006c10:	bf00      	nop
 8006c12:	3728      	adds	r7, #40	; 0x28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	40003800 	.word	0x40003800
 8006c1c:	40021000 	.word	0x40021000
 8006c20:	48000800 	.word	0x48000800
 8006c24:	48000400 	.word	0x48000400

08006c28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a0a      	ldr	r2, [pc, #40]	; (8006c60 <HAL_TIM_Base_MspInit+0x38>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d10b      	bne.n	8006c52 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006c3a:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <HAL_TIM_Base_MspInit+0x3c>)
 8006c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3e:	4a09      	ldr	r2, [pc, #36]	; (8006c64 <HAL_TIM_Base_MspInit+0x3c>)
 8006c40:	f043 0302 	orr.w	r3, r3, #2
 8006c44:	6593      	str	r3, [r2, #88]	; 0x58
 8006c46:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <HAL_TIM_Base_MspInit+0x3c>)
 8006c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006c52:	bf00      	nop
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40000400 	.word	0x40000400
 8006c64:	40021000 	.word	0x40021000

08006c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08c      	sub	sp, #48	; 0x30
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c70:	f107 031c 	add.w	r3, r7, #28
 8006c74:	2200      	movs	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	605a      	str	r2, [r3, #4]
 8006c7a:	609a      	str	r2, [r3, #8]
 8006c7c:	60da      	str	r2, [r3, #12]
 8006c7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a2f      	ldr	r2, [pc, #188]	; (8006d44 <HAL_UART_MspInit+0xdc>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d129      	bne.n	8006cde <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006c8a:	4b2f      	ldr	r3, [pc, #188]	; (8006d48 <HAL_UART_MspInit+0xe0>)
 8006c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8e:	4a2e      	ldr	r2, [pc, #184]	; (8006d48 <HAL_UART_MspInit+0xe0>)
 8006c90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c94:	6593      	str	r3, [r2, #88]	; 0x58
 8006c96:	4b2c      	ldr	r3, [pc, #176]	; (8006d48 <HAL_UART_MspInit+0xe0>)
 8006c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c9e:	61bb      	str	r3, [r7, #24]
 8006ca0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ca2:	4b29      	ldr	r3, [pc, #164]	; (8006d48 <HAL_UART_MspInit+0xe0>)
 8006ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca6:	4a28      	ldr	r2, [pc, #160]	; (8006d48 <HAL_UART_MspInit+0xe0>)
 8006ca8:	f043 0301 	orr.w	r3, r3, #1
 8006cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cae:	4b26      	ldr	r3, [pc, #152]	; (8006d48 <HAL_UART_MspInit+0xe0>)
 8006cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006cca:	2308      	movs	r3, #8
 8006ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cce:	f107 031c 	add.w	r3, r7, #28
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006cd8:	f7fb f8f2 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006cdc:	e02d      	b.n	8006d3a <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART2)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a1a      	ldr	r2, [pc, #104]	; (8006d4c <HAL_UART_MspInit+0xe4>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d128      	bne.n	8006d3a <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006ce8:	4b17      	ldr	r3, [pc, #92]	; (8006d48 <HAL_UART_MspInit+0xe0>)
 8006cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cec:	4a16      	ldr	r2, [pc, #88]	; (8006d48 <HAL_UART_MspInit+0xe0>)
 8006cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8006cf4:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <HAL_UART_MspInit+0xe0>)
 8006cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d00:	4b11      	ldr	r3, [pc, #68]	; (8006d48 <HAL_UART_MspInit+0xe0>)
 8006d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d04:	4a10      	ldr	r2, [pc, #64]	; (8006d48 <HAL_UART_MspInit+0xe0>)
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d0c:	4b0e      	ldr	r3, [pc, #56]	; (8006d48 <HAL_UART_MspInit+0xe0>)
 8006d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006d18:	230c      	movs	r3, #12
 8006d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d24:	2303      	movs	r3, #3
 8006d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006d28:	2307      	movs	r3, #7
 8006d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d2c:	f107 031c 	add.w	r3, r7, #28
 8006d30:	4619      	mov	r1, r3
 8006d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d36:	f7fb f8c3 	bl	8001ec0 <HAL_GPIO_Init>
}
 8006d3a:	bf00      	nop
 8006d3c:	3730      	adds	r7, #48	; 0x30
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	40004c00 	.word	0x40004c00
 8006d48:	40021000 	.word	0x40021000
 8006d4c:	40004400 	.word	0x40004400

08006d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d50:	b480      	push	{r7}
 8006d52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006d54:	bf00      	nop
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d62:	e7fe      	b.n	8006d62 <HardFault_Handler+0x4>

08006d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d64:	b480      	push	{r7}
 8006d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d68:	e7fe      	b.n	8006d68 <MemManage_Handler+0x4>

08006d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d6e:	e7fe      	b.n	8006d6e <BusFault_Handler+0x4>

08006d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d70:	b480      	push	{r7}
 8006d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d74:	e7fe      	b.n	8006d74 <UsageFault_Handler+0x4>

08006d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006d76:	b480      	push	{r7}
 8006d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006d7a:	bf00      	nop
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d88:	bf00      	nop
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006d92:	b480      	push	{r7}
 8006d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006d96:	bf00      	nop
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006da4:	f7f9 fe26 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006da8:	bf00      	nop
 8006daa:	bd80      	pop	{r7, pc}

08006dac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8006db0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006db4:	f7fb fa5e 	bl	8002274 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006db8:	bf00      	nop
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8006dc0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006dc4:	f7fb fa56 	bl	8002274 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006dc8:	bf00      	nop
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006dd8:	2300      	movs	r3, #0
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	e00a      	b.n	8006df4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006dde:	f3af 8000 	nop.w
 8006de2:	4601      	mov	r1, r0
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	60ba      	str	r2, [r7, #8]
 8006dea:	b2ca      	uxtb	r2, r1
 8006dec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	3301      	adds	r3, #1
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	dbf0      	blt.n	8006dde <_read+0x12>
	}

return len;
 8006dfc:	687b      	ldr	r3, [r7, #4]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3718      	adds	r7, #24
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b086      	sub	sp, #24
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	60f8      	str	r0, [r7, #12]
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e12:	2300      	movs	r3, #0
 8006e14:	617b      	str	r3, [r7, #20]
 8006e16:	e009      	b.n	8006e2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	60ba      	str	r2, [r7, #8]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	dbf1      	blt.n	8006e18 <_write+0x12>
	}
	return len;
 8006e34:	687b      	ldr	r3, [r7, #4]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <_close>:

int _close(int file)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
	return -1;
 8006e46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e66:	605a      	str	r2, [r3, #4]
	return 0;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <_isatty>:

int _isatty(int file)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
	return 1;
 8006e7e:	2301      	movs	r3, #1
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
	return 0;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006eb0:	4b11      	ldr	r3, [pc, #68]	; (8006ef8 <_sbrk+0x50>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d102      	bne.n	8006ebe <_sbrk+0x16>
		heap_end = &end;
 8006eb8:	4b0f      	ldr	r3, [pc, #60]	; (8006ef8 <_sbrk+0x50>)
 8006eba:	4a10      	ldr	r2, [pc, #64]	; (8006efc <_sbrk+0x54>)
 8006ebc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006ebe:	4b0e      	ldr	r3, [pc, #56]	; (8006ef8 <_sbrk+0x50>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006ec4:	4b0c      	ldr	r3, [pc, #48]	; (8006ef8 <_sbrk+0x50>)
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4413      	add	r3, r2
 8006ecc:	466a      	mov	r2, sp
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d907      	bls.n	8006ee2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006ed2:	f000 f895 	bl	8007000 <__errno>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	230c      	movs	r3, #12
 8006eda:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006edc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee0:	e006      	b.n	8006ef0 <_sbrk+0x48>
	}

	heap_end += incr;
 8006ee2:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <_sbrk+0x50>)
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4413      	add	r3, r2
 8006eea:	4a03      	ldr	r2, [pc, #12]	; (8006ef8 <_sbrk+0x50>)
 8006eec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006eee:	68fb      	ldr	r3, [r7, #12]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	200003a8 	.word	0x200003a8
 8006efc:	200003c0 	.word	0x200003c0

08006f00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006f04:	4b17      	ldr	r3, [pc, #92]	; (8006f64 <SystemInit+0x64>)
 8006f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f0a:	4a16      	ldr	r2, [pc, #88]	; (8006f64 <SystemInit+0x64>)
 8006f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006f14:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <SystemInit+0x68>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a13      	ldr	r2, [pc, #76]	; (8006f68 <SystemInit+0x68>)
 8006f1a:	f043 0301 	orr.w	r3, r3, #1
 8006f1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006f20:	4b11      	ldr	r3, [pc, #68]	; (8006f68 <SystemInit+0x68>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006f26:	4b10      	ldr	r3, [pc, #64]	; (8006f68 <SystemInit+0x68>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a0f      	ldr	r2, [pc, #60]	; (8006f68 <SystemInit+0x68>)
 8006f2c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006f30:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006f34:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006f36:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <SystemInit+0x68>)
 8006f38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f3c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006f3e:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <SystemInit+0x68>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a09      	ldr	r2, [pc, #36]	; (8006f68 <SystemInit+0x68>)
 8006f44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006f4a:	4b07      	ldr	r3, [pc, #28]	; (8006f68 <SystemInit+0x68>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006f50:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <SystemInit+0x64>)
 8006f52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f56:	609a      	str	r2, [r3, #8]
#endif
}
 8006f58:	bf00      	nop
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	e000ed00 	.word	0xe000ed00
 8006f68:	40021000 	.word	0x40021000

08006f6c <_Z15filterConfigCANP19__CAN_HandleTypeDef>:
#include "zenith_can_lib.h"

Z_CAN_Package NULL_MSG = {0xffffffff, {0,0,0,0,0,0,0,0}};

void filterConfigCAN(CAN_HandleTypeDef *hcan1)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08c      	sub	sp, #48	; 0x30
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]

	CAN_FilterTypeDef can1FilterInit;

	can1FilterInit.FilterActivation = ENABLE;
 8006f74:	2301      	movs	r3, #1
 8006f76:	62bb      	str	r3, [r7, #40]	; 0x28
	can1FilterInit.FilterBank = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61fb      	str	r3, [r7, #28]
	can1FilterInit.FilterFIFOAssignment = CAN_RX_FIFO0;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61bb      	str	r3, [r7, #24]
	can1FilterInit.FilterIdHigh = 0x0000;
 8006f80:	2300      	movs	r3, #0
 8006f82:	60bb      	str	r3, [r7, #8]
	can1FilterInit.FilterIdLow = 0x0000;
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]
	can1FilterInit.FilterMaskIdHigh = 0x0000;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	613b      	str	r3, [r7, #16]
	can1FilterInit.FilterMaskIdLow = 0x0000;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	617b      	str	r3, [r7, #20]
	can1FilterInit.FilterMode = CAN_FILTERMODE_IDMASK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	623b      	str	r3, [r7, #32]
	can1FilterInit.FilterScale = CAN_FILTERSCALE_32BIT;
 8006f94:	2301      	movs	r3, #1
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcan1, &can1FilterInit);
 8006f98:	f107 0308 	add.w	r3, r7, #8
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7fa fd6d 	bl	8001a7e <HAL_CAN_ConfigFilter>
}
 8006fa4:	bf00      	nop
 8006fa6:	3730      	adds	r7, #48	; 0x30
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006fe4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006fb0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006fb2:	e003      	b.n	8006fbc <LoopCopyDataInit>

08006fb4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006fb4:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006fb6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006fb8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006fba:	3104      	adds	r1, #4

08006fbc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006fbc:	480b      	ldr	r0, [pc, #44]	; (8006fec <LoopForever+0xa>)
	ldr	r3, =_edata
 8006fbe:	4b0c      	ldr	r3, [pc, #48]	; (8006ff0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006fc0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006fc2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006fc4:	d3f6      	bcc.n	8006fb4 <CopyDataInit>
	ldr	r2, =_sbss
 8006fc6:	4a0b      	ldr	r2, [pc, #44]	; (8006ff4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006fc8:	e002      	b.n	8006fd0 <LoopFillZerobss>

08006fca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006fca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006fcc:	f842 3b04 	str.w	r3, [r2], #4

08006fd0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006fd0:	4b09      	ldr	r3, [pc, #36]	; (8006ff8 <LoopForever+0x16>)
	cmp	r2, r3
 8006fd2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006fd4:	d3f9      	bcc.n	8006fca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006fd6:	f7ff ff93 	bl	8006f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006fda:	f000 f817 	bl	800700c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006fde:	f7ff f899 	bl	8006114 <main>

08006fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8006fe2:	e7fe      	b.n	8006fe2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006fe4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006fe8:	08007a60 	.word	0x08007a60
	ldr	r0, =_sdata
 8006fec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006ff0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8006ff4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8006ff8:	200003bc 	.word	0x200003bc

08006ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006ffc:	e7fe      	b.n	8006ffc <ADC1_2_IRQHandler>
	...

08007000 <__errno>:
 8007000:	4b01      	ldr	r3, [pc, #4]	; (8007008 <__errno+0x8>)
 8007002:	6818      	ldr	r0, [r3, #0]
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	2000000c 	.word	0x2000000c

0800700c <__libc_init_array>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	4e0d      	ldr	r6, [pc, #52]	; (8007044 <__libc_init_array+0x38>)
 8007010:	4c0d      	ldr	r4, [pc, #52]	; (8007048 <__libc_init_array+0x3c>)
 8007012:	1ba4      	subs	r4, r4, r6
 8007014:	10a4      	asrs	r4, r4, #2
 8007016:	2500      	movs	r5, #0
 8007018:	42a5      	cmp	r5, r4
 800701a:	d109      	bne.n	8007030 <__libc_init_array+0x24>
 800701c:	4e0b      	ldr	r6, [pc, #44]	; (800704c <__libc_init_array+0x40>)
 800701e:	4c0c      	ldr	r4, [pc, #48]	; (8007050 <__libc_init_array+0x44>)
 8007020:	f000 fc88 	bl	8007934 <_init>
 8007024:	1ba4      	subs	r4, r4, r6
 8007026:	10a4      	asrs	r4, r4, #2
 8007028:	2500      	movs	r5, #0
 800702a:	42a5      	cmp	r5, r4
 800702c:	d105      	bne.n	800703a <__libc_init_array+0x2e>
 800702e:	bd70      	pop	{r4, r5, r6, pc}
 8007030:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007034:	4798      	blx	r3
 8007036:	3501      	adds	r5, #1
 8007038:	e7ee      	b.n	8007018 <__libc_init_array+0xc>
 800703a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800703e:	4798      	blx	r3
 8007040:	3501      	adds	r5, #1
 8007042:	e7f2      	b.n	800702a <__libc_init_array+0x1e>
 8007044:	08007a54 	.word	0x08007a54
 8007048:	08007a54 	.word	0x08007a54
 800704c:	08007a54 	.word	0x08007a54
 8007050:	08007a5c 	.word	0x08007a5c

08007054 <memset>:
 8007054:	4402      	add	r2, r0
 8007056:	4603      	mov	r3, r0
 8007058:	4293      	cmp	r3, r2
 800705a:	d100      	bne.n	800705e <memset+0xa>
 800705c:	4770      	bx	lr
 800705e:	f803 1b01 	strb.w	r1, [r3], #1
 8007062:	e7f9      	b.n	8007058 <memset+0x4>

08007064 <_puts_r>:
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	460e      	mov	r6, r1
 8007068:	4605      	mov	r5, r0
 800706a:	b118      	cbz	r0, 8007074 <_puts_r+0x10>
 800706c:	6983      	ldr	r3, [r0, #24]
 800706e:	b90b      	cbnz	r3, 8007074 <_puts_r+0x10>
 8007070:	f000 fa0c 	bl	800748c <__sinit>
 8007074:	69ab      	ldr	r3, [r5, #24]
 8007076:	68ac      	ldr	r4, [r5, #8]
 8007078:	b913      	cbnz	r3, 8007080 <_puts_r+0x1c>
 800707a:	4628      	mov	r0, r5
 800707c:	f000 fa06 	bl	800748c <__sinit>
 8007080:	4b23      	ldr	r3, [pc, #140]	; (8007110 <_puts_r+0xac>)
 8007082:	429c      	cmp	r4, r3
 8007084:	d117      	bne.n	80070b6 <_puts_r+0x52>
 8007086:	686c      	ldr	r4, [r5, #4]
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	071b      	lsls	r3, r3, #28
 800708c:	d51d      	bpl.n	80070ca <_puts_r+0x66>
 800708e:	6923      	ldr	r3, [r4, #16]
 8007090:	b1db      	cbz	r3, 80070ca <_puts_r+0x66>
 8007092:	3e01      	subs	r6, #1
 8007094:	68a3      	ldr	r3, [r4, #8]
 8007096:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800709a:	3b01      	subs	r3, #1
 800709c:	60a3      	str	r3, [r4, #8]
 800709e:	b9e9      	cbnz	r1, 80070dc <_puts_r+0x78>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	da2e      	bge.n	8007102 <_puts_r+0x9e>
 80070a4:	4622      	mov	r2, r4
 80070a6:	210a      	movs	r1, #10
 80070a8:	4628      	mov	r0, r5
 80070aa:	f000 f83f 	bl	800712c <__swbuf_r>
 80070ae:	3001      	adds	r0, #1
 80070b0:	d011      	beq.n	80070d6 <_puts_r+0x72>
 80070b2:	200a      	movs	r0, #10
 80070b4:	e011      	b.n	80070da <_puts_r+0x76>
 80070b6:	4b17      	ldr	r3, [pc, #92]	; (8007114 <_puts_r+0xb0>)
 80070b8:	429c      	cmp	r4, r3
 80070ba:	d101      	bne.n	80070c0 <_puts_r+0x5c>
 80070bc:	68ac      	ldr	r4, [r5, #8]
 80070be:	e7e3      	b.n	8007088 <_puts_r+0x24>
 80070c0:	4b15      	ldr	r3, [pc, #84]	; (8007118 <_puts_r+0xb4>)
 80070c2:	429c      	cmp	r4, r3
 80070c4:	bf08      	it	eq
 80070c6:	68ec      	ldreq	r4, [r5, #12]
 80070c8:	e7de      	b.n	8007088 <_puts_r+0x24>
 80070ca:	4621      	mov	r1, r4
 80070cc:	4628      	mov	r0, r5
 80070ce:	f000 f87f 	bl	80071d0 <__swsetup_r>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d0dd      	beq.n	8007092 <_puts_r+0x2e>
 80070d6:	f04f 30ff 	mov.w	r0, #4294967295
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	2b00      	cmp	r3, #0
 80070de:	da04      	bge.n	80070ea <_puts_r+0x86>
 80070e0:	69a2      	ldr	r2, [r4, #24]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	dc06      	bgt.n	80070f4 <_puts_r+0x90>
 80070e6:	290a      	cmp	r1, #10
 80070e8:	d004      	beq.n	80070f4 <_puts_r+0x90>
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	6022      	str	r2, [r4, #0]
 80070f0:	7019      	strb	r1, [r3, #0]
 80070f2:	e7cf      	b.n	8007094 <_puts_r+0x30>
 80070f4:	4622      	mov	r2, r4
 80070f6:	4628      	mov	r0, r5
 80070f8:	f000 f818 	bl	800712c <__swbuf_r>
 80070fc:	3001      	adds	r0, #1
 80070fe:	d1c9      	bne.n	8007094 <_puts_r+0x30>
 8007100:	e7e9      	b.n	80070d6 <_puts_r+0x72>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	200a      	movs	r0, #10
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	6022      	str	r2, [r4, #0]
 800710a:	7018      	strb	r0, [r3, #0]
 800710c:	e7e5      	b.n	80070da <_puts_r+0x76>
 800710e:	bf00      	nop
 8007110:	08007a0c 	.word	0x08007a0c
 8007114:	08007a2c 	.word	0x08007a2c
 8007118:	080079ec 	.word	0x080079ec

0800711c <puts>:
 800711c:	4b02      	ldr	r3, [pc, #8]	; (8007128 <puts+0xc>)
 800711e:	4601      	mov	r1, r0
 8007120:	6818      	ldr	r0, [r3, #0]
 8007122:	f7ff bf9f 	b.w	8007064 <_puts_r>
 8007126:	bf00      	nop
 8007128:	2000000c 	.word	0x2000000c

0800712c <__swbuf_r>:
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712e:	460e      	mov	r6, r1
 8007130:	4614      	mov	r4, r2
 8007132:	4605      	mov	r5, r0
 8007134:	b118      	cbz	r0, 800713e <__swbuf_r+0x12>
 8007136:	6983      	ldr	r3, [r0, #24]
 8007138:	b90b      	cbnz	r3, 800713e <__swbuf_r+0x12>
 800713a:	f000 f9a7 	bl	800748c <__sinit>
 800713e:	4b21      	ldr	r3, [pc, #132]	; (80071c4 <__swbuf_r+0x98>)
 8007140:	429c      	cmp	r4, r3
 8007142:	d12a      	bne.n	800719a <__swbuf_r+0x6e>
 8007144:	686c      	ldr	r4, [r5, #4]
 8007146:	69a3      	ldr	r3, [r4, #24]
 8007148:	60a3      	str	r3, [r4, #8]
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	071a      	lsls	r2, r3, #28
 800714e:	d52e      	bpl.n	80071ae <__swbuf_r+0x82>
 8007150:	6923      	ldr	r3, [r4, #16]
 8007152:	b363      	cbz	r3, 80071ae <__swbuf_r+0x82>
 8007154:	6923      	ldr	r3, [r4, #16]
 8007156:	6820      	ldr	r0, [r4, #0]
 8007158:	1ac0      	subs	r0, r0, r3
 800715a:	6963      	ldr	r3, [r4, #20]
 800715c:	b2f6      	uxtb	r6, r6
 800715e:	4283      	cmp	r3, r0
 8007160:	4637      	mov	r7, r6
 8007162:	dc04      	bgt.n	800716e <__swbuf_r+0x42>
 8007164:	4621      	mov	r1, r4
 8007166:	4628      	mov	r0, r5
 8007168:	f000 f926 	bl	80073b8 <_fflush_r>
 800716c:	bb28      	cbnz	r0, 80071ba <__swbuf_r+0x8e>
 800716e:	68a3      	ldr	r3, [r4, #8]
 8007170:	3b01      	subs	r3, #1
 8007172:	60a3      	str	r3, [r4, #8]
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	6022      	str	r2, [r4, #0]
 800717a:	701e      	strb	r6, [r3, #0]
 800717c:	6963      	ldr	r3, [r4, #20]
 800717e:	3001      	adds	r0, #1
 8007180:	4283      	cmp	r3, r0
 8007182:	d004      	beq.n	800718e <__swbuf_r+0x62>
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	07db      	lsls	r3, r3, #31
 8007188:	d519      	bpl.n	80071be <__swbuf_r+0x92>
 800718a:	2e0a      	cmp	r6, #10
 800718c:	d117      	bne.n	80071be <__swbuf_r+0x92>
 800718e:	4621      	mov	r1, r4
 8007190:	4628      	mov	r0, r5
 8007192:	f000 f911 	bl	80073b8 <_fflush_r>
 8007196:	b190      	cbz	r0, 80071be <__swbuf_r+0x92>
 8007198:	e00f      	b.n	80071ba <__swbuf_r+0x8e>
 800719a:	4b0b      	ldr	r3, [pc, #44]	; (80071c8 <__swbuf_r+0x9c>)
 800719c:	429c      	cmp	r4, r3
 800719e:	d101      	bne.n	80071a4 <__swbuf_r+0x78>
 80071a0:	68ac      	ldr	r4, [r5, #8]
 80071a2:	e7d0      	b.n	8007146 <__swbuf_r+0x1a>
 80071a4:	4b09      	ldr	r3, [pc, #36]	; (80071cc <__swbuf_r+0xa0>)
 80071a6:	429c      	cmp	r4, r3
 80071a8:	bf08      	it	eq
 80071aa:	68ec      	ldreq	r4, [r5, #12]
 80071ac:	e7cb      	b.n	8007146 <__swbuf_r+0x1a>
 80071ae:	4621      	mov	r1, r4
 80071b0:	4628      	mov	r0, r5
 80071b2:	f000 f80d 	bl	80071d0 <__swsetup_r>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d0cc      	beq.n	8007154 <__swbuf_r+0x28>
 80071ba:	f04f 37ff 	mov.w	r7, #4294967295
 80071be:	4638      	mov	r0, r7
 80071c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c2:	bf00      	nop
 80071c4:	08007a0c 	.word	0x08007a0c
 80071c8:	08007a2c 	.word	0x08007a2c
 80071cc:	080079ec 	.word	0x080079ec

080071d0 <__swsetup_r>:
 80071d0:	4b32      	ldr	r3, [pc, #200]	; (800729c <__swsetup_r+0xcc>)
 80071d2:	b570      	push	{r4, r5, r6, lr}
 80071d4:	681d      	ldr	r5, [r3, #0]
 80071d6:	4606      	mov	r6, r0
 80071d8:	460c      	mov	r4, r1
 80071da:	b125      	cbz	r5, 80071e6 <__swsetup_r+0x16>
 80071dc:	69ab      	ldr	r3, [r5, #24]
 80071de:	b913      	cbnz	r3, 80071e6 <__swsetup_r+0x16>
 80071e0:	4628      	mov	r0, r5
 80071e2:	f000 f953 	bl	800748c <__sinit>
 80071e6:	4b2e      	ldr	r3, [pc, #184]	; (80072a0 <__swsetup_r+0xd0>)
 80071e8:	429c      	cmp	r4, r3
 80071ea:	d10f      	bne.n	800720c <__swsetup_r+0x3c>
 80071ec:	686c      	ldr	r4, [r5, #4]
 80071ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	0715      	lsls	r5, r2, #28
 80071f6:	d42c      	bmi.n	8007252 <__swsetup_r+0x82>
 80071f8:	06d0      	lsls	r0, r2, #27
 80071fa:	d411      	bmi.n	8007220 <__swsetup_r+0x50>
 80071fc:	2209      	movs	r2, #9
 80071fe:	6032      	str	r2, [r6, #0]
 8007200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007204:	81a3      	strh	r3, [r4, #12]
 8007206:	f04f 30ff 	mov.w	r0, #4294967295
 800720a:	e03e      	b.n	800728a <__swsetup_r+0xba>
 800720c:	4b25      	ldr	r3, [pc, #148]	; (80072a4 <__swsetup_r+0xd4>)
 800720e:	429c      	cmp	r4, r3
 8007210:	d101      	bne.n	8007216 <__swsetup_r+0x46>
 8007212:	68ac      	ldr	r4, [r5, #8]
 8007214:	e7eb      	b.n	80071ee <__swsetup_r+0x1e>
 8007216:	4b24      	ldr	r3, [pc, #144]	; (80072a8 <__swsetup_r+0xd8>)
 8007218:	429c      	cmp	r4, r3
 800721a:	bf08      	it	eq
 800721c:	68ec      	ldreq	r4, [r5, #12]
 800721e:	e7e6      	b.n	80071ee <__swsetup_r+0x1e>
 8007220:	0751      	lsls	r1, r2, #29
 8007222:	d512      	bpl.n	800724a <__swsetup_r+0x7a>
 8007224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007226:	b141      	cbz	r1, 800723a <__swsetup_r+0x6a>
 8007228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800722c:	4299      	cmp	r1, r3
 800722e:	d002      	beq.n	8007236 <__swsetup_r+0x66>
 8007230:	4630      	mov	r0, r6
 8007232:	f000 fa19 	bl	8007668 <_free_r>
 8007236:	2300      	movs	r3, #0
 8007238:	6363      	str	r3, [r4, #52]	; 0x34
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007240:	81a3      	strh	r3, [r4, #12]
 8007242:	2300      	movs	r3, #0
 8007244:	6063      	str	r3, [r4, #4]
 8007246:	6923      	ldr	r3, [r4, #16]
 8007248:	6023      	str	r3, [r4, #0]
 800724a:	89a3      	ldrh	r3, [r4, #12]
 800724c:	f043 0308 	orr.w	r3, r3, #8
 8007250:	81a3      	strh	r3, [r4, #12]
 8007252:	6923      	ldr	r3, [r4, #16]
 8007254:	b94b      	cbnz	r3, 800726a <__swsetup_r+0x9a>
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800725c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007260:	d003      	beq.n	800726a <__swsetup_r+0x9a>
 8007262:	4621      	mov	r1, r4
 8007264:	4630      	mov	r0, r6
 8007266:	f000 f9bf 	bl	80075e8 <__smakebuf_r>
 800726a:	89a2      	ldrh	r2, [r4, #12]
 800726c:	f012 0301 	ands.w	r3, r2, #1
 8007270:	d00c      	beq.n	800728c <__swsetup_r+0xbc>
 8007272:	2300      	movs	r3, #0
 8007274:	60a3      	str	r3, [r4, #8]
 8007276:	6963      	ldr	r3, [r4, #20]
 8007278:	425b      	negs	r3, r3
 800727a:	61a3      	str	r3, [r4, #24]
 800727c:	6923      	ldr	r3, [r4, #16]
 800727e:	b953      	cbnz	r3, 8007296 <__swsetup_r+0xc6>
 8007280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007284:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007288:	d1ba      	bne.n	8007200 <__swsetup_r+0x30>
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	0792      	lsls	r2, r2, #30
 800728e:	bf58      	it	pl
 8007290:	6963      	ldrpl	r3, [r4, #20]
 8007292:	60a3      	str	r3, [r4, #8]
 8007294:	e7f2      	b.n	800727c <__swsetup_r+0xac>
 8007296:	2000      	movs	r0, #0
 8007298:	e7f7      	b.n	800728a <__swsetup_r+0xba>
 800729a:	bf00      	nop
 800729c:	2000000c 	.word	0x2000000c
 80072a0:	08007a0c 	.word	0x08007a0c
 80072a4:	08007a2c 	.word	0x08007a2c
 80072a8:	080079ec 	.word	0x080079ec

080072ac <__sflush_r>:
 80072ac:	898a      	ldrh	r2, [r1, #12]
 80072ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b2:	4605      	mov	r5, r0
 80072b4:	0710      	lsls	r0, r2, #28
 80072b6:	460c      	mov	r4, r1
 80072b8:	d458      	bmi.n	800736c <__sflush_r+0xc0>
 80072ba:	684b      	ldr	r3, [r1, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dc05      	bgt.n	80072cc <__sflush_r+0x20>
 80072c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	dc02      	bgt.n	80072cc <__sflush_r+0x20>
 80072c6:	2000      	movs	r0, #0
 80072c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072ce:	2e00      	cmp	r6, #0
 80072d0:	d0f9      	beq.n	80072c6 <__sflush_r+0x1a>
 80072d2:	2300      	movs	r3, #0
 80072d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072d8:	682f      	ldr	r7, [r5, #0]
 80072da:	6a21      	ldr	r1, [r4, #32]
 80072dc:	602b      	str	r3, [r5, #0]
 80072de:	d032      	beq.n	8007346 <__sflush_r+0x9a>
 80072e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072e2:	89a3      	ldrh	r3, [r4, #12]
 80072e4:	075a      	lsls	r2, r3, #29
 80072e6:	d505      	bpl.n	80072f4 <__sflush_r+0x48>
 80072e8:	6863      	ldr	r3, [r4, #4]
 80072ea:	1ac0      	subs	r0, r0, r3
 80072ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072ee:	b10b      	cbz	r3, 80072f4 <__sflush_r+0x48>
 80072f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072f2:	1ac0      	subs	r0, r0, r3
 80072f4:	2300      	movs	r3, #0
 80072f6:	4602      	mov	r2, r0
 80072f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072fa:	6a21      	ldr	r1, [r4, #32]
 80072fc:	4628      	mov	r0, r5
 80072fe:	47b0      	blx	r6
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	d106      	bne.n	8007314 <__sflush_r+0x68>
 8007306:	6829      	ldr	r1, [r5, #0]
 8007308:	291d      	cmp	r1, #29
 800730a:	d848      	bhi.n	800739e <__sflush_r+0xf2>
 800730c:	4a29      	ldr	r2, [pc, #164]	; (80073b4 <__sflush_r+0x108>)
 800730e:	40ca      	lsrs	r2, r1
 8007310:	07d6      	lsls	r6, r2, #31
 8007312:	d544      	bpl.n	800739e <__sflush_r+0xf2>
 8007314:	2200      	movs	r2, #0
 8007316:	6062      	str	r2, [r4, #4]
 8007318:	04d9      	lsls	r1, r3, #19
 800731a:	6922      	ldr	r2, [r4, #16]
 800731c:	6022      	str	r2, [r4, #0]
 800731e:	d504      	bpl.n	800732a <__sflush_r+0x7e>
 8007320:	1c42      	adds	r2, r0, #1
 8007322:	d101      	bne.n	8007328 <__sflush_r+0x7c>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	b903      	cbnz	r3, 800732a <__sflush_r+0x7e>
 8007328:	6560      	str	r0, [r4, #84]	; 0x54
 800732a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800732c:	602f      	str	r7, [r5, #0]
 800732e:	2900      	cmp	r1, #0
 8007330:	d0c9      	beq.n	80072c6 <__sflush_r+0x1a>
 8007332:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007336:	4299      	cmp	r1, r3
 8007338:	d002      	beq.n	8007340 <__sflush_r+0x94>
 800733a:	4628      	mov	r0, r5
 800733c:	f000 f994 	bl	8007668 <_free_r>
 8007340:	2000      	movs	r0, #0
 8007342:	6360      	str	r0, [r4, #52]	; 0x34
 8007344:	e7c0      	b.n	80072c8 <__sflush_r+0x1c>
 8007346:	2301      	movs	r3, #1
 8007348:	4628      	mov	r0, r5
 800734a:	47b0      	blx	r6
 800734c:	1c41      	adds	r1, r0, #1
 800734e:	d1c8      	bne.n	80072e2 <__sflush_r+0x36>
 8007350:	682b      	ldr	r3, [r5, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0c5      	beq.n	80072e2 <__sflush_r+0x36>
 8007356:	2b1d      	cmp	r3, #29
 8007358:	d001      	beq.n	800735e <__sflush_r+0xb2>
 800735a:	2b16      	cmp	r3, #22
 800735c:	d101      	bne.n	8007362 <__sflush_r+0xb6>
 800735e:	602f      	str	r7, [r5, #0]
 8007360:	e7b1      	b.n	80072c6 <__sflush_r+0x1a>
 8007362:	89a3      	ldrh	r3, [r4, #12]
 8007364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007368:	81a3      	strh	r3, [r4, #12]
 800736a:	e7ad      	b.n	80072c8 <__sflush_r+0x1c>
 800736c:	690f      	ldr	r7, [r1, #16]
 800736e:	2f00      	cmp	r7, #0
 8007370:	d0a9      	beq.n	80072c6 <__sflush_r+0x1a>
 8007372:	0793      	lsls	r3, r2, #30
 8007374:	680e      	ldr	r6, [r1, #0]
 8007376:	bf08      	it	eq
 8007378:	694b      	ldreq	r3, [r1, #20]
 800737a:	600f      	str	r7, [r1, #0]
 800737c:	bf18      	it	ne
 800737e:	2300      	movne	r3, #0
 8007380:	eba6 0807 	sub.w	r8, r6, r7
 8007384:	608b      	str	r3, [r1, #8]
 8007386:	f1b8 0f00 	cmp.w	r8, #0
 800738a:	dd9c      	ble.n	80072c6 <__sflush_r+0x1a>
 800738c:	4643      	mov	r3, r8
 800738e:	463a      	mov	r2, r7
 8007390:	6a21      	ldr	r1, [r4, #32]
 8007392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007394:	4628      	mov	r0, r5
 8007396:	47b0      	blx	r6
 8007398:	2800      	cmp	r0, #0
 800739a:	dc06      	bgt.n	80073aa <__sflush_r+0xfe>
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a2:	81a3      	strh	r3, [r4, #12]
 80073a4:	f04f 30ff 	mov.w	r0, #4294967295
 80073a8:	e78e      	b.n	80072c8 <__sflush_r+0x1c>
 80073aa:	4407      	add	r7, r0
 80073ac:	eba8 0800 	sub.w	r8, r8, r0
 80073b0:	e7e9      	b.n	8007386 <__sflush_r+0xda>
 80073b2:	bf00      	nop
 80073b4:	20400001 	.word	0x20400001

080073b8 <_fflush_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	690b      	ldr	r3, [r1, #16]
 80073bc:	4605      	mov	r5, r0
 80073be:	460c      	mov	r4, r1
 80073c0:	b1db      	cbz	r3, 80073fa <_fflush_r+0x42>
 80073c2:	b118      	cbz	r0, 80073cc <_fflush_r+0x14>
 80073c4:	6983      	ldr	r3, [r0, #24]
 80073c6:	b90b      	cbnz	r3, 80073cc <_fflush_r+0x14>
 80073c8:	f000 f860 	bl	800748c <__sinit>
 80073cc:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <_fflush_r+0x48>)
 80073ce:	429c      	cmp	r4, r3
 80073d0:	d109      	bne.n	80073e6 <_fflush_r+0x2e>
 80073d2:	686c      	ldr	r4, [r5, #4]
 80073d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073d8:	b17b      	cbz	r3, 80073fa <_fflush_r+0x42>
 80073da:	4621      	mov	r1, r4
 80073dc:	4628      	mov	r0, r5
 80073de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073e2:	f7ff bf63 	b.w	80072ac <__sflush_r>
 80073e6:	4b07      	ldr	r3, [pc, #28]	; (8007404 <_fflush_r+0x4c>)
 80073e8:	429c      	cmp	r4, r3
 80073ea:	d101      	bne.n	80073f0 <_fflush_r+0x38>
 80073ec:	68ac      	ldr	r4, [r5, #8]
 80073ee:	e7f1      	b.n	80073d4 <_fflush_r+0x1c>
 80073f0:	4b05      	ldr	r3, [pc, #20]	; (8007408 <_fflush_r+0x50>)
 80073f2:	429c      	cmp	r4, r3
 80073f4:	bf08      	it	eq
 80073f6:	68ec      	ldreq	r4, [r5, #12]
 80073f8:	e7ec      	b.n	80073d4 <_fflush_r+0x1c>
 80073fa:	2000      	movs	r0, #0
 80073fc:	bd38      	pop	{r3, r4, r5, pc}
 80073fe:	bf00      	nop
 8007400:	08007a0c 	.word	0x08007a0c
 8007404:	08007a2c 	.word	0x08007a2c
 8007408:	080079ec 	.word	0x080079ec

0800740c <std>:
 800740c:	2300      	movs	r3, #0
 800740e:	b510      	push	{r4, lr}
 8007410:	4604      	mov	r4, r0
 8007412:	e9c0 3300 	strd	r3, r3, [r0]
 8007416:	6083      	str	r3, [r0, #8]
 8007418:	8181      	strh	r1, [r0, #12]
 800741a:	6643      	str	r3, [r0, #100]	; 0x64
 800741c:	81c2      	strh	r2, [r0, #14]
 800741e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007422:	6183      	str	r3, [r0, #24]
 8007424:	4619      	mov	r1, r3
 8007426:	2208      	movs	r2, #8
 8007428:	305c      	adds	r0, #92	; 0x5c
 800742a:	f7ff fe13 	bl	8007054 <memset>
 800742e:	4b05      	ldr	r3, [pc, #20]	; (8007444 <std+0x38>)
 8007430:	6263      	str	r3, [r4, #36]	; 0x24
 8007432:	4b05      	ldr	r3, [pc, #20]	; (8007448 <std+0x3c>)
 8007434:	62a3      	str	r3, [r4, #40]	; 0x28
 8007436:	4b05      	ldr	r3, [pc, #20]	; (800744c <std+0x40>)
 8007438:	62e3      	str	r3, [r4, #44]	; 0x2c
 800743a:	4b05      	ldr	r3, [pc, #20]	; (8007450 <std+0x44>)
 800743c:	6224      	str	r4, [r4, #32]
 800743e:	6323      	str	r3, [r4, #48]	; 0x30
 8007440:	bd10      	pop	{r4, pc}
 8007442:	bf00      	nop
 8007444:	080077d9 	.word	0x080077d9
 8007448:	080077fb 	.word	0x080077fb
 800744c:	08007833 	.word	0x08007833
 8007450:	08007857 	.word	0x08007857

08007454 <_cleanup_r>:
 8007454:	4901      	ldr	r1, [pc, #4]	; (800745c <_cleanup_r+0x8>)
 8007456:	f000 b885 	b.w	8007564 <_fwalk_reent>
 800745a:	bf00      	nop
 800745c:	080073b9 	.word	0x080073b9

08007460 <__sfmoreglue>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	1e4a      	subs	r2, r1, #1
 8007464:	2568      	movs	r5, #104	; 0x68
 8007466:	4355      	muls	r5, r2
 8007468:	460e      	mov	r6, r1
 800746a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800746e:	f000 f949 	bl	8007704 <_malloc_r>
 8007472:	4604      	mov	r4, r0
 8007474:	b140      	cbz	r0, 8007488 <__sfmoreglue+0x28>
 8007476:	2100      	movs	r1, #0
 8007478:	e9c0 1600 	strd	r1, r6, [r0]
 800747c:	300c      	adds	r0, #12
 800747e:	60a0      	str	r0, [r4, #8]
 8007480:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007484:	f7ff fde6 	bl	8007054 <memset>
 8007488:	4620      	mov	r0, r4
 800748a:	bd70      	pop	{r4, r5, r6, pc}

0800748c <__sinit>:
 800748c:	6983      	ldr	r3, [r0, #24]
 800748e:	b510      	push	{r4, lr}
 8007490:	4604      	mov	r4, r0
 8007492:	bb33      	cbnz	r3, 80074e2 <__sinit+0x56>
 8007494:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007498:	6503      	str	r3, [r0, #80]	; 0x50
 800749a:	4b12      	ldr	r3, [pc, #72]	; (80074e4 <__sinit+0x58>)
 800749c:	4a12      	ldr	r2, [pc, #72]	; (80074e8 <__sinit+0x5c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6282      	str	r2, [r0, #40]	; 0x28
 80074a2:	4298      	cmp	r0, r3
 80074a4:	bf04      	itt	eq
 80074a6:	2301      	moveq	r3, #1
 80074a8:	6183      	streq	r3, [r0, #24]
 80074aa:	f000 f81f 	bl	80074ec <__sfp>
 80074ae:	6060      	str	r0, [r4, #4]
 80074b0:	4620      	mov	r0, r4
 80074b2:	f000 f81b 	bl	80074ec <__sfp>
 80074b6:	60a0      	str	r0, [r4, #8]
 80074b8:	4620      	mov	r0, r4
 80074ba:	f000 f817 	bl	80074ec <__sfp>
 80074be:	2200      	movs	r2, #0
 80074c0:	60e0      	str	r0, [r4, #12]
 80074c2:	2104      	movs	r1, #4
 80074c4:	6860      	ldr	r0, [r4, #4]
 80074c6:	f7ff ffa1 	bl	800740c <std>
 80074ca:	2201      	movs	r2, #1
 80074cc:	2109      	movs	r1, #9
 80074ce:	68a0      	ldr	r0, [r4, #8]
 80074d0:	f7ff ff9c 	bl	800740c <std>
 80074d4:	2202      	movs	r2, #2
 80074d6:	2112      	movs	r1, #18
 80074d8:	68e0      	ldr	r0, [r4, #12]
 80074da:	f7ff ff97 	bl	800740c <std>
 80074de:	2301      	movs	r3, #1
 80074e0:	61a3      	str	r3, [r4, #24]
 80074e2:	bd10      	pop	{r4, pc}
 80074e4:	080079e8 	.word	0x080079e8
 80074e8:	08007455 	.word	0x08007455

080074ec <__sfp>:
 80074ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ee:	4b1b      	ldr	r3, [pc, #108]	; (800755c <__sfp+0x70>)
 80074f0:	681e      	ldr	r6, [r3, #0]
 80074f2:	69b3      	ldr	r3, [r6, #24]
 80074f4:	4607      	mov	r7, r0
 80074f6:	b913      	cbnz	r3, 80074fe <__sfp+0x12>
 80074f8:	4630      	mov	r0, r6
 80074fa:	f7ff ffc7 	bl	800748c <__sinit>
 80074fe:	3648      	adds	r6, #72	; 0x48
 8007500:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007504:	3b01      	subs	r3, #1
 8007506:	d503      	bpl.n	8007510 <__sfp+0x24>
 8007508:	6833      	ldr	r3, [r6, #0]
 800750a:	b133      	cbz	r3, 800751a <__sfp+0x2e>
 800750c:	6836      	ldr	r6, [r6, #0]
 800750e:	e7f7      	b.n	8007500 <__sfp+0x14>
 8007510:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007514:	b16d      	cbz	r5, 8007532 <__sfp+0x46>
 8007516:	3468      	adds	r4, #104	; 0x68
 8007518:	e7f4      	b.n	8007504 <__sfp+0x18>
 800751a:	2104      	movs	r1, #4
 800751c:	4638      	mov	r0, r7
 800751e:	f7ff ff9f 	bl	8007460 <__sfmoreglue>
 8007522:	6030      	str	r0, [r6, #0]
 8007524:	2800      	cmp	r0, #0
 8007526:	d1f1      	bne.n	800750c <__sfp+0x20>
 8007528:	230c      	movs	r3, #12
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	4604      	mov	r4, r0
 800752e:	4620      	mov	r0, r4
 8007530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007532:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <__sfp+0x74>)
 8007534:	6665      	str	r5, [r4, #100]	; 0x64
 8007536:	e9c4 5500 	strd	r5, r5, [r4]
 800753a:	60a5      	str	r5, [r4, #8]
 800753c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007540:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007544:	2208      	movs	r2, #8
 8007546:	4629      	mov	r1, r5
 8007548:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800754c:	f7ff fd82 	bl	8007054 <memset>
 8007550:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007554:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007558:	e7e9      	b.n	800752e <__sfp+0x42>
 800755a:	bf00      	nop
 800755c:	080079e8 	.word	0x080079e8
 8007560:	ffff0001 	.word	0xffff0001

08007564 <_fwalk_reent>:
 8007564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007568:	4680      	mov	r8, r0
 800756a:	4689      	mov	r9, r1
 800756c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007570:	2600      	movs	r6, #0
 8007572:	b914      	cbnz	r4, 800757a <_fwalk_reent+0x16>
 8007574:	4630      	mov	r0, r6
 8007576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800757a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800757e:	3f01      	subs	r7, #1
 8007580:	d501      	bpl.n	8007586 <_fwalk_reent+0x22>
 8007582:	6824      	ldr	r4, [r4, #0]
 8007584:	e7f5      	b.n	8007572 <_fwalk_reent+0xe>
 8007586:	89ab      	ldrh	r3, [r5, #12]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d907      	bls.n	800759c <_fwalk_reent+0x38>
 800758c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007590:	3301      	adds	r3, #1
 8007592:	d003      	beq.n	800759c <_fwalk_reent+0x38>
 8007594:	4629      	mov	r1, r5
 8007596:	4640      	mov	r0, r8
 8007598:	47c8      	blx	r9
 800759a:	4306      	orrs	r6, r0
 800759c:	3568      	adds	r5, #104	; 0x68
 800759e:	e7ee      	b.n	800757e <_fwalk_reent+0x1a>

080075a0 <__swhatbuf_r>:
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	460e      	mov	r6, r1
 80075a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a8:	2900      	cmp	r1, #0
 80075aa:	b096      	sub	sp, #88	; 0x58
 80075ac:	4614      	mov	r4, r2
 80075ae:	461d      	mov	r5, r3
 80075b0:	da07      	bge.n	80075c2 <__swhatbuf_r+0x22>
 80075b2:	2300      	movs	r3, #0
 80075b4:	602b      	str	r3, [r5, #0]
 80075b6:	89b3      	ldrh	r3, [r6, #12]
 80075b8:	061a      	lsls	r2, r3, #24
 80075ba:	d410      	bmi.n	80075de <__swhatbuf_r+0x3e>
 80075bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075c0:	e00e      	b.n	80075e0 <__swhatbuf_r+0x40>
 80075c2:	466a      	mov	r2, sp
 80075c4:	f000 f96e 	bl	80078a4 <_fstat_r>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	dbf2      	blt.n	80075b2 <__swhatbuf_r+0x12>
 80075cc:	9a01      	ldr	r2, [sp, #4]
 80075ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075d6:	425a      	negs	r2, r3
 80075d8:	415a      	adcs	r2, r3
 80075da:	602a      	str	r2, [r5, #0]
 80075dc:	e7ee      	b.n	80075bc <__swhatbuf_r+0x1c>
 80075de:	2340      	movs	r3, #64	; 0x40
 80075e0:	2000      	movs	r0, #0
 80075e2:	6023      	str	r3, [r4, #0]
 80075e4:	b016      	add	sp, #88	; 0x58
 80075e6:	bd70      	pop	{r4, r5, r6, pc}

080075e8 <__smakebuf_r>:
 80075e8:	898b      	ldrh	r3, [r1, #12]
 80075ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075ec:	079d      	lsls	r5, r3, #30
 80075ee:	4606      	mov	r6, r0
 80075f0:	460c      	mov	r4, r1
 80075f2:	d507      	bpl.n	8007604 <__smakebuf_r+0x1c>
 80075f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	6123      	str	r3, [r4, #16]
 80075fc:	2301      	movs	r3, #1
 80075fe:	6163      	str	r3, [r4, #20]
 8007600:	b002      	add	sp, #8
 8007602:	bd70      	pop	{r4, r5, r6, pc}
 8007604:	ab01      	add	r3, sp, #4
 8007606:	466a      	mov	r2, sp
 8007608:	f7ff ffca 	bl	80075a0 <__swhatbuf_r>
 800760c:	9900      	ldr	r1, [sp, #0]
 800760e:	4605      	mov	r5, r0
 8007610:	4630      	mov	r0, r6
 8007612:	f000 f877 	bl	8007704 <_malloc_r>
 8007616:	b948      	cbnz	r0, 800762c <__smakebuf_r+0x44>
 8007618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800761c:	059a      	lsls	r2, r3, #22
 800761e:	d4ef      	bmi.n	8007600 <__smakebuf_r+0x18>
 8007620:	f023 0303 	bic.w	r3, r3, #3
 8007624:	f043 0302 	orr.w	r3, r3, #2
 8007628:	81a3      	strh	r3, [r4, #12]
 800762a:	e7e3      	b.n	80075f4 <__smakebuf_r+0xc>
 800762c:	4b0d      	ldr	r3, [pc, #52]	; (8007664 <__smakebuf_r+0x7c>)
 800762e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	6020      	str	r0, [r4, #0]
 8007634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007638:	81a3      	strh	r3, [r4, #12]
 800763a:	9b00      	ldr	r3, [sp, #0]
 800763c:	6163      	str	r3, [r4, #20]
 800763e:	9b01      	ldr	r3, [sp, #4]
 8007640:	6120      	str	r0, [r4, #16]
 8007642:	b15b      	cbz	r3, 800765c <__smakebuf_r+0x74>
 8007644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007648:	4630      	mov	r0, r6
 800764a:	f000 f93d 	bl	80078c8 <_isatty_r>
 800764e:	b128      	cbz	r0, 800765c <__smakebuf_r+0x74>
 8007650:	89a3      	ldrh	r3, [r4, #12]
 8007652:	f023 0303 	bic.w	r3, r3, #3
 8007656:	f043 0301 	orr.w	r3, r3, #1
 800765a:	81a3      	strh	r3, [r4, #12]
 800765c:	89a3      	ldrh	r3, [r4, #12]
 800765e:	431d      	orrs	r5, r3
 8007660:	81a5      	strh	r5, [r4, #12]
 8007662:	e7cd      	b.n	8007600 <__smakebuf_r+0x18>
 8007664:	08007455 	.word	0x08007455

08007668 <_free_r>:
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	4605      	mov	r5, r0
 800766c:	2900      	cmp	r1, #0
 800766e:	d045      	beq.n	80076fc <_free_r+0x94>
 8007670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007674:	1f0c      	subs	r4, r1, #4
 8007676:	2b00      	cmp	r3, #0
 8007678:	bfb8      	it	lt
 800767a:	18e4      	addlt	r4, r4, r3
 800767c:	f000 f946 	bl	800790c <__malloc_lock>
 8007680:	4a1f      	ldr	r2, [pc, #124]	; (8007700 <_free_r+0x98>)
 8007682:	6813      	ldr	r3, [r2, #0]
 8007684:	4610      	mov	r0, r2
 8007686:	b933      	cbnz	r3, 8007696 <_free_r+0x2e>
 8007688:	6063      	str	r3, [r4, #4]
 800768a:	6014      	str	r4, [r2, #0]
 800768c:	4628      	mov	r0, r5
 800768e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007692:	f000 b93c 	b.w	800790e <__malloc_unlock>
 8007696:	42a3      	cmp	r3, r4
 8007698:	d90c      	bls.n	80076b4 <_free_r+0x4c>
 800769a:	6821      	ldr	r1, [r4, #0]
 800769c:	1862      	adds	r2, r4, r1
 800769e:	4293      	cmp	r3, r2
 80076a0:	bf04      	itt	eq
 80076a2:	681a      	ldreq	r2, [r3, #0]
 80076a4:	685b      	ldreq	r3, [r3, #4]
 80076a6:	6063      	str	r3, [r4, #4]
 80076a8:	bf04      	itt	eq
 80076aa:	1852      	addeq	r2, r2, r1
 80076ac:	6022      	streq	r2, [r4, #0]
 80076ae:	6004      	str	r4, [r0, #0]
 80076b0:	e7ec      	b.n	800768c <_free_r+0x24>
 80076b2:	4613      	mov	r3, r2
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	b10a      	cbz	r2, 80076bc <_free_r+0x54>
 80076b8:	42a2      	cmp	r2, r4
 80076ba:	d9fa      	bls.n	80076b2 <_free_r+0x4a>
 80076bc:	6819      	ldr	r1, [r3, #0]
 80076be:	1858      	adds	r0, r3, r1
 80076c0:	42a0      	cmp	r0, r4
 80076c2:	d10b      	bne.n	80076dc <_free_r+0x74>
 80076c4:	6820      	ldr	r0, [r4, #0]
 80076c6:	4401      	add	r1, r0
 80076c8:	1858      	adds	r0, r3, r1
 80076ca:	4282      	cmp	r2, r0
 80076cc:	6019      	str	r1, [r3, #0]
 80076ce:	d1dd      	bne.n	800768c <_free_r+0x24>
 80076d0:	6810      	ldr	r0, [r2, #0]
 80076d2:	6852      	ldr	r2, [r2, #4]
 80076d4:	605a      	str	r2, [r3, #4]
 80076d6:	4401      	add	r1, r0
 80076d8:	6019      	str	r1, [r3, #0]
 80076da:	e7d7      	b.n	800768c <_free_r+0x24>
 80076dc:	d902      	bls.n	80076e4 <_free_r+0x7c>
 80076de:	230c      	movs	r3, #12
 80076e0:	602b      	str	r3, [r5, #0]
 80076e2:	e7d3      	b.n	800768c <_free_r+0x24>
 80076e4:	6820      	ldr	r0, [r4, #0]
 80076e6:	1821      	adds	r1, r4, r0
 80076e8:	428a      	cmp	r2, r1
 80076ea:	bf04      	itt	eq
 80076ec:	6811      	ldreq	r1, [r2, #0]
 80076ee:	6852      	ldreq	r2, [r2, #4]
 80076f0:	6062      	str	r2, [r4, #4]
 80076f2:	bf04      	itt	eq
 80076f4:	1809      	addeq	r1, r1, r0
 80076f6:	6021      	streq	r1, [r4, #0]
 80076f8:	605c      	str	r4, [r3, #4]
 80076fa:	e7c7      	b.n	800768c <_free_r+0x24>
 80076fc:	bd38      	pop	{r3, r4, r5, pc}
 80076fe:	bf00      	nop
 8007700:	200003ac 	.word	0x200003ac

08007704 <_malloc_r>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	1ccd      	adds	r5, r1, #3
 8007708:	f025 0503 	bic.w	r5, r5, #3
 800770c:	3508      	adds	r5, #8
 800770e:	2d0c      	cmp	r5, #12
 8007710:	bf38      	it	cc
 8007712:	250c      	movcc	r5, #12
 8007714:	2d00      	cmp	r5, #0
 8007716:	4606      	mov	r6, r0
 8007718:	db01      	blt.n	800771e <_malloc_r+0x1a>
 800771a:	42a9      	cmp	r1, r5
 800771c:	d903      	bls.n	8007726 <_malloc_r+0x22>
 800771e:	230c      	movs	r3, #12
 8007720:	6033      	str	r3, [r6, #0]
 8007722:	2000      	movs	r0, #0
 8007724:	bd70      	pop	{r4, r5, r6, pc}
 8007726:	f000 f8f1 	bl	800790c <__malloc_lock>
 800772a:	4a21      	ldr	r2, [pc, #132]	; (80077b0 <_malloc_r+0xac>)
 800772c:	6814      	ldr	r4, [r2, #0]
 800772e:	4621      	mov	r1, r4
 8007730:	b991      	cbnz	r1, 8007758 <_malloc_r+0x54>
 8007732:	4c20      	ldr	r4, [pc, #128]	; (80077b4 <_malloc_r+0xb0>)
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	b91b      	cbnz	r3, 8007740 <_malloc_r+0x3c>
 8007738:	4630      	mov	r0, r6
 800773a:	f000 f83d 	bl	80077b8 <_sbrk_r>
 800773e:	6020      	str	r0, [r4, #0]
 8007740:	4629      	mov	r1, r5
 8007742:	4630      	mov	r0, r6
 8007744:	f000 f838 	bl	80077b8 <_sbrk_r>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d124      	bne.n	8007796 <_malloc_r+0x92>
 800774c:	230c      	movs	r3, #12
 800774e:	6033      	str	r3, [r6, #0]
 8007750:	4630      	mov	r0, r6
 8007752:	f000 f8dc 	bl	800790e <__malloc_unlock>
 8007756:	e7e4      	b.n	8007722 <_malloc_r+0x1e>
 8007758:	680b      	ldr	r3, [r1, #0]
 800775a:	1b5b      	subs	r3, r3, r5
 800775c:	d418      	bmi.n	8007790 <_malloc_r+0x8c>
 800775e:	2b0b      	cmp	r3, #11
 8007760:	d90f      	bls.n	8007782 <_malloc_r+0x7e>
 8007762:	600b      	str	r3, [r1, #0]
 8007764:	50cd      	str	r5, [r1, r3]
 8007766:	18cc      	adds	r4, r1, r3
 8007768:	4630      	mov	r0, r6
 800776a:	f000 f8d0 	bl	800790e <__malloc_unlock>
 800776e:	f104 000b 	add.w	r0, r4, #11
 8007772:	1d23      	adds	r3, r4, #4
 8007774:	f020 0007 	bic.w	r0, r0, #7
 8007778:	1ac3      	subs	r3, r0, r3
 800777a:	d0d3      	beq.n	8007724 <_malloc_r+0x20>
 800777c:	425a      	negs	r2, r3
 800777e:	50e2      	str	r2, [r4, r3]
 8007780:	e7d0      	b.n	8007724 <_malloc_r+0x20>
 8007782:	428c      	cmp	r4, r1
 8007784:	684b      	ldr	r3, [r1, #4]
 8007786:	bf16      	itet	ne
 8007788:	6063      	strne	r3, [r4, #4]
 800778a:	6013      	streq	r3, [r2, #0]
 800778c:	460c      	movne	r4, r1
 800778e:	e7eb      	b.n	8007768 <_malloc_r+0x64>
 8007790:	460c      	mov	r4, r1
 8007792:	6849      	ldr	r1, [r1, #4]
 8007794:	e7cc      	b.n	8007730 <_malloc_r+0x2c>
 8007796:	1cc4      	adds	r4, r0, #3
 8007798:	f024 0403 	bic.w	r4, r4, #3
 800779c:	42a0      	cmp	r0, r4
 800779e:	d005      	beq.n	80077ac <_malloc_r+0xa8>
 80077a0:	1a21      	subs	r1, r4, r0
 80077a2:	4630      	mov	r0, r6
 80077a4:	f000 f808 	bl	80077b8 <_sbrk_r>
 80077a8:	3001      	adds	r0, #1
 80077aa:	d0cf      	beq.n	800774c <_malloc_r+0x48>
 80077ac:	6025      	str	r5, [r4, #0]
 80077ae:	e7db      	b.n	8007768 <_malloc_r+0x64>
 80077b0:	200003ac 	.word	0x200003ac
 80077b4:	200003b0 	.word	0x200003b0

080077b8 <_sbrk_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	4c06      	ldr	r4, [pc, #24]	; (80077d4 <_sbrk_r+0x1c>)
 80077bc:	2300      	movs	r3, #0
 80077be:	4605      	mov	r5, r0
 80077c0:	4608      	mov	r0, r1
 80077c2:	6023      	str	r3, [r4, #0]
 80077c4:	f7ff fb70 	bl	8006ea8 <_sbrk>
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	d102      	bne.n	80077d2 <_sbrk_r+0x1a>
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	b103      	cbz	r3, 80077d2 <_sbrk_r+0x1a>
 80077d0:	602b      	str	r3, [r5, #0]
 80077d2:	bd38      	pop	{r3, r4, r5, pc}
 80077d4:	200003b8 	.word	0x200003b8

080077d8 <__sread>:
 80077d8:	b510      	push	{r4, lr}
 80077da:	460c      	mov	r4, r1
 80077dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077e0:	f000 f896 	bl	8007910 <_read_r>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	bfab      	itete	ge
 80077e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077ea:	89a3      	ldrhlt	r3, [r4, #12]
 80077ec:	181b      	addge	r3, r3, r0
 80077ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077f2:	bfac      	ite	ge
 80077f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80077f6:	81a3      	strhlt	r3, [r4, #12]
 80077f8:	bd10      	pop	{r4, pc}

080077fa <__swrite>:
 80077fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077fe:	461f      	mov	r7, r3
 8007800:	898b      	ldrh	r3, [r1, #12]
 8007802:	05db      	lsls	r3, r3, #23
 8007804:	4605      	mov	r5, r0
 8007806:	460c      	mov	r4, r1
 8007808:	4616      	mov	r6, r2
 800780a:	d505      	bpl.n	8007818 <__swrite+0x1e>
 800780c:	2302      	movs	r3, #2
 800780e:	2200      	movs	r2, #0
 8007810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007814:	f000 f868 	bl	80078e8 <_lseek_r>
 8007818:	89a3      	ldrh	r3, [r4, #12]
 800781a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800781e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007822:	81a3      	strh	r3, [r4, #12]
 8007824:	4632      	mov	r2, r6
 8007826:	463b      	mov	r3, r7
 8007828:	4628      	mov	r0, r5
 800782a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800782e:	f000 b817 	b.w	8007860 <_write_r>

08007832 <__sseek>:
 8007832:	b510      	push	{r4, lr}
 8007834:	460c      	mov	r4, r1
 8007836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783a:	f000 f855 	bl	80078e8 <_lseek_r>
 800783e:	1c43      	adds	r3, r0, #1
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	bf15      	itete	ne
 8007844:	6560      	strne	r0, [r4, #84]	; 0x54
 8007846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800784a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800784e:	81a3      	strheq	r3, [r4, #12]
 8007850:	bf18      	it	ne
 8007852:	81a3      	strhne	r3, [r4, #12]
 8007854:	bd10      	pop	{r4, pc}

08007856 <__sclose>:
 8007856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800785a:	f000 b813 	b.w	8007884 <_close_r>
	...

08007860 <_write_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	4c07      	ldr	r4, [pc, #28]	; (8007880 <_write_r+0x20>)
 8007864:	4605      	mov	r5, r0
 8007866:	4608      	mov	r0, r1
 8007868:	4611      	mov	r1, r2
 800786a:	2200      	movs	r2, #0
 800786c:	6022      	str	r2, [r4, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	f7ff fac9 	bl	8006e06 <_write>
 8007874:	1c43      	adds	r3, r0, #1
 8007876:	d102      	bne.n	800787e <_write_r+0x1e>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	b103      	cbz	r3, 800787e <_write_r+0x1e>
 800787c:	602b      	str	r3, [r5, #0]
 800787e:	bd38      	pop	{r3, r4, r5, pc}
 8007880:	200003b8 	.word	0x200003b8

08007884 <_close_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	4c06      	ldr	r4, [pc, #24]	; (80078a0 <_close_r+0x1c>)
 8007888:	2300      	movs	r3, #0
 800788a:	4605      	mov	r5, r0
 800788c:	4608      	mov	r0, r1
 800788e:	6023      	str	r3, [r4, #0]
 8007890:	f7ff fad5 	bl	8006e3e <_close>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d102      	bne.n	800789e <_close_r+0x1a>
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	b103      	cbz	r3, 800789e <_close_r+0x1a>
 800789c:	602b      	str	r3, [r5, #0]
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	200003b8 	.word	0x200003b8

080078a4 <_fstat_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4c07      	ldr	r4, [pc, #28]	; (80078c4 <_fstat_r+0x20>)
 80078a8:	2300      	movs	r3, #0
 80078aa:	4605      	mov	r5, r0
 80078ac:	4608      	mov	r0, r1
 80078ae:	4611      	mov	r1, r2
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	f7ff fad0 	bl	8006e56 <_fstat>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	d102      	bne.n	80078c0 <_fstat_r+0x1c>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	b103      	cbz	r3, 80078c0 <_fstat_r+0x1c>
 80078be:	602b      	str	r3, [r5, #0]
 80078c0:	bd38      	pop	{r3, r4, r5, pc}
 80078c2:	bf00      	nop
 80078c4:	200003b8 	.word	0x200003b8

080078c8 <_isatty_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4c06      	ldr	r4, [pc, #24]	; (80078e4 <_isatty_r+0x1c>)
 80078cc:	2300      	movs	r3, #0
 80078ce:	4605      	mov	r5, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	6023      	str	r3, [r4, #0]
 80078d4:	f7ff facf 	bl	8006e76 <_isatty>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_isatty_r+0x1a>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_isatty_r+0x1a>
 80078e0:	602b      	str	r3, [r5, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	200003b8 	.word	0x200003b8

080078e8 <_lseek_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4c07      	ldr	r4, [pc, #28]	; (8007908 <_lseek_r+0x20>)
 80078ec:	4605      	mov	r5, r0
 80078ee:	4608      	mov	r0, r1
 80078f0:	4611      	mov	r1, r2
 80078f2:	2200      	movs	r2, #0
 80078f4:	6022      	str	r2, [r4, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	f7ff fac8 	bl	8006e8c <_lseek>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d102      	bne.n	8007906 <_lseek_r+0x1e>
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	b103      	cbz	r3, 8007906 <_lseek_r+0x1e>
 8007904:	602b      	str	r3, [r5, #0]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	200003b8 	.word	0x200003b8

0800790c <__malloc_lock>:
 800790c:	4770      	bx	lr

0800790e <__malloc_unlock>:
 800790e:	4770      	bx	lr

08007910 <_read_r>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	4c07      	ldr	r4, [pc, #28]	; (8007930 <_read_r+0x20>)
 8007914:	4605      	mov	r5, r0
 8007916:	4608      	mov	r0, r1
 8007918:	4611      	mov	r1, r2
 800791a:	2200      	movs	r2, #0
 800791c:	6022      	str	r2, [r4, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	f7ff fa54 	bl	8006dcc <_read>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_read_r+0x1e>
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	b103      	cbz	r3, 800792e <_read_r+0x1e>
 800792c:	602b      	str	r3, [r5, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	200003b8 	.word	0x200003b8

08007934 <_init>:
 8007934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007936:	bf00      	nop
 8007938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800793a:	bc08      	pop	{r3}
 800793c:	469e      	mov	lr, r3
 800793e:	4770      	bx	lr

08007940 <_fini>:
 8007940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007942:	bf00      	nop
 8007944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007946:	bc08      	pop	{r3}
 8007948:	469e      	mov	lr, r3
 800794a:	4770      	bx	lr
