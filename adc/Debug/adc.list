
adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d98  08004d98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d98  08004d98  00014d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004da0  08004da0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004da0  08004da0  00014da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004da4  08004da4  00014da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08004db4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08004db4  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adfd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001719  00000000  00000000  0002ae39  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a80  00000000  00000000  0002c558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b8  00000000  00000000  0002cfd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000269ef  00000000  00000000  0002d990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008429  00000000  00000000  0005437f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6fff  00000000  00000000  0005c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001537a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c64  00000000  00000000  00153824  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d38 	.word	0x08004d38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004d38 	.word	0x08004d38

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b972 	b.w	8000d00 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4688      	mov	r8, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14b      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4615      	mov	r5, r2
 8000a46:	d967      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0720 	rsb	r7, r2, #32
 8000a52:	fa01 f302 	lsl.w	r3, r1, r2
 8000a56:	fa20 f707 	lsr.w	r7, r0, r7
 8000a5a:	4095      	lsls	r5, r2
 8000a5c:	ea47 0803 	orr.w	r8, r7, r3
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a6c:	fa1f fc85 	uxth.w	ip, r5
 8000a70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a78:	fb07 f10c 	mul.w	r1, r7, ip
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18eb      	adds	r3, r5, r3
 8000a82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a86:	f080 811b 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8118 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000a90:	3f02      	subs	r7, #2
 8000a92:	442b      	add	r3, r5
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa8:	45a4      	cmp	ip, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	192c      	adds	r4, r5, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8107 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	f240 8104 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000abc:	3802      	subs	r0, #2
 8000abe:	442c      	add	r4, r5
 8000ac0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac4:	eba4 040c 	sub.w	r4, r4, ip
 8000ac8:	2700      	movs	r7, #0
 8000aca:	b11e      	cbz	r6, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad4:	4639      	mov	r1, r7
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d909      	bls.n	8000af2 <__udivmoddi4+0xbe>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80eb 	beq.w	8000cba <__udivmoddi4+0x286>
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aea:	4638      	mov	r0, r7
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	fab3 f783 	clz	r7, r3
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d147      	bne.n	8000b8a <__udivmoddi4+0x156>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xd0>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 80fa 	bhi.w	8000cf8 <__udivmoddi4+0x2c4>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e0      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b12:	e9c6 4800 	strd	r4, r8, [r6]
 8000b16:	e7dd      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b18:	b902      	cbnz	r2, 8000b1c <__udivmoddi4+0xe8>
 8000b1a:	deff      	udf	#255	; 0xff
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	f040 808f 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b26:	1b49      	subs	r1, r1, r5
 8000b28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2c:	fa1f f885 	uxth.w	r8, r5
 8000b30:	2701      	movs	r7, #1
 8000b32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b36:	0c23      	lsrs	r3, r4, #16
 8000b38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b40:	fb08 f10c 	mul.w	r1, r8, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1a59      	subs	r1, r3, r1
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x14c>
 8000b70:	192c      	adds	r4, r5, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x14a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80b6 	bhi.w	8000cea <__udivmoddi4+0x2b6>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e79f      	b.n	8000aca <__udivmoddi4+0x96>
 8000b8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b8e:	40bb      	lsls	r3, r7
 8000b90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b98:	fa01 f407 	lsl.w	r4, r1, r7
 8000b9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ba0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ba4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ba8:	4325      	orrs	r5, r4
 8000baa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bae:	0c2c      	lsrs	r4, r5, #16
 8000bb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bb4:	fa1f fa8e 	uxth.w	sl, lr
 8000bb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bd4:	f080 8087 	bcs.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f240 8084 	bls.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bde:	f1a9 0902 	sub.w	r9, r9, #2
 8000be2:	4473      	add	r3, lr
 8000be4:	1b1b      	subs	r3, r3, r4
 8000be6:	b2ad      	uxth	r5, r5
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bf4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bf8:	45a2      	cmp	sl, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1e 0404 	adds.w	r4, lr, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	d26b      	bcs.n	8000cde <__udivmoddi4+0x2aa>
 8000c06:	45a2      	cmp	sl, r4
 8000c08:	d969      	bls.n	8000cde <__udivmoddi4+0x2aa>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4474      	add	r4, lr
 8000c0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c12:	fba0 8902 	umull	r8, r9, r0, r2
 8000c16:	eba4 040a 	sub.w	r4, r4, sl
 8000c1a:	454c      	cmp	r4, r9
 8000c1c:	46c2      	mov	sl, r8
 8000c1e:	464b      	mov	r3, r9
 8000c20:	d354      	bcc.n	8000ccc <__udivmoddi4+0x298>
 8000c22:	d051      	beq.n	8000cc8 <__udivmoddi4+0x294>
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d069      	beq.n	8000cfc <__udivmoddi4+0x2c8>
 8000c28:	ebb1 050a 	subs.w	r5, r1, sl
 8000c2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c34:	40fd      	lsrs	r5, r7
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	ea4c 0505 	orr.w	r5, ip, r5
 8000c3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c40:	2700      	movs	r7, #0
 8000c42:	e747      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000c44:	f1c2 0320 	rsb	r3, r2, #32
 8000c48:	fa20 f703 	lsr.w	r7, r0, r3
 8000c4c:	4095      	lsls	r5, r2
 8000c4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c52:	fa21 f303 	lsr.w	r3, r1, r3
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	4338      	orrs	r0, r7
 8000c5c:	0c01      	lsrs	r1, r0, #16
 8000c5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c62:	fa1f f885 	uxth.w	r8, r5
 8000c66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6e:	fb07 f308 	mul.w	r3, r7, r8
 8000c72:	428b      	cmp	r3, r1
 8000c74:	fa04 f402 	lsl.w	r4, r4, r2
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x256>
 8000c7a:	1869      	adds	r1, r5, r1
 8000c7c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c80:	d22f      	bcs.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d92d      	bls.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c86:	3f02      	subs	r7, #2
 8000c88:	4429      	add	r1, r5
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	b281      	uxth	r1, r0
 8000c8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9a:	fb00 f308 	mul.w	r3, r0, r8
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x27e>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca8:	d217      	bcs.n	8000cda <__udivmoddi4+0x2a6>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d915      	bls.n	8000cda <__udivmoddi4+0x2a6>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1ac9      	subs	r1, r1, r3
 8000cb4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cb8:	e73b      	b.n	8000b32 <__udivmoddi4+0xfe>
 8000cba:	4637      	mov	r7, r6
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	e709      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cc0:	4607      	mov	r7, r0
 8000cc2:	e6e7      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	e6fb      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc8:	4541      	cmp	r1, r8
 8000cca:	d2ab      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000ccc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cd0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	e7a4      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cda:	4660      	mov	r0, ip
 8000cdc:	e7e9      	b.n	8000cb2 <__udivmoddi4+0x27e>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	e795      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce2:	4667      	mov	r7, ip
 8000ce4:	e7d1      	b.n	8000c8a <__udivmoddi4+0x256>
 8000ce6:	4681      	mov	r9, r0
 8000ce8:	e77c      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cea:	3802      	subs	r0, #2
 8000cec:	442c      	add	r4, r5
 8000cee:	e747      	b.n	8000b80 <__udivmoddi4+0x14c>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	442b      	add	r3, r5
 8000cf6:	e72f      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e708      	b.n	8000b0e <__udivmoddi4+0xda>
 8000cfc:	4637      	mov	r7, r6
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0xa0>

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_Init+0x3c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <HAL_Init+0x3c>)
 8000d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1a:	2003      	movs	r0, #3
 8000d1c:	f001 fb4c 	bl	80023b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 f80f 	bl	8000d44 <HAL_InitTick>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d002      	beq.n	8000d32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	71fb      	strb	r3, [r7, #7]
 8000d30:	e001      	b.n	8000d36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d32:	f003 fea1 	bl	8004a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d36:	79fb      	ldrb	r3, [r7, #7]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40022000 	.word	0x40022000

08000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_InitTick+0x68>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d022      	beq.n	8000d9e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_InitTick+0x6c>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <HAL_InitTick+0x68>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 fb4a 	bl	8002406 <HAL_SYSTICK_Config>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10f      	bne.n	8000d98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b0f      	cmp	r3, #15
 8000d7c:	d809      	bhi.n	8000d92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	f04f 30ff 	mov.w	r0, #4294967295
 8000d86:	f001 fb22 	bl	80023ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_InitTick+0x70>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	e007      	b.n	8000da2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	e004      	b.n	8000da2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e001      	b.n	8000da2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000004 	.word	0x20000004
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000000 	.word	0x20000000

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x1c>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <HAL_IncTick+0x1c>)
 8000dc8:	6013      	str	r3, [r2, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	20000028 	.word	0x20000028
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000028 	.word	0x20000028

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff ffee 	bl	8000ddc <HAL_GetTick>
 8000e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	d004      	beq.n	8000e18 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_Delay+0x40>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	4413      	add	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e18:	bf00      	nop
 8000e1a:	f7ff ffdf 	bl	8000ddc <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d8f7      	bhi.n	8000e1a <HAL_Delay+0x26>
  {
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000004 	.word	0x20000004

08000e38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	609a      	str	r2, [r3, #8]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	431a      	orrs	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	609a      	str	r2, [r3, #8]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ea0:	b490      	push	{r4, r7}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3360      	adds	r3, #96	; 0x60
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000ebc:	6822      	ldr	r2, [r4, #0]
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <LL_ADC_SetOffset+0x40>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ed2:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc90      	pop	{r4, r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	03fff000 	.word	0x03fff000

08000ee4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ee4:	b490      	push	{r4, r7}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3360      	adds	r3, #96	; 0x60
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc90      	pop	{r4, r7}
 8000f0a:	4770      	bx	lr

08000f0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f0c:	b490      	push	{r4, r7}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3360      	adds	r3, #96	; 0x60
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc90      	pop	{r4, r7}
 8000f3a:	4770      	bx	lr

08000f3c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f62:	b490      	push	{r4, r7}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3330      	adds	r3, #48	; 0x30
 8000f72:	461a      	mov	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	0a1b      	lsrs	r3, r3, #8
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	f003 030c 	and.w	r3, r3, #12
 8000f7e:	4413      	add	r3, r2
 8000f80:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000f82:	6822      	ldr	r2, [r4, #0]
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	211f      	movs	r1, #31
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	401a      	ands	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	0e9b      	lsrs	r3, r3, #26
 8000f98:	f003 011f 	and.w	r1, r3, #31
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	f003 031f 	and.w	r3, r3, #31
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc90      	pop	{r4, r7}
 8000fb2:	4770      	bx	lr

08000fb4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fb4:	b490      	push	{r4, r7}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3314      	adds	r3, #20
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	0e5b      	lsrs	r3, r3, #25
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	4413      	add	r3, r2
 8000fd2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000fd4:	6822      	ldr	r2, [r4, #0]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	0d1b      	lsrs	r3, r3, #20
 8000fda:	f003 031f 	and.w	r3, r3, #31
 8000fde:	2107      	movs	r1, #7
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	0d1b      	lsrs	r3, r3, #20
 8000fec:	f003 031f 	and.w	r3, r3, #31
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc90      	pop	{r4, r7}
 8001002:	4770      	bx	lr

08001004 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800101c:	43db      	mvns	r3, r3
 800101e:	401a      	ands	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0318 	and.w	r3, r3, #24
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001028:	40d9      	lsrs	r1, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	400b      	ands	r3, r1
 800102e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001032:	431a      	orrs	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	0007ffff 	.word	0x0007ffff

0800104c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 031f 	and.w	r3, r3, #31
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001094:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6093      	str	r3, [r2, #8]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010bc:	d101      	bne.n	80010c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001108:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800110c:	d101      	bne.n	8001112 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001134:	f043 0201 	orr.w	r2, r3, #1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800115c:	f043 0202 	orr.w	r2, r3, #2
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	2b01      	cmp	r3, #1
 8001182:	d101      	bne.n	8001188 <LL_ADC_IsEnabled+0x18>
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <LL_ADC_IsEnabled+0x1a>
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d101      	bne.n	80011ae <LL_ADC_IsDisableOngoing+0x18>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <LL_ADC_IsDisableOngoing+0x1a>
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d0:	f043 0204 	orr.w	r2, r3, #4
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011f8:	f043 0210 	orr.w	r2, r3, #16
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b04      	cmp	r3, #4
 800121e:	d101      	bne.n	8001224 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001242:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001246:	f043 0220 	orr.w	r2, r3, #32
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b08      	cmp	r3, #8
 800126c:	d101      	bne.n	8001272 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e134      	b.n	8001504 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d109      	bne.n	80012bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f003 fc09 	bl	8004ac0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fef1 	bl	80010a8 <LL_ADC_IsDeepPowerDownEnabled>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fed7 	bl	8001084 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ff0c 	bl	80010f8 <LL_ADC_IsInternalRegulatorEnabled>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d113      	bne.n	800130e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fef0 	bl	80010d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012f0:	4b86      	ldr	r3, [pc, #536]	; (800150c <HAL_ADC_Init+0x28c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	099b      	lsrs	r3, r3, #6
 80012f6:	4a86      	ldr	r2, [pc, #536]	; (8001510 <HAL_ADC_Init+0x290>)
 80012f8:	fba2 2303 	umull	r2, r3, r2, r3
 80012fc:	099b      	lsrs	r3, r3, #6
 80012fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001300:	e002      	b.n	8001308 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	3b01      	subs	r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f9      	bne.n	8001302 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fef0 	bl	80010f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10d      	bne.n	800133a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001322:	f043 0210 	orr.w	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	f043 0201 	orr.w	r2, r3, #1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff64 	bl	800120c <LL_ADC_REG_IsConversionOngoing>
 8001344:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	2b00      	cmp	r3, #0
 8001350:	f040 80cf 	bne.w	80014f2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f040 80cb 	bne.w	80014f2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001360:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001364:	f043 0202 	orr.w	r2, r3, #2
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fefd 	bl	8001170 <LL_ADC_IsEnabled>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d115      	bne.n	80013a8 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800137c:	4865      	ldr	r0, [pc, #404]	; (8001514 <HAL_ADC_Init+0x294>)
 800137e:	f7ff fef7 	bl	8001170 <LL_ADC_IsEnabled>
 8001382:	4604      	mov	r4, r0
 8001384:	4864      	ldr	r0, [pc, #400]	; (8001518 <HAL_ADC_Init+0x298>)
 8001386:	f7ff fef3 	bl	8001170 <LL_ADC_IsEnabled>
 800138a:	4603      	mov	r3, r0
 800138c:	431c      	orrs	r4, r3
 800138e:	4863      	ldr	r0, [pc, #396]	; (800151c <HAL_ADC_Init+0x29c>)
 8001390:	f7ff feee 	bl	8001170 <LL_ADC_IsEnabled>
 8001394:	4603      	mov	r3, r0
 8001396:	4323      	orrs	r3, r4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d105      	bne.n	80013a8 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4619      	mov	r1, r3
 80013a2:	485f      	ldr	r0, [pc, #380]	; (8001520 <HAL_ADC_Init+0x2a0>)
 80013a4:	f7ff fd48 	bl	8000e38 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7e5b      	ldrb	r3, [r3, #25]
 80013ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80013be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d106      	bne.n	80013e4 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	3b01      	subs	r3, #1
 80013dc:	045b      	lsls	r3, r3, #17
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d009      	beq.n	8001400 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	4b47      	ldr	r3, [pc, #284]	; (8001524 <HAL_ADC_Init+0x2a4>)
 8001408:	4013      	ands	r3, r2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	69b9      	ldr	r1, [r7, #24]
 8001410:	430b      	orrs	r3, r1
 8001412:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fef7 	bl	800120c <LL_ADC_REG_IsConversionOngoing>
 800141e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff18 	bl	800125a <LL_ADC_INJ_IsConversionOngoing>
 800142a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d13d      	bne.n	80014ae <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d13a      	bne.n	80014ae <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800143c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001444:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001454:	f023 0302 	bic.w	r3, r3, #2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	69b9      	ldr	r1, [r7, #24]
 800145e:	430b      	orrs	r3, r1
 8001460:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001468:	2b01      	cmp	r3, #1
 800146a:	d118      	bne.n	800149e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001476:	f023 0304 	bic.w	r3, r3, #4
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001482:	4311      	orrs	r1, r2
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001488:	4311      	orrs	r1, r2
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800148e:	430a      	orrs	r2, r1
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0201 	orr.w	r2, r2, #1
 800149a:	611a      	str	r2, [r3, #16]
 800149c:	e007      	b.n	80014ae <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0201 	bic.w	r2, r2, #1
 80014ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d10c      	bne.n	80014d0 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	f023 010f 	bic.w	r1, r3, #15
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	1e5a      	subs	r2, r3, #1
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	631a      	str	r2, [r3, #48]	; 0x30
 80014ce:	e007      	b.n	80014e0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 020f 	bic.w	r2, r2, #15
 80014de:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e4:	f023 0303 	bic.w	r3, r3, #3
 80014e8:	f043 0201 	orr.w	r2, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	655a      	str	r2, [r3, #84]	; 0x54
 80014f0:	e007      	b.n	8001502 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f6:	f043 0210 	orr.w	r2, r3, #16
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001502:	7ffb      	ldrb	r3, [r7, #31]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3724      	adds	r7, #36	; 0x24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	20000008 	.word	0x20000008
 8001510:	053e2d63 	.word	0x053e2d63
 8001514:	50040000 	.word	0x50040000
 8001518:	50040100 	.word	0x50040100
 800151c:	50040200 	.word	0x50040200
 8001520:	50040300 	.word	0x50040300
 8001524:	fff0c007 	.word	0xfff0c007

08001528 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001530:	4857      	ldr	r0, [pc, #348]	; (8001690 <HAL_ADC_Start+0x168>)
 8001532:	f7ff fd8b 	bl	800104c <LL_ADC_GetMultimode>
 8001536:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fe65 	bl	800120c <LL_ADC_REG_IsConversionOngoing>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	f040 809c 	bne.w	8001682 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_ADC_Start+0x30>
 8001554:	2302      	movs	r3, #2
 8001556:	e097      	b.n	8001688 <HAL_ADC_Start+0x160>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 fdc5 	bl	80020f0 <ADC_Enable>
 8001566:	4603      	mov	r3, r0
 8001568:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	2b00      	cmp	r3, #0
 800156e:	f040 8083 	bne.w	8001678 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a42      	ldr	r2, [pc, #264]	; (8001694 <HAL_ADC_Start+0x16c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d002      	beq.n	8001596 <HAL_ADC_Start+0x6e>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	e000      	b.n	8001598 <HAL_ADC_Start+0x70>
 8001596:	4b40      	ldr	r3, [pc, #256]	; (8001698 <HAL_ADC_Start+0x170>)
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	4293      	cmp	r3, r2
 800159e:	d002      	beq.n	80015a6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d105      	bne.n	80015b2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015be:	d106      	bne.n	80015ce <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c4:	f023 0206 	bic.w	r2, r3, #6
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	659a      	str	r2, [r3, #88]	; 0x58
 80015cc:	e002      	b.n	80015d4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	221c      	movs	r2, #28
 80015da:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a2a      	ldr	r2, [pc, #168]	; (8001694 <HAL_ADC_Start+0x16c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d002      	beq.n	80015f4 <HAL_ADC_Start+0xcc>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e000      	b.n	80015f6 <HAL_ADC_Start+0xce>
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <HAL_ADC_Start+0x170>)
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d008      	beq.n	8001610 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	2b05      	cmp	r3, #5
 8001608:	d002      	beq.n	8001610 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	2b09      	cmp	r3, #9
 800160e:	d114      	bne.n	800163a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d007      	beq.n	800162e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001622:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001626:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fdc2 	bl	80011bc <LL_ADC_REG_StartConversion>
 8001638:	e025      	b.n	8001686 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <HAL_ADC_Start+0x16c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d002      	beq.n	8001656 <HAL_ADC_Start+0x12e>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	e000      	b.n	8001658 <HAL_ADC_Start+0x130>
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_ADC_Start+0x170>)
 8001658:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00f      	beq.n	8001686 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800166e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	655a      	str	r2, [r3, #84]	; 0x54
 8001676:	e006      	b.n	8001686 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001680:	e001      	b.n	8001686 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001682:	2302      	movs	r3, #2
 8001684:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001686:	7dfb      	ldrb	r3, [r7, #23]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	50040300 	.word	0x50040300
 8001694:	50040100 	.word	0x50040100
 8001698:	50040000 	.word	0x50040000

0800169c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_Stop+0x16>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e023      	b.n	80016fa <HAL_ADC_Stop+0x5e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80016ba:	2103      	movs	r1, #3
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 fc63 	bl	8001f88 <ADC_ConversionStop>
 80016c2:	4603      	mov	r3, r0
 80016c4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d111      	bne.n	80016f0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fd69 	bl	80021a4 <ADC_Disable>
 80016d2:	4603      	mov	r3, r0
 80016d4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d109      	bne.n	80016f0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	f043 0201 	orr.w	r2, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800170e:	4862      	ldr	r0, [pc, #392]	; (8001898 <HAL_ADC_PollForConversion+0x194>)
 8001710:	f7ff fc9c 	bl	800104c <LL_ADC_GetMultimode>
 8001714:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	2b08      	cmp	r3, #8
 800171c:	d102      	bne.n	8001724 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800171e:	2308      	movs	r3, #8
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	e02a      	b.n	800177a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d005      	beq.n	8001736 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d002      	beq.n	8001736 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	2b09      	cmp	r3, #9
 8001734:	d111      	bne.n	800175a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d007      	beq.n	8001754 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001748:	f043 0220 	orr.w	r2, r3, #32
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e09d      	b.n	8001890 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001754:	2304      	movs	r3, #4
 8001756:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001758:	e00f      	b.n	800177a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800175a:	484f      	ldr	r0, [pc, #316]	; (8001898 <HAL_ADC_PollForConversion+0x194>)
 800175c:	f7ff fc84 	bl	8001068 <LL_ADC_GetMultiDMATransfer>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176a:	f043 0220 	orr.w	r2, r3, #32
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e08c      	b.n	8001890 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001776:	2304      	movs	r3, #4
 8001778:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800177a:	f7ff fb2f 	bl	8000ddc <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001780:	e01a      	b.n	80017b8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d016      	beq.n	80017b8 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800178a:	f7ff fb27 	bl	8000ddc <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d302      	bcc.n	80017a0 <HAL_ADC_PollForConversion+0x9c>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10b      	bne.n	80017b8 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a4:	f043 0204 	orr.w	r2, r3, #4
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e06b      	b.n	8001890 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0dd      	beq.n	8001782 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fbb0 	bl	8000f3c <LL_ADC_REG_IsTriggerSourceSWStart>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d01c      	beq.n	800181c <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	7e5b      	ldrb	r3, [r3, #25]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d118      	bne.n	800181c <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d111      	bne.n	800181c <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d105      	bne.n	800181c <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001814:	f043 0201 	orr.w	r2, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1e      	ldr	r2, [pc, #120]	; (800189c <HAL_ADC_PollForConversion+0x198>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d002      	beq.n	800182c <HAL_ADC_PollForConversion+0x128>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	e000      	b.n	800182e <HAL_ADC_PollForConversion+0x12a>
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <HAL_ADC_PollForConversion+0x19c>)
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	4293      	cmp	r3, r2
 8001834:	d008      	beq.n	8001848 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2b05      	cmp	r3, #5
 8001840:	d002      	beq.n	8001848 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b09      	cmp	r3, #9
 8001846:	d104      	bne.n	8001852 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	e00c      	b.n	800186c <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a11      	ldr	r2, [pc, #68]	; (800189c <HAL_ADC_PollForConversion+0x198>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d002      	beq.n	8001862 <HAL_ADC_PollForConversion+0x15e>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	e000      	b.n	8001864 <HAL_ADC_PollForConversion+0x160>
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_ADC_PollForConversion+0x19c>)
 8001864:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	2b08      	cmp	r3, #8
 8001870:	d104      	bne.n	800187c <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2208      	movs	r2, #8
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	e008      	b.n	800188e <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d103      	bne.n	800188e <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	220c      	movs	r2, #12
 800188c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	50040300 	.word	0x50040300
 800189c:	50040100 	.word	0x50040100
 80018a0:	50040000 	.word	0x50040000

080018a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b0a6      	sub	sp, #152	; 0x98
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x22>
 80018de:	2302      	movs	r3, #2
 80018e0:	e348      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x6b4>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fc8c 	bl	800120c <LL_ADC_REG_IsConversionOngoing>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 8329 	bne.w	8001f4e <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b05      	cmp	r3, #5
 8001902:	d824      	bhi.n	800194e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	3b02      	subs	r3, #2
 800190a:	2b03      	cmp	r3, #3
 800190c:	d81b      	bhi.n	8001946 <HAL_ADC_ConfigChannel+0x86>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <HAL_ADC_ConfigChannel+0x54>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	08001925 	.word	0x08001925
 8001918:	0800192d 	.word	0x0800192d
 800191c:	08001935 	.word	0x08001935
 8001920:	0800193d 	.word	0x0800193d
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	220c      	movs	r2, #12
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	e011      	b.n	8001950 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2212      	movs	r2, #18
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	e00d      	b.n	8001950 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2218      	movs	r2, #24
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	e009      	b.n	8001950 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	e004      	b.n	8001950 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	2206      	movs	r2, #6
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	e000      	b.n	8001950 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800194e:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6859      	ldr	r1, [r3, #4]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	f7ff fb00 	bl	8000f62 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fc50 	bl	800120c <LL_ADC_REG_IsConversionOngoing>
 800196c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fc70 	bl	800125a <LL_ADC_INJ_IsConversionOngoing>
 800197a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800197e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001982:	2b00      	cmp	r3, #0
 8001984:	f040 8148 	bne.w	8001c18 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001988:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800198c:	2b00      	cmp	r3, #0
 800198e:	f040 8143 	bne.w	8001c18 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	6819      	ldr	r1, [r3, #0]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	461a      	mov	r2, r3
 80019a0:	f7ff fb08 	bl	8000fb4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	08db      	lsrs	r3, r3, #3
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d00a      	beq.n	80019dc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	6919      	ldr	r1, [r3, #16]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019d6:	f7ff fa63 	bl	8000ea0 <LL_ADC_SetOffset>
 80019da:	e11d      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fa7e 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10a      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x148>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fa73 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	0e9b      	lsrs	r3, r3, #26
 8001a02:	f003 021f 	and.w	r2, r3, #31
 8001a06:	e012      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x16e>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fa68 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a26:	fab3 f383 	clz	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d105      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x186>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	0e9b      	lsrs	r3, r3, #26
 8001a40:	f003 031f 	and.w	r3, r3, #31
 8001a44:	e00a      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x19c>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d106      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2200      	movs	r2, #0
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fa4f 	bl	8000f0c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2101      	movs	r1, #1
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fa35 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10a      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x1da>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fa2a 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	0e9b      	lsrs	r3, r3, #26
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	e010      	b.n	8001abc <HAL_ADC_ConfigChannel+0x1fc>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fa1f 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x214>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0e9b      	lsrs	r3, r3, #26
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	e00a      	b.n	8001aea <HAL_ADC_ConfigChannel+0x22a>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ae2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ae4:	fab3 f383 	clz	r3, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d106      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2200      	movs	r2, #0
 8001af4:	2101      	movs	r1, #1
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fa08 	bl	8000f0c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2102      	movs	r1, #2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff f9ee 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10a      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x268>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2102      	movs	r1, #2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff f9e3 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	0e9b      	lsrs	r3, r3, #26
 8001b22:	f003 021f 	and.w	r2, r3, #31
 8001b26:	e010      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x28a>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2102      	movs	r1, #2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f9d8 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x2a2>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	0e9b      	lsrs	r3, r3, #26
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	e00a      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x2b8>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b6a:	fa93 f3a3 	rbit	r3, r3
 8001b6e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d106      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2200      	movs	r2, #0
 8001b82:	2102      	movs	r1, #2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f9c1 	bl	8000f0c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2103      	movs	r1, #3
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff f9a7 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10a      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x2f6>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2103      	movs	r1, #3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff f99c 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	0e9b      	lsrs	r3, r3, #26
 8001bb0:	f003 021f 	and.w	r2, r3, #31
 8001bb4:	e010      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x318>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2103      	movs	r1, #3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff f991 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d105      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x330>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0e9b      	lsrs	r3, r3, #26
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	e00a      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x346>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d106      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2103      	movs	r1, #3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff f97a 	bl	8000f0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff faa7 	bl	8001170 <LL_ADC_IsEnabled>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f040 810c 	bne.w	8001e42 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	461a      	mov	r2, r3
 8001c38:	f7ff f9e4 	bl	8001004 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4aad      	ldr	r2, [pc, #692]	; (8001ef8 <HAL_ADC_ConfigChannel+0x638>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	f040 80fd 	bne.w	8001e42 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10b      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x3b0>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0e9b      	lsrs	r3, r3, #26
 8001c5e:	3301      	adds	r3, #1
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	2b09      	cmp	r3, #9
 8001c66:	bf94      	ite	ls
 8001c68:	2301      	movls	r3, #1
 8001c6a:	2300      	movhi	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	e012      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x3d6>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	2b09      	cmp	r3, #9
 8001c8e:	bf94      	ite	ls
 8001c90:	2301      	movls	r3, #1
 8001c92:	2300      	movhi	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d064      	beq.n	8001d64 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d107      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x3f6>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0e9b      	lsrs	r3, r3, #26
 8001cac:	3301      	adds	r3, #1
 8001cae:	069b      	lsls	r3, r3, #26
 8001cb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cb4:	e00e      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x414>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	069b      	lsls	r3, r3, #26
 8001cd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d109      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x434>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0e9b      	lsrs	r3, r3, #26
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	2101      	movs	r1, #1
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	e010      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x456>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfc:	fa93 f3a3 	rbit	r3, r3
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d04:	fab3 f383 	clz	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	2101      	movs	r1, #1
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	ea42 0103 	orr.w	r1, r2, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10a      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x47c>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	0e9b      	lsrs	r3, r3, #26
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f003 021f 	and.w	r2, r3, #31
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	051b      	lsls	r3, r3, #20
 8001d3a:	e011      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x4a0>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	3301      	adds	r3, #1
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d60:	430b      	orrs	r3, r1
 8001d62:	e069      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d107      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x4c0>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0e9b      	lsrs	r3, r3, #26
 8001d76:	3301      	adds	r3, #1
 8001d78:	069b      	lsls	r3, r3, #26
 8001d7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d7e:	e00e      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x4de>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	61fb      	str	r3, [r7, #28]
  return result;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	069b      	lsls	r3, r3, #26
 8001d9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d109      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x4fe>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	0e9b      	lsrs	r3, r3, #26
 8001db0:	3301      	adds	r3, #1
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	2101      	movs	r1, #1
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	e010      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x520>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	617b      	str	r3, [r7, #20]
  return result;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	2101      	movs	r1, #1
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	ea42 0103 	orr.w	r1, r2, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10d      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x54c>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	0e9b      	lsrs	r3, r3, #26
 8001df6:	3301      	adds	r3, #1
 8001df8:	f003 021f 	and.w	r2, r3, #31
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	3b1e      	subs	r3, #30
 8001e04:	051b      	lsls	r3, r3, #20
 8001e06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	e014      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x576>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	60fb      	str	r3, [r7, #12]
  return result;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	fab3 f383 	clz	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b1e      	subs	r3, #30
 8001e30:	051b      	lsls	r3, r3, #20
 8001e32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e36:	430b      	orrs	r3, r1
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	6892      	ldr	r2, [r2, #8]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7ff f8b9 	bl	8000fb4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <HAL_ADC_ConfigChannel+0x63c>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 808c 	beq.w	8001f68 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e50:	482b      	ldr	r0, [pc, #172]	; (8001f00 <HAL_ADC_ConfigChannel+0x640>)
 8001e52:	f7ff f817 	bl	8000e84 <LL_ADC_GetCommonPathInternalCh>
 8001e56:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a29      	ldr	r2, [pc, #164]	; (8001f04 <HAL_ADC_ConfigChannel+0x644>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d12b      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x5fc>
 8001e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d125      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <HAL_ADC_ConfigChannel+0x648>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d004      	beq.n	8001e84 <HAL_ADC_ConfigChannel+0x5c4>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <HAL_ADC_ConfigChannel+0x64c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d16e      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	481c      	ldr	r0, [pc, #112]	; (8001f00 <HAL_ADC_ConfigChannel+0x640>)
 8001e90:	f7fe ffe5 	bl	8000e5e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001e94:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <HAL_ADC_ConfigChannel+0x650>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	099b      	lsrs	r3, r3, #6
 8001e9a:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_ADC_ConfigChannel+0x654>)
 8001e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea0:	099a      	lsrs	r2, r3, #6
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001eac:	e002      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f9      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eba:	e052      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a15      	ldr	r2, [pc, #84]	; (8001f18 <HAL_ADC_ConfigChannel+0x658>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d12a      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x65c>
 8001ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d124      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_ADC_ConfigChannel+0x648>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d004      	beq.n	8001ee6 <HAL_ADC_ConfigChannel+0x626>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <HAL_ADC_ConfigChannel+0x64c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d13f      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ee6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4803      	ldr	r0, [pc, #12]	; (8001f00 <HAL_ADC_ConfigChannel+0x640>)
 8001ef2:	f7fe ffb4 	bl	8000e5e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ef6:	e036      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x6a6>
 8001ef8:	407f0000 	.word	0x407f0000
 8001efc:	80080000 	.word	0x80080000
 8001f00:	50040300 	.word	0x50040300
 8001f04:	c7520000 	.word	0xc7520000
 8001f08:	50040000 	.word	0x50040000
 8001f0c:	50040200 	.word	0x50040200
 8001f10:	20000008 	.word	0x20000008
 8001f14:	053e2d63 	.word	0x053e2d63
 8001f18:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a16      	ldr	r2, [pc, #88]	; (8001f7c <HAL_ADC_ConfigChannel+0x6bc>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d120      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d11a      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <HAL_ADC_ConfigChannel+0x6c0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d115      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f44:	4619      	mov	r1, r3
 8001f46:	480f      	ldr	r0, [pc, #60]	; (8001f84 <HAL_ADC_ConfigChannel+0x6c4>)
 8001f48:	f7fe ff89 	bl	8000e5e <LL_ADC_SetCommonPathInternalCh>
 8001f4c:	e00c      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f52:	f043 0220 	orr.w	r2, r3, #32
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001f60:	e002      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f62:	bf00      	nop
 8001f64:	e000      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f66:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f70:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3798      	adds	r7, #152	; 0x98
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	80000001 	.word	0x80000001
 8001f80:	50040000 	.word	0x50040000
 8001f84:	50040300 	.word	0x50040300

08001f88 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f934 	bl	800120c <LL_ADC_REG_IsConversionOngoing>
 8001fa4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f955 	bl	800125a <LL_ADC_INJ_IsConversionOngoing>
 8001fb0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d103      	bne.n	8001fc0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8090 	beq.w	80020e0 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d02a      	beq.n	8002024 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7e5b      	ldrb	r3, [r3, #25]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d126      	bne.n	8002024 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7e1b      	ldrb	r3, [r3, #24]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d122      	bne.n	8002024 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001fe2:	e014      	b.n	800200e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	4a41      	ldr	r2, [pc, #260]	; (80020ec <ADC_ConversionStop+0x164>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d90d      	bls.n	8002008 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff0:	f043 0210 	orr.w	r2, r3, #16
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	f043 0201 	orr.w	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e06c      	b.n	80020e2 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	3301      	adds	r3, #1
 800200c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002018:	2b40      	cmp	r3, #64	; 0x40
 800201a:	d1e3      	bne.n	8001fe4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2240      	movs	r2, #64	; 0x40
 8002022:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d014      	beq.n	8002054 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff f8ec 	bl	800120c <LL_ADC_REG_IsConversionOngoing>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00c      	beq.n	8002054 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff f8a9 	bl	8001196 <LL_ADC_IsDisableOngoing>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d104      	bne.n	8002054 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f8c8 	bl	80011e4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d014      	beq.n	8002084 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff f8fb 	bl	800125a <LL_ADC_INJ_IsConversionOngoing>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff f891 	bl	8001196 <LL_ADC_IsDisableOngoing>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d104      	bne.n	8002084 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff f8d7 	bl	8001232 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d004      	beq.n	8002094 <ADC_ConversionStop+0x10c>
 800208a:	2b03      	cmp	r3, #3
 800208c:	d105      	bne.n	800209a <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800208e:	230c      	movs	r3, #12
 8002090:	617b      	str	r3, [r7, #20]
        break;
 8002092:	e005      	b.n	80020a0 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002094:	2308      	movs	r3, #8
 8002096:	617b      	str	r3, [r7, #20]
        break;
 8002098:	e002      	b.n	80020a0 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800209a:	2304      	movs	r3, #4
 800209c:	617b      	str	r3, [r7, #20]
        break;
 800209e:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80020a0:	f7fe fe9c 	bl	8000ddc <HAL_GetTick>
 80020a4:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80020a6:	e014      	b.n	80020d2 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80020a8:	f7fe fe98 	bl	8000ddc <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d90d      	bls.n	80020d2 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	f043 0210 	orr.w	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	f043 0201 	orr.w	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e007      	b.n	80020e2 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1e3      	bne.n	80020a8 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	a33fffff 	.word	0xa33fffff

080020f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff f837 	bl	8001170 <LL_ADC_IsEnabled>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d146      	bne.n	8002196 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <ADC_Enable+0xb0>)
 8002110:	4013      	ands	r3, r2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00d      	beq.n	8002132 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211a:	f043 0210 	orr.w	r2, r3, #16
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	f043 0201 	orr.w	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e032      	b.n	8002198 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fff2 	bl	8001120 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800213c:	f7fe fe4e 	bl	8000ddc <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002142:	e021      	b.n	8002188 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f811 	bl	8001170 <LL_ADC_IsEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d104      	bne.n	800215e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe ffe1 	bl	8001120 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800215e:	f7fe fe3d 	bl	8000ddc <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d90d      	bls.n	8002188 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	f043 0210 	orr.w	r2, r3, #16
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	f043 0201 	orr.w	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e007      	b.n	8002198 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d1d6      	bne.n	8002144 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	8000003f 	.word	0x8000003f

080021a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe fff0 	bl	8001196 <LL_ADC_IsDisableOngoing>
 80021b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe ffd7 	bl	8001170 <LL_ADC_IsEnabled>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d040      	beq.n	800224a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d13d      	bne.n	800224a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 030d 	and.w	r3, r3, #13
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d10c      	bne.n	80021f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe ffb1 	bl	8001148 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2203      	movs	r2, #3
 80021ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021ee:	f7fe fdf5 	bl	8000ddc <HAL_GetTick>
 80021f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021f4:	e022      	b.n	800223c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fa:	f043 0210 	orr.w	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	f043 0201 	orr.w	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e01c      	b.n	800224c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002212:	f7fe fde3 	bl	8000ddc <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d90d      	bls.n	800223c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002224:	f043 0210 	orr.w	r2, r3, #16
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e007      	b.n	800224c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1e3      	bne.n	8002212 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	6039      	str	r1, [r7, #0]
 80022c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	db0a      	blt.n	80022e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	490c      	ldr	r1, [pc, #48]	; (8002304 <__NVIC_SetPriority+0x4c>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	0112      	lsls	r2, r2, #4
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	440b      	add	r3, r1
 80022dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e0:	e00a      	b.n	80022f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4908      	ldr	r1, [pc, #32]	; (8002308 <__NVIC_SetPriority+0x50>)
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	3b04      	subs	r3, #4
 80022f0:	0112      	lsls	r2, r2, #4
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	440b      	add	r3, r1
 80022f6:	761a      	strb	r2, [r3, #24]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000e100 	.word	0xe000e100
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	; 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f1c3 0307 	rsb	r3, r3, #7
 8002326:	2b04      	cmp	r3, #4
 8002328:	bf28      	it	cs
 800232a:	2304      	movcs	r3, #4
 800232c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3304      	adds	r3, #4
 8002332:	2b06      	cmp	r3, #6
 8002334:	d902      	bls.n	800233c <NVIC_EncodePriority+0x30>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3b03      	subs	r3, #3
 800233a:	e000      	b.n	800233e <NVIC_EncodePriority+0x32>
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	f04f 32ff 	mov.w	r2, #4294967295
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	401a      	ands	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002354:	f04f 31ff 	mov.w	r1, #4294967295
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	43d9      	mvns	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	4313      	orrs	r3, r2
         );
}
 8002366:	4618      	mov	r0, r3
 8002368:	3724      	adds	r7, #36	; 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002384:	d301      	bcc.n	800238a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002386:	2301      	movs	r3, #1
 8002388:	e00f      	b.n	80023aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238a:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <SysTick_Config+0x40>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3b01      	subs	r3, #1
 8002390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002392:	210f      	movs	r1, #15
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	f7ff ff8e 	bl	80022b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <SysTick_Config+0x40>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <SysTick_Config+0x40>)
 80023a4:	2207      	movs	r2, #7
 80023a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	e000e010 	.word	0xe000e010

080023b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff47 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023e0:	f7ff ff5c 	bl	800229c <__NVIC_GetPriorityGrouping>
 80023e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	6978      	ldr	r0, [r7, #20]
 80023ec:	f7ff ff8e 	bl	800230c <NVIC_EncodePriority>
 80023f0:	4602      	mov	r2, r0
 80023f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff5d 	bl	80022b8 <__NVIC_SetPriority>
}
 80023fe:	bf00      	nop
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ffb0 	bl	8002374 <SysTick_Config>
 8002414:	4603      	mov	r3, r0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242e:	e17f      	b.n	8002730 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	2101      	movs	r1, #1
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	4013      	ands	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 8171 	beq.w	800272a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x38>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b12      	cmp	r3, #18
 8002456:	d123      	bne.n	80024a0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	08da      	lsrs	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3208      	adds	r2, #8
 8002460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	220f      	movs	r2, #15
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	08da      	lsrs	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3208      	adds	r2, #8
 800249a:	6939      	ldr	r1, [r7, #16]
 800249c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0203 	and.w	r2, r3, #3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d00b      	beq.n	80024f4 <HAL_GPIO_Init+0xd4>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d007      	beq.n	80024f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024e8:	2b11      	cmp	r3, #17
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b12      	cmp	r3, #18
 80024f2:	d130      	bne.n	8002556 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800252a:	2201      	movs	r2, #1
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	f003 0201 	and.w	r2, r3, #1
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b03      	cmp	r3, #3
 8002560:	d118      	bne.n	8002594 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002568:	2201      	movs	r2, #1
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	08db      	lsrs	r3, r3, #3
 800257e:	f003 0201 	and.w	r2, r3, #1
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80ac 	beq.w	800272a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d2:	4b5e      	ldr	r3, [pc, #376]	; (800274c <HAL_GPIO_Init+0x32c>)
 80025d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d6:	4a5d      	ldr	r2, [pc, #372]	; (800274c <HAL_GPIO_Init+0x32c>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6613      	str	r3, [r2, #96]	; 0x60
 80025de:	4b5b      	ldr	r3, [pc, #364]	; (800274c <HAL_GPIO_Init+0x32c>)
 80025e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025ea:	4a59      	ldr	r2, [pc, #356]	; (8002750 <HAL_GPIO_Init+0x330>)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	3302      	adds	r3, #2
 80025f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	220f      	movs	r2, #15
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002614:	d025      	beq.n	8002662 <HAL_GPIO_Init+0x242>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4e      	ldr	r2, [pc, #312]	; (8002754 <HAL_GPIO_Init+0x334>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01f      	beq.n	800265e <HAL_GPIO_Init+0x23e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4d      	ldr	r2, [pc, #308]	; (8002758 <HAL_GPIO_Init+0x338>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d019      	beq.n	800265a <HAL_GPIO_Init+0x23a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4c      	ldr	r2, [pc, #304]	; (800275c <HAL_GPIO_Init+0x33c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_GPIO_Init+0x236>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4b      	ldr	r2, [pc, #300]	; (8002760 <HAL_GPIO_Init+0x340>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00d      	beq.n	8002652 <HAL_GPIO_Init+0x232>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4a      	ldr	r2, [pc, #296]	; (8002764 <HAL_GPIO_Init+0x344>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d007      	beq.n	800264e <HAL_GPIO_Init+0x22e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a49      	ldr	r2, [pc, #292]	; (8002768 <HAL_GPIO_Init+0x348>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_GPIO_Init+0x22a>
 8002646:	2306      	movs	r3, #6
 8002648:	e00c      	b.n	8002664 <HAL_GPIO_Init+0x244>
 800264a:	2307      	movs	r3, #7
 800264c:	e00a      	b.n	8002664 <HAL_GPIO_Init+0x244>
 800264e:	2305      	movs	r3, #5
 8002650:	e008      	b.n	8002664 <HAL_GPIO_Init+0x244>
 8002652:	2304      	movs	r3, #4
 8002654:	e006      	b.n	8002664 <HAL_GPIO_Init+0x244>
 8002656:	2303      	movs	r3, #3
 8002658:	e004      	b.n	8002664 <HAL_GPIO_Init+0x244>
 800265a:	2302      	movs	r3, #2
 800265c:	e002      	b.n	8002664 <HAL_GPIO_Init+0x244>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_GPIO_Init+0x244>
 8002662:	2300      	movs	r3, #0
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	f002 0203 	and.w	r2, r2, #3
 800266a:	0092      	lsls	r2, r2, #2
 800266c:	4093      	lsls	r3, r2
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002674:	4936      	ldr	r1, [pc, #216]	; (8002750 <HAL_GPIO_Init+0x330>)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002682:	4b3a      	ldr	r3, [pc, #232]	; (800276c <HAL_GPIO_Init+0x34c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026a6:	4a31      	ldr	r2, [pc, #196]	; (800276c <HAL_GPIO_Init+0x34c>)
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80026ac:	4b2f      	ldr	r3, [pc, #188]	; (800276c <HAL_GPIO_Init+0x34c>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026d0:	4a26      	ldr	r2, [pc, #152]	; (800276c <HAL_GPIO_Init+0x34c>)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026d6:	4b25      	ldr	r3, [pc, #148]	; (800276c <HAL_GPIO_Init+0x34c>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	43db      	mvns	r3, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026fa:	4a1c      	ldr	r2, [pc, #112]	; (800276c <HAL_GPIO_Init+0x34c>)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002700:	4b1a      	ldr	r3, [pc, #104]	; (800276c <HAL_GPIO_Init+0x34c>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002724:	4a11      	ldr	r2, [pc, #68]	; (800276c <HAL_GPIO_Init+0x34c>)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	3301      	adds	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	f47f ae78 	bne.w	8002430 <HAL_GPIO_Init+0x10>
  }
}
 8002740:	bf00      	nop
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	40021000 	.word	0x40021000
 8002750:	40010000 	.word	0x40010000
 8002754:	48000400 	.word	0x48000400
 8002758:	48000800 	.word	0x48000800
 800275c:	48000c00 	.word	0x48000c00
 8002760:	48001000 	.word	0x48001000
 8002764:	48001400 	.word	0x48001400
 8002768:	48001800 	.word	0x48001800
 800276c:	40010400 	.word	0x40010400

08002770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
 800277c:	4613      	mov	r3, r2
 800277e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002780:	787b      	ldrb	r3, [r7, #1]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002786:	887a      	ldrh	r2, [r7, #2]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800278c:	e002      	b.n	8002794 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40007000 	.word	0x40007000

080027bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ca:	d130      	bne.n	800282e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027cc:	4b23      	ldr	r3, [pc, #140]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d8:	d038      	beq.n	800284c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027da:	4b20      	ldr	r3, [pc, #128]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027e2:	4a1e      	ldr	r2, [pc, #120]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2232      	movs	r2, #50	; 0x32
 80027f0:	fb02 f303 	mul.w	r3, r2, r3
 80027f4:	4a1b      	ldr	r2, [pc, #108]	; (8002864 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0c9b      	lsrs	r3, r3, #18
 80027fc:	3301      	adds	r3, #1
 80027fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002800:	e002      	b.n	8002808 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3b01      	subs	r3, #1
 8002806:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002814:	d102      	bne.n	800281c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f2      	bne.n	8002802 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002828:	d110      	bne.n	800284c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e00f      	b.n	800284e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283a:	d007      	beq.n	800284c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800283c:	4b07      	ldr	r3, [pc, #28]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002844:	4a05      	ldr	r2, [pc, #20]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800284a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40007000 	.word	0x40007000
 8002860:	20000008 	.word	0x20000008
 8002864:	431bde83 	.word	0x431bde83

08002868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e39d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800287a:	4ba4      	ldr	r3, [pc, #656]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002884:	4ba1      	ldr	r3, [pc, #644]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80e1 	beq.w	8002a5e <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d007      	beq.n	80028b2 <HAL_RCC_OscConfig+0x4a>
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b0c      	cmp	r3, #12
 80028a6:	f040 8088 	bne.w	80029ba <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	f040 8084 	bne.w	80029ba <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028b2:	4b96      	ldr	r3, [pc, #600]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <HAL_RCC_OscConfig+0x62>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e375      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1a      	ldr	r2, [r3, #32]
 80028ce:	4b8f      	ldr	r3, [pc, #572]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d004      	beq.n	80028e4 <HAL_RCC_OscConfig+0x7c>
 80028da:	4b8c      	ldr	r3, [pc, #560]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e2:	e005      	b.n	80028f0 <HAL_RCC_OscConfig+0x88>
 80028e4:	4b89      	ldr	r3, [pc, #548]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 80028e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d223      	bcs.n	800293c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fd09 	bl	8003310 <RCC_SetFlashLatencyFromMSIRange>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e356      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002908:	4b80      	ldr	r3, [pc, #512]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a7f      	ldr	r2, [pc, #508]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 800290e:	f043 0308 	orr.w	r3, r3, #8
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	4b7d      	ldr	r3, [pc, #500]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	497a      	ldr	r1, [pc, #488]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002926:	4b79      	ldr	r3, [pc, #484]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	4975      	ldr	r1, [pc, #468]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002936:	4313      	orrs	r3, r2
 8002938:	604b      	str	r3, [r1, #4]
 800293a:	e022      	b.n	8002982 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800293c:	4b73      	ldr	r3, [pc, #460]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a72      	ldr	r2, [pc, #456]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002942:	f043 0308 	orr.w	r3, r3, #8
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	4b70      	ldr	r3, [pc, #448]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	496d      	ldr	r1, [pc, #436]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800295a:	4b6c      	ldr	r3, [pc, #432]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	4968      	ldr	r1, [pc, #416]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fccc 	bl	8003310 <RCC_SetFlashLatencyFromMSIRange>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e319      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002982:	f000 fc03 	bl	800318c <HAL_RCC_GetSysClockFreq>
 8002986:	4601      	mov	r1, r0
 8002988:	4b60      	ldr	r3, [pc, #384]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	4a5f      	ldr	r2, [pc, #380]	; (8002b10 <HAL_RCC_OscConfig+0x2a8>)
 8002994:	5cd3      	ldrb	r3, [r2, r3]
 8002996:	f003 031f 	and.w	r3, r3, #31
 800299a:	fa21 f303 	lsr.w	r3, r1, r3
 800299e:	4a5d      	ldr	r2, [pc, #372]	; (8002b14 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029a2:	4b5d      	ldr	r3, [pc, #372]	; (8002b18 <HAL_RCC_OscConfig+0x2b0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe f9cc 	bl	8000d44 <HAL_InitTick>
 80029ac:	4603      	mov	r3, r0
 80029ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d052      	beq.n	8002a5c <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	e2fd      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d032      	beq.n	8002a28 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029c2:	4b52      	ldr	r3, [pc, #328]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a51      	ldr	r2, [pc, #324]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029ce:	f7fe fa05 	bl	8000ddc <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029d6:	f7fe fa01 	bl	8000ddc <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e2e6      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029e8:	4b48      	ldr	r3, [pc, #288]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029f4:	4b45      	ldr	r3, [pc, #276]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a44      	ldr	r2, [pc, #272]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 80029fa:	f043 0308 	orr.w	r3, r3, #8
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b42      	ldr	r3, [pc, #264]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	493f      	ldr	r1, [pc, #252]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a12:	4b3e      	ldr	r3, [pc, #248]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	493a      	ldr	r1, [pc, #232]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	604b      	str	r3, [r1, #4]
 8002a26:	e01a      	b.n	8002a5e <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a28:	4b38      	ldr	r3, [pc, #224]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a37      	ldr	r2, [pc, #220]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a34:	f7fe f9d2 	bl	8000ddc <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a3c:	f7fe f9ce 	bl	8000ddc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e2b3      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a4e:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x1d4>
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d074      	beq.n	8002b54 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_OscConfig+0x214>
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d10e      	bne.n	8002a94 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d10b      	bne.n	8002a94 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d064      	beq.n	8002b52 <HAL_RCC_OscConfig+0x2ea>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d160      	bne.n	8002b52 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e290      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d106      	bne.n	8002aac <HAL_RCC_OscConfig+0x244>
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1a      	ldr	r2, [pc, #104]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e01d      	b.n	8002ae8 <HAL_RCC_OscConfig+0x280>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x268>
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a11      	ldr	r2, [pc, #68]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0x280>
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0d      	ldr	r2, [pc, #52]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <HAL_RCC_OscConfig+0x2a4>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01c      	beq.n	8002b2a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe f974 	bl	8000ddc <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af6:	e011      	b.n	8002b1c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe f970 	bl	8000ddc <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d90a      	bls.n	8002b1c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e255      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	08004d50 	.word	0x08004d50
 8002b14:	20000008 	.word	0x20000008
 8002b18:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1c:	4bae      	ldr	r3, [pc, #696]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0e7      	beq.n	8002af8 <HAL_RCC_OscConfig+0x290>
 8002b28:	e014      	b.n	8002b54 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7fe f957 	bl	8000ddc <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b32:	f7fe f953 	bl	8000ddc <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b64      	cmp	r3, #100	; 0x64
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e238      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b44:	4ba4      	ldr	r3, [pc, #656]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f0      	bne.n	8002b32 <HAL_RCC_OscConfig+0x2ca>
 8002b50:	e000      	b.n	8002b54 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d060      	beq.n	8002c22 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d005      	beq.n	8002b72 <HAL_RCC_OscConfig+0x30a>
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b0c      	cmp	r3, #12
 8002b6a:	d119      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d116      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b72:	4b99      	ldr	r3, [pc, #612]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_RCC_OscConfig+0x322>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e215      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8a:	4b93      	ldr	r3, [pc, #588]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	061b      	lsls	r3, r3, #24
 8002b98:	498f      	ldr	r1, [pc, #572]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b9e:	e040      	b.n	8002c22 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d023      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	4b8b      	ldr	r3, [pc, #556]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a8a      	ldr	r2, [pc, #552]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fe f912 	bl	8000ddc <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbc:	f7fe f90e 	bl	8000ddc <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e1f3      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bce:	4b82      	ldr	r3, [pc, #520]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bda:	4b7f      	ldr	r3, [pc, #508]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	061b      	lsls	r3, r3, #24
 8002be8:	497b      	ldr	r1, [pc, #492]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
 8002bee:	e018      	b.n	8002c22 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf0:	4b79      	ldr	r3, [pc, #484]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a78      	ldr	r2, [pc, #480]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002bf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe f8ee 	bl	8000ddc <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c04:	f7fe f8ea 	bl	8000ddc <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e1cf      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c16:	4b70      	ldr	r3, [pc, #448]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d03c      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d01c      	beq.n	8002c70 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c36:	4b68      	ldr	r3, [pc, #416]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3c:	4a66      	ldr	r2, [pc, #408]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c46:	f7fe f8c9 	bl	8000ddc <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4e:	f7fe f8c5 	bl	8000ddc <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e1aa      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c60:	4b5d      	ldr	r3, [pc, #372]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0ef      	beq.n	8002c4e <HAL_RCC_OscConfig+0x3e6>
 8002c6e:	e01b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c70:	4b59      	ldr	r3, [pc, #356]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c76:	4a58      	ldr	r2, [pc, #352]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c80:	f7fe f8ac 	bl	8000ddc <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c88:	f7fe f8a8 	bl	8000ddc <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e18d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c9a:	4b4f      	ldr	r3, [pc, #316]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ef      	bne.n	8002c88 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80a5 	beq.w	8002e00 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cba:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b44      	ldr	r3, [pc, #272]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	4a43      	ldr	r2, [pc, #268]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8002cd2:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce2:	4b3e      	ldr	r3, [pc, #248]	; (8002ddc <HAL_RCC_OscConfig+0x574>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d118      	bne.n	8002d20 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cee:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <HAL_RCC_OscConfig+0x574>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a3a      	ldr	r2, [pc, #232]	; (8002ddc <HAL_RCC_OscConfig+0x574>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe f86f 	bl	8000ddc <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d02:	f7fe f86b 	bl	8000ddc <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e150      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d14:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <HAL_RCC_OscConfig+0x574>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d108      	bne.n	8002d3a <HAL_RCC_OscConfig+0x4d2>
 8002d28:	4b2b      	ldr	r3, [pc, #172]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	4a2a      	ldr	r2, [pc, #168]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d38:	e024      	b.n	8002d84 <HAL_RCC_OscConfig+0x51c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d110      	bne.n	8002d64 <HAL_RCC_OscConfig+0x4fc>
 8002d42:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d48:	4a23      	ldr	r2, [pc, #140]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d52:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d58:	4a1f      	ldr	r2, [pc, #124]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d62:	e00f      	b.n	8002d84 <HAL_RCC_OscConfig+0x51c>
 8002d64:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6a:	4a1b      	ldr	r2, [pc, #108]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d74:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002d7c:	f023 0304 	bic.w	r3, r3, #4
 8002d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d016      	beq.n	8002dba <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fe f826 	bl	8000ddc <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d94:	f7fe f822 	bl	8000ddc <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e105      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_OscConfig+0x570>)
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0ed      	beq.n	8002d94 <HAL_RCC_OscConfig+0x52c>
 8002db8:	e019      	b.n	8002dee <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7fe f80f 	bl	8000ddc <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dc0:	e00e      	b.n	8002de0 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fe f80b 	bl	8000ddc <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d905      	bls.n	8002de0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e0ee      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002de0:	4b77      	ldr	r3, [pc, #476]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e9      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dee:	7ffb      	ldrb	r3, [r7, #31]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df4:	4b72      	ldr	r3, [pc, #456]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df8:	4a71      	ldr	r2, [pc, #452]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80d5 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	2b0c      	cmp	r3, #12
 8002e0e:	f000 808e 	beq.w	8002f2e <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d15b      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	4b69      	ldr	r3, [pc, #420]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a68      	ldr	r2, [pc, #416]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002e20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7fd ffd9 	bl	8000ddc <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7fd ffd5 	bl	8000ddc <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0ba      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e40:	4b5f      	ldr	r3, [pc, #380]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f0      	bne.n	8002e2e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e4c:	4b5c      	ldr	r3, [pc, #368]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	4b5c      	ldr	r3, [pc, #368]	; (8002fc4 <HAL_RCC_OscConfig+0x75c>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e5c:	3a01      	subs	r2, #1
 8002e5e:	0112      	lsls	r2, r2, #4
 8002e60:	4311      	orrs	r1, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e66:	0212      	lsls	r2, r2, #8
 8002e68:	4311      	orrs	r1, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e6e:	0852      	lsrs	r2, r2, #1
 8002e70:	3a01      	subs	r2, #1
 8002e72:	0552      	lsls	r2, r2, #21
 8002e74:	4311      	orrs	r1, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e7a:	0852      	lsrs	r2, r2, #1
 8002e7c:	3a01      	subs	r2, #1
 8002e7e:	0652      	lsls	r2, r2, #25
 8002e80:	4311      	orrs	r1, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e86:	0912      	lsrs	r2, r2, #4
 8002e88:	0452      	lsls	r2, r2, #17
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	494c      	ldr	r1, [pc, #304]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e92:	4b4b      	ldr	r3, [pc, #300]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a4a      	ldr	r2, [pc, #296]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002e98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e9e:	4b48      	ldr	r3, [pc, #288]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	4a47      	ldr	r2, [pc, #284]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002ea4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ea8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eaa:	f7fd ff97 	bl	8000ddc <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb2:	f7fd ff93 	bl	8000ddc <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e078      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec4:	4b3e      	ldr	r3, [pc, #248]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x64a>
 8002ed0:	e070      	b.n	8002fb4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a3a      	ldr	r2, [pc, #232]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002edc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ede:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d105      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002eea:	4b35      	ldr	r3, [pc, #212]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	4a34      	ldr	r2, [pc, #208]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002ef0:	f023 0303 	bic.w	r3, r3, #3
 8002ef4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ef6:	4b32      	ldr	r3, [pc, #200]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	4a31      	ldr	r2, [pc, #196]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002efc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f04:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f06:	f7fd ff69 	bl	8000ddc <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7fd ff65 	bl	8000ddc <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e04a      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f20:	4b27      	ldr	r3, [pc, #156]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f0      	bne.n	8002f0e <HAL_RCC_OscConfig+0x6a6>
 8002f2c:	e042      	b.n	8002fb4 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e03d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002f3a:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <HAL_RCC_OscConfig+0x758>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f003 0203 	and.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d130      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d127      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d11f      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f7a:	2a07      	cmp	r2, #7
 8002f7c:	bf14      	ite	ne
 8002f7e:	2201      	movne	r2, #1
 8002f80:	2200      	moveq	r2, #0
 8002f82:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d113      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	3b01      	subs	r3, #1
 8002f96:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d109      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	085b      	lsrs	r3, r3, #1
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	f99d808c 	.word	0xf99d808c

08002fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0c8      	b.n	800316e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b66      	ldr	r3, [pc, #408]	; (8003178 <HAL_RCC_ClockConfig+0x1b0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d910      	bls.n	800300c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b63      	ldr	r3, [pc, #396]	; (8003178 <HAL_RCC_ClockConfig+0x1b0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 0207 	bic.w	r2, r3, #7
 8002ff2:	4961      	ldr	r1, [pc, #388]	; (8003178 <HAL_RCC_ClockConfig+0x1b0>)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b5f      	ldr	r3, [pc, #380]	; (8003178 <HAL_RCC_ClockConfig+0x1b0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0b0      	b.n	800316e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d04c      	beq.n	80030b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d107      	bne.n	8003030 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003020:	4b56      	ldr	r3, [pc, #344]	; (800317c <HAL_RCC_ClockConfig+0x1b4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d121      	bne.n	8003070 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e09e      	b.n	800316e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d107      	bne.n	8003048 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003038:	4b50      	ldr	r3, [pc, #320]	; (800317c <HAL_RCC_ClockConfig+0x1b4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d115      	bne.n	8003070 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e092      	b.n	800316e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d107      	bne.n	8003060 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003050:	4b4a      	ldr	r3, [pc, #296]	; (800317c <HAL_RCC_ClockConfig+0x1b4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d109      	bne.n	8003070 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e086      	b.n	800316e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003060:	4b46      	ldr	r3, [pc, #280]	; (800317c <HAL_RCC_ClockConfig+0x1b4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e07e      	b.n	800316e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003070:	4b42      	ldr	r3, [pc, #264]	; (800317c <HAL_RCC_ClockConfig+0x1b4>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f023 0203 	bic.w	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	493f      	ldr	r1, [pc, #252]	; (800317c <HAL_RCC_ClockConfig+0x1b4>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003082:	f7fd feab 	bl	8000ddc <HAL_GetTick>
 8003086:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003088:	e00a      	b.n	80030a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308a:	f7fd fea7 	bl	8000ddc <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	; 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e066      	b.n	800316e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a0:	4b36      	ldr	r3, [pc, #216]	; (800317c <HAL_RCC_ClockConfig+0x1b4>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 020c 	and.w	r2, r3, #12
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d1eb      	bne.n	800308a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030be:	4b2f      	ldr	r3, [pc, #188]	; (800317c <HAL_RCC_ClockConfig+0x1b4>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	492c      	ldr	r1, [pc, #176]	; (800317c <HAL_RCC_ClockConfig+0x1b4>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d0:	4b29      	ldr	r3, [pc, #164]	; (8003178 <HAL_RCC_ClockConfig+0x1b0>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d210      	bcs.n	8003100 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	4b26      	ldr	r3, [pc, #152]	; (8003178 <HAL_RCC_ClockConfig+0x1b0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 0207 	bic.w	r2, r3, #7
 80030e6:	4924      	ldr	r1, [pc, #144]	; (8003178 <HAL_RCC_ClockConfig+0x1b0>)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b22      	ldr	r3, [pc, #136]	; (8003178 <HAL_RCC_ClockConfig+0x1b0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e036      	b.n	800316e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800310c:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_RCC_ClockConfig+0x1b4>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4918      	ldr	r1, [pc, #96]	; (800317c <HAL_RCC_ClockConfig+0x1b4>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800312a:	4b14      	ldr	r3, [pc, #80]	; (800317c <HAL_RCC_ClockConfig+0x1b4>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4910      	ldr	r1, [pc, #64]	; (800317c <HAL_RCC_ClockConfig+0x1b4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800313e:	f000 f825 	bl	800318c <HAL_RCC_GetSysClockFreq>
 8003142:	4601      	mov	r1, r0
 8003144:	4b0d      	ldr	r3, [pc, #52]	; (800317c <HAL_RCC_ClockConfig+0x1b4>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	5cd3      	ldrb	r3, [r2, r3]
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	fa21 f303 	lsr.w	r3, r1, r3
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800315e:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd fdee 	bl	8000d44 <HAL_InitTick>
 8003168:	4603      	mov	r3, r0
 800316a:	72fb      	strb	r3, [r7, #11]

  return status;
 800316c:	7afb      	ldrb	r3, [r7, #11]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40022000 	.word	0x40022000
 800317c:	40021000 	.word	0x40021000
 8003180:	08004d50 	.word	0x08004d50
 8003184:	20000008 	.word	0x20000008
 8003188:	20000000 	.word	0x20000000

0800318c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800318c:	b480      	push	{r7}
 800318e:	b089      	sub	sp, #36	; 0x24
 8003190:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
 8003196:	2300      	movs	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800319a:	4b3d      	ldr	r3, [pc, #244]	; (8003290 <HAL_RCC_GetSysClockFreq+0x104>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a4:	4b3a      	ldr	r3, [pc, #232]	; (8003290 <HAL_RCC_GetSysClockFreq+0x104>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x34>
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b0c      	cmp	r3, #12
 80031b8:	d121      	bne.n	80031fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d11e      	bne.n	80031fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031c0:	4b33      	ldr	r3, [pc, #204]	; (8003290 <HAL_RCC_GetSysClockFreq+0x104>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d107      	bne.n	80031dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031cc:	4b30      	ldr	r3, [pc, #192]	; (8003290 <HAL_RCC_GetSysClockFreq+0x104>)
 80031ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d2:	0a1b      	lsrs	r3, r3, #8
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	e005      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031dc:	4b2c      	ldr	r3, [pc, #176]	; (8003290 <HAL_RCC_GetSysClockFreq+0x104>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031e8:	4a2a      	ldr	r2, [pc, #168]	; (8003294 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10d      	bne.n	8003214 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031fc:	e00a      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d102      	bne.n	800320a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003204:	4b24      	ldr	r3, [pc, #144]	; (8003298 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003206:	61bb      	str	r3, [r7, #24]
 8003208:	e004      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b08      	cmp	r3, #8
 800320e:	d101      	bne.n	8003214 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003210:	4b22      	ldr	r3, [pc, #136]	; (800329c <HAL_RCC_GetSysClockFreq+0x110>)
 8003212:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0c      	cmp	r3, #12
 8003218:	d133      	bne.n	8003282 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800321a:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_RCC_GetSysClockFreq+0x104>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d002      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0xa4>
 800322a:	2b03      	cmp	r3, #3
 800322c:	d003      	beq.n	8003236 <HAL_RCC_GetSysClockFreq+0xaa>
 800322e:	e005      	b.n	800323c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003232:	617b      	str	r3, [r7, #20]
      break;
 8003234:	e005      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003236:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_RCC_GetSysClockFreq+0x110>)
 8003238:	617b      	str	r3, [r7, #20]
      break;
 800323a:	e002      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	617b      	str	r3, [r7, #20]
      break;
 8003240:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <HAL_RCC_GetSysClockFreq+0x104>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	3301      	adds	r3, #1
 800324e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_RCC_GetSysClockFreq+0x104>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	fb02 f203 	mul.w	r2, r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003268:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HAL_RCC_GetSysClockFreq+0x104>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	0e5b      	lsrs	r3, r3, #25
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	3301      	adds	r3, #1
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003282:	69bb      	ldr	r3, [r7, #24]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3724      	adds	r7, #36	; 0x24
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40021000 	.word	0x40021000
 8003294:	08004d68 	.word	0x08004d68
 8003298:	00f42400 	.word	0x00f42400
 800329c:	007a1200 	.word	0x007a1200

080032a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032a6:	681b      	ldr	r3, [r3, #0]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000008 	.word	0x20000008

080032b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032bc:	f7ff fff0 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032c0:	4601      	mov	r1, r0
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	0a1b      	lsrs	r3, r3, #8
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032ce:	5cd3      	ldrb	r3, [r2, r3]
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	08004d60 	.word	0x08004d60

080032e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032e8:	f7ff ffda 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032ec:	4601      	mov	r1, r0
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	0adb      	lsrs	r3, r3, #11
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4a04      	ldr	r2, [pc, #16]	; (800330c <HAL_RCC_GetPCLK2Freq+0x28>)
 80032fa:	5cd3      	ldrb	r3, [r2, r3]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003304:	4618      	mov	r0, r3
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40021000 	.word	0x40021000
 800330c:	08004d60 	.word	0x08004d60

08003310 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003318:	2300      	movs	r3, #0
 800331a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800331c:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800331e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003328:	f7ff fa3a 	bl	80027a0 <HAL_PWREx_GetVoltageRange>
 800332c:	6178      	str	r0, [r7, #20]
 800332e:	e014      	b.n	800335a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003334:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333a:	6593      	str	r3, [r2, #88]	; 0x58
 800333c:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003348:	f7ff fa2a 	bl	80027a0 <HAL_PWREx_GetVoltageRange>
 800334c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800334e:	4b1e      	ldr	r3, [pc, #120]	; (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003352:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003358:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003360:	d10b      	bne.n	800337a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b80      	cmp	r3, #128	; 0x80
 8003366:	d919      	bls.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2ba0      	cmp	r3, #160	; 0xa0
 800336c:	d902      	bls.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800336e:	2302      	movs	r3, #2
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	e013      	b.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003374:	2301      	movs	r3, #1
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	e010      	b.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b80      	cmp	r3, #128	; 0x80
 800337e:	d902      	bls.n	8003386 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003380:	2303      	movs	r3, #3
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	e00a      	b.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b80      	cmp	r3, #128	; 0x80
 800338a:	d102      	bne.n	8003392 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800338c:	2302      	movs	r3, #2
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	e004      	b.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b70      	cmp	r3, #112	; 0x70
 8003396:	d101      	bne.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003398:	2301      	movs	r3, #1
 800339a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 0207 	bic.w	r2, r3, #7
 80033a4:	4909      	ldr	r1, [pc, #36]	; (80033cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033ac:	4b07      	ldr	r3, [pc, #28]	; (80033cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d001      	beq.n	80033be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40022000 	.word	0x40022000

080033d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033d8:	2300      	movs	r3, #0
 80033da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033dc:	2300      	movs	r3, #0
 80033de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d03f      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f4:	d01c      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80033f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033fa:	d802      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00e      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003400:	e01f      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003402:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003406:	d003      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003408:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800340c:	d01c      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800340e:	e018      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003410:	4b85      	ldr	r3, [pc, #532]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4a84      	ldr	r2, [pc, #528]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800341c:	e015      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3304      	adds	r3, #4
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fab9 	bl	800399c <RCCEx_PLLSAI1_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800342e:	e00c      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3320      	adds	r3, #32
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fba0 	bl	8003b7c <RCCEx_PLLSAI2_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003440:	e003      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	74fb      	strb	r3, [r7, #19]
      break;
 8003446:	e000      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800344a:	7cfb      	ldrb	r3, [r7, #19]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003450:	4b75      	ldr	r3, [pc, #468]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800345e:	4972      	ldr	r1, [pc, #456]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003466:	e001      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d03f      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800347c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003480:	d01c      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003482:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003486:	d802      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00e      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0xda>
 800348c:	e01f      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800348e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003492:	d003      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003494:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003498:	d01c      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800349a:	e018      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800349c:	4b62      	ldr	r3, [pc, #392]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4a61      	ldr	r2, [pc, #388]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034a8:	e015      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fa73 	bl	800399c <RCCEx_PLLSAI1_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034ba:	e00c      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3320      	adds	r3, #32
 80034c0:	2100      	movs	r1, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fb5a 	bl	8003b7c <RCCEx_PLLSAI2_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034cc:	e003      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	74fb      	strb	r3, [r7, #19]
      break;
 80034d2:	e000      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80034d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d6:	7cfb      	ldrb	r3, [r7, #19]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10b      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034dc:	4b52      	ldr	r3, [pc, #328]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ea:	494f      	ldr	r1, [pc, #316]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034f2:	e001      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f4:	7cfb      	ldrb	r3, [r7, #19]
 80034f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80a0 	beq.w	8003646 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003506:	2300      	movs	r3, #0
 8003508:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800350a:	4b47      	ldr	r3, [pc, #284]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800350c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800351a:	2300      	movs	r3, #0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00d      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003520:	4b41      	ldr	r3, [pc, #260]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	4a40      	ldr	r2, [pc, #256]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352a:	6593      	str	r3, [r2, #88]	; 0x58
 800352c:	4b3e      	ldr	r3, [pc, #248]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800352e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003538:	2301      	movs	r3, #1
 800353a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800353c:	4b3b      	ldr	r3, [pc, #236]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a3a      	ldr	r2, [pc, #232]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003546:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003548:	f7fd fc48 	bl	8000ddc <HAL_GetTick>
 800354c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800354e:	e009      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003550:	f7fd fc44 	bl	8000ddc <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d902      	bls.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	74fb      	strb	r3, [r7, #19]
        break;
 8003562:	e005      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003564:	4b31      	ldr	r3, [pc, #196]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0ef      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003570:	7cfb      	ldrb	r3, [r7, #19]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d15c      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003576:	4b2c      	ldr	r3, [pc, #176]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003580:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01f      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	429a      	cmp	r2, r3
 8003592:	d019      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003594:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035a0:	4b21      	ldr	r3, [pc, #132]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a6:	4a20      	ldr	r2, [pc, #128]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035b0:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b6:	4a1c      	ldr	r2, [pc, #112]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035c0:	4a19      	ldr	r2, [pc, #100]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d016      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d2:	f7fd fc03 	bl	8000ddc <HAL_GetTick>
 80035d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d8:	e00b      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035da:	f7fd fbff 	bl	8000ddc <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d902      	bls.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	74fb      	strb	r3, [r7, #19]
            break;
 80035f0:	e006      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f2:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0ec      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10c      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003616:	4904      	ldr	r1, [pc, #16]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800361e:	e009      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003620:	7cfb      	ldrb	r3, [r7, #19]
 8003622:	74bb      	strb	r3, [r7, #18]
 8003624:	e006      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003626:	bf00      	nop
 8003628:	40021000 	.word	0x40021000
 800362c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003634:	7c7b      	ldrb	r3, [r7, #17]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d105      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363a:	4b9e      	ldr	r3, [pc, #632]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363e:	4a9d      	ldr	r2, [pc, #628]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003644:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003652:	4b98      	ldr	r3, [pc, #608]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003658:	f023 0203 	bic.w	r2, r3, #3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	4994      	ldr	r1, [pc, #592]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003674:	4b8f      	ldr	r3, [pc, #572]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367a:	f023 020c 	bic.w	r2, r3, #12
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003682:	498c      	ldr	r1, [pc, #560]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003696:	4b87      	ldr	r3, [pc, #540]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	4983      	ldr	r1, [pc, #524]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036b8:	4b7e      	ldr	r3, [pc, #504]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	497b      	ldr	r1, [pc, #492]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036da:	4b76      	ldr	r3, [pc, #472]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e8:	4972      	ldr	r1, [pc, #456]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036fc:	4b6d      	ldr	r3, [pc, #436]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003702:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370a:	496a      	ldr	r1, [pc, #424]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800371e:	4b65      	ldr	r3, [pc, #404]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003724:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372c:	4961      	ldr	r1, [pc, #388]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003740:	4b5c      	ldr	r3, [pc, #368]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374e:	4959      	ldr	r1, [pc, #356]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003762:	4b54      	ldr	r3, [pc, #336]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003768:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003770:	4950      	ldr	r1, [pc, #320]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003784:	4b4b      	ldr	r3, [pc, #300]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	4948      	ldr	r1, [pc, #288]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037a6:	4b43      	ldr	r3, [pc, #268]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	493f      	ldr	r1, [pc, #252]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d028      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037c8:	4b3a      	ldr	r3, [pc, #232]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d6:	4937      	ldr	r1, [pc, #220]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037e6:	d106      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e8:	4b32      	ldr	r3, [pc, #200]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a31      	ldr	r2, [pc, #196]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f2:	60d3      	str	r3, [r2, #12]
 80037f4:	e011      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037fe:	d10c      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	2101      	movs	r1, #1
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f8c8 	bl	800399c <RCCEx_PLLSAI1_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003816:	7cfb      	ldrb	r3, [r7, #19]
 8003818:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d028      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003826:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	491f      	ldr	r1, [pc, #124]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003844:	d106      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003846:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800384c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003850:	60d3      	str	r3, [r2, #12]
 8003852:	e011      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800385c:	d10c      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3304      	adds	r3, #4
 8003862:	2101      	movs	r1, #1
 8003864:	4618      	mov	r0, r3
 8003866:	f000 f899 	bl	800399c <RCCEx_PLLSAI1_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800386e:	7cfb      	ldrb	r3, [r7, #19]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d02b      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003892:	4908      	ldr	r1, [pc, #32]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a2:	d109      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4a02      	ldr	r2, [pc, #8]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ae:	60d3      	str	r3, [r2, #12]
 80038b0:	e014      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c0:	d10c      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2101      	movs	r1, #1
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f867 	bl	800399c <RCCEx_PLLSAI1_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d2:	7cfb      	ldrb	r3, [r7, #19]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02f      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038e8:	4b2b      	ldr	r3, [pc, #172]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038f6:	4928      	ldr	r1, [pc, #160]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003906:	d10d      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	2102      	movs	r1, #2
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f844 	bl	800399c <RCCEx_PLLSAI1_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003918:	7cfb      	ldrb	r3, [r7, #19]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d014      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	74bb      	strb	r3, [r7, #18]
 8003922:	e011      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800392c:	d10c      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3320      	adds	r3, #32
 8003932:	2102      	movs	r1, #2
 8003934:	4618      	mov	r0, r3
 8003936:	f000 f921 	bl	8003b7c <RCCEx_PLLSAI2_Config>
 800393a:	4603      	mov	r3, r0
 800393c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800393e:	7cfb      	ldrb	r3, [r7, #19]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003954:	4b10      	ldr	r3, [pc, #64]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003962:	490d      	ldr	r1, [pc, #52]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003976:	4b08      	ldr	r3, [pc, #32]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003986:	4904      	ldr	r1, [pc, #16]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800398e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40021000 	.word	0x40021000

0800399c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039aa:	4b73      	ldr	r3, [pc, #460]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d018      	beq.n	80039e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039b6:	4b70      	ldr	r3, [pc, #448]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 0203 	and.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d10d      	bne.n	80039e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
       ||
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039ce:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	091b      	lsrs	r3, r3, #4
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
       ||
 80039de:	429a      	cmp	r2, r3
 80039e0:	d044      	beq.n	8003a6c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	73fb      	strb	r3, [r7, #15]
 80039e6:	e041      	b.n	8003a6c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d00c      	beq.n	8003a0a <RCCEx_PLLSAI1_Config+0x6e>
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d013      	beq.n	8003a1c <RCCEx_PLLSAI1_Config+0x80>
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d120      	bne.n	8003a3a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039f8:	4b5f      	ldr	r3, [pc, #380]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d11d      	bne.n	8003a40 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a08:	e01a      	b.n	8003a40 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a0a:	4b5b      	ldr	r3, [pc, #364]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d116      	bne.n	8003a44 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1a:	e013      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a1c:	4b56      	ldr	r3, [pc, #344]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10f      	bne.n	8003a48 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a28:	4b53      	ldr	r3, [pc, #332]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a38:	e006      	b.n	8003a48 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a3e:	e004      	b.n	8003a4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003a40:	bf00      	nop
 8003a42:	e002      	b.n	8003a4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003a44:	bf00      	nop
 8003a46:	e000      	b.n	8003a4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003a48:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10d      	bne.n	8003a6c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a50:	4b49      	ldr	r3, [pc, #292]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6819      	ldr	r1, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	430b      	orrs	r3, r1
 8003a66:	4944      	ldr	r1, [pc, #272]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d17d      	bne.n	8003b6e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a72:	4b41      	ldr	r3, [pc, #260]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a40      	ldr	r2, [pc, #256]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7e:	f7fd f9ad 	bl	8000ddc <HAL_GetTick>
 8003a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a84:	e009      	b.n	8003a9a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a86:	f7fd f9a9 	bl	8000ddc <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d902      	bls.n	8003a9a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	73fb      	strb	r3, [r7, #15]
        break;
 8003a98:	e005      	b.n	8003aa6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a9a:	4b37      	ldr	r3, [pc, #220]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1ef      	bne.n	8003a86 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d160      	bne.n	8003b6e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d111      	bne.n	8003ad6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ab2:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6892      	ldr	r2, [r2, #8]
 8003ac2:	0211      	lsls	r1, r2, #8
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	68d2      	ldr	r2, [r2, #12]
 8003ac8:	0912      	lsrs	r2, r2, #4
 8003aca:	0452      	lsls	r2, r2, #17
 8003acc:	430a      	orrs	r2, r1
 8003ace:	492a      	ldr	r1, [pc, #168]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	610b      	str	r3, [r1, #16]
 8003ad4:	e027      	b.n	8003b26 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d112      	bne.n	8003b02 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003adc:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ae4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6892      	ldr	r2, [r2, #8]
 8003aec:	0211      	lsls	r1, r2, #8
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6912      	ldr	r2, [r2, #16]
 8003af2:	0852      	lsrs	r2, r2, #1
 8003af4:	3a01      	subs	r2, #1
 8003af6:	0552      	lsls	r2, r2, #21
 8003af8:	430a      	orrs	r2, r1
 8003afa:	491f      	ldr	r1, [pc, #124]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	610b      	str	r3, [r1, #16]
 8003b00:	e011      	b.n	8003b26 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b02:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6892      	ldr	r2, [r2, #8]
 8003b12:	0211      	lsls	r1, r2, #8
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6952      	ldr	r2, [r2, #20]
 8003b18:	0852      	lsrs	r2, r2, #1
 8003b1a:	3a01      	subs	r2, #1
 8003b1c:	0652      	lsls	r2, r2, #25
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	4915      	ldr	r1, [pc, #84]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b26:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b32:	f7fd f953 	bl	8000ddc <HAL_GetTick>
 8003b36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b38:	e009      	b.n	8003b4e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b3a:	f7fd f94f 	bl	8000ddc <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d902      	bls.n	8003b4e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	73fb      	strb	r3, [r7, #15]
          break;
 8003b4c:	e005      	b.n	8003b5a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b4e:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0ef      	beq.n	8003b3a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d106      	bne.n	8003b6e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	4903      	ldr	r1, [pc, #12]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000

08003b7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b8a:	4b68      	ldr	r3, [pc, #416]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d018      	beq.n	8003bc8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b96:	4b65      	ldr	r3, [pc, #404]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f003 0203 	and.w	r2, r3, #3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d10d      	bne.n	8003bc2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
       ||
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003bae:	4b5f      	ldr	r3, [pc, #380]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
       ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d044      	beq.n	8003c4c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
 8003bc6:	e041      	b.n	8003c4c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d00c      	beq.n	8003bea <RCCEx_PLLSAI2_Config+0x6e>
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d013      	beq.n	8003bfc <RCCEx_PLLSAI2_Config+0x80>
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d120      	bne.n	8003c1a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bd8:	4b54      	ldr	r3, [pc, #336]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d11d      	bne.n	8003c20 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be8:	e01a      	b.n	8003c20 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bea:	4b50      	ldr	r3, [pc, #320]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d116      	bne.n	8003c24 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bfa:	e013      	b.n	8003c24 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bfc:	4b4b      	ldr	r3, [pc, #300]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10f      	bne.n	8003c28 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c08:	4b48      	ldr	r3, [pc, #288]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d109      	bne.n	8003c28 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c18:	e006      	b.n	8003c28 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c1e:	e004      	b.n	8003c2a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003c20:	bf00      	nop
 8003c22:	e002      	b.n	8003c2a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003c24:	bf00      	nop
 8003c26:	e000      	b.n	8003c2a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003c28:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10d      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c30:	4b3e      	ldr	r3, [pc, #248]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6819      	ldr	r1, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	430b      	orrs	r3, r1
 8003c46:	4939      	ldr	r1, [pc, #228]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d167      	bne.n	8003d22 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c52:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a35      	ldr	r2, [pc, #212]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c5e:	f7fd f8bd 	bl	8000ddc <HAL_GetTick>
 8003c62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c64:	e009      	b.n	8003c7a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c66:	f7fd f8b9 	bl	8000ddc <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d902      	bls.n	8003c7a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	73fb      	strb	r3, [r7, #15]
        break;
 8003c78:	e005      	b.n	8003c86 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c7a:	4b2c      	ldr	r3, [pc, #176]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1ef      	bne.n	8003c66 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d14a      	bne.n	8003d22 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d111      	bne.n	8003cb6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c92:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6892      	ldr	r2, [r2, #8]
 8003ca2:	0211      	lsls	r1, r2, #8
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68d2      	ldr	r2, [r2, #12]
 8003ca8:	0912      	lsrs	r2, r2, #4
 8003caa:	0452      	lsls	r2, r2, #17
 8003cac:	430a      	orrs	r2, r1
 8003cae:	491f      	ldr	r1, [pc, #124]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	614b      	str	r3, [r1, #20]
 8003cb4:	e011      	b.n	8003cda <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6892      	ldr	r2, [r2, #8]
 8003cc6:	0211      	lsls	r1, r2, #8
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6912      	ldr	r2, [r2, #16]
 8003ccc:	0852      	lsrs	r2, r2, #1
 8003cce:	3a01      	subs	r2, #1
 8003cd0:	0652      	lsls	r2, r2, #25
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	4915      	ldr	r1, [pc, #84]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cda:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a13      	ldr	r2, [pc, #76]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce6:	f7fd f879 	bl	8000ddc <HAL_GetTick>
 8003cea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cec:	e009      	b.n	8003d02 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cee:	f7fd f875 	bl	8000ddc <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d902      	bls.n	8003d02 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	73fb      	strb	r3, [r7, #15]
          break;
 8003d00:	e005      	b.n	8003d0e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0ef      	beq.n	8003cee <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d16:	695a      	ldr	r2, [r3, #20]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	4903      	ldr	r1, [pc, #12]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40021000 	.word	0x40021000

08003d30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e040      	b.n	8003dc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fef4 	bl	8004b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2224      	movs	r2, #36	; 0x24
 8003d5c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f82c 	bl	8003dcc <UART_SetConfig>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e022      	b.n	8003dc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fb68 	bl	800445c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003daa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fbef 	bl	80045a0 <UART_CheckIdleState>
 8003dc2:	4603      	mov	r3, r0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dcc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003dd0:	b088      	sub	sp, #32
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4bac      	ldr	r3, [pc, #688]	; (80040b4 <UART_SetConfig+0x2e8>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	69f9      	ldr	r1, [r7, #28]
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4aa2      	ldr	r2, [pc, #648]	; (80040b8 <UART_SetConfig+0x2ec>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d004      	beq.n	8003e3e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a99      	ldr	r2, [pc, #612]	; (80040bc <UART_SetConfig+0x2f0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d121      	bne.n	8003ea0 <UART_SetConfig+0xd4>
 8003e5c:	4b98      	ldr	r3, [pc, #608]	; (80040c0 <UART_SetConfig+0x2f4>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d816      	bhi.n	8003e98 <UART_SetConfig+0xcc>
 8003e6a:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <UART_SetConfig+0xa4>)
 8003e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e70:	08003e81 	.word	0x08003e81
 8003e74:	08003e8d 	.word	0x08003e8d
 8003e78:	08003e87 	.word	0x08003e87
 8003e7c:	08003e93 	.word	0x08003e93
 8003e80:	2301      	movs	r3, #1
 8003e82:	76fb      	strb	r3, [r7, #27]
 8003e84:	e0e8      	b.n	8004058 <UART_SetConfig+0x28c>
 8003e86:	2302      	movs	r3, #2
 8003e88:	76fb      	strb	r3, [r7, #27]
 8003e8a:	e0e5      	b.n	8004058 <UART_SetConfig+0x28c>
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	76fb      	strb	r3, [r7, #27]
 8003e90:	e0e2      	b.n	8004058 <UART_SetConfig+0x28c>
 8003e92:	2308      	movs	r3, #8
 8003e94:	76fb      	strb	r3, [r7, #27]
 8003e96:	e0df      	b.n	8004058 <UART_SetConfig+0x28c>
 8003e98:	2310      	movs	r3, #16
 8003e9a:	76fb      	strb	r3, [r7, #27]
 8003e9c:	bf00      	nop
 8003e9e:	e0db      	b.n	8004058 <UART_SetConfig+0x28c>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a87      	ldr	r2, [pc, #540]	; (80040c4 <UART_SetConfig+0x2f8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d134      	bne.n	8003f14 <UART_SetConfig+0x148>
 8003eaa:	4b85      	ldr	r3, [pc, #532]	; (80040c0 <UART_SetConfig+0x2f4>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	f003 030c 	and.w	r3, r3, #12
 8003eb4:	2b0c      	cmp	r3, #12
 8003eb6:	d829      	bhi.n	8003f0c <UART_SetConfig+0x140>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <UART_SetConfig+0xf4>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ef5 	.word	0x08003ef5
 8003ec4:	08003f0d 	.word	0x08003f0d
 8003ec8:	08003f0d 	.word	0x08003f0d
 8003ecc:	08003f0d 	.word	0x08003f0d
 8003ed0:	08003f01 	.word	0x08003f01
 8003ed4:	08003f0d 	.word	0x08003f0d
 8003ed8:	08003f0d 	.word	0x08003f0d
 8003edc:	08003f0d 	.word	0x08003f0d
 8003ee0:	08003efb 	.word	0x08003efb
 8003ee4:	08003f0d 	.word	0x08003f0d
 8003ee8:	08003f0d 	.word	0x08003f0d
 8003eec:	08003f0d 	.word	0x08003f0d
 8003ef0:	08003f07 	.word	0x08003f07
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	76fb      	strb	r3, [r7, #27]
 8003ef8:	e0ae      	b.n	8004058 <UART_SetConfig+0x28c>
 8003efa:	2302      	movs	r3, #2
 8003efc:	76fb      	strb	r3, [r7, #27]
 8003efe:	e0ab      	b.n	8004058 <UART_SetConfig+0x28c>
 8003f00:	2304      	movs	r3, #4
 8003f02:	76fb      	strb	r3, [r7, #27]
 8003f04:	e0a8      	b.n	8004058 <UART_SetConfig+0x28c>
 8003f06:	2308      	movs	r3, #8
 8003f08:	76fb      	strb	r3, [r7, #27]
 8003f0a:	e0a5      	b.n	8004058 <UART_SetConfig+0x28c>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	76fb      	strb	r3, [r7, #27]
 8003f10:	bf00      	nop
 8003f12:	e0a1      	b.n	8004058 <UART_SetConfig+0x28c>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a6b      	ldr	r2, [pc, #428]	; (80040c8 <UART_SetConfig+0x2fc>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d120      	bne.n	8003f60 <UART_SetConfig+0x194>
 8003f1e:	4b68      	ldr	r3, [pc, #416]	; (80040c0 <UART_SetConfig+0x2f4>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d00f      	beq.n	8003f4c <UART_SetConfig+0x180>
 8003f2c:	2b10      	cmp	r3, #16
 8003f2e:	d802      	bhi.n	8003f36 <UART_SetConfig+0x16a>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <UART_SetConfig+0x174>
 8003f34:	e010      	b.n	8003f58 <UART_SetConfig+0x18c>
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d005      	beq.n	8003f46 <UART_SetConfig+0x17a>
 8003f3a:	2b30      	cmp	r3, #48	; 0x30
 8003f3c:	d009      	beq.n	8003f52 <UART_SetConfig+0x186>
 8003f3e:	e00b      	b.n	8003f58 <UART_SetConfig+0x18c>
 8003f40:	2300      	movs	r3, #0
 8003f42:	76fb      	strb	r3, [r7, #27]
 8003f44:	e088      	b.n	8004058 <UART_SetConfig+0x28c>
 8003f46:	2302      	movs	r3, #2
 8003f48:	76fb      	strb	r3, [r7, #27]
 8003f4a:	e085      	b.n	8004058 <UART_SetConfig+0x28c>
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	76fb      	strb	r3, [r7, #27]
 8003f50:	e082      	b.n	8004058 <UART_SetConfig+0x28c>
 8003f52:	2308      	movs	r3, #8
 8003f54:	76fb      	strb	r3, [r7, #27]
 8003f56:	e07f      	b.n	8004058 <UART_SetConfig+0x28c>
 8003f58:	2310      	movs	r3, #16
 8003f5a:	76fb      	strb	r3, [r7, #27]
 8003f5c:	bf00      	nop
 8003f5e:	e07b      	b.n	8004058 <UART_SetConfig+0x28c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a59      	ldr	r2, [pc, #356]	; (80040cc <UART_SetConfig+0x300>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d120      	bne.n	8003fac <UART_SetConfig+0x1e0>
 8003f6a:	4b55      	ldr	r3, [pc, #340]	; (80040c0 <UART_SetConfig+0x2f4>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f74:	2b40      	cmp	r3, #64	; 0x40
 8003f76:	d00f      	beq.n	8003f98 <UART_SetConfig+0x1cc>
 8003f78:	2b40      	cmp	r3, #64	; 0x40
 8003f7a:	d802      	bhi.n	8003f82 <UART_SetConfig+0x1b6>
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <UART_SetConfig+0x1c0>
 8003f80:	e010      	b.n	8003fa4 <UART_SetConfig+0x1d8>
 8003f82:	2b80      	cmp	r3, #128	; 0x80
 8003f84:	d005      	beq.n	8003f92 <UART_SetConfig+0x1c6>
 8003f86:	2bc0      	cmp	r3, #192	; 0xc0
 8003f88:	d009      	beq.n	8003f9e <UART_SetConfig+0x1d2>
 8003f8a:	e00b      	b.n	8003fa4 <UART_SetConfig+0x1d8>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	76fb      	strb	r3, [r7, #27]
 8003f90:	e062      	b.n	8004058 <UART_SetConfig+0x28c>
 8003f92:	2302      	movs	r3, #2
 8003f94:	76fb      	strb	r3, [r7, #27]
 8003f96:	e05f      	b.n	8004058 <UART_SetConfig+0x28c>
 8003f98:	2304      	movs	r3, #4
 8003f9a:	76fb      	strb	r3, [r7, #27]
 8003f9c:	e05c      	b.n	8004058 <UART_SetConfig+0x28c>
 8003f9e:	2308      	movs	r3, #8
 8003fa0:	76fb      	strb	r3, [r7, #27]
 8003fa2:	e059      	b.n	8004058 <UART_SetConfig+0x28c>
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	76fb      	strb	r3, [r7, #27]
 8003fa8:	bf00      	nop
 8003faa:	e055      	b.n	8004058 <UART_SetConfig+0x28c>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a47      	ldr	r2, [pc, #284]	; (80040d0 <UART_SetConfig+0x304>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d124      	bne.n	8004000 <UART_SetConfig+0x234>
 8003fb6:	4b42      	ldr	r3, [pc, #264]	; (80040c0 <UART_SetConfig+0x2f4>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc4:	d012      	beq.n	8003fec <UART_SetConfig+0x220>
 8003fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fca:	d802      	bhi.n	8003fd2 <UART_SetConfig+0x206>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d007      	beq.n	8003fe0 <UART_SetConfig+0x214>
 8003fd0:	e012      	b.n	8003ff8 <UART_SetConfig+0x22c>
 8003fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd6:	d006      	beq.n	8003fe6 <UART_SetConfig+0x21a>
 8003fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fdc:	d009      	beq.n	8003ff2 <UART_SetConfig+0x226>
 8003fde:	e00b      	b.n	8003ff8 <UART_SetConfig+0x22c>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	76fb      	strb	r3, [r7, #27]
 8003fe4:	e038      	b.n	8004058 <UART_SetConfig+0x28c>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	76fb      	strb	r3, [r7, #27]
 8003fea:	e035      	b.n	8004058 <UART_SetConfig+0x28c>
 8003fec:	2304      	movs	r3, #4
 8003fee:	76fb      	strb	r3, [r7, #27]
 8003ff0:	e032      	b.n	8004058 <UART_SetConfig+0x28c>
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	76fb      	strb	r3, [r7, #27]
 8003ff6:	e02f      	b.n	8004058 <UART_SetConfig+0x28c>
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	76fb      	strb	r3, [r7, #27]
 8003ffc:	bf00      	nop
 8003ffe:	e02b      	b.n	8004058 <UART_SetConfig+0x28c>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2c      	ldr	r2, [pc, #176]	; (80040b8 <UART_SetConfig+0x2ec>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d124      	bne.n	8004054 <UART_SetConfig+0x288>
 800400a:	4b2d      	ldr	r3, [pc, #180]	; (80040c0 <UART_SetConfig+0x2f4>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004018:	d012      	beq.n	8004040 <UART_SetConfig+0x274>
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401e:	d802      	bhi.n	8004026 <UART_SetConfig+0x25a>
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <UART_SetConfig+0x268>
 8004024:	e012      	b.n	800404c <UART_SetConfig+0x280>
 8004026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402a:	d006      	beq.n	800403a <UART_SetConfig+0x26e>
 800402c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004030:	d009      	beq.n	8004046 <UART_SetConfig+0x27a>
 8004032:	e00b      	b.n	800404c <UART_SetConfig+0x280>
 8004034:	2300      	movs	r3, #0
 8004036:	76fb      	strb	r3, [r7, #27]
 8004038:	e00e      	b.n	8004058 <UART_SetConfig+0x28c>
 800403a:	2302      	movs	r3, #2
 800403c:	76fb      	strb	r3, [r7, #27]
 800403e:	e00b      	b.n	8004058 <UART_SetConfig+0x28c>
 8004040:	2304      	movs	r3, #4
 8004042:	76fb      	strb	r3, [r7, #27]
 8004044:	e008      	b.n	8004058 <UART_SetConfig+0x28c>
 8004046:	2308      	movs	r3, #8
 8004048:	76fb      	strb	r3, [r7, #27]
 800404a:	e005      	b.n	8004058 <UART_SetConfig+0x28c>
 800404c:	2310      	movs	r3, #16
 800404e:	76fb      	strb	r3, [r7, #27]
 8004050:	bf00      	nop
 8004052:	e001      	b.n	8004058 <UART_SetConfig+0x28c>
 8004054:	2310      	movs	r3, #16
 8004056:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a16      	ldr	r2, [pc, #88]	; (80040b8 <UART_SetConfig+0x2ec>)
 800405e:	4293      	cmp	r3, r2
 8004060:	f040 80fa 	bne.w	8004258 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004064:	7efb      	ldrb	r3, [r7, #27]
 8004066:	2b08      	cmp	r3, #8
 8004068:	d836      	bhi.n	80040d8 <UART_SetConfig+0x30c>
 800406a:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <UART_SetConfig+0x2a4>)
 800406c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004070:	08004095 	.word	0x08004095
 8004074:	080040d9 	.word	0x080040d9
 8004078:	0800409d 	.word	0x0800409d
 800407c:	080040d9 	.word	0x080040d9
 8004080:	080040a3 	.word	0x080040a3
 8004084:	080040d9 	.word	0x080040d9
 8004088:	080040d9 	.word	0x080040d9
 800408c:	080040d9 	.word	0x080040d9
 8004090:	080040ab 	.word	0x080040ab
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004094:	f7ff f910 	bl	80032b8 <HAL_RCC_GetPCLK1Freq>
 8004098:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800409a:	e020      	b.n	80040de <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800409c:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <UART_SetConfig+0x308>)
 800409e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040a0:	e01d      	b.n	80040de <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80040a2:	f7ff f873 	bl	800318c <HAL_RCC_GetSysClockFreq>
 80040a6:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040a8:	e019      	b.n	80040de <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80040aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ae:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040b0:	e015      	b.n	80040de <UART_SetConfig+0x312>
 80040b2:	bf00      	nop
 80040b4:	efff69f3 	.word	0xefff69f3
 80040b8:	40008000 	.word	0x40008000
 80040bc:	40013800 	.word	0x40013800
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40004400 	.word	0x40004400
 80040c8:	40004800 	.word	0x40004800
 80040cc:	40004c00 	.word	0x40004c00
 80040d0:	40005000 	.word	0x40005000
 80040d4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	74fb      	strb	r3, [r7, #19]
        break;
 80040dc:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 81ac 	beq.w	800443e <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4413      	add	r3, r2
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d305      	bcc.n	8004102 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d902      	bls.n	8004108 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	74fb      	strb	r3, [r7, #19]
 8004106:	e19a      	b.n	800443e <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8004108:	7efb      	ldrb	r3, [r7, #27]
 800410a:	2b08      	cmp	r3, #8
 800410c:	f200 8091 	bhi.w	8004232 <UART_SetConfig+0x466>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <UART_SetConfig+0x34c>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	0800413d 	.word	0x0800413d
 800411c:	08004233 	.word	0x08004233
 8004120:	08004189 	.word	0x08004189
 8004124:	08004233 	.word	0x08004233
 8004128:	080041bd 	.word	0x080041bd
 800412c:	08004233 	.word	0x08004233
 8004130:	08004233 	.word	0x08004233
 8004134:	08004233 	.word	0x08004233
 8004138:	08004209 	.word	0x08004209
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800413c:	f7ff f8bc 	bl	80032b8 <HAL_RCC_GetPCLK1Freq>
 8004140:	4603      	mov	r3, r0
 8004142:	4619      	mov	r1, r3
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	f04f 0400 	mov.w	r4, #0
 8004150:	0214      	lsls	r4, r2, #8
 8004152:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004156:	020b      	lsls	r3, r1, #8
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6852      	ldr	r2, [r2, #4]
 800415c:	0852      	lsrs	r2, r2, #1
 800415e:	4611      	mov	r1, r2
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	eb13 0b01 	adds.w	fp, r3, r1
 8004168:	eb44 0c02 	adc.w	ip, r4, r2
 800416c:	4658      	mov	r0, fp
 800416e:	4661      	mov	r1, ip
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f04f 0400 	mov.w	r4, #0
 8004178:	461a      	mov	r2, r3
 800417a:	4623      	mov	r3, r4
 800417c:	f7fc fc42 	bl	8000a04 <__aeabi_uldivmod>
 8004180:	4603      	mov	r3, r0
 8004182:	460c      	mov	r4, r1
 8004184:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004186:	e057      	b.n	8004238 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	085b      	lsrs	r3, r3, #1
 800418e:	f04f 0400 	mov.w	r4, #0
 8004192:	49b1      	ldr	r1, [pc, #708]	; (8004458 <UART_SetConfig+0x68c>)
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	eb13 0b01 	adds.w	fp, r3, r1
 800419c:	eb44 0c02 	adc.w	ip, r4, r2
 80041a0:	4658      	mov	r0, fp
 80041a2:	4661      	mov	r1, ip
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f04f 0400 	mov.w	r4, #0
 80041ac:	461a      	mov	r2, r3
 80041ae:	4623      	mov	r3, r4
 80041b0:	f7fc fc28 	bl	8000a04 <__aeabi_uldivmod>
 80041b4:	4603      	mov	r3, r0
 80041b6:	460c      	mov	r4, r1
 80041b8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80041ba:	e03d      	b.n	8004238 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80041bc:	f7fe ffe6 	bl	800318c <HAL_RCC_GetSysClockFreq>
 80041c0:	4603      	mov	r3, r0
 80041c2:	4619      	mov	r1, r3
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	f04f 0400 	mov.w	r4, #0
 80041d0:	0214      	lsls	r4, r2, #8
 80041d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80041d6:	020b      	lsls	r3, r1, #8
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6852      	ldr	r2, [r2, #4]
 80041dc:	0852      	lsrs	r2, r2, #1
 80041de:	4611      	mov	r1, r2
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	eb13 0b01 	adds.w	fp, r3, r1
 80041e8:	eb44 0c02 	adc.w	ip, r4, r2
 80041ec:	4658      	mov	r0, fp
 80041ee:	4661      	mov	r1, ip
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f04f 0400 	mov.w	r4, #0
 80041f8:	461a      	mov	r2, r3
 80041fa:	4623      	mov	r3, r4
 80041fc:	f7fc fc02 	bl	8000a04 <__aeabi_uldivmod>
 8004200:	4603      	mov	r3, r0
 8004202:	460c      	mov	r4, r1
 8004204:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004206:	e017      	b.n	8004238 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	f04f 0400 	mov.w	r4, #0
 8004212:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004216:	f144 0100 	adc.w	r1, r4, #0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f04f 0400 	mov.w	r4, #0
 8004222:	461a      	mov	r2, r3
 8004224:	4623      	mov	r3, r4
 8004226:	f7fc fbed 	bl	8000a04 <__aeabi_uldivmod>
 800422a:	4603      	mov	r3, r0
 800422c:	460c      	mov	r4, r1
 800422e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004230:	e002      	b.n	8004238 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	74fb      	strb	r3, [r7, #19]
            break;
 8004236:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800423e:	d308      	bcc.n	8004252 <UART_SetConfig+0x486>
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004246:	d204      	bcs.n	8004252 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	60da      	str	r2, [r3, #12]
 8004250:	e0f5      	b.n	800443e <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	74fb      	strb	r3, [r7, #19]
 8004256:	e0f2      	b.n	800443e <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004260:	d17f      	bne.n	8004362 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8004262:	7efb      	ldrb	r3, [r7, #27]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d85c      	bhi.n	8004322 <UART_SetConfig+0x556>
 8004268:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <UART_SetConfig+0x4a4>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	08004295 	.word	0x08004295
 8004274:	080042b3 	.word	0x080042b3
 8004278:	080042d1 	.word	0x080042d1
 800427c:	08004323 	.word	0x08004323
 8004280:	080042ed 	.word	0x080042ed
 8004284:	08004323 	.word	0x08004323
 8004288:	08004323 	.word	0x08004323
 800428c:	08004323 	.word	0x08004323
 8004290:	0800430b 	.word	0x0800430b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004294:	f7ff f810 	bl	80032b8 <HAL_RCC_GetPCLK1Freq>
 8004298:	4603      	mov	r3, r0
 800429a:	005a      	lsls	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	085b      	lsrs	r3, r3, #1
 80042a2:	441a      	add	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042b0:	e03a      	b.n	8004328 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80042b2:	f7ff f817 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 80042b6:	4603      	mov	r3, r0
 80042b8:	005a      	lsls	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	441a      	add	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042ce:	e02b      	b.n	8004328 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	085b      	lsrs	r3, r3, #1
 80042d6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80042da:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6852      	ldr	r2, [r2, #4]
 80042e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042ea:	e01d      	b.n	8004328 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80042ec:	f7fe ff4e 	bl	800318c <HAL_RCC_GetSysClockFreq>
 80042f0:	4603      	mov	r3, r0
 80042f2:	005a      	lsls	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	085b      	lsrs	r3, r3, #1
 80042fa:	441a      	add	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	b29b      	uxth	r3, r3
 8004306:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004308:	e00e      	b.n	8004328 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	085b      	lsrs	r3, r3, #1
 8004310:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	fbb2 f3f3 	udiv	r3, r2, r3
 800431c:	b29b      	uxth	r3, r3
 800431e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004320:	e002      	b.n	8004328 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	74fb      	strb	r3, [r7, #19]
        break;
 8004326:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2b0f      	cmp	r3, #15
 800432c:	d916      	bls.n	800435c <UART_SetConfig+0x590>
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004334:	d212      	bcs.n	800435c <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	b29b      	uxth	r3, r3
 800433a:	f023 030f 	bic.w	r3, r3, #15
 800433e:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	085b      	lsrs	r3, r3, #1
 8004344:	b29b      	uxth	r3, r3
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	b29a      	uxth	r2, r3
 800434c:	897b      	ldrh	r3, [r7, #10]
 800434e:	4313      	orrs	r3, r2
 8004350:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	897a      	ldrh	r2, [r7, #10]
 8004358:	60da      	str	r2, [r3, #12]
 800435a:	e070      	b.n	800443e <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	74fb      	strb	r3, [r7, #19]
 8004360:	e06d      	b.n	800443e <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8004362:	7efb      	ldrb	r3, [r7, #27]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d859      	bhi.n	800441c <UART_SetConfig+0x650>
 8004368:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <UART_SetConfig+0x5a4>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	08004395 	.word	0x08004395
 8004374:	080043b1 	.word	0x080043b1
 8004378:	080043cd 	.word	0x080043cd
 800437c:	0800441d 	.word	0x0800441d
 8004380:	080043e9 	.word	0x080043e9
 8004384:	0800441d 	.word	0x0800441d
 8004388:	0800441d 	.word	0x0800441d
 800438c:	0800441d 	.word	0x0800441d
 8004390:	08004405 	.word	0x08004405
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004394:	f7fe ff90 	bl	80032b8 <HAL_RCC_GetPCLK1Freq>
 8004398:	4602      	mov	r2, r0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	085b      	lsrs	r3, r3, #1
 80043a0:	441a      	add	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043ae:	e038      	b.n	8004422 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80043b0:	f7fe ff98 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 80043b4:	4602      	mov	r2, r0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	085b      	lsrs	r3, r3, #1
 80043bc:	441a      	add	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043ca:	e02a      	b.n	8004422 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	085b      	lsrs	r3, r3, #1
 80043d2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80043d6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6852      	ldr	r2, [r2, #4]
 80043de:	fbb3 f3f2 	udiv	r3, r3, r2
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043e6:	e01c      	b.n	8004422 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043e8:	f7fe fed0 	bl	800318c <HAL_RCC_GetSysClockFreq>
 80043ec:	4602      	mov	r2, r0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	441a      	add	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fe:	b29b      	uxth	r3, r3
 8004400:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004402:	e00e      	b.n	8004422 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	b29b      	uxth	r3, r3
 8004418:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800441a:	e002      	b.n	8004422 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	74fb      	strb	r3, [r7, #19]
        break;
 8004420:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b0f      	cmp	r3, #15
 8004426:	d908      	bls.n	800443a <UART_SetConfig+0x66e>
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442e:	d204      	bcs.n	800443a <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	60da      	str	r2, [r3, #12]
 8004438:	e001      	b.n	800443e <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800444a:	7cfb      	ldrb	r3, [r7, #19]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3720      	adds	r7, #32
 8004450:	46bd      	mov	sp, r7
 8004452:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004456:	bf00      	nop
 8004458:	f4240000 	.word	0xf4240000

0800445c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	f003 0310 	and.w	r3, r3, #16
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01a      	beq.n	8004572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455a:	d10a      	bne.n	8004572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	605a      	str	r2, [r3, #4]
  }
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80045ae:	f7fc fc15 	bl	8000ddc <HAL_GetTick>
 80045b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d10e      	bne.n	80045e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f82a 	bl	800462a <UART_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e020      	b.n	8004622 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d10e      	bne.n	800460c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f814 	bl	800462a <UART_WaitOnFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e00a      	b.n	8004622 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	4613      	mov	r3, r2
 8004638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463a:	e02a      	b.n	8004692 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004642:	d026      	beq.n	8004692 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004644:	f7fc fbca 	bl	8000ddc <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	429a      	cmp	r2, r3
 8004652:	d302      	bcc.n	800465a <UART_WaitOnFlagUntilTimeout+0x30>
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d11b      	bne.n	8004692 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004668:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e00f      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4013      	ands	r3, r2
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	429a      	cmp	r2, r3
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d0c5      	beq.n	800463c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	0000      	movs	r0, r0
 80046bc:	0000      	movs	r0, r0
	...

080046c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80046c0:	b598      	push	{r3, r4, r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80046c4:	f7fc fb1e 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80046c8:	f000 f84a 	bl	8004760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80046cc:	f000 f964 	bl	8004998 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80046d0:	f000 f932 	bl	8004938 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 80046d4:	f000 f8cc 	bl	8004870 <MX_ADC3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc3);
 80046d8:	481d      	ldr	r0, [pc, #116]	; (8004750 <main+0x90>)
 80046da:	f7fc ff25 	bl	8001528 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc3, 100) == HAL_OK){
 80046de:	2164      	movs	r1, #100	; 0x64
 80046e0:	481b      	ldr	r0, [pc, #108]	; (8004750 <main+0x90>)
 80046e2:	f7fd f80f 	bl	8001704 <HAL_ADC_PollForConversion>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d123      	bne.n	8004734 <main+0x74>
		  adc_val = HAL_ADC_GetValue(&hadc3);
 80046ec:	4818      	ldr	r0, [pc, #96]	; (8004750 <main+0x90>)
 80046ee:	f7fd f8d9 	bl	80018a4 <HAL_ADC_GetValue>
 80046f2:	4602      	mov	r2, r0
 80046f4:	4b17      	ldr	r3, [pc, #92]	; (8004754 <main+0x94>)
 80046f6:	601a      	str	r2, [r3, #0]
		  tension = (float)((float)adc_val*3.3)/4095.0;
 80046f8:	4b16      	ldr	r3, [pc, #88]	; (8004754 <main+0x94>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	ee07 3a90 	vmov	s15, r3
 8004700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004704:	ee17 0a90 	vmov	r0, s15
 8004708:	f7fb fec2 	bl	8000490 <__aeabi_f2d>
 800470c:	a30e      	add	r3, pc, #56	; (adr r3, 8004748 <main+0x88>)
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	f7fb ff15 	bl	8000540 <__aeabi_dmul>
 8004716:	4603      	mov	r3, r0
 8004718:	460c      	mov	r4, r1
 800471a:	4618      	mov	r0, r3
 800471c:	4621      	mov	r1, r4
 800471e:	f7fc f921 	bl	8000964 <__aeabi_d2f>
 8004722:	ee06 0a90 	vmov	s13, r0
 8004726:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004758 <main+0x98>
 800472a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800472e:	4b0b      	ldr	r3, [pc, #44]	; (800475c <main+0x9c>)
 8004730:	edc3 7a00 	vstr	s15, [r3]
	  }
	  HAL_ADC_Stop(&hadc3);		//talvez nao precise dessa linha
 8004734:	4806      	ldr	r0, [pc, #24]	; (8004750 <main+0x90>)
 8004736:	f7fc ffb1 	bl	800169c <HAL_ADC_Stop>
	  HAL_Delay(50);
 800473a:	2032      	movs	r0, #50	; 0x32
 800473c:	f7fc fb5a 	bl	8000df4 <HAL_Delay>
	  HAL_ADC_Start(&hadc3);
 8004740:	e7ca      	b.n	80046d8 <main+0x18>
 8004742:	bf00      	nop
 8004744:	f3af 8000 	nop.w
 8004748:	66666666 	.word	0x66666666
 800474c:	400a6666 	.word	0x400a6666
 8004750:	20000034 	.word	0x20000034
 8004754:	2000002c 	.word	0x2000002c
 8004758:	457ff000 	.word	0x457ff000
 800475c:	20000030 	.word	0x20000030

08004760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b0b8      	sub	sp, #224	; 0xe0
 8004764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004766:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800476a:	2244      	movs	r2, #68	; 0x44
 800476c:	2100      	movs	r1, #0
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fada 	bl	8004d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004774:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	605a      	str	r2, [r3, #4]
 800477e:	609a      	str	r2, [r3, #8]
 8004780:	60da      	str	r2, [r3, #12]
 8004782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004784:	463b      	mov	r3, r7
 8004786:	2288      	movs	r2, #136	; 0x88
 8004788:	2100      	movs	r1, #0
 800478a:	4618      	mov	r0, r3
 800478c:	f000 facc 	bl	8004d28 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004790:	2302      	movs	r3, #2
 8004792:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800479a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800479e:	2310      	movs	r3, #16
 80047a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047a4:	2302      	movs	r3, #2
 80047a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80047aa:	2302      	movs	r3, #2
 80047ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80047b6:	230a      	movs	r3, #10
 80047b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80047bc:	2307      	movs	r3, #7
 80047be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80047c2:	2302      	movs	r3, #2
 80047c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80047c8:	2302      	movs	r3, #2
 80047ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe f848 	bl	8002868 <HAL_RCC_OscConfig>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80047de:	f000 f943 	bl	8004a68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047e2:	230f      	movs	r3, #15
 80047e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047e8:	2303      	movs	r3, #3
 80047ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047ee:	2300      	movs	r3, #0
 80047f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80047f4:	2300      	movs	r3, #0
 80047f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80047fa:	2300      	movs	r3, #0
 80047fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004800:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004804:	2104      	movs	r1, #4
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fbde 	bl	8002fc8 <HAL_RCC_ClockConfig>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8004812:	f000 f929 	bl	8004a68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8004816:	f244 0302 	movw	r3, #16386	; 0x4002
 800481a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800481c:	2300      	movs	r3, #0
 800481e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004820:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004824:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8004826:	2302      	movs	r3, #2
 8004828:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800482a:	2301      	movs	r3, #1
 800482c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800482e:	2308      	movs	r3, #8
 8004830:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004832:	2307      	movs	r3, #7
 8004834:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004836:	2302      	movs	r3, #2
 8004838:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800483a:	2302      	movs	r3, #2
 800483c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800483e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004842:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004844:	463b      	mov	r3, r7
 8004846:	4618      	mov	r0, r3
 8004848:	f7fe fdc2 	bl	80033d0 <HAL_RCCEx_PeriphCLKConfig>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8004852:	f000 f909 	bl	8004a68 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004856:	f44f 7000 	mov.w	r0, #512	; 0x200
 800485a:	f7fd ffaf 	bl	80027bc <HAL_PWREx_ControlVoltageScaling>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8004864:	f000 f900 	bl	8004a68 <Error_Handler>
  }
}
 8004868:	bf00      	nop
 800486a:	37e0      	adds	r7, #224	; 0xe0
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004876:	463b      	mov	r3, r7
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	605a      	str	r2, [r3, #4]
 800487e:	609a      	str	r2, [r3, #8]
 8004880:	60da      	str	r2, [r3, #12]
 8004882:	611a      	str	r2, [r3, #16]
 8004884:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8004886:	4b29      	ldr	r3, [pc, #164]	; (800492c <MX_ADC3_Init+0xbc>)
 8004888:	4a29      	ldr	r2, [pc, #164]	; (8004930 <MX_ADC3_Init+0xc0>)
 800488a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800488c:	4b27      	ldr	r3, [pc, #156]	; (800492c <MX_ADC3_Init+0xbc>)
 800488e:	2200      	movs	r2, #0
 8004890:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004892:	4b26      	ldr	r3, [pc, #152]	; (800492c <MX_ADC3_Init+0xbc>)
 8004894:	2200      	movs	r2, #0
 8004896:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004898:	4b24      	ldr	r3, [pc, #144]	; (800492c <MX_ADC3_Init+0xbc>)
 800489a:	2200      	movs	r2, #0
 800489c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800489e:	4b23      	ldr	r3, [pc, #140]	; (800492c <MX_ADC3_Init+0xbc>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80048a4:	4b21      	ldr	r3, [pc, #132]	; (800492c <MX_ADC3_Init+0xbc>)
 80048a6:	2204      	movs	r2, #4
 80048a8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80048aa:	4b20      	ldr	r3, [pc, #128]	; (800492c <MX_ADC3_Init+0xbc>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80048b0:	4b1e      	ldr	r3, [pc, #120]	; (800492c <MX_ADC3_Init+0xbc>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80048b6:	4b1d      	ldr	r3, [pc, #116]	; (800492c <MX_ADC3_Init+0xbc>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80048bc:	4b1b      	ldr	r3, [pc, #108]	; (800492c <MX_ADC3_Init+0xbc>)
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80048c4:	4b19      	ldr	r3, [pc, #100]	; (800492c <MX_ADC3_Init+0xbc>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80048ca:	4b18      	ldr	r3, [pc, #96]	; (800492c <MX_ADC3_Init+0xbc>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80048d0:	4b16      	ldr	r3, [pc, #88]	; (800492c <MX_ADC3_Init+0xbc>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80048d8:	4b14      	ldr	r3, [pc, #80]	; (800492c <MX_ADC3_Init+0xbc>)
 80048da:	2200      	movs	r2, #0
 80048dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80048de:	4b13      	ldr	r3, [pc, #76]	; (800492c <MX_ADC3_Init+0xbc>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80048e6:	4811      	ldr	r0, [pc, #68]	; (800492c <MX_ADC3_Init+0xbc>)
 80048e8:	f7fc fcca 	bl	8001280 <HAL_ADC_Init>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80048f2:	f000 f8b9 	bl	8004a68 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80048f6:	4b0f      	ldr	r3, [pc, #60]	; (8004934 <MX_ADC3_Init+0xc4>)
 80048f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80048fa:	2306      	movs	r3, #6
 80048fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004902:	237f      	movs	r3, #127	; 0x7f
 8004904:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004906:	2304      	movs	r3, #4
 8004908:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800490e:	463b      	mov	r3, r7
 8004910:	4619      	mov	r1, r3
 8004912:	4806      	ldr	r0, [pc, #24]	; (800492c <MX_ADC3_Init+0xbc>)
 8004914:	f7fc ffd4 	bl	80018c0 <HAL_ADC_ConfigChannel>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800491e:	f000 f8a3 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8004922:	bf00      	nop
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000034 	.word	0x20000034
 8004930:	50040200 	.word	0x50040200
 8004934:	04300002 	.word	0x04300002

08004938 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800493c:	4b14      	ldr	r3, [pc, #80]	; (8004990 <MX_USART2_UART_Init+0x58>)
 800493e:	4a15      	ldr	r2, [pc, #84]	; (8004994 <MX_USART2_UART_Init+0x5c>)
 8004940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004942:	4b13      	ldr	r3, [pc, #76]	; (8004990 <MX_USART2_UART_Init+0x58>)
 8004944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800494a:	4b11      	ldr	r3, [pc, #68]	; (8004990 <MX_USART2_UART_Init+0x58>)
 800494c:	2200      	movs	r2, #0
 800494e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004950:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <MX_USART2_UART_Init+0x58>)
 8004952:	2200      	movs	r2, #0
 8004954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004956:	4b0e      	ldr	r3, [pc, #56]	; (8004990 <MX_USART2_UART_Init+0x58>)
 8004958:	2200      	movs	r2, #0
 800495a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800495c:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <MX_USART2_UART_Init+0x58>)
 800495e:	220c      	movs	r2, #12
 8004960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004962:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <MX_USART2_UART_Init+0x58>)
 8004964:	2200      	movs	r2, #0
 8004966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004968:	4b09      	ldr	r3, [pc, #36]	; (8004990 <MX_USART2_UART_Init+0x58>)
 800496a:	2200      	movs	r2, #0
 800496c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800496e:	4b08      	ldr	r3, [pc, #32]	; (8004990 <MX_USART2_UART_Init+0x58>)
 8004970:	2200      	movs	r2, #0
 8004972:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <MX_USART2_UART_Init+0x58>)
 8004976:	2200      	movs	r2, #0
 8004978:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800497a:	4805      	ldr	r0, [pc, #20]	; (8004990 <MX_USART2_UART_Init+0x58>)
 800497c:	f7ff f9d8 	bl	8003d30 <HAL_UART_Init>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004986:	f000 f86f 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800498a:	bf00      	nop
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20000098 	.word	0x20000098
 8004994:	40004400 	.word	0x40004400

08004998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08a      	sub	sp, #40	; 0x28
 800499c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800499e:	f107 0314 	add.w	r3, r7, #20
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	605a      	str	r2, [r3, #4]
 80049a8:	609a      	str	r2, [r3, #8]
 80049aa:	60da      	str	r2, [r3, #12]
 80049ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049ae:	4b2b      	ldr	r3, [pc, #172]	; (8004a5c <MX_GPIO_Init+0xc4>)
 80049b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b2:	4a2a      	ldr	r2, [pc, #168]	; (8004a5c <MX_GPIO_Init+0xc4>)
 80049b4:	f043 0304 	orr.w	r3, r3, #4
 80049b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049ba:	4b28      	ldr	r3, [pc, #160]	; (8004a5c <MX_GPIO_Init+0xc4>)
 80049bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049c6:	4b25      	ldr	r3, [pc, #148]	; (8004a5c <MX_GPIO_Init+0xc4>)
 80049c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ca:	4a24      	ldr	r2, [pc, #144]	; (8004a5c <MX_GPIO_Init+0xc4>)
 80049cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049d2:	4b22      	ldr	r3, [pc, #136]	; (8004a5c <MX_GPIO_Init+0xc4>)
 80049d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049de:	4b1f      	ldr	r3, [pc, #124]	; (8004a5c <MX_GPIO_Init+0xc4>)
 80049e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e2:	4a1e      	ldr	r2, [pc, #120]	; (8004a5c <MX_GPIO_Init+0xc4>)
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049ea:	4b1c      	ldr	r3, [pc, #112]	; (8004a5c <MX_GPIO_Init+0xc4>)
 80049ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	60bb      	str	r3, [r7, #8]
 80049f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049f6:	4b19      	ldr	r3, [pc, #100]	; (8004a5c <MX_GPIO_Init+0xc4>)
 80049f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fa:	4a18      	ldr	r2, [pc, #96]	; (8004a5c <MX_GPIO_Init+0xc4>)
 80049fc:	f043 0302 	orr.w	r3, r3, #2
 8004a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a02:	4b16      	ldr	r3, [pc, #88]	; (8004a5c <MX_GPIO_Init+0xc4>)
 8004a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	607b      	str	r3, [r7, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2120      	movs	r1, #32
 8004a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a16:	f7fd feab 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004a20:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <MX_GPIO_Init+0xc8>)
 8004a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004a28:	f107 0314 	add.w	r3, r7, #20
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	480d      	ldr	r0, [pc, #52]	; (8004a64 <MX_GPIO_Init+0xcc>)
 8004a30:	f7fd fcf6 	bl	8002420 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004a34:	2320      	movs	r3, #32
 8004a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a40:	2300      	movs	r3, #0
 8004a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004a44:	f107 0314 	add.w	r3, r7, #20
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a4e:	f7fd fce7 	bl	8002420 <HAL_GPIO_Init>

}
 8004a52:	bf00      	nop
 8004a54:	3728      	adds	r7, #40	; 0x28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	10210000 	.word	0x10210000
 8004a64:	48000800 	.word	0x48000800

08004a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
	...

08004a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a7e:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <HAL_MspInit+0x44>)
 8004a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a82:	4a0e      	ldr	r2, [pc, #56]	; (8004abc <HAL_MspInit+0x44>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	6613      	str	r3, [r2, #96]	; 0x60
 8004a8a:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <HAL_MspInit+0x44>)
 8004a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	607b      	str	r3, [r7, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a96:	4b09      	ldr	r3, [pc, #36]	; (8004abc <HAL_MspInit+0x44>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	4a08      	ldr	r2, [pc, #32]	; (8004abc <HAL_MspInit+0x44>)
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <HAL_MspInit+0x44>)
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40021000 	.word	0x40021000

08004ac0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	; 0x28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac8:	f107 0314 	add.w	r3, r7, #20
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	60da      	str	r2, [r3, #12]
 8004ad6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a15      	ldr	r2, [pc, #84]	; (8004b34 <HAL_ADC_MspInit+0x74>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d123      	bne.n	8004b2a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004ae2:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <HAL_ADC_MspInit+0x78>)
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae6:	4a14      	ldr	r2, [pc, #80]	; (8004b38 <HAL_ADC_MspInit+0x78>)
 8004ae8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004aee:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <HAL_ADC_MspInit+0x78>)
 8004af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004afa:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <HAL_ADC_MspInit+0x78>)
 8004afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afe:	4a0e      	ldr	r2, [pc, #56]	; (8004b38 <HAL_ADC_MspInit+0x78>)
 8004b00:	f043 0304 	orr.w	r3, r3, #4
 8004b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b06:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <HAL_ADC_MspInit+0x78>)
 8004b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004b12:	2301      	movs	r3, #1
 8004b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004b16:	230b      	movs	r3, #11
 8004b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b1e:	f107 0314 	add.w	r3, r7, #20
 8004b22:	4619      	mov	r1, r3
 8004b24:	4805      	ldr	r0, [pc, #20]	; (8004b3c <HAL_ADC_MspInit+0x7c>)
 8004b26:	f7fd fc7b 	bl	8002420 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004b2a:	bf00      	nop
 8004b2c:	3728      	adds	r7, #40	; 0x28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	50040200 	.word	0x50040200
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	48000800 	.word	0x48000800

08004b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	; 0x28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b48:	f107 0314 	add.w	r3, r7, #20
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	605a      	str	r2, [r3, #4]
 8004b52:	609a      	str	r2, [r3, #8]
 8004b54:	60da      	str	r2, [r3, #12]
 8004b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a17      	ldr	r2, [pc, #92]	; (8004bbc <HAL_UART_MspInit+0x7c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d128      	bne.n	8004bb4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b62:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <HAL_UART_MspInit+0x80>)
 8004b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b66:	4a16      	ldr	r2, [pc, #88]	; (8004bc0 <HAL_UART_MspInit+0x80>)
 8004b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b6e:	4b14      	ldr	r3, [pc, #80]	; (8004bc0 <HAL_UART_MspInit+0x80>)
 8004b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b7a:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <HAL_UART_MspInit+0x80>)
 8004b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7e:	4a10      	ldr	r2, [pc, #64]	; (8004bc0 <HAL_UART_MspInit+0x80>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b86:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <HAL_UART_MspInit+0x80>)
 8004b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004b92:	230c      	movs	r3, #12
 8004b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b96:	2302      	movs	r3, #2
 8004b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ba2:	2307      	movs	r3, #7
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba6:	f107 0314 	add.w	r3, r7, #20
 8004baa:	4619      	mov	r1, r3
 8004bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bb0:	f7fd fc36 	bl	8002420 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004bb4:	bf00      	nop
 8004bb6:	3728      	adds	r7, #40	; 0x28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40004400 	.word	0x40004400
 8004bc0:	40021000 	.word	0x40021000

08004bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004bc8:	bf00      	nop
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bd6:	e7fe      	b.n	8004bd6 <HardFault_Handler+0x4>

08004bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bdc:	e7fe      	b.n	8004bdc <MemManage_Handler+0x4>

08004bde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bde:	b480      	push	{r7}
 8004be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004be2:	e7fe      	b.n	8004be2 <BusFault_Handler+0x4>

08004be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004be8:	e7fe      	b.n	8004be8 <UsageFault_Handler+0x4>

08004bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bea:	b480      	push	{r7}
 8004bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bee:	bf00      	nop
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bfc:	bf00      	nop
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c06:	b480      	push	{r7}
 8004c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c0a:	bf00      	nop
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c18:	f7fc f8ce 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c1c:	bf00      	nop
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c24:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <SystemInit+0x64>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2a:	4a16      	ldr	r2, [pc, #88]	; (8004c84 <SystemInit+0x64>)
 8004c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004c34:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <SystemInit+0x68>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a13      	ldr	r2, [pc, #76]	; (8004c88 <SystemInit+0x68>)
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004c40:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <SystemInit+0x68>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004c46:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <SystemInit+0x68>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a0f      	ldr	r2, [pc, #60]	; (8004c88 <SystemInit+0x68>)
 8004c4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004c50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004c54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004c56:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <SystemInit+0x68>)
 8004c58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <SystemInit+0x68>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a09      	ldr	r2, [pc, #36]	; (8004c88 <SystemInit+0x68>)
 8004c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004c6a:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <SystemInit+0x68>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <SystemInit+0x64>)
 8004c72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c76:	609a      	str	r2, [r3, #8]
#endif
}
 8004c78:	bf00      	nop
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	e000ed00 	.word	0xe000ed00
 8004c88:	40021000 	.word	0x40021000

08004c8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cc4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004c90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004c92:	e003      	b.n	8004c9c <LoopCopyDataInit>

08004c94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004c96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004c98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004c9a:	3104      	adds	r1, #4

08004c9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004c9c:	480b      	ldr	r0, [pc, #44]	; (8004ccc <LoopForever+0xa>)
	ldr	r3, =_edata
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004ca0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004ca2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004ca4:	d3f6      	bcc.n	8004c94 <CopyDataInit>
	ldr	r2, =_sbss
 8004ca6:	4a0b      	ldr	r2, [pc, #44]	; (8004cd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004ca8:	e002      	b.n	8004cb0 <LoopFillZerobss>

08004caa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004caa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004cac:	f842 3b04 	str.w	r3, [r2], #4

08004cb0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004cb0:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <LoopForever+0x16>)
	cmp	r2, r3
 8004cb2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004cb4:	d3f9      	bcc.n	8004caa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004cb6:	f7ff ffb3 	bl	8004c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cba:	f000 f811 	bl	8004ce0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004cbe:	f7ff fcff 	bl	80046c0 <main>

08004cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8004cc2:	e7fe      	b.n	8004cc2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004cc4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004cc8:	08004da8 	.word	0x08004da8
	ldr	r0, =_sdata
 8004ccc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004cd0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8004cd4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8004cd8:	20000118 	.word	0x20000118

08004cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004cdc:	e7fe      	b.n	8004cdc <ADC1_2_IRQHandler>
	...

08004ce0 <__libc_init_array>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	4e0d      	ldr	r6, [pc, #52]	; (8004d18 <__libc_init_array+0x38>)
 8004ce4:	4c0d      	ldr	r4, [pc, #52]	; (8004d1c <__libc_init_array+0x3c>)
 8004ce6:	1ba4      	subs	r4, r4, r6
 8004ce8:	10a4      	asrs	r4, r4, #2
 8004cea:	2500      	movs	r5, #0
 8004cec:	42a5      	cmp	r5, r4
 8004cee:	d109      	bne.n	8004d04 <__libc_init_array+0x24>
 8004cf0:	4e0b      	ldr	r6, [pc, #44]	; (8004d20 <__libc_init_array+0x40>)
 8004cf2:	4c0c      	ldr	r4, [pc, #48]	; (8004d24 <__libc_init_array+0x44>)
 8004cf4:	f000 f820 	bl	8004d38 <_init>
 8004cf8:	1ba4      	subs	r4, r4, r6
 8004cfa:	10a4      	asrs	r4, r4, #2
 8004cfc:	2500      	movs	r5, #0
 8004cfe:	42a5      	cmp	r5, r4
 8004d00:	d105      	bne.n	8004d0e <__libc_init_array+0x2e>
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
 8004d04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d08:	4798      	blx	r3
 8004d0a:	3501      	adds	r5, #1
 8004d0c:	e7ee      	b.n	8004cec <__libc_init_array+0xc>
 8004d0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d12:	4798      	blx	r3
 8004d14:	3501      	adds	r5, #1
 8004d16:	e7f2      	b.n	8004cfe <__libc_init_array+0x1e>
 8004d18:	08004da0 	.word	0x08004da0
 8004d1c:	08004da0 	.word	0x08004da0
 8004d20:	08004da0 	.word	0x08004da0
 8004d24:	08004da4 	.word	0x08004da4

08004d28 <memset>:
 8004d28:	4402      	add	r2, r0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d100      	bne.n	8004d32 <memset+0xa>
 8004d30:	4770      	bx	lr
 8004d32:	f803 1b01 	strb.w	r1, [r3], #1
 8004d36:	e7f9      	b.n	8004d2c <memset+0x4>

08004d38 <_init>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	bf00      	nop
 8004d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3e:	bc08      	pop	{r3}
 8004d40:	469e      	mov	lr, r3
 8004d42:	4770      	bx	lr

08004d44 <_fini>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr
