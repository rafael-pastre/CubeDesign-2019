
VarelaBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08007028  08007028  00017028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070a8  080070a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080070a8  080070a8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070a8  080070a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070a8  080070a8  000170a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070ac  080070ac  000170ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080070b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000074  08007124  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08007124  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc74  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000323e  00000000  00000000  0003cd18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001680  00000000  00000000  0003ff58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001528  00000000  00000000  000415d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e3bd  00000000  00000000  00042b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011259  00000000  00000000  00070ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010c0ef  00000000  00000000  00082116  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018e205  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006608  00000000  00000000  0018e280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007010 	.word	0x08007010

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08007010 	.word	0x08007010

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f001 fb60 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a14:	2000      	movs	r0, #0
 8000a16:	f000 f80d 	bl	8000a34 <HAL_InitTick>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	e001      	b.n	8000a2a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a26:	f005 ff07 	bl	8006838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_InitTick+0x68>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d022      	beq.n	8000a8e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_InitTick+0x6c>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <HAL_InitTick+0x68>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 fb60 	bl	8002122 <HAL_SYSTICK_Config>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d10f      	bne.n	8000a88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b0f      	cmp	r3, #15
 8000a6c:	d809      	bhi.n	8000a82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	6879      	ldr	r1, [r7, #4]
 8000a72:	f04f 30ff 	mov.w	r0, #4294967295
 8000a76:	f001 fb38 	bl	80020ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_InitTick+0x70>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	e007      	b.n	8000a92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	73fb      	strb	r3, [r7, #15]
 8000a86:	e004      	b.n	8000a92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	e001      	b.n	8000a92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000004 	.word	0x20000004
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000000 	.word	0x20000000

08000aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_IncTick+0x1c>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x20>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4a03      	ldr	r2, [pc, #12]	; (8000ac4 <HAL_IncTick+0x1c>)
 8000ab8:	6013      	str	r3, [r2, #0]
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	20000364 	.word	0x20000364
 8000ac8:	20000004 	.word	0x20000004

08000acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <HAL_GetTick+0x14>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000364 	.word	0x20000364

08000ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aec:	f7ff ffee 	bl	8000acc <HAL_GetTick>
 8000af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000afc:	d004      	beq.n	8000b08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_Delay+0x40>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	4413      	add	r3, r2
 8000b06:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b08:	bf00      	nop
 8000b0a:	f7ff ffdf 	bl	8000acc <HAL_GetTick>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d8f7      	bhi.n	8000b0a <HAL_Delay+0x26>
  {
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000004 	.word	0x20000004

08000b28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	609a      	str	r2, [r3, #8]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	431a      	orrs	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	609a      	str	r2, [r3, #8]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b90:	b490      	push	{r4, r7}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
 8000b9c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3360      	adds	r3, #96	; 0x60
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000bac:	6822      	ldr	r2, [r4, #0]
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <LL_ADC_SetOffset+0x40>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc2:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc90      	pop	{r4, r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	03fff000 	.word	0x03fff000

08000bd4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000bd4:	b490      	push	{r4, r7}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3360      	adds	r3, #96	; 0x60
 8000be2:	461a      	mov	r2, r3
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000bec:	6823      	ldr	r3, [r4, #0]
 8000bee:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc90      	pop	{r4, r7}
 8000bfa:	4770      	bx	lr

08000bfc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000bfc:	b490      	push	{r4, r7}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3360      	adds	r3, #96	; 0x60
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000c16:	6823      	ldr	r3, [r4, #0]
 8000c18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc90      	pop	{r4, r7}
 8000c2a:	4770      	bx	lr

08000c2c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c2c:	b490      	push	{r4, r7}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3330      	adds	r3, #48	; 0x30
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	f003 030c 	and.w	r3, r3, #12
 8000c48:	4413      	add	r3, r2
 8000c4a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000c4c:	6822      	ldr	r2, [r4, #0]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	f003 031f 	and.w	r3, r3, #31
 8000c54:	211f      	movs	r1, #31
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	0e9b      	lsrs	r3, r3, #26
 8000c62:	f003 011f 	and.w	r1, r3, #31
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	f003 031f 	and.w	r3, r3, #31
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc90      	pop	{r4, r7}
 8000c7c:	4770      	bx	lr

08000c7e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000c7e:	b490      	push	{r4, r7}
 8000c80:	b084      	sub	sp, #16
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3314      	adds	r3, #20
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	0e5b      	lsrs	r3, r3, #25
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	4413      	add	r3, r2
 8000c9c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000c9e:	6822      	ldr	r2, [r4, #0]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	0d1b      	lsrs	r3, r3, #20
 8000ca4:	f003 031f 	and.w	r3, r3, #31
 8000ca8:	2107      	movs	r1, #7
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	0d1b      	lsrs	r3, r3, #20
 8000cb6:	f003 031f 	and.w	r3, r3, #31
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000cc4:	bf00      	nop
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc90      	pop	{r4, r7}
 8000ccc:	4770      	bx	lr
	...

08000cd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	401a      	ands	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0318 	and.w	r3, r3, #24
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000cf4:	40d9      	lsrs	r1, r3
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	400b      	ands	r3, r1
 8000cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	0007ffff 	.word	0x0007ffff

08000d18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000d28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	6093      	str	r3, [r2, #8]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d50:	d101      	bne.n	8000d56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000d74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000da0:	d101      	bne.n	8000da6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d101      	bne.n	8000dcc <LL_ADC_IsEnabled+0x18>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e000      	b.n	8000dce <LL_ADC_IsEnabled+0x1a>
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	d101      	bne.n	8000df2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d101      	bne.n	8000e18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e134      	b.n	80010ac <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d109      	bne.n	8000e64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f005 fd15 	bl	8006880 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff67 	bl	8000d3c <LL_ADC_IsDeepPowerDownEnabled>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff4d 	bl	8000d18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff82 	bl	8000d8c <LL_ADC_IsInternalRegulatorEnabled>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d113      	bne.n	8000eb6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff66 	bl	8000d64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000e98:	4b86      	ldr	r3, [pc, #536]	; (80010b4 <HAL_ADC_Init+0x28c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	099b      	lsrs	r3, r3, #6
 8000e9e:	4a86      	ldr	r2, [pc, #536]	; (80010b8 <HAL_ADC_Init+0x290>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	099b      	lsrs	r3, r3, #6
 8000ea6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000ea8:	e002      	b.n	8000eb0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f9      	bne.n	8000eaa <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff66 	bl	8000d8c <LL_ADC_IsInternalRegulatorEnabled>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10d      	bne.n	8000ee2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eca:	f043 0210 	orr.w	r2, r3, #16
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	f043 0201 	orr.w	r2, r3, #1
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff77 	bl	8000dda <LL_ADC_REG_IsConversionOngoing>
 8000eec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f040 80cf 	bne.w	800109a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 80cb 	bne.w	800109a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f08:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f0c:	f043 0202 	orr.w	r2, r3, #2
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff4b 	bl	8000db4 <LL_ADC_IsEnabled>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d115      	bne.n	8000f50 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f24:	4865      	ldr	r0, [pc, #404]	; (80010bc <HAL_ADC_Init+0x294>)
 8000f26:	f7ff ff45 	bl	8000db4 <LL_ADC_IsEnabled>
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	4864      	ldr	r0, [pc, #400]	; (80010c0 <HAL_ADC_Init+0x298>)
 8000f2e:	f7ff ff41 	bl	8000db4 <LL_ADC_IsEnabled>
 8000f32:	4603      	mov	r3, r0
 8000f34:	431c      	orrs	r4, r3
 8000f36:	4863      	ldr	r0, [pc, #396]	; (80010c4 <HAL_ADC_Init+0x29c>)
 8000f38:	f7ff ff3c 	bl	8000db4 <LL_ADC_IsEnabled>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4323      	orrs	r3, r4
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d105      	bne.n	8000f50 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	485f      	ldr	r0, [pc, #380]	; (80010c8 <HAL_ADC_Init+0x2a0>)
 8000f4c:	f7ff fdec 	bl	8000b28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7e5b      	ldrb	r3, [r3, #25]
 8000f54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000f60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000f66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f6e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d106      	bne.n	8000f8c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	3b01      	subs	r3, #1
 8000f84:	045b      	lsls	r3, r3, #17
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d009      	beq.n	8000fa8 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f98:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	4b47      	ldr	r3, [pc, #284]	; (80010cc <HAL_ADC_Init+0x2a4>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	6812      	ldr	r2, [r2, #0]
 8000fb6:	69b9      	ldr	r1, [r7, #24]
 8000fb8:	430b      	orrs	r3, r1
 8000fba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff0a 	bl	8000dda <LL_ADC_REG_IsConversionOngoing>
 8000fc6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff17 	bl	8000e00 <LL_ADC_INJ_IsConversionOngoing>
 8000fd2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d13d      	bne.n	8001056 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d13a      	bne.n	8001056 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fe4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fec:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ffc:	f023 0302 	bic.w	r3, r3, #2
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	6812      	ldr	r2, [r2, #0]
 8001004:	69b9      	ldr	r1, [r7, #24]
 8001006:	430b      	orrs	r3, r1
 8001008:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001010:	2b01      	cmp	r3, #1
 8001012:	d118      	bne.n	8001046 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800101e:	f023 0304 	bic.w	r3, r3, #4
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800102a:	4311      	orrs	r1, r2
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001030:	4311      	orrs	r1, r2
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001036:	430a      	orrs	r2, r1
 8001038:	431a      	orrs	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f042 0201 	orr.w	r2, r2, #1
 8001042:	611a      	str	r2, [r3, #16]
 8001044:	e007      	b.n	8001056 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 0201 	bic.w	r2, r2, #1
 8001054:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d10c      	bne.n	8001078 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	f023 010f 	bic.w	r1, r3, #15
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	430a      	orrs	r2, r1
 8001074:	631a      	str	r2, [r3, #48]	; 0x30
 8001076:	e007      	b.n	8001088 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 020f 	bic.w	r2, r2, #15
 8001086:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800108c:	f023 0303 	bic.w	r3, r3, #3
 8001090:	f043 0201 	orr.w	r2, r3, #1
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	655a      	str	r2, [r3, #84]	; 0x54
 8001098:	e007      	b.n	80010aa <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800109e:	f043 0210 	orr.w	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80010aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3724      	adds	r7, #36	; 0x24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd90      	pop	{r4, r7, pc}
 80010b4:	20000008 	.word	0x20000008
 80010b8:	053e2d63 	.word	0x053e2d63
 80010bc:	50040000 	.word	0x50040000
 80010c0:	50040100 	.word	0x50040100
 80010c4:	50040200 	.word	0x50040200
 80010c8:	50040300 	.word	0x50040300
 80010cc:	fff0c007 	.word	0xfff0c007

080010d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0a6      	sub	sp, #152	; 0x98
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d101      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x22>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e348      	b.n	8001784 <HAL_ADC_ConfigChannel+0x6b4>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fe6b 	bl	8000dda <LL_ADC_REG_IsConversionOngoing>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 8329 	bne.w	800175e <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b05      	cmp	r3, #5
 8001112:	d824      	bhi.n	800115e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	3b02      	subs	r3, #2
 800111a:	2b03      	cmp	r3, #3
 800111c:	d81b      	bhi.n	8001156 <HAL_ADC_ConfigChannel+0x86>
 800111e:	a201      	add	r2, pc, #4	; (adr r2, 8001124 <HAL_ADC_ConfigChannel+0x54>)
 8001120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001124:	08001135 	.word	0x08001135
 8001128:	0800113d 	.word	0x0800113d
 800112c:	08001145 	.word	0x08001145
 8001130:	0800114d 	.word	0x0800114d
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	220c      	movs	r2, #12
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	e011      	b.n	8001160 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	2212      	movs	r2, #18
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	e00d      	b.n	8001160 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	2218      	movs	r2, #24
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	e009      	b.n	8001160 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	e004      	b.n	8001160 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2206      	movs	r2, #6
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	e000      	b.n	8001160 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800115e:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	6859      	ldr	r1, [r3, #4]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	f7ff fd5d 	bl	8000c2c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fe2f 	bl	8000dda <LL_ADC_REG_IsConversionOngoing>
 800117c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fe3b 	bl	8000e00 <LL_ADC_INJ_IsConversionOngoing>
 800118a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800118e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001192:	2b00      	cmp	r3, #0
 8001194:	f040 8148 	bne.w	8001428 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001198:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800119c:	2b00      	cmp	r3, #0
 800119e:	f040 8143 	bne.w	8001428 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	461a      	mov	r2, r3
 80011b0:	f7ff fd65 	bl	8000c7e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	695a      	ldr	r2, [r3, #20]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	08db      	lsrs	r3, r3, #3
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d00a      	beq.n	80011ec <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	6919      	ldr	r1, [r3, #16]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011e6:	f7ff fcd3 	bl	8000b90 <LL_ADC_SetOffset>
 80011ea:	e11d      	b.n	8001428 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fcee 	bl	8000bd4 <LL_ADC_GetOffsetChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10a      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x148>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fce3 	bl	8000bd4 <LL_ADC_GetOffsetChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	0e9b      	lsrs	r3, r3, #26
 8001212:	f003 021f 	and.w	r2, r3, #31
 8001216:	e012      	b.n	800123e <HAL_ADC_ConfigChannel+0x16e>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fcd8 	bl	8000bd4 <LL_ADC_GetOffsetChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800122e:	fa93 f3a3 	rbit	r3, r3
 8001232:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001234:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <HAL_ADC_ConfigChannel+0x186>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	0e9b      	lsrs	r3, r3, #26
 8001250:	f003 031f 	and.w	r3, r3, #31
 8001254:	e00a      	b.n	800126c <HAL_ADC_ConfigChannel+0x19c>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800125e:	fa93 f3a3 	rbit	r3, r3
 8001262:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	429a      	cmp	r2, r3
 800126e:	d106      	bne.n	800127e <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fcbf 	bl	8000bfc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2101      	movs	r1, #1
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fca5 	bl	8000bd4 <LL_ADC_GetOffsetChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10a      	bne.n	80012aa <HAL_ADC_ConfigChannel+0x1da>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2101      	movs	r1, #1
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fc9a 	bl	8000bd4 <LL_ADC_GetOffsetChannel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	0e9b      	lsrs	r3, r3, #26
 80012a4:	f003 021f 	and.w	r2, r3, #31
 80012a8:	e010      	b.n	80012cc <HAL_ADC_ConfigChannel+0x1fc>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2101      	movs	r1, #1
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fc8f 	bl	8000bd4 <LL_ADC_GetOffsetChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012bc:	fa93 f3a3 	rbit	r3, r3
 80012c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80012c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012c4:	fab3 f383 	clz	r3, r3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d105      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x214>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	0e9b      	lsrs	r3, r3, #26
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	e00a      	b.n	80012fa <HAL_ADC_ConfigChannel+0x22a>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80012f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012f4:	fab3 f383 	clz	r3, r3
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d106      	bne.n	800130c <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2200      	movs	r2, #0
 8001304:	2101      	movs	r1, #1
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fc78 	bl	8000bfc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2102      	movs	r1, #2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fc5e 	bl	8000bd4 <LL_ADC_GetOffsetChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10a      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x268>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2102      	movs	r1, #2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fc53 	bl	8000bd4 <LL_ADC_GetOffsetChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	0e9b      	lsrs	r3, r3, #26
 8001332:	f003 021f 	and.w	r2, r3, #31
 8001336:	e010      	b.n	800135a <HAL_ADC_ConfigChannel+0x28a>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2102      	movs	r1, #2
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fc48 	bl	8000bd4 <LL_ADC_GetOffsetChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x2a2>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	0e9b      	lsrs	r3, r3, #26
 800136c:	f003 031f 	and.w	r3, r3, #31
 8001370:	e00a      	b.n	8001388 <HAL_ADC_ConfigChannel+0x2b8>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001378:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001382:	fab3 f383 	clz	r3, r3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	429a      	cmp	r2, r3
 800138a:	d106      	bne.n	800139a <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	2102      	movs	r1, #2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fc31 	bl	8000bfc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2103      	movs	r1, #3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fc17 	bl	8000bd4 <LL_ADC_GetOffsetChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10a      	bne.n	80013c6 <HAL_ADC_ConfigChannel+0x2f6>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2103      	movs	r1, #3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fc0c 	bl	8000bd4 <LL_ADC_GetOffsetChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	0e9b      	lsrs	r3, r3, #26
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	e010      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x318>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2103      	movs	r1, #3
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fc01 	bl	8000bd4 <LL_ADC_GetOffsetChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80013de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013e0:	fab3 f383 	clz	r3, r3
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d105      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x330>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	0e9b      	lsrs	r3, r3, #26
 80013fa:	f003 031f 	and.w	r3, r3, #31
 80013fe:	e00a      	b.n	8001416 <HAL_ADC_ConfigChannel+0x346>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001408:	fa93 f3a3 	rbit	r3, r3
 800140c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800140e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001410:	fab3 f383 	clz	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	429a      	cmp	r2, r3
 8001418:	d106      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2200      	movs	r2, #0
 8001420:	2103      	movs	r1, #3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fbea 	bl	8000bfc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fcc1 	bl	8000db4 <LL_ADC_IsEnabled>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	f040 810c 	bne.w	8001652 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	6819      	ldr	r1, [r3, #0]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	461a      	mov	r2, r3
 8001448:	f7ff fc42 	bl	8000cd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	4aad      	ldr	r2, [pc, #692]	; (8001708 <HAL_ADC_ConfigChannel+0x638>)
 8001452:	4293      	cmp	r3, r2
 8001454:	f040 80fd 	bne.w	8001652 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10b      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x3b0>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	0e9b      	lsrs	r3, r3, #26
 800146e:	3301      	adds	r3, #1
 8001470:	f003 031f 	and.w	r3, r3, #31
 8001474:	2b09      	cmp	r3, #9
 8001476:	bf94      	ite	ls
 8001478:	2301      	movls	r3, #1
 800147a:	2300      	movhi	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	e012      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x3d6>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001488:	fa93 f3a3 	rbit	r3, r3
 800148c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800148e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001490:	fab3 f383 	clz	r3, r3
 8001494:	b2db      	uxtb	r3, r3
 8001496:	3301      	adds	r3, #1
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	2b09      	cmp	r3, #9
 800149e:	bf94      	ite	ls
 80014a0:	2301      	movls	r3, #1
 80014a2:	2300      	movhi	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d064      	beq.n	8001574 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d107      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x3f6>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	0e9b      	lsrs	r3, r3, #26
 80014bc:	3301      	adds	r3, #1
 80014be:	069b      	lsls	r3, r3, #26
 80014c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014c4:	e00e      	b.n	80014e4 <HAL_ADC_ConfigChannel+0x414>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ce:	fa93 f3a3 	rbit	r3, r3
 80014d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80014d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d6:	fab3 f383 	clz	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3301      	adds	r3, #1
 80014de:	069b      	lsls	r3, r3, #26
 80014e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d109      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x434>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	0e9b      	lsrs	r3, r3, #26
 80014f6:	3301      	adds	r3, #1
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	2101      	movs	r1, #1
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	e010      	b.n	8001526 <HAL_ADC_ConfigChannel+0x456>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800150c:	fa93 f3a3 	rbit	r3, r3
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001514:	fab3 f383 	clz	r3, r3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	3301      	adds	r3, #1
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	2101      	movs	r1, #1
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	ea42 0103 	orr.w	r1, r2, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10a      	bne.n	800154c <HAL_ADC_ConfigChannel+0x47c>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	0e9b      	lsrs	r3, r3, #26
 800153c:	3301      	adds	r3, #1
 800153e:	f003 021f 	and.w	r2, r3, #31
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	051b      	lsls	r3, r3, #20
 800154a:	e011      	b.n	8001570 <HAL_ADC_ConfigChannel+0x4a0>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001554:	fa93 f3a3 	rbit	r3, r3
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	3301      	adds	r3, #1
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001570:	430b      	orrs	r3, r1
 8001572:	e069      	b.n	8001648 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800157c:	2b00      	cmp	r3, #0
 800157e:	d107      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x4c0>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0e9b      	lsrs	r3, r3, #26
 8001586:	3301      	adds	r3, #1
 8001588:	069b      	lsls	r3, r3, #26
 800158a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800158e:	e00e      	b.n	80015ae <HAL_ADC_ConfigChannel+0x4de>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	61fb      	str	r3, [r7, #28]
  return result;
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fab3 f383 	clz	r3, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	3301      	adds	r3, #1
 80015a8:	069b      	lsls	r3, r3, #26
 80015aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d109      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x4fe>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	0e9b      	lsrs	r3, r3, #26
 80015c0:	3301      	adds	r3, #1
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	2101      	movs	r1, #1
 80015c8:	fa01 f303 	lsl.w	r3, r1, r3
 80015cc:	e010      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x520>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa93 f3a3 	rbit	r3, r3
 80015da:	617b      	str	r3, [r7, #20]
  return result;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fab3 f383 	clz	r3, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	f003 031f 	and.w	r3, r3, #31
 80015ea:	2101      	movs	r1, #1
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	ea42 0103 	orr.w	r1, r2, r3
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10d      	bne.n	800161c <HAL_ADC_ConfigChannel+0x54c>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	0e9b      	lsrs	r3, r3, #26
 8001606:	3301      	adds	r3, #1
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	3b1e      	subs	r3, #30
 8001614:	051b      	lsls	r3, r3, #20
 8001616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800161a:	e014      	b.n	8001646 <HAL_ADC_ConfigChannel+0x576>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	60fb      	str	r3, [r7, #12]
  return result;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	fab3 f383 	clz	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	3301      	adds	r3, #1
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4613      	mov	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	3b1e      	subs	r3, #30
 8001640:	051b      	lsls	r3, r3, #20
 8001642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001646:	430b      	orrs	r3, r1
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	6892      	ldr	r2, [r2, #8]
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff fb16 	bl	8000c7e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b2d      	ldr	r3, [pc, #180]	; (800170c <HAL_ADC_ConfigChannel+0x63c>)
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 808c 	beq.w	8001778 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001660:	482b      	ldr	r0, [pc, #172]	; (8001710 <HAL_ADC_ConfigChannel+0x640>)
 8001662:	f7ff fa87 	bl	8000b74 <LL_ADC_GetCommonPathInternalCh>
 8001666:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a29      	ldr	r2, [pc, #164]	; (8001714 <HAL_ADC_ConfigChannel+0x644>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d12b      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x5fc>
 8001674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d125      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a24      	ldr	r2, [pc, #144]	; (8001718 <HAL_ADC_ConfigChannel+0x648>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d004      	beq.n	8001694 <HAL_ADC_ConfigChannel+0x5c4>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a23      	ldr	r2, [pc, #140]	; (800171c <HAL_ADC_ConfigChannel+0x64c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d16e      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001698:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800169c:	4619      	mov	r1, r3
 800169e:	481c      	ldr	r0, [pc, #112]	; (8001710 <HAL_ADC_ConfigChannel+0x640>)
 80016a0:	f7ff fa55 	bl	8000b4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <HAL_ADC_ConfigChannel+0x650>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	099b      	lsrs	r3, r3, #6
 80016aa:	4a1e      	ldr	r2, [pc, #120]	; (8001724 <HAL_ADC_ConfigChannel+0x654>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	099a      	lsrs	r2, r3, #6
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80016bc:	e002      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f9      	bne.n	80016be <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016ca:	e052      	b.n	8001772 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a15      	ldr	r2, [pc, #84]	; (8001728 <HAL_ADC_ConfigChannel+0x658>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d12a      	bne.n	800172c <HAL_ADC_ConfigChannel+0x65c>
 80016d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d124      	bne.n	800172c <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a0c      	ldr	r2, [pc, #48]	; (8001718 <HAL_ADC_ConfigChannel+0x648>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d004      	beq.n	80016f6 <HAL_ADC_ConfigChannel+0x626>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_ADC_ConfigChannel+0x64c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d13f      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016fe:	4619      	mov	r1, r3
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <HAL_ADC_ConfigChannel+0x640>)
 8001702:	f7ff fa24 	bl	8000b4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001706:	e036      	b.n	8001776 <HAL_ADC_ConfigChannel+0x6a6>
 8001708:	407f0000 	.word	0x407f0000
 800170c:	80080000 	.word	0x80080000
 8001710:	50040300 	.word	0x50040300
 8001714:	c7520000 	.word	0xc7520000
 8001718:	50040000 	.word	0x50040000
 800171c:	50040200 	.word	0x50040200
 8001720:	20000008 	.word	0x20000008
 8001724:	053e2d63 	.word	0x053e2d63
 8001728:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a16      	ldr	r2, [pc, #88]	; (800178c <HAL_ADC_ConfigChannel+0x6bc>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d120      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001736:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800173a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d11a      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <HAL_ADC_ConfigChannel+0x6c0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d115      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800174c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001750:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001754:	4619      	mov	r1, r3
 8001756:	480f      	ldr	r0, [pc, #60]	; (8001794 <HAL_ADC_ConfigChannel+0x6c4>)
 8001758:	f7ff f9f9 	bl	8000b4e <LL_ADC_SetCommonPathInternalCh>
 800175c:	e00c      	b.n	8001778 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001762:	f043 0220 	orr.w	r2, r3, #32
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001770:	e002      	b.n	8001778 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001772:	bf00      	nop
 8001774:	e000      	b.n	8001778 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001776:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001780:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001784:	4618      	mov	r0, r3
 8001786:	3798      	adds	r7, #152	; 0x98
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	80000001 	.word	0x80000001
 8001790:	50040000 	.word	0x50040000
 8001794:	50040300 	.word	0x50040300

08001798 <LL_ADC_IsEnabled>:
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <LL_ADC_IsEnabled+0x18>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <LL_ADC_IsEnabled+0x1a>
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <LL_ADC_REG_IsConversionOngoing>:
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d101      	bne.n	80017d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b09f      	sub	sp, #124	; 0x7c
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80017fe:	2302      	movs	r3, #2
 8001800:	e08f      	b.n	8001922 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a47      	ldr	r2, [pc, #284]	; (800192c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d102      	bne.n	800181a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001814:	4b46      	ldr	r3, [pc, #280]	; (8001930 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	e001      	b.n	800181e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10b      	bne.n	800183c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001828:	f043 0220 	orr.w	r2, r3, #32
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e072      	b.n	8001922 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ffbd 	bl	80017be <LL_ADC_REG_IsConversionOngoing>
 8001844:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ffb7 	bl	80017be <LL_ADC_REG_IsConversionOngoing>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d154      	bne.n	8001900 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001858:	2b00      	cmp	r3, #0
 800185a:	d151      	bne.n	8001900 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800185c:	4b35      	ldr	r3, [pc, #212]	; (8001934 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800185e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d02c      	beq.n	80018c2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	6859      	ldr	r1, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800187a:	035b      	lsls	r3, r3, #13
 800187c:	430b      	orrs	r3, r1
 800187e:	431a      	orrs	r2, r3
 8001880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001882:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001884:	4829      	ldr	r0, [pc, #164]	; (800192c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001886:	f7ff ff87 	bl	8001798 <LL_ADC_IsEnabled>
 800188a:	4604      	mov	r4, r0
 800188c:	4828      	ldr	r0, [pc, #160]	; (8001930 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800188e:	f7ff ff83 	bl	8001798 <LL_ADC_IsEnabled>
 8001892:	4603      	mov	r3, r0
 8001894:	431c      	orrs	r4, r3
 8001896:	4828      	ldr	r0, [pc, #160]	; (8001938 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001898:	f7ff ff7e 	bl	8001798 <LL_ADC_IsEnabled>
 800189c:	4603      	mov	r3, r0
 800189e:	4323      	orrs	r3, r4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d137      	bne.n	8001914 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80018a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80018ac:	f023 030f 	bic.w	r3, r3, #15
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	6811      	ldr	r1, [r2, #0]
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	6892      	ldr	r2, [r2, #8]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	431a      	orrs	r2, r3
 80018bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018be:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80018c0:	e028      	b.n	8001914 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80018c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018ce:	4817      	ldr	r0, [pc, #92]	; (800192c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80018d0:	f7ff ff62 	bl	8001798 <LL_ADC_IsEnabled>
 80018d4:	4604      	mov	r4, r0
 80018d6:	4816      	ldr	r0, [pc, #88]	; (8001930 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80018d8:	f7ff ff5e 	bl	8001798 <LL_ADC_IsEnabled>
 80018dc:	4603      	mov	r3, r0
 80018de:	431c      	orrs	r4, r3
 80018e0:	4815      	ldr	r0, [pc, #84]	; (8001938 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80018e2:	f7ff ff59 	bl	8001798 <LL_ADC_IsEnabled>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4323      	orrs	r3, r4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d112      	bne.n	8001914 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80018ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80018f6:	f023 030f 	bic.w	r3, r3, #15
 80018fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80018fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80018fe:	e009      	b.n	8001914 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001904:	f043 0220 	orr.w	r2, r3, #32
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001912:	e000      	b.n	8001916 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001914:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800191e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001922:	4618      	mov	r0, r3
 8001924:	377c      	adds	r7, #124	; 0x7c
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	50040000 	.word	0x50040000
 8001930:	50040100 	.word	0x50040100
 8001934:	50040300 	.word	0x50040300
 8001938:	50040200 	.word	0x50040200

0800193c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e0ed      	b.n	8001b2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f005 f846 	bl	80069ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0202 	bic.w	r2, r2, #2
 800196e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001970:	f7ff f8ac 	bl	8000acc <HAL_GetTick>
 8001974:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001976:	e012      	b.n	800199e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001978:	f7ff f8a8 	bl	8000acc <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b0a      	cmp	r3, #10
 8001984:	d90b      	bls.n	800199e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2205      	movs	r2, #5
 8001996:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e0c5      	b.n	8001b2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1e5      	bne.n	8001978 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019bc:	f7ff f886 	bl	8000acc <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019c2:	e012      	b.n	80019ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019c4:	f7ff f882 	bl	8000acc <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b0a      	cmp	r3, #10
 80019d0:	d90b      	bls.n	80019ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2205      	movs	r2, #5
 80019e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e09f      	b.n	8001b2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0e5      	beq.n	80019c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7e1b      	ldrb	r3, [r3, #24]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d108      	bne.n	8001a12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e007      	b.n	8001a22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7e5b      	ldrb	r3, [r3, #25]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d108      	bne.n	8001a3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	e007      	b.n	8001a4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7e9b      	ldrb	r3, [r3, #26]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d108      	bne.n	8001a66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0220 	orr.w	r2, r2, #32
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e007      	b.n	8001a76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0220 	bic.w	r2, r2, #32
 8001a74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7edb      	ldrb	r3, [r3, #27]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d108      	bne.n	8001a90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0210 	bic.w	r2, r2, #16
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	e007      	b.n	8001aa0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0210 	orr.w	r2, r2, #16
 8001a9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7f1b      	ldrb	r3, [r3, #28]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d108      	bne.n	8001aba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0208 	orr.w	r2, r2, #8
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	e007      	b.n	8001aca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0208 	bic.w	r2, r2, #8
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7f5b      	ldrb	r3, [r3, #29]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d108      	bne.n	8001ae4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0204 	orr.w	r2, r2, #4
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e007      	b.n	8001af4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0204 	bic.w	r2, r2, #4
 8001af2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	ea42 0103 	orr.w	r1, r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	1e5a      	subs	r2, r3, #1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b087      	sub	sp, #28
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b48:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b4a:	7cfb      	ldrb	r3, [r7, #19]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d003      	beq.n	8001b58 <HAL_CAN_ConfigFilter+0x26>
 8001b50:	7cfb      	ldrb	r3, [r7, #19]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	f040 80aa 	bne.w	8001cac <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b5e:	f043 0201 	orr.w	r2, r3, #1
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	2201      	movs	r2, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d123      	bne.n	8001bda <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bb4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3248      	adds	r2, #72	; 0x48
 8001bba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bd0:	6979      	ldr	r1, [r7, #20]
 8001bd2:	3348      	adds	r3, #72	; 0x48
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d122      	bne.n	8001c28 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	431a      	orrs	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c02:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3248      	adds	r2, #72	; 0x48
 8001c08:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c1c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c1e:	6979      	ldr	r1, [r7, #20]
 8001c20:	3348      	adds	r3, #72	; 0x48
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d109      	bne.n	8001c44 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c42:	e007      	b.n	8001c54 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d109      	bne.n	8001c70 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c6e:	e007      	b.n	8001c80 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d107      	bne.n	8001c98 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c9e:	f023 0201 	bic.w	r2, r3, #1
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e006      	b.n	8001cba <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
  }
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	371c      	adds	r7, #28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d12e      	bne.n	8001d38 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cf2:	f7fe feeb 	bl	8000acc <HAL_GetTick>
 8001cf6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cf8:	e012      	b.n	8001d20 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cfa:	f7fe fee7 	bl	8000acc <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b0a      	cmp	r3, #10
 8001d06:	d90b      	bls.n	8001d20 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2205      	movs	r2, #5
 8001d18:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e012      	b.n	8001d46 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1e5      	bne.n	8001cfa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e006      	b.n	8001d46 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
  }
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b089      	sub	sp, #36	; 0x24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d62:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d6c:	7ffb      	ldrb	r3, [r7, #31]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d003      	beq.n	8001d7a <HAL_CAN_AddTxMessage+0x2c>
 8001d72:	7ffb      	ldrb	r3, [r7, #31]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	f040 80b8 	bne.w	8001eea <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10a      	bne.n	8001d9a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d105      	bne.n	8001d9a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80a0 	beq.w	8001eda <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	0e1b      	lsrs	r3, r3, #24
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d907      	bls.n	8001dba <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e09e      	b.n	8001ef8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001dba:	2201      	movs	r2, #1
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10d      	bne.n	8001de8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dd6:	68f9      	ldr	r1, [r7, #12]
 8001dd8:	6809      	ldr	r1, [r1, #0]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	3318      	adds	r3, #24
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	440b      	add	r3, r1
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	e00f      	b.n	8001e08 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001df2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001df8:	68f9      	ldr	r1, [r7, #12]
 8001dfa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001dfc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3318      	adds	r3, #24
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	440b      	add	r3, r1
 8001e06:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6819      	ldr	r1, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3318      	adds	r3, #24
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	440b      	add	r3, r1
 8001e18:	3304      	adds	r3, #4
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	7d1b      	ldrb	r3, [r3, #20]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d111      	bne.n	8001e48 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3318      	adds	r3, #24
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	4413      	add	r3, r2
 8001e30:	3304      	adds	r3, #4
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	6811      	ldr	r1, [r2, #0]
 8001e38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3318      	adds	r3, #24
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	440b      	add	r3, r1
 8001e44:	3304      	adds	r3, #4
 8001e46:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3307      	adds	r3, #7
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	061a      	lsls	r2, r3, #24
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3306      	adds	r3, #6
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	041b      	lsls	r3, r3, #16
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3305      	adds	r3, #5
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	4313      	orrs	r3, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	3204      	adds	r2, #4
 8001e68:	7812      	ldrb	r2, [r2, #0]
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	6811      	ldr	r1, [r2, #0]
 8001e70:	ea43 0200 	orr.w	r2, r3, r0
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	440b      	add	r3, r1
 8001e7a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e7e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3303      	adds	r3, #3
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	061a      	lsls	r2, r3, #24
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	041b      	lsls	r3, r3, #16
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3301      	adds	r3, #1
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	021b      	lsls	r3, r3, #8
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	7812      	ldrb	r2, [r2, #0]
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	6811      	ldr	r1, [r2, #0]
 8001ea6:	ea43 0200 	orr.w	r2, r3, r0
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	440b      	add	r3, r1
 8001eb0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001eb4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3318      	adds	r3, #24
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	4413      	add	r3, r2
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	6811      	ldr	r1, [r2, #0]
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3318      	adds	r3, #24
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	440b      	add	r3, r1
 8001ed4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e00e      	b.n	8001ef8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e006      	b.n	8001ef8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
  }
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3724      	adds	r7, #36	; 0x24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f16:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f18:	7afb      	ldrb	r3, [r7, #11]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d002      	beq.n	8001f24 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001f1e:	7afb      	ldrb	r3, [r7, #11]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d11d      	bne.n	8001f60 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3301      	adds	r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001f60:	68fb      	ldr	r3, [r7, #12]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa2:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	60d3      	str	r3, [r2, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 0307 	and.w	r3, r3, #7
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	; (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	; (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a0:	d301      	bcc.n	80020a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00f      	b.n	80020c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <SysTick_Config+0x40>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ae:	210f      	movs	r1, #15
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f7ff ff8e 	bl	8001fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <SysTick_Config+0x40>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <SysTick_Config+0x40>)
 80020c0:	2207      	movs	r2, #7
 80020c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	e000e010 	.word	0xe000e010

080020d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff47 	bl	8001f70 <__NVIC_SetPriorityGrouping>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020fc:	f7ff ff5c 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 8002100:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	6978      	ldr	r0, [r7, #20]
 8002108:	f7ff ff8e 	bl	8002028 <NVIC_EncodePriority>
 800210c:	4602      	mov	r2, r0
 800210e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff5d 	bl	8001fd4 <__NVIC_SetPriority>
}
 800211a:	bf00      	nop
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffb0 	bl	8002090 <SysTick_Config>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214a:	e17f      	b.n	800244c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2101      	movs	r1, #1
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	4013      	ands	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8171 	beq.w	8002446 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x38>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b12      	cmp	r3, #18
 8002172:	d123      	bne.n	80021bc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	08da      	lsrs	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3208      	adds	r2, #8
 800217c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	08da      	lsrs	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3208      	adds	r2, #8
 80021b6:	6939      	ldr	r1, [r7, #16]
 80021b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4013      	ands	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0203 	and.w	r2, r3, #3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d00b      	beq.n	8002210 <HAL_GPIO_Init+0xd4>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d007      	beq.n	8002210 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002204:	2b11      	cmp	r3, #17
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b12      	cmp	r3, #18
 800220e:	d130      	bne.n	8002272 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002246:	2201      	movs	r2, #1
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	f003 0201 	and.w	r2, r3, #1
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b03      	cmp	r3, #3
 800227c:	d118      	bne.n	80022b0 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002284:	2201      	movs	r2, #1
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	f003 0201 	and.w	r2, r3, #1
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80ac 	beq.w	8002446 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	4b5e      	ldr	r3, [pc, #376]	; (8002468 <HAL_GPIO_Init+0x32c>)
 80022f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f2:	4a5d      	ldr	r2, [pc, #372]	; (8002468 <HAL_GPIO_Init+0x32c>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6613      	str	r3, [r2, #96]	; 0x60
 80022fa:	4b5b      	ldr	r3, [pc, #364]	; (8002468 <HAL_GPIO_Init+0x32c>)
 80022fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002306:	4a59      	ldr	r2, [pc, #356]	; (800246c <HAL_GPIO_Init+0x330>)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002312:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	220f      	movs	r2, #15
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002330:	d025      	beq.n	800237e <HAL_GPIO_Init+0x242>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4e      	ldr	r2, [pc, #312]	; (8002470 <HAL_GPIO_Init+0x334>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d01f      	beq.n	800237a <HAL_GPIO_Init+0x23e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4d      	ldr	r2, [pc, #308]	; (8002474 <HAL_GPIO_Init+0x338>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d019      	beq.n	8002376 <HAL_GPIO_Init+0x23a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4c      	ldr	r2, [pc, #304]	; (8002478 <HAL_GPIO_Init+0x33c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <HAL_GPIO_Init+0x236>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4b      	ldr	r2, [pc, #300]	; (800247c <HAL_GPIO_Init+0x340>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00d      	beq.n	800236e <HAL_GPIO_Init+0x232>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4a      	ldr	r2, [pc, #296]	; (8002480 <HAL_GPIO_Init+0x344>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <HAL_GPIO_Init+0x22e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a49      	ldr	r2, [pc, #292]	; (8002484 <HAL_GPIO_Init+0x348>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d101      	bne.n	8002366 <HAL_GPIO_Init+0x22a>
 8002362:	2306      	movs	r3, #6
 8002364:	e00c      	b.n	8002380 <HAL_GPIO_Init+0x244>
 8002366:	2307      	movs	r3, #7
 8002368:	e00a      	b.n	8002380 <HAL_GPIO_Init+0x244>
 800236a:	2305      	movs	r3, #5
 800236c:	e008      	b.n	8002380 <HAL_GPIO_Init+0x244>
 800236e:	2304      	movs	r3, #4
 8002370:	e006      	b.n	8002380 <HAL_GPIO_Init+0x244>
 8002372:	2303      	movs	r3, #3
 8002374:	e004      	b.n	8002380 <HAL_GPIO_Init+0x244>
 8002376:	2302      	movs	r3, #2
 8002378:	e002      	b.n	8002380 <HAL_GPIO_Init+0x244>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <HAL_GPIO_Init+0x244>
 800237e:	2300      	movs	r3, #0
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	f002 0203 	and.w	r2, r2, #3
 8002386:	0092      	lsls	r2, r2, #2
 8002388:	4093      	lsls	r3, r2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002390:	4936      	ldr	r1, [pc, #216]	; (800246c <HAL_GPIO_Init+0x330>)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	3302      	adds	r3, #2
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800239e:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <HAL_GPIO_Init+0x34c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023c2:	4a31      	ldr	r2, [pc, #196]	; (8002488 <HAL_GPIO_Init+0x34c>)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80023c8:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <HAL_GPIO_Init+0x34c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023ec:	4a26      	ldr	r2, [pc, #152]	; (8002488 <HAL_GPIO_Init+0x34c>)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023f2:	4b25      	ldr	r3, [pc, #148]	; (8002488 <HAL_GPIO_Init+0x34c>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <HAL_GPIO_Init+0x34c>)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <HAL_GPIO_Init+0x34c>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	43db      	mvns	r3, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002440:	4a11      	ldr	r2, [pc, #68]	; (8002488 <HAL_GPIO_Init+0x34c>)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	3301      	adds	r3, #1
 800244a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa22 f303 	lsr.w	r3, r2, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	f47f ae78 	bne.w	800214c <HAL_GPIO_Init+0x10>
  }
}
 800245c:	bf00      	nop
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40021000 	.word	0x40021000
 800246c:	40010000 	.word	0x40010000
 8002470:	48000400 	.word	0x48000400
 8002474:	48000800 	.word	0x48000800
 8002478:	48000c00 	.word	0x48000c00
 800247c:	48001000 	.word	0x48001000
 8002480:	48001400 	.word	0x48001400
 8002484:	48001800 	.word	0x48001800
 8002488:	40010400 	.word	0x40010400

0800248c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800249c:	787b      	ldrb	r3, [r7, #1]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024a8:	e002      	b.n	80024b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e081      	b.n	80025d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f004 fac6 	bl	8006a74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2224      	movs	r2, #36	; 0x24
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800250c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800251c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d107      	bne.n	8002536 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	e006      	b.n	8002544 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002542:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d104      	bne.n	8002556 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002554:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002568:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002578:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691a      	ldr	r2, [r3, #16]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	ea42 0103 	orr.w	r1, r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	021a      	lsls	r2, r3, #8
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69d9      	ldr	r1, [r3, #28]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1a      	ldr	r2, [r3, #32]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	461a      	mov	r2, r3
 80025e8:	460b      	mov	r3, r1
 80025ea:	817b      	strh	r3, [r7, #10]
 80025ec:	4613      	mov	r3, r2
 80025ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	f040 80da 	bne.w	80027b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_I2C_Master_Transmit+0x30>
 8002608:	2302      	movs	r3, #2
 800260a:	e0d3      	b.n	80027b4 <HAL_I2C_Master_Transmit+0x1d8>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002614:	f7fe fa5a 	bl	8000acc <HAL_GetTick>
 8002618:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2319      	movs	r3, #25
 8002620:	2201      	movs	r2, #1
 8002622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f9e6 	bl	80029f8 <I2C_WaitOnFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e0be      	b.n	80027b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2221      	movs	r2, #33	; 0x21
 800263a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2210      	movs	r2, #16
 8002642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	893a      	ldrh	r2, [r7, #8]
 8002656:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	2bff      	cmp	r3, #255	; 0xff
 8002666:	d90e      	bls.n	8002686 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	22ff      	movs	r2, #255	; 0xff
 800266c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	b2da      	uxtb	r2, r3
 8002674:	8979      	ldrh	r1, [r7, #10]
 8002676:	4b51      	ldr	r3, [pc, #324]	; (80027bc <HAL_I2C_Master_Transmit+0x1e0>)
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fb48 	bl	8002d14 <I2C_TransferConfig>
 8002684:	e06c      	b.n	8002760 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	b2da      	uxtb	r2, r3
 8002696:	8979      	ldrh	r1, [r7, #10]
 8002698:	4b48      	ldr	r3, [pc, #288]	; (80027bc <HAL_I2C_Master_Transmit+0x1e0>)
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fb37 	bl	8002d14 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80026a6:	e05b      	b.n	8002760 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	6a39      	ldr	r1, [r7, #32]
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 f9e3 	bl	8002a78 <I2C_WaitOnTXISFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e07b      	b.n	80027b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	781a      	ldrb	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d034      	beq.n	8002760 <HAL_I2C_Master_Transmit+0x184>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d130      	bne.n	8002760 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	2200      	movs	r2, #0
 8002706:	2180      	movs	r1, #128	; 0x80
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 f975 	bl	80029f8 <I2C_WaitOnFlagUntilTimeout>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e04d      	b.n	80027b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	2bff      	cmp	r3, #255	; 0xff
 8002720:	d90e      	bls.n	8002740 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	22ff      	movs	r2, #255	; 0xff
 8002726:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272c:	b2da      	uxtb	r2, r3
 800272e:	8979      	ldrh	r1, [r7, #10]
 8002730:	2300      	movs	r3, #0
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 faeb 	bl	8002d14 <I2C_TransferConfig>
 800273e:	e00f      	b.n	8002760 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	b2da      	uxtb	r2, r3
 8002750:	8979      	ldrh	r1, [r7, #10]
 8002752:	2300      	movs	r3, #0
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fada 	bl	8002d14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d19e      	bne.n	80026a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	6a39      	ldr	r1, [r7, #32]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f9c2 	bl	8002af8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e01a      	b.n	80027b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2220      	movs	r2, #32
 8002784:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_I2C_Master_Transmit+0x1e4>)
 8002792:	400b      	ands	r3, r1
 8002794:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
  }
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	80002000 	.word	0x80002000
 80027c0:	fe00e800 	.word	0xfe00e800

080027c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	461a      	mov	r2, r3
 80027d0:	460b      	mov	r3, r1
 80027d2:	817b      	strh	r3, [r7, #10]
 80027d4:	4613      	mov	r3, r2
 80027d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	f040 80db 	bne.w	800299c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_I2C_Master_Receive+0x30>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e0d4      	b.n	800299e <HAL_I2C_Master_Receive+0x1da>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027fc:	f7fe f966 	bl	8000acc <HAL_GetTick>
 8002800:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2319      	movs	r3, #25
 8002808:	2201      	movs	r2, #1
 800280a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f8f2 	bl	80029f8 <I2C_WaitOnFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0bf      	b.n	800299e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2222      	movs	r2, #34	; 0x22
 8002822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2210      	movs	r2, #16
 800282a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	893a      	ldrh	r2, [r7, #8]
 800283e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	2bff      	cmp	r3, #255	; 0xff
 800284e:	d90e      	bls.n	800286e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	22ff      	movs	r2, #255	; 0xff
 8002854:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	b2da      	uxtb	r2, r3
 800285c:	8979      	ldrh	r1, [r7, #10]
 800285e:	4b52      	ldr	r3, [pc, #328]	; (80029a8 <HAL_I2C_Master_Receive+0x1e4>)
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fa54 	bl	8002d14 <I2C_TransferConfig>
 800286c:	e06d      	b.n	800294a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287c:	b2da      	uxtb	r2, r3
 800287e:	8979      	ldrh	r1, [r7, #10]
 8002880:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <HAL_I2C_Master_Receive+0x1e4>)
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fa43 	bl	8002d14 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800288e:	e05c      	b.n	800294a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	6a39      	ldr	r1, [r7, #32]
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f96b 	bl	8002b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e07c      	b.n	800299e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d034      	beq.n	800294a <HAL_I2C_Master_Receive+0x186>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d130      	bne.n	800294a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	2200      	movs	r2, #0
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f880 	bl	80029f8 <I2C_WaitOnFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e04d      	b.n	800299e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	2bff      	cmp	r3, #255	; 0xff
 800290a:	d90e      	bls.n	800292a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	22ff      	movs	r2, #255	; 0xff
 8002910:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	b2da      	uxtb	r2, r3
 8002918:	8979      	ldrh	r1, [r7, #10]
 800291a:	2300      	movs	r3, #0
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f9f6 	bl	8002d14 <I2C_TransferConfig>
 8002928:	e00f      	b.n	800294a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	b2da      	uxtb	r2, r3
 800293a:	8979      	ldrh	r1, [r7, #10]
 800293c:	2300      	movs	r3, #0
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f9e5 	bl	8002d14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d19d      	bne.n	8002890 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	6a39      	ldr	r1, [r7, #32]
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f8cd 	bl	8002af8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e01a      	b.n	800299e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2220      	movs	r2, #32
 800296e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6859      	ldr	r1, [r3, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <HAL_I2C_Master_Receive+0x1e8>)
 800297c:	400b      	ands	r3, r1
 800297e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	e000      	b.n	800299e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800299c:	2302      	movs	r3, #2
  }
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	80002400 	.word	0x80002400
 80029ac:	fe00e800 	.word	0xfe00e800

080029b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d103      	bne.n	80029ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2200      	movs	r2, #0
 80029cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d007      	beq.n	80029ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	619a      	str	r2, [r3, #24]
  }
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a08:	e022      	b.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d01e      	beq.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a12:	f7fe f85b 	bl	8000acc <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d302      	bcc.n	8002a28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d113      	bne.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	f043 0220 	orr.w	r2, r3, #32
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e00f      	b.n	8002a70 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	461a      	mov	r2, r3
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d0cd      	beq.n	8002a0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a84:	e02c      	b.n	8002ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f8dc 	bl	8002c48 <I2C_IsAcknowledgeFailed>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e02a      	b.n	8002af0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa0:	d01e      	beq.n	8002ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa2:	f7fe f813 	bl	8000acc <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d302      	bcc.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d113      	bne.n	8002ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e007      	b.n	8002af0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d1cb      	bne.n	8002a86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b04:	e028      	b.n	8002b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f89c 	bl	8002c48 <I2C_IsAcknowledgeFailed>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e026      	b.n	8002b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7fd ffd7 	bl	8000acc <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d113      	bne.n	8002b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	f043 0220 	orr.w	r2, r3, #32
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e007      	b.n	8002b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d1cf      	bne.n	8002b06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b7c:	e055      	b.n	8002c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f860 	bl	8002c48 <I2C_IsAcknowledgeFailed>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e053      	b.n	8002c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	d129      	bne.n	8002bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d105      	bne.n	8002bba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e03f      	b.n	8002c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002bce:	400b      	ands	r3, r1
 8002bd0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e022      	b.n	8002c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf4:	f7fd ff6a 	bl	8000acc <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d302      	bcc.n	8002c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10f      	bne.n	8002c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	f043 0220 	orr.w	r2, r3, #32
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e007      	b.n	8002c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d1a2      	bne.n	8002b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	fe00e800 	.word	0xfe00e800

08002c48 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b10      	cmp	r3, #16
 8002c60:	d151      	bne.n	8002d06 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c62:	e022      	b.n	8002caa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6a:	d01e      	beq.n	8002caa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6c:	f7fd ff2e 	bl	8000acc <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d302      	bcc.n	8002c82 <I2C_IsAcknowledgeFailed+0x3a>
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d113      	bne.n	8002caa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f043 0220 	orr.w	r2, r3, #32
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e02e      	b.n	8002d08 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d1d5      	bne.n	8002c64 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7ff fe71 	bl	80029b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <I2C_IsAcknowledgeFailed+0xc8>)
 8002cda:	400b      	ands	r3, r1
 8002cdc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	f043 0204 	orr.w	r2, r3, #4
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	fe00e800 	.word	0xfe00e800

08002d14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	817b      	strh	r3, [r7, #10]
 8002d22:	4613      	mov	r3, r2
 8002d24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	0d5b      	lsrs	r3, r3, #21
 8002d30:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d34:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <I2C_TransferConfig+0x58>)
 8002d36:	430b      	orrs	r3, r1
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	ea02 0103 	and.w	r1, r2, r3
 8002d3e:	897b      	ldrh	r3, [r7, #10]
 8002d40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d44:	7a7b      	ldrb	r3, [r7, #9]
 8002d46:	041b      	lsls	r3, r3, #16
 8002d48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	03ff63ff 	.word	0x03ff63ff

08002d70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d138      	bne.n	8002df8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e032      	b.n	8002dfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2224      	movs	r2, #36	; 0x24
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0201 	bic.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6819      	ldr	r1, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e000      	b.n	8002dfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
  }
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d139      	bne.n	8002e90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e033      	b.n	8002e92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2224      	movs	r2, #36	; 0x24
 8002e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0201 	bic.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e000      	b.n	8002e92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e90:	2302      	movs	r3, #2
  }
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40007000 	.word	0x40007000

08002ebc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eca:	d130      	bne.n	8002f2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ecc:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed8:	d038      	beq.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eda:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ee8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eea:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2232      	movs	r2, #50	; 0x32
 8002ef0:	fb02 f303 	mul.w	r3, r2, r3
 8002ef4:	4a1b      	ldr	r2, [pc, #108]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	0c9b      	lsrs	r3, r3, #18
 8002efc:	3301      	adds	r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f00:	e002      	b.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f08:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f14:	d102      	bne.n	8002f1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f2      	bne.n	8002f02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f28:	d110      	bne.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e00f      	b.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3a:	d007      	beq.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f3c:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f44:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	20000008 	.word	0x20000008
 8002f64:	431bde83 	.word	0x431bde83

08002f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e39d      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7a:	4ba4      	ldr	r3, [pc, #656]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f84:	4ba1      	ldr	r3, [pc, #644]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80e1 	beq.w	800315e <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d007      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x4a>
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b0c      	cmp	r3, #12
 8002fa6:	f040 8088 	bne.w	80030ba <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	f040 8084 	bne.w	80030ba <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fb2:	4b96      	ldr	r3, [pc, #600]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_RCC_OscConfig+0x62>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e375      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1a      	ldr	r2, [r3, #32]
 8002fce:	4b8f      	ldr	r3, [pc, #572]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d004      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x7c>
 8002fda:	4b8c      	ldr	r3, [pc, #560]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe2:	e005      	b.n	8002ff0 <HAL_RCC_OscConfig+0x88>
 8002fe4:	4b89      	ldr	r3, [pc, #548]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 8002fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fea:	091b      	lsrs	r3, r3, #4
 8002fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d223      	bcs.n	800303c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fcd1 	bl	80039a0 <RCC_SetFlashLatencyFromMSIRange>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e356      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003008:	4b80      	ldr	r3, [pc, #512]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7f      	ldr	r2, [pc, #508]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 800300e:	f043 0308 	orr.w	r3, r3, #8
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	4b7d      	ldr	r3, [pc, #500]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	497a      	ldr	r1, [pc, #488]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003026:	4b79      	ldr	r3, [pc, #484]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	4975      	ldr	r1, [pc, #468]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]
 800303a:	e022      	b.n	8003082 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800303c:	4b73      	ldr	r3, [pc, #460]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a72      	ldr	r2, [pc, #456]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 8003042:	f043 0308 	orr.w	r3, r3, #8
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b70      	ldr	r3, [pc, #448]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	496d      	ldr	r1, [pc, #436]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800305a:	4b6c      	ldr	r3, [pc, #432]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	4968      	ldr	r1, [pc, #416]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fc94 	bl	80039a0 <RCC_SetFlashLatencyFromMSIRange>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e319      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003082:	f000 fc03 	bl	800388c <HAL_RCC_GetSysClockFreq>
 8003086:	4601      	mov	r1, r0
 8003088:	4b60      	ldr	r3, [pc, #384]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	4a5f      	ldr	r2, [pc, #380]	; (8003210 <HAL_RCC_OscConfig+0x2a8>)
 8003094:	5cd3      	ldrb	r3, [r2, r3]
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	fa21 f303 	lsr.w	r3, r1, r3
 800309e:	4a5d      	ldr	r2, [pc, #372]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030a2:	4b5d      	ldr	r3, [pc, #372]	; (8003218 <HAL_RCC_OscConfig+0x2b0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd fcc4 	bl	8000a34 <HAL_InitTick>
 80030ac:	4603      	mov	r3, r0
 80030ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d052      	beq.n	800315c <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	e2fd      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d032      	beq.n	8003128 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030c2:	4b52      	ldr	r3, [pc, #328]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a51      	ldr	r2, [pc, #324]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030ce:	f7fd fcfd 	bl	8000acc <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030d6:	f7fd fcf9 	bl	8000acc <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e2e6      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030e8:	4b48      	ldr	r3, [pc, #288]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f4:	4b45      	ldr	r3, [pc, #276]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a44      	ldr	r2, [pc, #272]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80030fa:	f043 0308 	orr.w	r3, r3, #8
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b42      	ldr	r3, [pc, #264]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	493f      	ldr	r1, [pc, #252]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003112:	4b3e      	ldr	r3, [pc, #248]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	493a      	ldr	r1, [pc, #232]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 8003122:	4313      	orrs	r3, r2
 8003124:	604b      	str	r3, [r1, #4]
 8003126:	e01a      	b.n	800315e <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003128:	4b38      	ldr	r3, [pc, #224]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a37      	ldr	r2, [pc, #220]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003134:	f7fd fcca 	bl	8000acc <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800313c:	f7fd fcc6 	bl	8000acc <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e2b3      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800314e:	4b2f      	ldr	r3, [pc, #188]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x1d4>
 800315a:	e000      	b.n	800315e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800315c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d074      	beq.n	8003254 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d005      	beq.n	800317c <HAL_RCC_OscConfig+0x214>
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b0c      	cmp	r3, #12
 8003174:	d10e      	bne.n	8003194 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d10b      	bne.n	8003194 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317c:	4b23      	ldr	r3, [pc, #140]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d064      	beq.n	8003252 <HAL_RCC_OscConfig+0x2ea>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d160      	bne.n	8003252 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e290      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319c:	d106      	bne.n	80031ac <HAL_RCC_OscConfig+0x244>
 800319e:	4b1b      	ldr	r3, [pc, #108]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1a      	ldr	r2, [pc, #104]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e01d      	b.n	80031e8 <HAL_RCC_OscConfig+0x280>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x268>
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a14      	ldr	r2, [pc, #80]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80031bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	4b12      	ldr	r3, [pc, #72]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a11      	ldr	r2, [pc, #68]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e00b      	b.n	80031e8 <HAL_RCC_OscConfig+0x280>
 80031d0:	4b0e      	ldr	r3, [pc, #56]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a0d      	ldr	r2, [pc, #52]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80031d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0a      	ldr	r2, [pc, #40]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80031e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01c      	beq.n	800322a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fd fc6c 	bl	8000acc <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f6:	e011      	b.n	800321c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f8:	f7fd fc68 	bl	8000acc <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d90a      	bls.n	800321c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e255      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	08007068 	.word	0x08007068
 8003214:	20000008 	.word	0x20000008
 8003218:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800321c:	4bae      	ldr	r3, [pc, #696]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0e7      	beq.n	80031f8 <HAL_RCC_OscConfig+0x290>
 8003228:	e014      	b.n	8003254 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fd fc4f 	bl	8000acc <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003232:	f7fd fc4b 	bl	8000acc <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b64      	cmp	r3, #100	; 0x64
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e238      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003244:	4ba4      	ldr	r3, [pc, #656]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f0      	bne.n	8003232 <HAL_RCC_OscConfig+0x2ca>
 8003250:	e000      	b.n	8003254 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003252:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d060      	beq.n	8003322 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b04      	cmp	r3, #4
 8003264:	d005      	beq.n	8003272 <HAL_RCC_OscConfig+0x30a>
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b0c      	cmp	r3, #12
 800326a:	d119      	bne.n	80032a0 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d116      	bne.n	80032a0 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003272:	4b99      	ldr	r3, [pc, #612]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_RCC_OscConfig+0x322>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e215      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328a:	4b93      	ldr	r3, [pc, #588]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	061b      	lsls	r3, r3, #24
 8003298:	498f      	ldr	r1, [pc, #572]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 800329a:	4313      	orrs	r3, r2
 800329c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800329e:	e040      	b.n	8003322 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d023      	beq.n	80032f0 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a8:	4b8b      	ldr	r3, [pc, #556]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a8a      	ldr	r2, [pc, #552]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 80032ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fd fc0a 	bl	8000acc <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032bc:	f7fd fc06 	bl	8000acc <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e1f3      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ce:	4b82      	ldr	r3, [pc, #520]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032da:	4b7f      	ldr	r3, [pc, #508]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	061b      	lsls	r3, r3, #24
 80032e8:	497b      	ldr	r1, [pc, #492]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
 80032ee:	e018      	b.n	8003322 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f0:	4b79      	ldr	r3, [pc, #484]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a78      	ldr	r2, [pc, #480]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 80032f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fd fbe6 	bl	8000acc <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003304:	f7fd fbe2 	bl	8000acc <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e1cf      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003316:	4b70      	ldr	r3, [pc, #448]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d03c      	beq.n	80033a8 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01c      	beq.n	8003370 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003336:	4b68      	ldr	r3, [pc, #416]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 8003338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800333c:	4a66      	ldr	r2, [pc, #408]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003346:	f7fd fbc1 	bl	8000acc <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334e:	f7fd fbbd 	bl	8000acc <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e1aa      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003360:	4b5d      	ldr	r3, [pc, #372]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 8003362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0ef      	beq.n	800334e <HAL_RCC_OscConfig+0x3e6>
 800336e:	e01b      	b.n	80033a8 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003370:	4b59      	ldr	r3, [pc, #356]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 8003372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003376:	4a58      	ldr	r2, [pc, #352]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fd fba4 	bl	8000acc <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003388:	f7fd fba0 	bl	8000acc <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e18d      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800339a:	4b4f      	ldr	r3, [pc, #316]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 800339c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1ef      	bne.n	8003388 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80a5 	beq.w	8003500 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b6:	2300      	movs	r3, #0
 80033b8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033ba:	4b47      	ldr	r3, [pc, #284]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10d      	bne.n	80033e2 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c6:	4b44      	ldr	r3, [pc, #272]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 80033c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ca:	4a43      	ldr	r2, [pc, #268]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 80033cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d0:	6593      	str	r3, [r2, #88]	; 0x58
 80033d2:	4b41      	ldr	r3, [pc, #260]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 80033d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033de:	2301      	movs	r3, #1
 80033e0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e2:	4b3e      	ldr	r3, [pc, #248]	; (80034dc <HAL_RCC_OscConfig+0x574>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d118      	bne.n	8003420 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ee:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCC_OscConfig+0x574>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a3a      	ldr	r2, [pc, #232]	; (80034dc <HAL_RCC_OscConfig+0x574>)
 80033f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fa:	f7fd fb67 	bl	8000acc <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003402:	f7fd fb63 	bl	8000acc <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e150      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003414:	4b31      	ldr	r3, [pc, #196]	; (80034dc <HAL_RCC_OscConfig+0x574>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d108      	bne.n	800343a <HAL_RCC_OscConfig+0x4d2>
 8003428:	4b2b      	ldr	r3, [pc, #172]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342e:	4a2a      	ldr	r2, [pc, #168]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003438:	e024      	b.n	8003484 <HAL_RCC_OscConfig+0x51c>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b05      	cmp	r3, #5
 8003440:	d110      	bne.n	8003464 <HAL_RCC_OscConfig+0x4fc>
 8003442:	4b25      	ldr	r3, [pc, #148]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	4a23      	ldr	r2, [pc, #140]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 800344a:	f043 0304 	orr.w	r3, r3, #4
 800344e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003452:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003458:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003462:	e00f      	b.n	8003484 <HAL_RCC_OscConfig+0x51c>
 8003464:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	4a1b      	ldr	r2, [pc, #108]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003474:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347a:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 800347c:	f023 0304 	bic.w	r3, r3, #4
 8003480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d016      	beq.n	80034ba <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348c:	f7fd fb1e 	bl	8000acc <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003492:	e00a      	b.n	80034aa <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7fd fb1a 	bl	8000acc <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e105      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_RCC_OscConfig+0x570>)
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0ed      	beq.n	8003494 <HAL_RCC_OscConfig+0x52c>
 80034b8:	e019      	b.n	80034ee <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ba:	f7fd fb07 	bl	8000acc <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c0:	e00e      	b.n	80034e0 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fd fb03 	bl	8000acc <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d905      	bls.n	80034e0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e0ee      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e0:	4b77      	ldr	r3, [pc, #476]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e9      	bne.n	80034c2 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ee:	7ffb      	ldrb	r3, [r7, #31]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d105      	bne.n	8003500 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f4:	4b72      	ldr	r3, [pc, #456]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 80034f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f8:	4a71      	ldr	r2, [pc, #452]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 80034fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80d5 	beq.w	80036b4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b0c      	cmp	r3, #12
 800350e:	f000 808e 	beq.w	800362e <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	2b02      	cmp	r3, #2
 8003518:	d15b      	bne.n	80035d2 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	4b69      	ldr	r3, [pc, #420]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a68      	ldr	r2, [pc, #416]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 8003520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003526:	f7fd fad1 	bl	8000acc <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352e:	f7fd facd 	bl	8000acc <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e0ba      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003540:	4b5f      	ldr	r3, [pc, #380]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1f0      	bne.n	800352e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354c:	4b5c      	ldr	r3, [pc, #368]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	4b5c      	ldr	r3, [pc, #368]	; (80036c4 <HAL_RCC_OscConfig+0x75c>)
 8003552:	4013      	ands	r3, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800355c:	3a01      	subs	r2, #1
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	4311      	orrs	r1, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003566:	0212      	lsls	r2, r2, #8
 8003568:	4311      	orrs	r1, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800356e:	0852      	lsrs	r2, r2, #1
 8003570:	3a01      	subs	r2, #1
 8003572:	0552      	lsls	r2, r2, #21
 8003574:	4311      	orrs	r1, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800357a:	0852      	lsrs	r2, r2, #1
 800357c:	3a01      	subs	r2, #1
 800357e:	0652      	lsls	r2, r2, #25
 8003580:	4311      	orrs	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003586:	0912      	lsrs	r2, r2, #4
 8003588:	0452      	lsls	r2, r2, #17
 800358a:	430a      	orrs	r2, r1
 800358c:	494c      	ldr	r1, [pc, #304]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 800358e:	4313      	orrs	r3, r2
 8003590:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003592:	4b4b      	ldr	r3, [pc, #300]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a4a      	ldr	r2, [pc, #296]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 8003598:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800359c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800359e:	4b48      	ldr	r3, [pc, #288]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	4a47      	ldr	r2, [pc, #284]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 80035a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035aa:	f7fd fa8f 	bl	8000acc <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b2:	f7fd fa8b 	bl	8000acc <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e078      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c4:	4b3e      	ldr	r3, [pc, #248]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x64a>
 80035d0:	e070      	b.n	80036b4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d2:	4b3b      	ldr	r3, [pc, #236]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a3a      	ldr	r2, [pc, #232]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 80035d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80035de:	4b38      	ldr	r3, [pc, #224]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035ea:	4b35      	ldr	r3, [pc, #212]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	4a34      	ldr	r2, [pc, #208]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 80035f0:	f023 0303 	bic.w	r3, r3, #3
 80035f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035f6:	4b32      	ldr	r3, [pc, #200]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	4a31      	ldr	r2, [pc, #196]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 80035fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003604:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7fd fa61 	bl	8000acc <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360e:	f7fd fa5d 	bl	8000acc <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e04a      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003620:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f0      	bne.n	800360e <HAL_RCC_OscConfig+0x6a6>
 800362c:	e042      	b.n	80036b4 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	2b01      	cmp	r3, #1
 8003634:	d101      	bne.n	800363a <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e03d      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800363a:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <HAL_RCC_OscConfig+0x758>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f003 0203 	and.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	429a      	cmp	r2, r3
 800364c:	d130      	bne.n	80036b0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	3b01      	subs	r3, #1
 800365a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d127      	bne.n	80036b0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800366c:	429a      	cmp	r2, r3
 800366e:	d11f      	bne.n	80036b0 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800367a:	2a07      	cmp	r2, #7
 800367c:	bf14      	ite	ne
 800367e:	2201      	movne	r2, #1
 8003680:	2200      	moveq	r2, #0
 8003682:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003684:	4293      	cmp	r3, r2
 8003686:	d113      	bne.n	80036b0 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	085b      	lsrs	r3, r3, #1
 8003694:	3b01      	subs	r3, #1
 8003696:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d109      	bne.n	80036b0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	085b      	lsrs	r3, r3, #1
 80036a8:	3b01      	subs	r3, #1
 80036aa:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40021000 	.word	0x40021000
 80036c4:	f99d808c 	.word	0xf99d808c

080036c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0c8      	b.n	800386e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036dc:	4b66      	ldr	r3, [pc, #408]	; (8003878 <HAL_RCC_ClockConfig+0x1b0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d910      	bls.n	800370c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ea:	4b63      	ldr	r3, [pc, #396]	; (8003878 <HAL_RCC_ClockConfig+0x1b0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 0207 	bic.w	r2, r3, #7
 80036f2:	4961      	ldr	r1, [pc, #388]	; (8003878 <HAL_RCC_ClockConfig+0x1b0>)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b5f      	ldr	r3, [pc, #380]	; (8003878 <HAL_RCC_ClockConfig+0x1b0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0b0      	b.n	800386e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d04c      	beq.n	80037b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b03      	cmp	r3, #3
 800371e:	d107      	bne.n	8003730 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003720:	4b56      	ldr	r3, [pc, #344]	; (800387c <HAL_RCC_ClockConfig+0x1b4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d121      	bne.n	8003770 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e09e      	b.n	800386e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d107      	bne.n	8003748 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003738:	4b50      	ldr	r3, [pc, #320]	; (800387c <HAL_RCC_ClockConfig+0x1b4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d115      	bne.n	8003770 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e092      	b.n	800386e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d107      	bne.n	8003760 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003750:	4b4a      	ldr	r3, [pc, #296]	; (800387c <HAL_RCC_ClockConfig+0x1b4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d109      	bne.n	8003770 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e086      	b.n	800386e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003760:	4b46      	ldr	r3, [pc, #280]	; (800387c <HAL_RCC_ClockConfig+0x1b4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e07e      	b.n	800386e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003770:	4b42      	ldr	r3, [pc, #264]	; (800387c <HAL_RCC_ClockConfig+0x1b4>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f023 0203 	bic.w	r2, r3, #3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	493f      	ldr	r1, [pc, #252]	; (800387c <HAL_RCC_ClockConfig+0x1b4>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003782:	f7fd f9a3 	bl	8000acc <HAL_GetTick>
 8003786:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378a:	f7fd f99f 	bl	8000acc <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e066      	b.n	800386e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a0:	4b36      	ldr	r3, [pc, #216]	; (800387c <HAL_RCC_ClockConfig+0x1b4>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 020c 	and.w	r2, r3, #12
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d1eb      	bne.n	800378a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d008      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037be:	4b2f      	ldr	r3, [pc, #188]	; (800387c <HAL_RCC_ClockConfig+0x1b4>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	492c      	ldr	r1, [pc, #176]	; (800387c <HAL_RCC_ClockConfig+0x1b4>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037d0:	4b29      	ldr	r3, [pc, #164]	; (8003878 <HAL_RCC_ClockConfig+0x1b0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d210      	bcs.n	8003800 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b26      	ldr	r3, [pc, #152]	; (8003878 <HAL_RCC_ClockConfig+0x1b0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 0207 	bic.w	r2, r3, #7
 80037e6:	4924      	ldr	r1, [pc, #144]	; (8003878 <HAL_RCC_ClockConfig+0x1b0>)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b22      	ldr	r3, [pc, #136]	; (8003878 <HAL_RCC_ClockConfig+0x1b0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e036      	b.n	800386e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800380c:	4b1b      	ldr	r3, [pc, #108]	; (800387c <HAL_RCC_ClockConfig+0x1b4>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4918      	ldr	r1, [pc, #96]	; (800387c <HAL_RCC_ClockConfig+0x1b4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800382a:	4b14      	ldr	r3, [pc, #80]	; (800387c <HAL_RCC_ClockConfig+0x1b4>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4910      	ldr	r1, [pc, #64]	; (800387c <HAL_RCC_ClockConfig+0x1b4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800383e:	f000 f825 	bl	800388c <HAL_RCC_GetSysClockFreq>
 8003842:	4601      	mov	r1, r0
 8003844:	4b0d      	ldr	r3, [pc, #52]	; (800387c <HAL_RCC_ClockConfig+0x1b4>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	4a0c      	ldr	r2, [pc, #48]	; (8003880 <HAL_RCC_ClockConfig+0x1b8>)
 8003850:	5cd3      	ldrb	r3, [r2, r3]
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	fa21 f303 	lsr.w	r3, r1, r3
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800385e:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd f8e6 	bl	8000a34 <HAL_InitTick>
 8003868:	4603      	mov	r3, r0
 800386a:	72fb      	strb	r3, [r7, #11]

  return status;
 800386c:	7afb      	ldrb	r3, [r7, #11]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40022000 	.word	0x40022000
 800387c:	40021000 	.word	0x40021000
 8003880:	08007068 	.word	0x08007068
 8003884:	20000008 	.word	0x20000008
 8003888:	20000000 	.word	0x20000000

0800388c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800388c:	b480      	push	{r7}
 800388e:	b089      	sub	sp, #36	; 0x24
 8003890:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	2300      	movs	r3, #0
 8003898:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800389a:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <HAL_RCC_GetSysClockFreq+0x104>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a4:	4b3a      	ldr	r3, [pc, #232]	; (8003990 <HAL_RCC_GetSysClockFreq+0x104>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x34>
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	2b0c      	cmp	r3, #12
 80038b8:	d121      	bne.n	80038fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d11e      	bne.n	80038fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038c0:	4b33      	ldr	r3, [pc, #204]	; (8003990 <HAL_RCC_GetSysClockFreq+0x104>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d107      	bne.n	80038dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038cc:	4b30      	ldr	r3, [pc, #192]	; (8003990 <HAL_RCC_GetSysClockFreq+0x104>)
 80038ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d2:	0a1b      	lsrs	r3, r3, #8
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	e005      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038dc:	4b2c      	ldr	r3, [pc, #176]	; (8003990 <HAL_RCC_GetSysClockFreq+0x104>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038e8:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10d      	bne.n	8003914 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b04      	cmp	r3, #4
 8003902:	d102      	bne.n	800390a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003904:	4b24      	ldr	r3, [pc, #144]	; (8003998 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	e004      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b08      	cmp	r3, #8
 800390e:	d101      	bne.n	8003914 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003910:	4b22      	ldr	r3, [pc, #136]	; (800399c <HAL_RCC_GetSysClockFreq+0x110>)
 8003912:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b0c      	cmp	r3, #12
 8003918:	d133      	bne.n	8003982 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800391a:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <HAL_RCC_GetSysClockFreq+0x104>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d002      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0xa4>
 800392a:	2b03      	cmp	r3, #3
 800392c:	d003      	beq.n	8003936 <HAL_RCC_GetSysClockFreq+0xaa>
 800392e:	e005      	b.n	800393c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003930:	4b19      	ldr	r3, [pc, #100]	; (8003998 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003932:	617b      	str	r3, [r7, #20]
      break;
 8003934:	e005      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003936:	4b19      	ldr	r3, [pc, #100]	; (800399c <HAL_RCC_GetSysClockFreq+0x110>)
 8003938:	617b      	str	r3, [r7, #20]
      break;
 800393a:	e002      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	617b      	str	r3, [r7, #20]
      break;
 8003940:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003942:	4b13      	ldr	r3, [pc, #76]	; (8003990 <HAL_RCC_GetSysClockFreq+0x104>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	3301      	adds	r3, #1
 800394e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003950:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <HAL_RCC_GetSysClockFreq+0x104>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	0a1b      	lsrs	r3, r3, #8
 8003956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	fb02 f203 	mul.w	r2, r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	fbb2 f3f3 	udiv	r3, r2, r3
 8003966:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_RCC_GetSysClockFreq+0x104>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	0e5b      	lsrs	r3, r3, #25
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	3301      	adds	r3, #1
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003982:	69bb      	ldr	r3, [r7, #24]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3724      	adds	r7, #36	; 0x24
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	40021000 	.word	0x40021000
 8003994:	08007078 	.word	0x08007078
 8003998:	00f42400 	.word	0x00f42400
 800399c:	007a1200 	.word	0x007a1200

080039a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039ac:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039b8:	f7ff fa72 	bl	8002ea0 <HAL_PWREx_GetVoltageRange>
 80039bc:	6178      	str	r0, [r7, #20]
 80039be:	e014      	b.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039c0:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c4:	4a24      	ldr	r2, [pc, #144]	; (8003a58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ca:	6593      	str	r3, [r2, #88]	; 0x58
 80039cc:	4b22      	ldr	r3, [pc, #136]	; (8003a58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039d8:	f7ff fa62 	bl	8002ea0 <HAL_PWREx_GetVoltageRange>
 80039dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039de:	4b1e      	ldr	r3, [pc, #120]	; (8003a58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	4a1d      	ldr	r2, [pc, #116]	; (8003a58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039f0:	d10b      	bne.n	8003a0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b80      	cmp	r3, #128	; 0x80
 80039f6:	d919      	bls.n	8003a2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2ba0      	cmp	r3, #160	; 0xa0
 80039fc:	d902      	bls.n	8003a04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039fe:	2302      	movs	r3, #2
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	e013      	b.n	8003a2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a04:	2301      	movs	r3, #1
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	e010      	b.n	8003a2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b80      	cmp	r3, #128	; 0x80
 8003a0e:	d902      	bls.n	8003a16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a10:	2303      	movs	r3, #3
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	e00a      	b.n	8003a2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b80      	cmp	r3, #128	; 0x80
 8003a1a:	d102      	bne.n	8003a22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	e004      	b.n	8003a2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b70      	cmp	r3, #112	; 0x70
 8003a26:	d101      	bne.n	8003a2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a28:	2301      	movs	r3, #1
 8003a2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f023 0207 	bic.w	r2, r3, #7
 8003a34:	4909      	ldr	r1, [pc, #36]	; (8003a5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a3c:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d001      	beq.n	8003a4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40022000 	.word	0x40022000

08003a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a68:	2300      	movs	r3, #0
 8003a6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d03f      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a84:	d01c      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a8a:	d802      	bhi.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00e      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003a90:	e01f      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003a92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a96:	d003      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003a98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a9c:	d01c      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003a9e:	e018      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003aa0:	4b85      	ldr	r3, [pc, #532]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4a84      	ldr	r2, [pc, #528]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aaa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aac:	e015      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fab9 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003abe:	e00c      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3320      	adds	r3, #32
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fba0 	bl	800420c <RCCEx_PLLSAI2_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ad0:	e003      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ad6:	e000      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10b      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ae0:	4b75      	ldr	r3, [pc, #468]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aee:	4972      	ldr	r1, [pc, #456]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003af6:	e001      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	7cfb      	ldrb	r3, [r7, #19]
 8003afa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d03f      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b10:	d01c      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003b12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b16:	d802      	bhi.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003b1c:	e01f      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b22:	d003      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003b24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b28:	d01c      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003b2a:	e018      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b2c:	4b62      	ldr	r3, [pc, #392]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4a61      	ldr	r2, [pc, #388]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b38:	e015      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fa73 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003b46:	4603      	mov	r3, r0
 8003b48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b4a:	e00c      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3320      	adds	r3, #32
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fb5a 	bl	800420c <RCCEx_PLLSAI2_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b5c:	e003      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	74fb      	strb	r3, [r7, #19]
      break;
 8003b62:	e000      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b66:	7cfb      	ldrb	r3, [r7, #19]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10b      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b6c:	4b52      	ldr	r3, [pc, #328]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b7a:	494f      	ldr	r1, [pc, #316]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b82:	e001      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b84:	7cfb      	ldrb	r3, [r7, #19]
 8003b86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80a0 	beq.w	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b96:	2300      	movs	r3, #0
 8003b98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b9a:	4b47      	ldr	r3, [pc, #284]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003baa:	2300      	movs	r3, #0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00d      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb0:	4b41      	ldr	r3, [pc, #260]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	4a40      	ldr	r2, [pc, #256]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bba:	6593      	str	r3, [r2, #88]	; 0x58
 8003bbc:	4b3e      	ldr	r3, [pc, #248]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bcc:	4b3b      	ldr	r3, [pc, #236]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a3a      	ldr	r2, [pc, #232]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bd8:	f7fc ff78 	bl	8000acc <HAL_GetTick>
 8003bdc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bde:	e009      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be0:	f7fc ff74 	bl	8000acc <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d902      	bls.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	74fb      	strb	r3, [r7, #19]
        break;
 8003bf2:	e005      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bf4:	4b31      	ldr	r3, [pc, #196]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ef      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003c00:	7cfb      	ldrb	r3, [r7, #19]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d15c      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c06:	4b2c      	ldr	r3, [pc, #176]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01f      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d019      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c24:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c30:	4b21      	ldr	r3, [pc, #132]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c40:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	4a1c      	ldr	r2, [pc, #112]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c50:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d016      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c62:	f7fc ff33 	bl	8000acc <HAL_GetTick>
 8003c66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c68:	e00b      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6a:	f7fc ff2f 	bl	8000acc <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d902      	bls.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	74fb      	strb	r3, [r7, #19]
            break;
 8003c80:	e006      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c82:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0ec      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003c90:	7cfb      	ldrb	r3, [r7, #19]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c96:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca6:	4904      	ldr	r1, [pc, #16]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cae:	e009      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	74bb      	strb	r3, [r7, #18]
 8003cb4:	e006      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc0:	7cfb      	ldrb	r3, [r7, #19]
 8003cc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cc4:	7c7b      	ldrb	r3, [r7, #17]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d105      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cca:	4b9e      	ldr	r3, [pc, #632]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cce:	4a9d      	ldr	r2, [pc, #628]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ce2:	4b98      	ldr	r3, [pc, #608]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce8:	f023 0203 	bic.w	r2, r3, #3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	4994      	ldr	r1, [pc, #592]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d04:	4b8f      	ldr	r3, [pc, #572]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0a:	f023 020c 	bic.w	r2, r3, #12
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	498c      	ldr	r1, [pc, #560]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d26:	4b87      	ldr	r3, [pc, #540]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	4983      	ldr	r1, [pc, #524]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d48:	4b7e      	ldr	r3, [pc, #504]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	497b      	ldr	r1, [pc, #492]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d6a:	4b76      	ldr	r3, [pc, #472]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d78:	4972      	ldr	r1, [pc, #456]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d8c:	4b6d      	ldr	r3, [pc, #436]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9a:	496a      	ldr	r1, [pc, #424]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dae:	4b65      	ldr	r3, [pc, #404]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	4961      	ldr	r1, [pc, #388]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dd0:	4b5c      	ldr	r3, [pc, #368]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dde:	4959      	ldr	r1, [pc, #356]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003df2:	4b54      	ldr	r3, [pc, #336]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e00:	4950      	ldr	r1, [pc, #320]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e14:	4b4b      	ldr	r3, [pc, #300]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	4948      	ldr	r1, [pc, #288]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e36:	4b43      	ldr	r3, [pc, #268]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	493f      	ldr	r1, [pc, #252]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d028      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e58:	4b3a      	ldr	r3, [pc, #232]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e66:	4937      	ldr	r1, [pc, #220]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e76:	d106      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e78:	4b32      	ldr	r3, [pc, #200]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4a31      	ldr	r2, [pc, #196]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e82:	60d3      	str	r3, [r2, #12]
 8003e84:	e011      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e8e:	d10c      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3304      	adds	r3, #4
 8003e94:	2101      	movs	r1, #1
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 f8c8 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ea0:	7cfb      	ldrb	r3, [r7, #19]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003ea6:	7cfb      	ldrb	r3, [r7, #19]
 8003ea8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d028      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003eb6:	4b23      	ldr	r3, [pc, #140]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	491f      	ldr	r1, [pc, #124]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed4:	d106      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	4a1a      	ldr	r2, [pc, #104]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003edc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ee0:	60d3      	str	r3, [r2, #12]
 8003ee2:	e011      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 f899 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003efe:	7cfb      	ldrb	r3, [r7, #19]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003f04:	7cfb      	ldrb	r3, [r7, #19]
 8003f06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d02b      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f22:	4908      	ldr	r1, [pc, #32]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f32:	d109      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a02      	ldr	r2, [pc, #8]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f3e:	60d3      	str	r3, [r2, #12]
 8003f40:	e014      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f50:	d10c      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3304      	adds	r3, #4
 8003f56:	2101      	movs	r1, #1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 f867 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f62:	7cfb      	ldrb	r3, [r7, #19]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003f68:	7cfb      	ldrb	r3, [r7, #19]
 8003f6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d02f      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f78:	4b2b      	ldr	r3, [pc, #172]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f86:	4928      	ldr	r1, [pc, #160]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f96:	d10d      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	2102      	movs	r1, #2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 f844 	bl	800402c <RCCEx_PLLSAI1_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d014      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003fae:	7cfb      	ldrb	r3, [r7, #19]
 8003fb0:	74bb      	strb	r3, [r7, #18]
 8003fb2:	e011      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3320      	adds	r3, #32
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 f921 	bl	800420c <RCCEx_PLLSAI2_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fce:	7cfb      	ldrb	r3, [r7, #19]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fe4:	4b10      	ldr	r3, [pc, #64]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff2:	490d      	ldr	r1, [pc, #52]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00b      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004016:	4904      	ldr	r1, [pc, #16]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800401e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40021000 	.word	0x40021000

0800402c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800403a:	4b73      	ldr	r3, [pc, #460]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d018      	beq.n	8004078 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004046:	4b70      	ldr	r3, [pc, #448]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0203 	and.w	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d10d      	bne.n	8004072 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
       ||
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800405e:	4b6a      	ldr	r3, [pc, #424]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
       ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d044      	beq.n	80040fc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	73fb      	strb	r3, [r7, #15]
 8004076:	e041      	b.n	80040fc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d00c      	beq.n	800409a <RCCEx_PLLSAI1_Config+0x6e>
 8004080:	2b03      	cmp	r3, #3
 8004082:	d013      	beq.n	80040ac <RCCEx_PLLSAI1_Config+0x80>
 8004084:	2b01      	cmp	r3, #1
 8004086:	d120      	bne.n	80040ca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004088:	4b5f      	ldr	r3, [pc, #380]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d11d      	bne.n	80040d0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004098:	e01a      	b.n	80040d0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800409a:	4b5b      	ldr	r3, [pc, #364]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d116      	bne.n	80040d4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040aa:	e013      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040ac:	4b56      	ldr	r3, [pc, #344]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10f      	bne.n	80040d8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040b8:	4b53      	ldr	r3, [pc, #332]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d109      	bne.n	80040d8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040c8:	e006      	b.n	80040d8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	73fb      	strb	r3, [r7, #15]
      break;
 80040ce:	e004      	b.n	80040da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80040d0:	bf00      	nop
 80040d2:	e002      	b.n	80040da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80040d4:	bf00      	nop
 80040d6:	e000      	b.n	80040da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80040d8:	bf00      	nop
    }

    if(status == HAL_OK)
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10d      	bne.n	80040fc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040e0:	4b49      	ldr	r3, [pc, #292]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6819      	ldr	r1, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	430b      	orrs	r3, r1
 80040f6:	4944      	ldr	r1, [pc, #272]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d17d      	bne.n	80041fe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004102:	4b41      	ldr	r3, [pc, #260]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a40      	ldr	r2, [pc, #256]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004108:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800410c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800410e:	f7fc fcdd 	bl	8000acc <HAL_GetTick>
 8004112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004114:	e009      	b.n	800412a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004116:	f7fc fcd9 	bl	8000acc <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d902      	bls.n	800412a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	73fb      	strb	r3, [r7, #15]
        break;
 8004128:	e005      	b.n	8004136 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800412a:	4b37      	ldr	r3, [pc, #220]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1ef      	bne.n	8004116 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d160      	bne.n	80041fe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d111      	bne.n	8004166 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004142:	4b31      	ldr	r3, [pc, #196]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800414a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6892      	ldr	r2, [r2, #8]
 8004152:	0211      	lsls	r1, r2, #8
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68d2      	ldr	r2, [r2, #12]
 8004158:	0912      	lsrs	r2, r2, #4
 800415a:	0452      	lsls	r2, r2, #17
 800415c:	430a      	orrs	r2, r1
 800415e:	492a      	ldr	r1, [pc, #168]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004160:	4313      	orrs	r3, r2
 8004162:	610b      	str	r3, [r1, #16]
 8004164:	e027      	b.n	80041b6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d112      	bne.n	8004192 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800416c:	4b26      	ldr	r3, [pc, #152]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004174:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6892      	ldr	r2, [r2, #8]
 800417c:	0211      	lsls	r1, r2, #8
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6912      	ldr	r2, [r2, #16]
 8004182:	0852      	lsrs	r2, r2, #1
 8004184:	3a01      	subs	r2, #1
 8004186:	0552      	lsls	r2, r2, #21
 8004188:	430a      	orrs	r2, r1
 800418a:	491f      	ldr	r1, [pc, #124]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800418c:	4313      	orrs	r3, r2
 800418e:	610b      	str	r3, [r1, #16]
 8004190:	e011      	b.n	80041b6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800419a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6892      	ldr	r2, [r2, #8]
 80041a2:	0211      	lsls	r1, r2, #8
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6952      	ldr	r2, [r2, #20]
 80041a8:	0852      	lsrs	r2, r2, #1
 80041aa:	3a01      	subs	r2, #1
 80041ac:	0652      	lsls	r2, r2, #25
 80041ae:	430a      	orrs	r2, r1
 80041b0:	4915      	ldr	r1, [pc, #84]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041b6:	4b14      	ldr	r3, [pc, #80]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a13      	ldr	r2, [pc, #76]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c2:	f7fc fc83 	bl	8000acc <HAL_GetTick>
 80041c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041c8:	e009      	b.n	80041de <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041ca:	f7fc fc7f 	bl	8000acc <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d902      	bls.n	80041de <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	73fb      	strb	r3, [r7, #15]
          break;
 80041dc:	e005      	b.n	80041ea <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041de:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0ef      	beq.n	80041ca <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	4903      	ldr	r1, [pc, #12]	; (8004208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000

0800420c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800421a:	4b68      	ldr	r3, [pc, #416]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d018      	beq.n	8004258 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004226:	4b65      	ldr	r3, [pc, #404]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f003 0203 	and.w	r2, r3, #3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d10d      	bne.n	8004252 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
       ||
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800423e:	4b5f      	ldr	r3, [pc, #380]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
       ||
 800424e:	429a      	cmp	r2, r3
 8004250:	d044      	beq.n	80042dc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
 8004256:	e041      	b.n	80042dc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b02      	cmp	r3, #2
 800425e:	d00c      	beq.n	800427a <RCCEx_PLLSAI2_Config+0x6e>
 8004260:	2b03      	cmp	r3, #3
 8004262:	d013      	beq.n	800428c <RCCEx_PLLSAI2_Config+0x80>
 8004264:	2b01      	cmp	r3, #1
 8004266:	d120      	bne.n	80042aa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004268:	4b54      	ldr	r3, [pc, #336]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d11d      	bne.n	80042b0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004278:	e01a      	b.n	80042b0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800427a:	4b50      	ldr	r3, [pc, #320]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004282:	2b00      	cmp	r3, #0
 8004284:	d116      	bne.n	80042b4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800428a:	e013      	b.n	80042b4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800428c:	4b4b      	ldr	r3, [pc, #300]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10f      	bne.n	80042b8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004298:	4b48      	ldr	r3, [pc, #288]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d109      	bne.n	80042b8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042a8:	e006      	b.n	80042b8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	73fb      	strb	r3, [r7, #15]
      break;
 80042ae:	e004      	b.n	80042ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80042b0:	bf00      	nop
 80042b2:	e002      	b.n	80042ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80042b4:	bf00      	nop
 80042b6:	e000      	b.n	80042ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80042b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10d      	bne.n	80042dc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042c0:	4b3e      	ldr	r3, [pc, #248]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6819      	ldr	r1, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	430b      	orrs	r3, r1
 80042d6:	4939      	ldr	r1, [pc, #228]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d167      	bne.n	80043b2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042e2:	4b36      	ldr	r3, [pc, #216]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a35      	ldr	r2, [pc, #212]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80042e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ee:	f7fc fbed 	bl	8000acc <HAL_GetTick>
 80042f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042f4:	e009      	b.n	800430a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042f6:	f7fc fbe9 	bl	8000acc <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d902      	bls.n	800430a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	73fb      	strb	r3, [r7, #15]
        break;
 8004308:	e005      	b.n	8004316 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800430a:	4b2c      	ldr	r3, [pc, #176]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1ef      	bne.n	80042f6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d14a      	bne.n	80043b2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d111      	bne.n	8004346 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004322:	4b26      	ldr	r3, [pc, #152]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800432a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6892      	ldr	r2, [r2, #8]
 8004332:	0211      	lsls	r1, r2, #8
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	68d2      	ldr	r2, [r2, #12]
 8004338:	0912      	lsrs	r2, r2, #4
 800433a:	0452      	lsls	r2, r2, #17
 800433c:	430a      	orrs	r2, r1
 800433e:	491f      	ldr	r1, [pc, #124]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004340:	4313      	orrs	r3, r2
 8004342:	614b      	str	r3, [r1, #20]
 8004344:	e011      	b.n	800436a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004346:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800434e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6892      	ldr	r2, [r2, #8]
 8004356:	0211      	lsls	r1, r2, #8
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6912      	ldr	r2, [r2, #16]
 800435c:	0852      	lsrs	r2, r2, #1
 800435e:	3a01      	subs	r2, #1
 8004360:	0652      	lsls	r2, r2, #25
 8004362:	430a      	orrs	r2, r1
 8004364:	4915      	ldr	r1, [pc, #84]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004366:	4313      	orrs	r3, r2
 8004368:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800436a:	4b14      	ldr	r3, [pc, #80]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a13      	ldr	r2, [pc, #76]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004374:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004376:	f7fc fba9 	bl	8000acc <HAL_GetTick>
 800437a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800437c:	e009      	b.n	8004392 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800437e:	f7fc fba5 	bl	8000acc <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d902      	bls.n	8004392 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	73fb      	strb	r3, [r7, #15]
          break;
 8004390:	e005      	b.n	800439e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0ef      	beq.n	800437e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d106      	bne.n	80043b2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	4903      	ldr	r1, [pc, #12]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40021000 	.word	0x40021000

080043c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e01d      	b.n	800440e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f002 fbb8 	bl	8006b5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f000 f922 	bl	8004648 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800442e:	2302      	movs	r3, #2
 8004430:	e105      	b.n	800463e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2202      	movs	r2, #2
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b14      	cmp	r3, #20
 8004446:	f200 80f0 	bhi.w	800462a <HAL_TIM_PWM_ConfigChannel+0x212>
 800444a:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800444c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004450:	080044a5 	.word	0x080044a5
 8004454:	0800462b 	.word	0x0800462b
 8004458:	0800462b 	.word	0x0800462b
 800445c:	0800462b 	.word	0x0800462b
 8004460:	080044e5 	.word	0x080044e5
 8004464:	0800462b 	.word	0x0800462b
 8004468:	0800462b 	.word	0x0800462b
 800446c:	0800462b 	.word	0x0800462b
 8004470:	08004527 	.word	0x08004527
 8004474:	0800462b 	.word	0x0800462b
 8004478:	0800462b 	.word	0x0800462b
 800447c:	0800462b 	.word	0x0800462b
 8004480:	08004567 	.word	0x08004567
 8004484:	0800462b 	.word	0x0800462b
 8004488:	0800462b 	.word	0x0800462b
 800448c:	0800462b 	.word	0x0800462b
 8004490:	080045a9 	.word	0x080045a9
 8004494:	0800462b 	.word	0x0800462b
 8004498:	0800462b 	.word	0x0800462b
 800449c:	0800462b 	.word	0x0800462b
 80044a0:	080045e9 	.word	0x080045e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68b9      	ldr	r1, [r7, #8]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 f966 	bl	800477c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0208 	orr.w	r2, r2, #8
 80044be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0204 	bic.w	r2, r2, #4
 80044ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6999      	ldr	r1, [r3, #24]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	619a      	str	r2, [r3, #24]
      break;
 80044e2:	e0a3      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 f9d6 	bl	800489c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699a      	ldr	r2, [r3, #24]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6999      	ldr	r1, [r3, #24]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	021a      	lsls	r2, r3, #8
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	619a      	str	r2, [r3, #24]
      break;
 8004524:	e082      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fa3f 	bl	80049b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69da      	ldr	r2, [r3, #28]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0208 	orr.w	r2, r2, #8
 8004540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0204 	bic.w	r2, r2, #4
 8004550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69d9      	ldr	r1, [r3, #28]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	61da      	str	r2, [r3, #28]
      break;
 8004564:	e062      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	4618      	mov	r0, r3
 800456e:	f000 faa7 	bl	8004ac0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69d9      	ldr	r1, [r3, #28]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	021a      	lsls	r2, r3, #8
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	61da      	str	r2, [r3, #28]
      break;
 80045a6:	e041      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68b9      	ldr	r1, [r7, #8]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 faf0 	bl	8004b94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0208 	orr.w	r2, r2, #8
 80045c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0204 	bic.w	r2, r2, #4
 80045d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045e6:	e021      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fb34 	bl	8004c5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004602:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004612:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	021a      	lsls	r2, r3, #8
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004628:	e000      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800462a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop

08004648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a40      	ldr	r2, [pc, #256]	; (800475c <TIM_Base_SetConfig+0x114>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <TIM_Base_SetConfig+0x40>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004666:	d00f      	beq.n	8004688 <TIM_Base_SetConfig+0x40>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a3d      	ldr	r2, [pc, #244]	; (8004760 <TIM_Base_SetConfig+0x118>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00b      	beq.n	8004688 <TIM_Base_SetConfig+0x40>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a3c      	ldr	r2, [pc, #240]	; (8004764 <TIM_Base_SetConfig+0x11c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d007      	beq.n	8004688 <TIM_Base_SetConfig+0x40>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a3b      	ldr	r2, [pc, #236]	; (8004768 <TIM_Base_SetConfig+0x120>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <TIM_Base_SetConfig+0x40>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a3a      	ldr	r2, [pc, #232]	; (800476c <TIM_Base_SetConfig+0x124>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d108      	bne.n	800469a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a2f      	ldr	r2, [pc, #188]	; (800475c <TIM_Base_SetConfig+0x114>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d01f      	beq.n	80046e2 <TIM_Base_SetConfig+0x9a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a8:	d01b      	beq.n	80046e2 <TIM_Base_SetConfig+0x9a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a2c      	ldr	r2, [pc, #176]	; (8004760 <TIM_Base_SetConfig+0x118>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d017      	beq.n	80046e2 <TIM_Base_SetConfig+0x9a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a2b      	ldr	r2, [pc, #172]	; (8004764 <TIM_Base_SetConfig+0x11c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d013      	beq.n	80046e2 <TIM_Base_SetConfig+0x9a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a2a      	ldr	r2, [pc, #168]	; (8004768 <TIM_Base_SetConfig+0x120>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d00f      	beq.n	80046e2 <TIM_Base_SetConfig+0x9a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a29      	ldr	r2, [pc, #164]	; (800476c <TIM_Base_SetConfig+0x124>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00b      	beq.n	80046e2 <TIM_Base_SetConfig+0x9a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a28      	ldr	r2, [pc, #160]	; (8004770 <TIM_Base_SetConfig+0x128>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d007      	beq.n	80046e2 <TIM_Base_SetConfig+0x9a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a27      	ldr	r2, [pc, #156]	; (8004774 <TIM_Base_SetConfig+0x12c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d003      	beq.n	80046e2 <TIM_Base_SetConfig+0x9a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a26      	ldr	r2, [pc, #152]	; (8004778 <TIM_Base_SetConfig+0x130>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d108      	bne.n	80046f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a10      	ldr	r2, [pc, #64]	; (800475c <TIM_Base_SetConfig+0x114>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00f      	beq.n	8004740 <TIM_Base_SetConfig+0xf8>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a12      	ldr	r2, [pc, #72]	; (800476c <TIM_Base_SetConfig+0x124>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00b      	beq.n	8004740 <TIM_Base_SetConfig+0xf8>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a11      	ldr	r2, [pc, #68]	; (8004770 <TIM_Base_SetConfig+0x128>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d007      	beq.n	8004740 <TIM_Base_SetConfig+0xf8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a10      	ldr	r2, [pc, #64]	; (8004774 <TIM_Base_SetConfig+0x12c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <TIM_Base_SetConfig+0xf8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a0f      	ldr	r2, [pc, #60]	; (8004778 <TIM_Base_SetConfig+0x130>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d103      	bne.n	8004748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	615a      	str	r2, [r3, #20]
}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40012c00 	.word	0x40012c00
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800
 8004768:	40000c00 	.word	0x40000c00
 800476c:	40013400 	.word	0x40013400
 8004770:	40014000 	.word	0x40014000
 8004774:	40014400 	.word	0x40014400
 8004778:	40014800 	.word	0x40014800

0800477c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	f023 0201 	bic.w	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f023 0302 	bic.w	r3, r3, #2
 80047c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a2c      	ldr	r2, [pc, #176]	; (8004888 <TIM_OC1_SetConfig+0x10c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00f      	beq.n	80047fc <TIM_OC1_SetConfig+0x80>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a2b      	ldr	r2, [pc, #172]	; (800488c <TIM_OC1_SetConfig+0x110>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00b      	beq.n	80047fc <TIM_OC1_SetConfig+0x80>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a2a      	ldr	r2, [pc, #168]	; (8004890 <TIM_OC1_SetConfig+0x114>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d007      	beq.n	80047fc <TIM_OC1_SetConfig+0x80>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a29      	ldr	r2, [pc, #164]	; (8004894 <TIM_OC1_SetConfig+0x118>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d003      	beq.n	80047fc <TIM_OC1_SetConfig+0x80>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a28      	ldr	r2, [pc, #160]	; (8004898 <TIM_OC1_SetConfig+0x11c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d10c      	bne.n	8004816 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f023 0308 	bic.w	r3, r3, #8
 8004802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f023 0304 	bic.w	r3, r3, #4
 8004814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <TIM_OC1_SetConfig+0x10c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00f      	beq.n	800483e <TIM_OC1_SetConfig+0xc2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a1a      	ldr	r2, [pc, #104]	; (800488c <TIM_OC1_SetConfig+0x110>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00b      	beq.n	800483e <TIM_OC1_SetConfig+0xc2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a19      	ldr	r2, [pc, #100]	; (8004890 <TIM_OC1_SetConfig+0x114>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d007      	beq.n	800483e <TIM_OC1_SetConfig+0xc2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a18      	ldr	r2, [pc, #96]	; (8004894 <TIM_OC1_SetConfig+0x118>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d003      	beq.n	800483e <TIM_OC1_SetConfig+0xc2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a17      	ldr	r2, [pc, #92]	; (8004898 <TIM_OC1_SetConfig+0x11c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d111      	bne.n	8004862 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800484c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	621a      	str	r2, [r3, #32]
}
 800487c:	bf00      	nop
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	40012c00 	.word	0x40012c00
 800488c:	40013400 	.word	0x40013400
 8004890:	40014000 	.word	0x40014000
 8004894:	40014400 	.word	0x40014400
 8004898:	40014800 	.word	0x40014800

0800489c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f023 0210 	bic.w	r2, r3, #16
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f023 0320 	bic.w	r3, r3, #32
 80048ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a28      	ldr	r2, [pc, #160]	; (800499c <TIM_OC2_SetConfig+0x100>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_OC2_SetConfig+0x6c>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a27      	ldr	r2, [pc, #156]	; (80049a0 <TIM_OC2_SetConfig+0x104>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d10d      	bne.n	8004924 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800490e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	011b      	lsls	r3, r3, #4
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004922:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a1d      	ldr	r2, [pc, #116]	; (800499c <TIM_OC2_SetConfig+0x100>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00f      	beq.n	800494c <TIM_OC2_SetConfig+0xb0>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a1c      	ldr	r2, [pc, #112]	; (80049a0 <TIM_OC2_SetConfig+0x104>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00b      	beq.n	800494c <TIM_OC2_SetConfig+0xb0>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a1b      	ldr	r2, [pc, #108]	; (80049a4 <TIM_OC2_SetConfig+0x108>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d007      	beq.n	800494c <TIM_OC2_SetConfig+0xb0>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a1a      	ldr	r2, [pc, #104]	; (80049a8 <TIM_OC2_SetConfig+0x10c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <TIM_OC2_SetConfig+0xb0>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a19      	ldr	r2, [pc, #100]	; (80049ac <TIM_OC2_SetConfig+0x110>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d113      	bne.n	8004974 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800495a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40012c00 	.word	0x40012c00
 80049a0:	40013400 	.word	0x40013400
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40014400 	.word	0x40014400
 80049ac:	40014800 	.word	0x40014800

080049b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a27      	ldr	r2, [pc, #156]	; (8004aac <TIM_OC3_SetConfig+0xfc>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_OC3_SetConfig+0x6a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a26      	ldr	r2, [pc, #152]	; (8004ab0 <TIM_OC3_SetConfig+0x100>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d10d      	bne.n	8004a36 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a1c      	ldr	r2, [pc, #112]	; (8004aac <TIM_OC3_SetConfig+0xfc>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00f      	beq.n	8004a5e <TIM_OC3_SetConfig+0xae>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a1b      	ldr	r2, [pc, #108]	; (8004ab0 <TIM_OC3_SetConfig+0x100>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00b      	beq.n	8004a5e <TIM_OC3_SetConfig+0xae>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a1a      	ldr	r2, [pc, #104]	; (8004ab4 <TIM_OC3_SetConfig+0x104>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d007      	beq.n	8004a5e <TIM_OC3_SetConfig+0xae>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a19      	ldr	r2, [pc, #100]	; (8004ab8 <TIM_OC3_SetConfig+0x108>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d003      	beq.n	8004a5e <TIM_OC3_SetConfig+0xae>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a18      	ldr	r2, [pc, #96]	; (8004abc <TIM_OC3_SetConfig+0x10c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d113      	bne.n	8004a86 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	621a      	str	r2, [r3, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	40013400 	.word	0x40013400
 8004ab4:	40014000 	.word	0x40014000
 8004ab8:	40014400 	.word	0x40014400
 8004abc:	40014800 	.word	0x40014800

08004ac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	031b      	lsls	r3, r3, #12
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a18      	ldr	r2, [pc, #96]	; (8004b80 <TIM_OC4_SetConfig+0xc0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00f      	beq.n	8004b44 <TIM_OC4_SetConfig+0x84>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a17      	ldr	r2, [pc, #92]	; (8004b84 <TIM_OC4_SetConfig+0xc4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00b      	beq.n	8004b44 <TIM_OC4_SetConfig+0x84>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a16      	ldr	r2, [pc, #88]	; (8004b88 <TIM_OC4_SetConfig+0xc8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d007      	beq.n	8004b44 <TIM_OC4_SetConfig+0x84>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <TIM_OC4_SetConfig+0xcc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d003      	beq.n	8004b44 <TIM_OC4_SetConfig+0x84>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a14      	ldr	r2, [pc, #80]	; (8004b90 <TIM_OC4_SetConfig+0xd0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d109      	bne.n	8004b58 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	019b      	lsls	r3, r3, #6
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	621a      	str	r2, [r3, #32]
}
 8004b72:	bf00      	nop
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40012c00 	.word	0x40012c00
 8004b84:	40013400 	.word	0x40013400
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40014400 	.word	0x40014400
 8004b90:	40014800 	.word	0x40014800

08004b94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004bd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	041b      	lsls	r3, r3, #16
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a17      	ldr	r2, [pc, #92]	; (8004c48 <TIM_OC5_SetConfig+0xb4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00f      	beq.n	8004c0e <TIM_OC5_SetConfig+0x7a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a16      	ldr	r2, [pc, #88]	; (8004c4c <TIM_OC5_SetConfig+0xb8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00b      	beq.n	8004c0e <TIM_OC5_SetConfig+0x7a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a15      	ldr	r2, [pc, #84]	; (8004c50 <TIM_OC5_SetConfig+0xbc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d007      	beq.n	8004c0e <TIM_OC5_SetConfig+0x7a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a14      	ldr	r2, [pc, #80]	; (8004c54 <TIM_OC5_SetConfig+0xc0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d003      	beq.n	8004c0e <TIM_OC5_SetConfig+0x7a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <TIM_OC5_SetConfig+0xc4>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d109      	bne.n	8004c22 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	021b      	lsls	r3, r3, #8
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	621a      	str	r2, [r3, #32]
}
 8004c3c:	bf00      	nop
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	40012c00 	.word	0x40012c00
 8004c4c:	40013400 	.word	0x40013400
 8004c50:	40014000 	.word	0x40014000
 8004c54:	40014400 	.word	0x40014400
 8004c58:	40014800 	.word	0x40014800

08004c5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	021b      	lsls	r3, r3, #8
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	051b      	lsls	r3, r3, #20
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a18      	ldr	r2, [pc, #96]	; (8004d14 <TIM_OC6_SetConfig+0xb8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00f      	beq.n	8004cd8 <TIM_OC6_SetConfig+0x7c>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <TIM_OC6_SetConfig+0xbc>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00b      	beq.n	8004cd8 <TIM_OC6_SetConfig+0x7c>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a16      	ldr	r2, [pc, #88]	; (8004d1c <TIM_OC6_SetConfig+0xc0>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d007      	beq.n	8004cd8 <TIM_OC6_SetConfig+0x7c>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a15      	ldr	r2, [pc, #84]	; (8004d20 <TIM_OC6_SetConfig+0xc4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_OC6_SetConfig+0x7c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a14      	ldr	r2, [pc, #80]	; (8004d24 <TIM_OC6_SetConfig+0xc8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d109      	bne.n	8004cec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	029b      	lsls	r3, r3, #10
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40013400 	.word	0x40013400
 8004d1c:	40014000 	.word	0x40014000
 8004d20:	40014400 	.word	0x40014400
 8004d24:	40014800 	.word	0x40014800

08004d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e045      	b.n	8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1c      	ldr	r2, [pc, #112]	; (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a1b      	ldr	r2, [pc, #108]	; (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d108      	bne.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d9e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	40012c00 	.word	0x40012c00
 8004ddc:	40013400 	.word	0x40013400

08004de0 <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	4a04      	ldr	r2, [pc, #16]	; (8004dfc <_ZN15Adafruit_SensorC1Ev+0x1c>)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	08007054 	.word	0x08007054

08004e00 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	4a04      	ldr	r2, [pc, #16]	; (8004e1c <_ZN15Adafruit_SensorD1Ev+0x1c>)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	08007054 	.word	0x08007054

08004e20 <_ZN15Adafruit_SensorD0Ev>:
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7ff ffe9 	bl	8004e00 <_ZN15Adafruit_SensorD1Ev>
 8004e2e:	2108      	movs	r1, #8
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f001 ffe1 	bl	8006df8 <_ZdlPvj>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) { (void)enabled; /* suppress unused warning */ };
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	70fb      	strb	r3, [r7, #3]
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <_ZN15Adafruit_BNO055C1E19__I2C_HandleTypeDeflh>:
 *  @param  address
 *          i2c address
 *  @param  *theWire
 *          Wire object
 */
Adafruit_BNO055::Adafruit_BNO055(I2C_HandleTypeDef hi2c1, int32_t sensorID, uint8_t address) {
 8004e58:	b084      	sub	sp, #16
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	f107 0014 	add.w	r0, r7, #20
 8004e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff ffb7 	bl	8004de0 <_ZN15Adafruit_SensorC1Ev>
 8004e72:	4a0d      	ldr	r2, [pc, #52]	; (8004ea8 <_ZN15Adafruit_BNO055C1E19__I2C_HandleTypeDeflh+0x50>)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	601a      	str	r2, [r3, #0]
  _sensorID = sensorID;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54
  _address = address;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8004e84:	715a      	strb	r2, [r3, #5]
  _hi2c1 = hi2c1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3308      	adds	r3, #8
 8004e8a:	f107 0114 	add.w	r1, r7, #20
 8004e8e:	224c      	movs	r2, #76	; 0x4c
 8004e90:	4618      	mov	r0, r3
 8004e92:	f001 ffff 	bl	8006e94 <memcpy>
}
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ea2:	b004      	add	sp, #16
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	08007038 	.word	0x08007038

08004eac <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
 *            OPERATION_MODE_M4G,
 *            OPERATION_MODE_NDOF_FMC_OFF,
 *            OPERATION_MODE_NDOF]
 *  @return true if process is successful
 */
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]

  /* Make sure we have the right device */
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
 8004eb8:	2100      	movs	r1, #0
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fd25 	bl	800590a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	73fb      	strb	r3, [r7, #15]
  if (id != BNO055_ID) {
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	2ba0      	cmp	r3, #160	; 0xa0
 8004ec8:	d00e      	beq.n	8004ee8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3c>
    HAL_Delay(1000); // hold on for boot
 8004eca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ece:	f7fb fe09 	bl	8000ae4 <HAL_Delay>
    id = read8(BNO055_CHIP_ID_ADDR);
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fd18 	bl	800590a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 8004eda:	4603      	mov	r3, r0
 8004edc:	73fb      	strb	r3, [r7, #15]
    if (id != BNO055_ID) {
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	2ba0      	cmp	r3, #160	; 0xa0
 8004ee2:	d001      	beq.n	8004ee8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3c>
      return false; // still not? ok bail
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	e03c      	b.n	8004f62 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb6>
    }
  }

  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);
 8004ee8:	2100      	movs	r1, #0
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f83d 	bl	8004f6a <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	213f      	movs	r1, #63	; 0x3f
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fce4 	bl	80058c2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  /* HAL_Delay incrased to 30ms due to power issues https://tinyurl.com/y375z699 */
  HAL_Delay(30);
 8004efa:	201e      	movs	r0, #30
 8004efc:	f7fb fdf2 	bl	8000ae4 <HAL_Delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
 8004f00:	2100      	movs	r1, #0
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fd01 	bl	800590a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2ba0      	cmp	r3, #160	; 0xa0
 8004f0c:	bf14      	ite	ne
 8004f0e:	2301      	movne	r3, #1
 8004f10:	2300      	moveq	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x74>
    HAL_Delay(10);
 8004f18:	200a      	movs	r0, #10
 8004f1a:	f7fb fde3 	bl	8000ae4 <HAL_Delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
 8004f1e:	e7ef      	b.n	8004f00 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x54>
  }
  HAL_Delay(50);
 8004f20:	2032      	movs	r0, #50	; 0x32
 8004f22:	f7fb fddf 	bl	8000ae4 <HAL_Delay>

  /* Set to normal power mode */
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
 8004f26:	2200      	movs	r2, #0
 8004f28:	213e      	movs	r1, #62	; 0x3e
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fcc9 	bl	80058c2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  HAL_Delay(10);
 8004f30:	200a      	movs	r0, #10
 8004f32:	f7fb fdd7 	bl	8000ae4 <HAL_Delay>

  write8(BNO055_PAGE_ID_ADDR, 0);
 8004f36:	2200      	movs	r2, #0
 8004f38:	2107      	movs	r1, #7
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fcc1 	bl	80058c2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  HAL_Delay(10);
  write8(BNO055_AXIS_MAP_SIGN_ADDR, REMAP_SIGN_P2); // P0-P7, Default is P1
  delay(10);
  */

  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
 8004f40:	2200      	movs	r2, #0
 8004f42:	213f      	movs	r1, #63	; 0x3f
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fcbc 	bl	80058c2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  HAL_Delay(10);
 8004f4a:	200a      	movs	r0, #10
 8004f4c:	f7fb fdca 	bl	8000ae4 <HAL_Delay>
  /* Set the requested operating mode (see section 3.3) */
  setMode(mode);
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	4619      	mov	r1, r3
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f808 	bl	8004f6a <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  HAL_Delay(20);
 8004f5a:	2014      	movs	r0, #20
 8004f5c:	f7fb fdc2 	bl	8000ae4 <HAL_Delay>

  return true;
 8004f60:	2301      	movs	r3, #1
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
 *            OPERATION_MODE_COMPASS,
 *            OPERATION_MODE_M4G,
 *            OPERATION_MODE_NDOF_FMC_OFF,
 *            OPERATION_MODE_NDOF]
 */
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode) {
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b082      	sub	sp, #8
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	460b      	mov	r3, r1
 8004f74:	70fb      	strb	r3, [r7, #3]
  _mode = mode;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	78fa      	ldrb	r2, [r7, #3]
 8004f7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  write8(BNO055_OPR_MODE_ADDR, _mode);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004f84:	461a      	mov	r2, r3
 8004f86:	213d      	movs	r1, #61	; 0x3d
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fc9a 	bl	80058c2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  HAL_Delay(30);
 8004f8e:	201e      	movs	r0, #30
 8004f90:	f7fb fda8 	bl	8000ae4 <HAL_Delay>
}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
 8004f9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004fa0:	b088      	sub	sp, #32
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 fd6d 	bl	8005a8c <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset(buffer, 0, 6);
 8004fb2:	f107 0314 	add.w	r3, r7, #20
 8004fb6:	2206      	movs	r2, #6
 8004fb8:	2100      	movs	r1, #0
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f001 ff75 	bl	8006eaa <memset>

  int16_t x, y, z;
  x = y = z = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	83fb      	strh	r3, [r7, #30]
 8004fc4:	8bfb      	ldrh	r3, [r7, #30]
 8004fc6:	83bb      	strh	r3, [r7, #28]
 8004fc8:	8bbb      	ldrh	r3, [r7, #28]
 8004fca:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 8004fcc:	f107 0214 	add.w	r2, r7, #20
 8004fd0:	79f9      	ldrb	r1, [r7, #7]
 8004fd2:	2306      	movs	r3, #6
 8004fd4:	68b8      	ldr	r0, [r7, #8]
 8004fd6:	f000 fccf 	bl	8005978 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 8004fda:	7d3b      	ldrb	r3, [r7, #20]
 8004fdc:	b21a      	sxth	r2, r3
 8004fde:	7d7b      	ldrb	r3, [r7, #21]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	b21b      	sxth	r3, r3
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 8004fe8:	7dbb      	ldrb	r3, [r7, #22]
 8004fea:	b21a      	sxth	r2, r3
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
 8004fee:	021b      	lsls	r3, r3, #8
 8004ff0:	b21b      	sxth	r3, r3
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 8004ff6:	7e3b      	ldrb	r3, [r7, #24]
 8004ff8:	b21a      	sxth	r2, r3
 8004ffa:	7e7b      	ldrb	r3, [r7, #25]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	b21b      	sxth	r3, r3
 8005000:	4313      	orrs	r3, r2
 8005002:	83fb      	strh	r3, [r7, #30]

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	3b08      	subs	r3, #8
 8005008:	2b26      	cmp	r3, #38	; 0x26
 800500a:	f200 81f6 	bhi.w	80053fa <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x45e>
 800500e:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	08005255 	.word	0x08005255
 8005018:	080053fb 	.word	0x080053fb
 800501c:	080053fb 	.word	0x080053fb
 8005020:	080053fb 	.word	0x080053fb
 8005024:	080053fb 	.word	0x080053fb
 8005028:	080053fb 	.word	0x080053fb
 800502c:	080050b1 	.word	0x080050b1
 8005030:	080053fb 	.word	0x080053fb
 8005034:	080053fb 	.word	0x080053fb
 8005038:	080053fb 	.word	0x080053fb
 800503c:	080053fb 	.word	0x080053fb
 8005040:	080053fb 	.word	0x080053fb
 8005044:	0800513d 	.word	0x0800513d
 8005048:	080053fb 	.word	0x080053fb
 800504c:	080053fb 	.word	0x080053fb
 8005050:	080053fb 	.word	0x080053fb
 8005054:	080053fb 	.word	0x080053fb
 8005058:	080053fb 	.word	0x080053fb
 800505c:	080051c9 	.word	0x080051c9
 8005060:	080053fb 	.word	0x080053fb
 8005064:	080053fb 	.word	0x080053fb
 8005068:	080053fb 	.word	0x080053fb
 800506c:	080053fb 	.word	0x080053fb
 8005070:	080053fb 	.word	0x080053fb
 8005074:	080053fb 	.word	0x080053fb
 8005078:	080053fb 	.word	0x080053fb
 800507c:	080053fb 	.word	0x080053fb
 8005080:	080053fb 	.word	0x080053fb
 8005084:	080053fb 	.word	0x080053fb
 8005088:	080053fb 	.word	0x080053fb
 800508c:	080053fb 	.word	0x080053fb
 8005090:	080053fb 	.word	0x080053fb
 8005094:	080052e1 	.word	0x080052e1
 8005098:	080053fb 	.word	0x080053fb
 800509c:	080053fb 	.word	0x080053fb
 80050a0:	080053fb 	.word	0x080053fb
 80050a4:	080053fb 	.word	0x080053fb
 80050a8:	080053fb 	.word	0x080053fb
 80050ac:	0800536d 	.word	0x0800536d
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
 80050b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fb f9d9 	bl	800046c <__aeabi_i2d>
 80050ba:	4680      	mov	r8, r0
 80050bc:	4689      	mov	r9, r1
 80050be:	2100      	movs	r1, #0
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 fcf2 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 80050c6:	4605      	mov	r5, r0
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	4bce      	ldr	r3, [pc, #824]	; (8005408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 80050ce:	4640      	mov	r0, r8
 80050d0:	4649      	mov	r1, r9
 80050d2:	f7fb fb5f 	bl	8000794 <__aeabi_ddiv>
 80050d6:	4603      	mov	r3, r0
 80050d8:	460c      	mov	r4, r1
 80050da:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[1] = ((double)y) / 16.0;
 80050de:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fb f9c2 	bl	800046c <__aeabi_i2d>
 80050e8:	4680      	mov	r8, r0
 80050ea:	4689      	mov	r9, r1
 80050ec:	2101      	movs	r1, #1
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fcdb 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 80050f4:	4605      	mov	r5, r0
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	4bc3      	ldr	r3, [pc, #780]	; (8005408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 80050fc:	4640      	mov	r0, r8
 80050fe:	4649      	mov	r1, r9
 8005100:	f7fb fb48 	bl	8000794 <__aeabi_ddiv>
 8005104:	4603      	mov	r3, r0
 8005106:	460c      	mov	r4, r1
 8005108:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[2] = ((double)z) / 16.0;
 800510c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005110:	4618      	mov	r0, r3
 8005112:	f7fb f9ab 	bl	800046c <__aeabi_i2d>
 8005116:	4680      	mov	r8, r0
 8005118:	4689      	mov	r9, r1
 800511a:	2102      	movs	r1, #2
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 fcc4 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 8005122:	4605      	mov	r5, r0
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	4bb7      	ldr	r3, [pc, #732]	; (8005408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 800512a:	4640      	mov	r0, r8
 800512c:	4649      	mov	r1, r9
 800512e:	f7fb fb31 	bl	8000794 <__aeabi_ddiv>
 8005132:	4603      	mov	r3, r0
 8005134:	460c      	mov	r4, r1
 8005136:	e9c5 3400 	strd	r3, r4, [r5]
    break;
 800513a:	e15d      	b.n	80053f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x45c>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
 800513c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005140:	4618      	mov	r0, r3
 8005142:	f7fb f993 	bl	800046c <__aeabi_i2d>
 8005146:	4680      	mov	r8, r0
 8005148:	4689      	mov	r9, r1
 800514a:	2100      	movs	r1, #0
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 fcac 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 8005152:	4605      	mov	r5, r0
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	4bab      	ldr	r3, [pc, #684]	; (8005408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 800515a:	4640      	mov	r0, r8
 800515c:	4649      	mov	r1, r9
 800515e:	f7fb fb19 	bl	8000794 <__aeabi_ddiv>
 8005162:	4603      	mov	r3, r0
 8005164:	460c      	mov	r4, r1
 8005166:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[1] = ((double)y) / 16.0;
 800516a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800516e:	4618      	mov	r0, r3
 8005170:	f7fb f97c 	bl	800046c <__aeabi_i2d>
 8005174:	4680      	mov	r8, r0
 8005176:	4689      	mov	r9, r1
 8005178:	2101      	movs	r1, #1
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 fc95 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 8005180:	4605      	mov	r5, r0
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	4ba0      	ldr	r3, [pc, #640]	; (8005408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 8005188:	4640      	mov	r0, r8
 800518a:	4649      	mov	r1, r9
 800518c:	f7fb fb02 	bl	8000794 <__aeabi_ddiv>
 8005190:	4603      	mov	r3, r0
 8005192:	460c      	mov	r4, r1
 8005194:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[2] = ((double)z) / 16.0;
 8005198:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800519c:	4618      	mov	r0, r3
 800519e:	f7fb f965 	bl	800046c <__aeabi_i2d>
 80051a2:	4680      	mov	r8, r0
 80051a4:	4689      	mov	r9, r1
 80051a6:	2102      	movs	r1, #2
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fc7e 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 80051ae:	4605      	mov	r5, r0
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	4b94      	ldr	r3, [pc, #592]	; (8005408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 80051b6:	4640      	mov	r0, r8
 80051b8:	4649      	mov	r1, r9
 80051ba:	f7fb faeb 	bl	8000794 <__aeabi_ddiv>
 80051be:	4603      	mov	r3, r0
 80051c0:	460c      	mov	r4, r1
 80051c2:	e9c5 3400 	strd	r3, r4, [r5]
    break;
 80051c6:	e117      	b.n	80053f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x45c>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
 80051c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fb f94d 	bl	800046c <__aeabi_i2d>
 80051d2:	4680      	mov	r8, r0
 80051d4:	4689      	mov	r9, r1
 80051d6:	2100      	movs	r1, #0
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 fc66 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 80051de:	4605      	mov	r5, r0
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	4b88      	ldr	r3, [pc, #544]	; (8005408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 80051e6:	4640      	mov	r0, r8
 80051e8:	4649      	mov	r1, r9
 80051ea:	f7fb fad3 	bl	8000794 <__aeabi_ddiv>
 80051ee:	4603      	mov	r3, r0
 80051f0:	460c      	mov	r4, r1
 80051f2:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[1] = ((double)y) / 16.0;
 80051f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fb f936 	bl	800046c <__aeabi_i2d>
 8005200:	4680      	mov	r8, r0
 8005202:	4689      	mov	r9, r1
 8005204:	2101      	movs	r1, #1
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 fc4f 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 800520c:	4605      	mov	r5, r0
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	4b7d      	ldr	r3, [pc, #500]	; (8005408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 8005214:	4640      	mov	r0, r8
 8005216:	4649      	mov	r1, r9
 8005218:	f7fb fabc 	bl	8000794 <__aeabi_ddiv>
 800521c:	4603      	mov	r3, r0
 800521e:	460c      	mov	r4, r1
 8005220:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[2] = ((double)z) / 16.0;
 8005224:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005228:	4618      	mov	r0, r3
 800522a:	f7fb f91f 	bl	800046c <__aeabi_i2d>
 800522e:	4680      	mov	r8, r0
 8005230:	4689      	mov	r9, r1
 8005232:	2102      	movs	r1, #2
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 fc38 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 800523a:	4605      	mov	r5, r0
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	4b71      	ldr	r3, [pc, #452]	; (8005408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 8005242:	4640      	mov	r0, r8
 8005244:	4649      	mov	r1, r9
 8005246:	f7fb faa5 	bl	8000794 <__aeabi_ddiv>
 800524a:	4603      	mov	r3, r0
 800524c:	460c      	mov	r4, r1
 800524e:	e9c5 3400 	strd	r3, r4, [r5]
    break;
 8005252:	e0d1      	b.n	80053f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x45c>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
 8005254:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005258:	4618      	mov	r0, r3
 800525a:	f7fb f907 	bl	800046c <__aeabi_i2d>
 800525e:	4680      	mov	r8, r0
 8005260:	4689      	mov	r9, r1
 8005262:	2100      	movs	r1, #0
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 fc20 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 800526a:	4605      	mov	r5, r0
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	4b66      	ldr	r3, [pc, #408]	; (800540c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 8005272:	4640      	mov	r0, r8
 8005274:	4649      	mov	r1, r9
 8005276:	f7fb fa8d 	bl	8000794 <__aeabi_ddiv>
 800527a:	4603      	mov	r3, r0
 800527c:	460c      	mov	r4, r1
 800527e:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[1] = ((double)y) / 100.0;
 8005282:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005286:	4618      	mov	r0, r3
 8005288:	f7fb f8f0 	bl	800046c <__aeabi_i2d>
 800528c:	4680      	mov	r8, r0
 800528e:	4689      	mov	r9, r1
 8005290:	2101      	movs	r1, #1
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 fc09 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 8005298:	4605      	mov	r5, r0
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	4b5b      	ldr	r3, [pc, #364]	; (800540c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 80052a0:	4640      	mov	r0, r8
 80052a2:	4649      	mov	r1, r9
 80052a4:	f7fb fa76 	bl	8000794 <__aeabi_ddiv>
 80052a8:	4603      	mov	r3, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[2] = ((double)z) / 100.0;
 80052b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fb f8d9 	bl	800046c <__aeabi_i2d>
 80052ba:	4680      	mov	r8, r0
 80052bc:	4689      	mov	r9, r1
 80052be:	2102      	movs	r1, #2
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 fbf2 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 80052c6:	4605      	mov	r5, r0
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	4b4f      	ldr	r3, [pc, #316]	; (800540c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 80052ce:	4640      	mov	r0, r8
 80052d0:	4649      	mov	r1, r9
 80052d2:	f7fb fa5f 	bl	8000794 <__aeabi_ddiv>
 80052d6:	4603      	mov	r3, r0
 80052d8:	460c      	mov	r4, r1
 80052da:	e9c5 3400 	strd	r3, r4, [r5]
    break;
 80052de:	e08b      	b.n	80053f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x45c>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
 80052e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fb f8c1 	bl	800046c <__aeabi_i2d>
 80052ea:	4680      	mov	r8, r0
 80052ec:	4689      	mov	r9, r1
 80052ee:	2100      	movs	r1, #0
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 fbda 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 80052f6:	4605      	mov	r5, r0
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	4b43      	ldr	r3, [pc, #268]	; (800540c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 80052fe:	4640      	mov	r0, r8
 8005300:	4649      	mov	r1, r9
 8005302:	f7fb fa47 	bl	8000794 <__aeabi_ddiv>
 8005306:	4603      	mov	r3, r0
 8005308:	460c      	mov	r4, r1
 800530a:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[1] = ((double)y) / 100.0;
 800530e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005312:	4618      	mov	r0, r3
 8005314:	f7fb f8aa 	bl	800046c <__aeabi_i2d>
 8005318:	4680      	mov	r8, r0
 800531a:	4689      	mov	r9, r1
 800531c:	2101      	movs	r1, #1
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fbc3 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 8005324:	4605      	mov	r5, r0
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	4b38      	ldr	r3, [pc, #224]	; (800540c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 800532c:	4640      	mov	r0, r8
 800532e:	4649      	mov	r1, r9
 8005330:	f7fb fa30 	bl	8000794 <__aeabi_ddiv>
 8005334:	4603      	mov	r3, r0
 8005336:	460c      	mov	r4, r1
 8005338:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[2] = ((double)z) / 100.0;
 800533c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005340:	4618      	mov	r0, r3
 8005342:	f7fb f893 	bl	800046c <__aeabi_i2d>
 8005346:	4680      	mov	r8, r0
 8005348:	4689      	mov	r9, r1
 800534a:	2102      	movs	r1, #2
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 fbac 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 8005352:	4605      	mov	r5, r0
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	4b2c      	ldr	r3, [pc, #176]	; (800540c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 800535a:	4640      	mov	r0, r8
 800535c:	4649      	mov	r1, r9
 800535e:	f7fb fa19 	bl	8000794 <__aeabi_ddiv>
 8005362:	4603      	mov	r3, r0
 8005364:	460c      	mov	r4, r1
 8005366:	e9c5 3400 	strd	r3, r4, [r5]
    break;
 800536a:	e045      	b.n	80053f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x45c>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
 800536c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005370:	4618      	mov	r0, r3
 8005372:	f7fb f87b 	bl	800046c <__aeabi_i2d>
 8005376:	4680      	mov	r8, r0
 8005378:	4689      	mov	r9, r1
 800537a:	2100      	movs	r1, #0
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 fb94 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 8005382:	4605      	mov	r5, r0
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	4b20      	ldr	r3, [pc, #128]	; (800540c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 800538a:	4640      	mov	r0, r8
 800538c:	4649      	mov	r1, r9
 800538e:	f7fb fa01 	bl	8000794 <__aeabi_ddiv>
 8005392:	4603      	mov	r3, r0
 8005394:	460c      	mov	r4, r1
 8005396:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[1] = ((double)y) / 100.0;
 800539a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fb f864 	bl	800046c <__aeabi_i2d>
 80053a4:	4680      	mov	r8, r0
 80053a6:	4689      	mov	r9, r1
 80053a8:	2101      	movs	r1, #1
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 fb7d 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 80053b0:	4605      	mov	r5, r0
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	4b15      	ldr	r3, [pc, #84]	; (800540c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 80053b8:	4640      	mov	r0, r8
 80053ba:	4649      	mov	r1, r9
 80053bc:	f7fb f9ea 	bl	8000794 <__aeabi_ddiv>
 80053c0:	4603      	mov	r3, r0
 80053c2:	460c      	mov	r4, r1
 80053c4:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[2] = ((double)z) / 100.0;
 80053c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fb f84d 	bl	800046c <__aeabi_i2d>
 80053d2:	4680      	mov	r8, r0
 80053d4:	4689      	mov	r9, r1
 80053d6:	2102      	movs	r1, #2
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 fb66 	bl	8005aaa <_ZN3imu6VectorILh3EEixEi>
 80053de:	4605      	mov	r5, r0
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	4b09      	ldr	r3, [pc, #36]	; (800540c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 80053e6:	4640      	mov	r0, r8
 80053e8:	4649      	mov	r1, r9
 80053ea:	f7fb f9d3 	bl	8000794 <__aeabi_ddiv>
 80053ee:	4603      	mov	r3, r0
 80053f0:	460c      	mov	r4, r1
 80053f2:	e9c5 3400 	strd	r3, r4, [r5]
    break;
 80053f6:	bf00      	nop
  }

  return xyz;
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop
}
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	3720      	adds	r7, #32
 8005400:	46bd      	mov	sp, r7
 8005402:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005406:	bf00      	nop
 8005408:	40300000 	.word	0x40300000
 800540c:	40590000 	.word	0x40590000

08005410 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 800541a:	2228      	movs	r2, #40	; 0x28
 800541c:	2100      	movs	r1, #0
 800541e:	6838      	ldr	r0, [r7, #0]
 8005420:	f001 fd43 	bl	8006eaa <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	220b      	movs	r2, #11
 8005428:	4911      	ldr	r1, [pc, #68]	; (8005470 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 800542a:	4618      	mov	r0, r3
 800542c:	f001 fdd8 	bl	8006fe0 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2200      	movs	r2, #0
 8005434:	72da      	strb	r2, [r3, #11]
  sensor->version = 1;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2201      	movs	r2, #1
 800543a:	60da      	str	r2, [r3, #12]
  sensor->sensor_id = _sensorID;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	611a      	str	r2, [r3, #16]
  sensor->type = SENSOR_TYPE_ORIENTATION;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2203      	movs	r2, #3
 8005448:	615a      	str	r2, [r3, #20]
  sensor->min_delay = 0;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2200      	movs	r2, #0
 800544e:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->max_value = 0.0F;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	619a      	str	r2, [r3, #24]
  sensor->min_value = 0.0F;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	61da      	str	r2, [r3, #28]
  sensor->resolution = 0.01F;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	4a04      	ldr	r2, [pc, #16]	; (8005474 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 8005464:	621a      	str	r2, [r3, #32]
}
 8005466:	bf00      	nop
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	08007028 	.word	0x08007028
 8005474:	3c23d70a 	.word	0x3c23d70a

08005478 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b089      	sub	sp, #36	; 0x24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 8005482:	2224      	movs	r2, #36	; 0x24
 8005484:	2100      	movs	r1, #0
 8005486:	6838      	ldr	r0, [r7, #0]
 8005488:	f001 fd0f 	bl	8006eaa <memset>

  event->version = sizeof(sensors_event_t);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2224      	movs	r2, #36	; 0x24
 8005490:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	605a      	str	r2, [r3, #4]
  event->type = SENSOR_TYPE_ORIENTATION;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2203      	movs	r2, #3
 800549e:	609a      	str	r2, [r3, #8]
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80054a0:	f107 0308 	add.w	r3, r7, #8
 80054a4:	221a      	movs	r2, #26
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff fd77 	bl	8004f9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80054ae:	f107 0308 	add.w	r3, r7, #8
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fac7 	bl	8005a46 <_ZN3imu6VectorILh3EE1xEv>
 80054b8:	4603      	mov	r3, r0
 80054ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054be:	4618      	mov	r0, r3
 80054c0:	4621      	mov	r1, r4
 80054c2:	f7fb fa4f 	bl	8000964 <__aeabi_d2f>
 80054c6:	4602      	mov	r2, r0
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 80054cc:	f107 0308 	add.w	r3, r7, #8
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fac3 	bl	8005a5c <_ZN3imu6VectorILh3EE1yEv>
 80054d6:	4603      	mov	r3, r0
 80054d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054dc:	4618      	mov	r0, r3
 80054de:	4621      	mov	r1, r4
 80054e0:	f7fb fa40 	bl	8000964 <__aeabi_d2f>
 80054e4:	4602      	mov	r2, r0
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 80054ea:	f107 0308 	add.w	r3, r7, #8
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fac0 	bl	8005a74 <_ZN3imu6VectorILh3EE1zEv>
 80054f4:	4603      	mov	r3, r0
 80054f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054fa:	4618      	mov	r0, r3
 80054fc:	4621      	mov	r1, r4
 80054fe:	f7fb fa31 	bl	8000964 <__aeabi_d2f>
 8005502:	4602      	mov	r2, r0
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	61da      	str	r2, [r3, #28]

  return true;
 8005508:	2401      	movs	r4, #1
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 800550a:	f107 0308 	add.w	r3, r7, #8
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fa8e 	bl	8005a30 <_ZN3imu6VectorILh3EED1Ev>
  return true;
 8005514:	4623      	mov	r3, r4
}
 8005516:	4618      	mov	r0, r3
 8005518:	3724      	adds	r7, #36	; 0x24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd90      	pop	{r4, r7, pc}

0800551e <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE>:
 *  @param  vec_type
 *          specify the type of reading
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event, adafruit_vector_type_t vec_type)
{
 800551e:	b590      	push	{r4, r7, lr}
 8005520:	b0af      	sub	sp, #188	; 0xbc
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	4613      	mov	r3, r2
 800552a:	71fb      	strb	r3, [r7, #7]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 800552c:	2224      	movs	r2, #36	; 0x24
 800552e:	2100      	movs	r1, #0
 8005530:	68b8      	ldr	r0, [r7, #8]
 8005532:	f001 fcba 	bl	8006eaa <memset>

  event->version = sizeof(sensors_event_t);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2224      	movs	r2, #36	; 0x24
 800553a:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	605a      	str	r2, [r3, #4]
  //event->timestamp = millis();

  //read the data according to vec_type
  imu::Vector<3> vec;
 8005544:	f107 0310 	add.w	r3, r7, #16
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fa9f 	bl	8005a8c <_ZN3imu6VectorILh3EEC1Ev>
  if (vec_type == Adafruit_BNO055::VECTOR_LINEARACCEL)
 800554e:	79fb      	ldrb	r3, [r7, #7]
 8005550:	2b28      	cmp	r3, #40	; 0x28
 8005552:	d144      	bne.n	80055de <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0xc0>
  {
    event->type = SENSOR_TYPE_LINEAR_ACCELERATION;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	220a      	movs	r2, #10
 8005558:	609a      	str	r2, [r3, #8]
    vec = getVector(Adafruit_BNO055::VECTOR_LINEARACCEL);
 800555a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800555e:	2228      	movs	r2, #40	; 0x28
 8005560:	68f9      	ldr	r1, [r7, #12]
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff fd1a 	bl	8004f9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 8005568:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800556c:	f107 0310 	add.w	r3, r7, #16
 8005570:	4611      	mov	r1, r2
 8005572:	4618      	mov	r0, r3
 8005574:	f000 faa8 	bl	8005ac8 <_ZN3imu6VectorILh3EEaSERKS1_>
 8005578:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fa57 	bl	8005a30 <_ZN3imu6VectorILh3EED1Ev>

    event->acceleration.x = vec.x();
 8005582:	f107 0310 	add.w	r3, r7, #16
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fa5d 	bl	8005a46 <_ZN3imu6VectorILh3EE1xEv>
 800558c:	4603      	mov	r3, r0
 800558e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005592:	4618      	mov	r0, r3
 8005594:	4621      	mov	r1, r4
 8005596:	f7fb f9e5 	bl	8000964 <__aeabi_d2f>
 800559a:	4602      	mov	r2, r0
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	615a      	str	r2, [r3, #20]
    event->acceleration.y = vec.y();
 80055a0:	f107 0310 	add.w	r3, r7, #16
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fa59 	bl	8005a5c <_ZN3imu6VectorILh3EE1yEv>
 80055aa:	4603      	mov	r3, r0
 80055ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055b0:	4618      	mov	r0, r3
 80055b2:	4621      	mov	r1, r4
 80055b4:	f7fb f9d6 	bl	8000964 <__aeabi_d2f>
 80055b8:	4602      	mov	r2, r0
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	619a      	str	r2, [r3, #24]
    event->acceleration.z = vec.z();
 80055be:	f107 0310 	add.w	r3, r7, #16
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fa56 	bl	8005a74 <_ZN3imu6VectorILh3EE1zEv>
 80055c8:	4603      	mov	r3, r0
 80055ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055ce:	4618      	mov	r0, r3
 80055d0:	4621      	mov	r1, r4
 80055d2:	f7fb f9c7 	bl	8000964 <__aeabi_d2f>
 80055d6:	4602      	mov	r2, r0
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	61da      	str	r2, [r3, #28]
 80055dc:	e166      	b.n	80058ac <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x38e>
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_ACCELEROMETER)
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d144      	bne.n	800566e <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x150>
  {
    event->type = SENSOR_TYPE_ACCELEROMETER;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2201      	movs	r2, #1
 80055e8:	609a      	str	r2, [r3, #8]
    vec = getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
 80055ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055ee:	2208      	movs	r2, #8
 80055f0:	68f9      	ldr	r1, [r7, #12]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff fcd2 	bl	8004f9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 80055f8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80055fc:	f107 0310 	add.w	r3, r7, #16
 8005600:	4611      	mov	r1, r2
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fa60 	bl	8005ac8 <_ZN3imu6VectorILh3EEaSERKS1_>
 8005608:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fa0f 	bl	8005a30 <_ZN3imu6VectorILh3EED1Ev>

    event->acceleration.x = vec.x();
 8005612:	f107 0310 	add.w	r3, r7, #16
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fa15 	bl	8005a46 <_ZN3imu6VectorILh3EE1xEv>
 800561c:	4603      	mov	r3, r0
 800561e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005622:	4618      	mov	r0, r3
 8005624:	4621      	mov	r1, r4
 8005626:	f7fb f99d 	bl	8000964 <__aeabi_d2f>
 800562a:	4602      	mov	r2, r0
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	615a      	str	r2, [r3, #20]
    event->acceleration.y = vec.y();
 8005630:	f107 0310 	add.w	r3, r7, #16
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fa11 	bl	8005a5c <_ZN3imu6VectorILh3EE1yEv>
 800563a:	4603      	mov	r3, r0
 800563c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005640:	4618      	mov	r0, r3
 8005642:	4621      	mov	r1, r4
 8005644:	f7fb f98e 	bl	8000964 <__aeabi_d2f>
 8005648:	4602      	mov	r2, r0
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	619a      	str	r2, [r3, #24]
    event->acceleration.z = vec.z();
 800564e:	f107 0310 	add.w	r3, r7, #16
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fa0e 	bl	8005a74 <_ZN3imu6VectorILh3EE1zEv>
 8005658:	4603      	mov	r3, r0
 800565a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800565e:	4618      	mov	r0, r3
 8005660:	4621      	mov	r1, r4
 8005662:	f7fb f97f 	bl	8000964 <__aeabi_d2f>
 8005666:	4602      	mov	r2, r0
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	61da      	str	r2, [r3, #28]
 800566c:	e11e      	b.n	80058ac <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x38e>
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_GRAVITY)
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	2b2e      	cmp	r3, #46	; 0x2e
 8005672:	d144      	bne.n	80056fe <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x1e0>
  {
    event->type = SENSOR_TYPE_ACCELEROMETER;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2201      	movs	r2, #1
 8005678:	609a      	str	r2, [r3, #8]
    vec = getVector(Adafruit_BNO055::VECTOR_GRAVITY);
 800567a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800567e:	222e      	movs	r2, #46	; 0x2e
 8005680:	68f9      	ldr	r1, [r7, #12]
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff fc8a 	bl	8004f9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 8005688:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800568c:	f107 0310 	add.w	r3, r7, #16
 8005690:	4611      	mov	r1, r2
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fa18 	bl	8005ac8 <_ZN3imu6VectorILh3EEaSERKS1_>
 8005698:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800569c:	4618      	mov	r0, r3
 800569e:	f000 f9c7 	bl	8005a30 <_ZN3imu6VectorILh3EED1Ev>

    event->acceleration.x = vec.x();
 80056a2:	f107 0310 	add.w	r3, r7, #16
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 f9cd 	bl	8005a46 <_ZN3imu6VectorILh3EE1xEv>
 80056ac:	4603      	mov	r3, r0
 80056ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056b2:	4618      	mov	r0, r3
 80056b4:	4621      	mov	r1, r4
 80056b6:	f7fb f955 	bl	8000964 <__aeabi_d2f>
 80056ba:	4602      	mov	r2, r0
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	615a      	str	r2, [r3, #20]
    event->acceleration.y = vec.y();
 80056c0:	f107 0310 	add.w	r3, r7, #16
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 f9c9 	bl	8005a5c <_ZN3imu6VectorILh3EE1yEv>
 80056ca:	4603      	mov	r3, r0
 80056cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056d0:	4618      	mov	r0, r3
 80056d2:	4621      	mov	r1, r4
 80056d4:	f7fb f946 	bl	8000964 <__aeabi_d2f>
 80056d8:	4602      	mov	r2, r0
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	619a      	str	r2, [r3, #24]
    event->acceleration.z = vec.z();
 80056de:	f107 0310 	add.w	r3, r7, #16
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 f9c6 	bl	8005a74 <_ZN3imu6VectorILh3EE1zEv>
 80056e8:	4603      	mov	r3, r0
 80056ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056ee:	4618      	mov	r0, r3
 80056f0:	4621      	mov	r1, r4
 80056f2:	f7fb f937 	bl	8000964 <__aeabi_d2f>
 80056f6:	4602      	mov	r2, r0
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	61da      	str	r2, [r3, #28]
 80056fc:	e0d6      	b.n	80058ac <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x38e>
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_EULER)
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	2b1a      	cmp	r3, #26
 8005702:	d144      	bne.n	800578e <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x270>
  {
    event->type = SENSOR_TYPE_ORIENTATION;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2203      	movs	r2, #3
 8005708:	609a      	str	r2, [r3, #8]
    vec = getVector(Adafruit_BNO055::VECTOR_EULER);
 800570a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800570e:	221a      	movs	r2, #26
 8005710:	68f9      	ldr	r1, [r7, #12]
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff fc42 	bl	8004f9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 8005718:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800571c:	f107 0310 	add.w	r3, r7, #16
 8005720:	4611      	mov	r1, r2
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f9d0 	bl	8005ac8 <_ZN3imu6VectorILh3EEaSERKS1_>
 8005728:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800572c:	4618      	mov	r0, r3
 800572e:	f000 f97f 	bl	8005a30 <_ZN3imu6VectorILh3EED1Ev>

    event->orientation.x = vec.x();
 8005732:	f107 0310 	add.w	r3, r7, #16
 8005736:	4618      	mov	r0, r3
 8005738:	f000 f985 	bl	8005a46 <_ZN3imu6VectorILh3EE1xEv>
 800573c:	4603      	mov	r3, r0
 800573e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005742:	4618      	mov	r0, r3
 8005744:	4621      	mov	r1, r4
 8005746:	f7fb f90d 	bl	8000964 <__aeabi_d2f>
 800574a:	4602      	mov	r2, r0
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	615a      	str	r2, [r3, #20]
    event->orientation.y = vec.y();
 8005750:	f107 0310 	add.w	r3, r7, #16
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f981 	bl	8005a5c <_ZN3imu6VectorILh3EE1yEv>
 800575a:	4603      	mov	r3, r0
 800575c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005760:	4618      	mov	r0, r3
 8005762:	4621      	mov	r1, r4
 8005764:	f7fb f8fe 	bl	8000964 <__aeabi_d2f>
 8005768:	4602      	mov	r2, r0
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	619a      	str	r2, [r3, #24]
    event->orientation.z = vec.z();
 800576e:	f107 0310 	add.w	r3, r7, #16
 8005772:	4618      	mov	r0, r3
 8005774:	f000 f97e 	bl	8005a74 <_ZN3imu6VectorILh3EE1zEv>
 8005778:	4603      	mov	r3, r0
 800577a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800577e:	4618      	mov	r0, r3
 8005780:	4621      	mov	r1, r4
 8005782:	f7fb f8ef 	bl	8000964 <__aeabi_d2f>
 8005786:	4602      	mov	r2, r0
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	61da      	str	r2, [r3, #28]
 800578c:	e08e      	b.n	80058ac <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x38e>
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_GYROSCOPE)
 800578e:	79fb      	ldrb	r3, [r7, #7]
 8005790:	2b14      	cmp	r3, #20
 8005792:	d144      	bne.n	800581e <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x300>
  {
    event->type = SENSOR_TYPE_ROTATION_VECTOR;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	220b      	movs	r2, #11
 8005798:	609a      	str	r2, [r3, #8]
    vec = getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
 800579a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800579e:	2214      	movs	r2, #20
 80057a0:	68f9      	ldr	r1, [r7, #12]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff fbfa 	bl	8004f9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 80057a8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80057ac:	f107 0310 	add.w	r3, r7, #16
 80057b0:	4611      	mov	r1, r2
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 f988 	bl	8005ac8 <_ZN3imu6VectorILh3EEaSERKS1_>
 80057b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 f937 	bl	8005a30 <_ZN3imu6VectorILh3EED1Ev>

    event->gyro.x = vec.x();
 80057c2:	f107 0310 	add.w	r3, r7, #16
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 f93d 	bl	8005a46 <_ZN3imu6VectorILh3EE1xEv>
 80057cc:	4603      	mov	r3, r0
 80057ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057d2:	4618      	mov	r0, r3
 80057d4:	4621      	mov	r1, r4
 80057d6:	f7fb f8c5 	bl	8000964 <__aeabi_d2f>
 80057da:	4602      	mov	r2, r0
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	615a      	str	r2, [r3, #20]
    event->gyro.y = vec.y();
 80057e0:	f107 0310 	add.w	r3, r7, #16
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 f939 	bl	8005a5c <_ZN3imu6VectorILh3EE1yEv>
 80057ea:	4603      	mov	r3, r0
 80057ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057f0:	4618      	mov	r0, r3
 80057f2:	4621      	mov	r1, r4
 80057f4:	f7fb f8b6 	bl	8000964 <__aeabi_d2f>
 80057f8:	4602      	mov	r2, r0
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	619a      	str	r2, [r3, #24]
    event->gyro.z = vec.z();
 80057fe:	f107 0310 	add.w	r3, r7, #16
 8005802:	4618      	mov	r0, r3
 8005804:	f000 f936 	bl	8005a74 <_ZN3imu6VectorILh3EE1zEv>
 8005808:	4603      	mov	r3, r0
 800580a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800580e:	4618      	mov	r0, r3
 8005810:	4621      	mov	r1, r4
 8005812:	f7fb f8a7 	bl	8000964 <__aeabi_d2f>
 8005816:	4602      	mov	r2, r0
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	61da      	str	r2, [r3, #28]
 800581c:	e046      	b.n	80058ac <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x38e>
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_MAGNETOMETER)
 800581e:	79fb      	ldrb	r3, [r7, #7]
 8005820:	2b0e      	cmp	r3, #14
 8005822:	d143      	bne.n	80058ac <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x38e>
  {
    event->type = SENSOR_TYPE_MAGNETIC_FIELD;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2202      	movs	r2, #2
 8005828:	609a      	str	r2, [r3, #8]
    vec = getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
 800582a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800582e:	220e      	movs	r2, #14
 8005830:	68f9      	ldr	r1, [r7, #12]
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff fbb2 	bl	8004f9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 8005838:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800583c:	f107 0310 	add.w	r3, r7, #16
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f000 f940 	bl	8005ac8 <_ZN3imu6VectorILh3EEaSERKS1_>
 8005848:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800584c:	4618      	mov	r0, r3
 800584e:	f000 f8ef 	bl	8005a30 <_ZN3imu6VectorILh3EED1Ev>

    event->magnetic.x = vec.x();
 8005852:	f107 0310 	add.w	r3, r7, #16
 8005856:	4618      	mov	r0, r3
 8005858:	f000 f8f5 	bl	8005a46 <_ZN3imu6VectorILh3EE1xEv>
 800585c:	4603      	mov	r3, r0
 800585e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005862:	4618      	mov	r0, r3
 8005864:	4621      	mov	r1, r4
 8005866:	f7fb f87d 	bl	8000964 <__aeabi_d2f>
 800586a:	4602      	mov	r2, r0
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	615a      	str	r2, [r3, #20]
    event->magnetic.y = vec.y();
 8005870:	f107 0310 	add.w	r3, r7, #16
 8005874:	4618      	mov	r0, r3
 8005876:	f000 f8f1 	bl	8005a5c <_ZN3imu6VectorILh3EE1yEv>
 800587a:	4603      	mov	r3, r0
 800587c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005880:	4618      	mov	r0, r3
 8005882:	4621      	mov	r1, r4
 8005884:	f7fb f86e 	bl	8000964 <__aeabi_d2f>
 8005888:	4602      	mov	r2, r0
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	619a      	str	r2, [r3, #24]
    event->magnetic.z = vec.z();
 800588e:	f107 0310 	add.w	r3, r7, #16
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f8ee 	bl	8005a74 <_ZN3imu6VectorILh3EE1zEv>
 8005898:	4603      	mov	r3, r0
 800589a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800589e:	4618      	mov	r0, r3
 80058a0:	4621      	mov	r1, r4
 80058a2:	f7fb f85f 	bl	8000964 <__aeabi_d2f>
 80058a6:	4602      	mov	r2, r0
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	61da      	str	r2, [r3, #28]
  }
  

  return true;
 80058ac:	2401      	movs	r4, #1
  imu::Vector<3> vec;
 80058ae:	f107 0310 	add.w	r3, r7, #16
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 f8bc 	bl	8005a30 <_ZN3imu6VectorILh3EED1Ev>
  return true;
 80058b8:	4623      	mov	r3, r4
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	37bc      	adds	r7, #188	; 0xbc
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd90      	pop	{r4, r7, pc}

080058c2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
}

/*!
 *  @brief  Writes an 8 bit value over I2C
 */
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, uint8_t value) {
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b086      	sub	sp, #24
 80058c6:	af02      	add	r7, sp, #8
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	460b      	mov	r3, r1
 80058cc:	70fb      	strb	r3, [r7, #3]
 80058ce:	4613      	mov	r3, r2
 80058d0:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef status = HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]

	uint8_t buffer[2];
	buffer[0] = reg; // register
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	733b      	strb	r3, [r7, #12]
	buffer[1] = value; // MSB
 80058da:	78bb      	ldrb	r3, [r7, #2]
 80058dc:	737b      	strb	r3, [r7, #13]

	status = HAL_I2C_Master_Transmit(&_hi2c1, _address<<1, buffer, 2, 100);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f103 0008 	add.w	r0, r3, #8
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	795b      	ldrb	r3, [r3, #5]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	b299      	uxth	r1, r3
 80058ee:	f107 020c 	add.w	r2, r7, #12
 80058f2:	2364      	movs	r3, #100	; 0x64
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	2302      	movs	r3, #2
 80058f8:	f7fc fe70 	bl	80025dc <HAL_I2C_Master_Transmit>
 80058fc:	4603      	mov	r3, r0
 80058fe:	73fb      	strb	r3, [r7, #15]

	return true;
 8005900:	2301      	movs	r3, #1
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:

/*!
 *  @brief  Reads an 8 bit value over I2C
 */
uint8_t Adafruit_BNO055::read8(adafruit_bno055_reg_t reg) {
 800590a:	b580      	push	{r7, lr}
 800590c:	b086      	sub	sp, #24
 800590e:	af02      	add	r7, sp, #8
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	460b      	mov	r3, r1
 8005914:	70fb      	strb	r3, [r7, #3]

  uint8_t value = 0;
 8005916:	2300      	movs	r3, #0
 8005918:	73fb      	strb	r3, [r7, #15]
  uint8_t rx[1] = {0};
 800591a:	2300      	movs	r3, #0
 800591c:	733b      	strb	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	73bb      	strb	r3, [r7, #14]
  uint8_t tx = (uint8_t)reg;
 8005922:	78fb      	ldrb	r3, [r7, #3]
 8005924:	72fb      	strb	r3, [r7, #11]

  status = HAL_I2C_Master_Transmit(&_hi2c1, _address<<1, &tx, 1, 100);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f103 0008 	add.w	r0, r3, #8
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	795b      	ldrb	r3, [r3, #5]
 8005930:	b29b      	uxth	r3, r3
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	b299      	uxth	r1, r3
 8005936:	f107 020b 	add.w	r2, r7, #11
 800593a:	2364      	movs	r3, #100	; 0x64
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	2301      	movs	r3, #1
 8005940:	f7fc fe4c 	bl	80025dc <HAL_I2C_Master_Transmit>
 8005944:	4603      	mov	r3, r0
 8005946:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Master_Receive(&_hi2c1, _address<<1, rx, 1, 100);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f103 0008 	add.w	r0, r3, #8
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	795b      	ldrb	r3, [r3, #5]
 8005952:	b29b      	uxth	r3, r3
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	b299      	uxth	r1, r3
 8005958:	f107 020c 	add.w	r2, r7, #12
 800595c:	2364      	movs	r3, #100	; 0x64
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2301      	movs	r3, #1
 8005962:	f7fc ff2f 	bl	80027c4 <HAL_I2C_Master_Receive>
 8005966:	4603      	mov	r3, r0
 8005968:	73bb      	strb	r3, [r7, #14]
  value = rx[0];
 800596a:	7b3b      	ldrb	r3, [r7, #12]
 800596c:	73fb      	strb	r3, [r7, #15]

  return value;
 800596e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:

/*!
 *  @brief  Reads the specified number of bytes over I2C
 */
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, uint8_t *buffer,
                              uint8_t len) {
 8005978:	b590      	push	{r4, r7, lr}
 800597a:	b093      	sub	sp, #76	; 0x4c
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	607a      	str	r2, [r7, #4]
 8005982:	461a      	mov	r2, r3
 8005984:	460b      	mov	r3, r1
 8005986:	72fb      	strb	r3, [r7, #11]
 8005988:	4613      	mov	r3, r2
 800598a:	72bb      	strb	r3, [r7, #10]
	uint8_t readed[32];
	HAL_StatusTypeDef status = HAL_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for(int i = 0; i < 32; i++){
 8005992:	2300      	movs	r3, #0
 8005994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005998:	2b1f      	cmp	r3, #31
 800599a:	dc09      	bgt.n	80059b0 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x38>
		readed[i] = 0;
 800599c:	f107 0214 	add.w	r2, r7, #20
 80059a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a2:	4413      	add	r3, r2
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 32; i++){
 80059a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059aa:	3301      	adds	r3, #1
 80059ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ae:	e7f2      	b.n	8005996 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x1e>
	}

	uint8_t tx = (uint8_t)reg;
 80059b0:	7afb      	ldrb	r3, [r7, #11]
 80059b2:	74fb      	strb	r3, [r7, #19]
	status = HAL_I2C_Master_Transmit(&_hi2c1, _address<<1, &tx, 1, 100);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f103 0008 	add.w	r0, r3, #8
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	795b      	ldrb	r3, [r3, #5]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	b299      	uxth	r1, r3
 80059c4:	f107 0213 	add.w	r2, r7, #19
 80059c8:	2364      	movs	r3, #100	; 0x64
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	2301      	movs	r3, #1
 80059ce:	f7fc fe05 	bl	80025dc <HAL_I2C_Master_Transmit>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	status = HAL_I2C_Master_Receive(&_hi2c1, _address<<1, readed, len, 100);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f103 0008 	add.w	r0, r3, #8
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	795b      	ldrb	r3, [r3, #5]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	b299      	uxth	r1, r3
 80059e8:	7abb      	ldrb	r3, [r7, #10]
 80059ea:	b29c      	uxth	r4, r3
 80059ec:	f107 0214 	add.w	r2, r7, #20
 80059f0:	2364      	movs	r3, #100	; 0x64
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	4623      	mov	r3, r4
 80059f6:	f7fc fee5 	bl	80027c4 <HAL_I2C_Master_Receive>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for(int i = 0; i < len; i++){
 8005a00:	2300      	movs	r3, #0
 8005a02:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a04:	7abb      	ldrb	r3, [r7, #10]
 8005a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	da0c      	bge.n	8005a26 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0xae>
		buffer[i] = readed[i];
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	4413      	add	r3, r2
 8005a12:	f107 0114 	add.w	r1, r7, #20
 8005a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a18:	440a      	add	r2, r1
 8005a1a:	7812      	ldrb	r2, [r2, #0]
 8005a1c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < len; i++){
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a20:	3301      	adds	r3, #1
 8005a22:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a24:	e7ee      	b.n	8005a04 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x8c>
	}

	return true;
 8005a26:	2301      	movs	r3, #1
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3744      	adds	r7, #68	; 0x44
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd90      	pop	{r4, r7, pc}

08005a30 <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
    {
    }
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3308      	adds	r3, #8
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3310      	adds	r3, #16
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2218      	movs	r2, #24
 8005a98:	2100      	movs	r1, #0
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f001 fa05 	bl	8006eaa <memset>
    }
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	4413      	add	r3, r2
    }
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <_ZN3imu6VectorILh3EEaSERKS1_>:
    Vector& operator=(const Vector& v)
 8005ac8:	b490      	push	{r4, r7}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
        for (int x = 0; x < N; x++ )
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	dc0f      	bgt.n	8005afc <_ZN3imu6VectorILh3EEaSERKS1_+0x34>
            p_vec[x] = v.p_vec[x];
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	4413      	add	r3, r2
 8005ae4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	00d2      	lsls	r2, r2, #3
 8005aee:	440a      	add	r2, r1
 8005af0:	e9c2 3400 	strd	r3, r4, [r2]
        for (int x = 0; x < N; x++ )
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	3301      	adds	r3, #1
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	e7ec      	b.n	8005ad6 <_ZN3imu6VectorILh3EEaSERKS1_+0xe>
        return *this;
 8005afc:	687b      	ldr	r3, [r7, #4]
    }
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc90      	pop	{r4, r7}
 8005b06:	4770      	bx	lr

08005b08 <_ZN15Adafruit_BNO055D1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 *          BNO055 Sensor
 */
class Adafruit_BNO055 : public Adafruit_Sensor {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	4a05      	ldr	r2, [pc, #20]	; (8005b28 <_ZN15Adafruit_BNO055D1Ev+0x20>)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff f971 	bl	8004e00 <_ZN15Adafruit_SensorD1Ev>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	08007038 	.word	0x08007038

08005b2c <_ZN15Adafruit_BNO055D0Ev>:
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff ffe7 	bl	8005b08 <_ZN15Adafruit_BNO055D1Ev>
 8005b3a:	215c      	movs	r1, #92	; 0x5c
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f001 f95b 	bl	8006df8 <_ZdlPvj>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <wireWriteRegister>:
#include "INA219.h"

void wireWriteRegister (uint8_t reg, uint16_t value)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	4603      	mov	r3, r0
 8005b54:	460a      	mov	r2, r1
 8005b56:	71fb      	strb	r3, [r7, #7]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	73fb      	strb	r3, [r7, #15]

	uint8_t buffer[3];
	buffer[0] = reg; // register
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	733b      	strb	r3, [r7, #12]
	buffer[1] = (value >> 8); // MSB
 8005b64:	88bb      	ldrh	r3, [r7, #4]
 8005b66:	0a1b      	lsrs	r3, r3, #8
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	737b      	strb	r3, [r7, #13]
	buffer[2] = value & 0xff; // LSB
 8005b6e:	88bb      	ldrh	r3, [r7, #4]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&ina219_hi2c1, ina219_i2caddr<<1, buffer, 3, 100);
 8005b74:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <wireWriteRegister+0x50>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	b299      	uxth	r1, r3
 8005b7e:	f107 020c 	add.w	r2, r7, #12
 8005b82:	2364      	movs	r3, #100	; 0x64
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	2303      	movs	r3, #3
 8005b88:	4805      	ldr	r0, [pc, #20]	; (8005ba0 <wireWriteRegister+0x54>)
 8005b8a:	f7fc fd27 	bl	80025dc <HAL_I2C_Master_Transmit>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	73fb      	strb	r3, [r7, #15]
}
 8005b92:	bf00      	nop
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000090 	.word	0x20000090
 8005ba0:	200000a0 	.word	0x200000a0

08005ba4 <wireReadRegister>:

void wireReadRegister(uint8_t reg, uint16_t *value)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	4603      	mov	r3, r0
 8005bac:	6039      	str	r1, [r7, #0]
 8005bae:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Master_Transmit(&ina219_hi2c1, ina219_i2caddr<<1, &reg, 1, 100);
 8005bb4:	4b18      	ldr	r3, [pc, #96]	; (8005c18 <wireReadRegister+0x74>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	b299      	uxth	r1, r3
 8005bbe:	1dfa      	adds	r2, r7, #7
 8005bc0:	2364      	movs	r3, #100	; 0x64
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	4815      	ldr	r0, [pc, #84]	; (8005c1c <wireReadRegister+0x78>)
 8005bc8:	f7fc fd08 	bl	80025dc <HAL_I2C_Master_Transmit>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1); // Max 12-bit conversion time is 586us per sample
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	f7fa ff87 	bl	8000ae4 <HAL_Delay>

	uint8_t buffer[2] = {0,0};
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	733b      	strb	r3, [r7, #12]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Receive(&ina219_hi2c1, ina219_i2caddr<<1, buffer, 2, 100);
 8005bde:	4b0e      	ldr	r3, [pc, #56]	; (8005c18 <wireReadRegister+0x74>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	b299      	uxth	r1, r3
 8005be8:	f107 020c 	add.w	r2, r7, #12
 8005bec:	2364      	movs	r3, #100	; 0x64
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	480a      	ldr	r0, [pc, #40]	; (8005c1c <wireReadRegister+0x78>)
 8005bf4:	f7fc fde6 	bl	80027c4 <HAL_I2C_Master_Receive>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	73fb      	strb	r3, [r7, #15]
	*value = (buffer[0]<<8) | buffer[1];
 8005bfc:	7b3b      	ldrb	r3, [r7, #12]
 8005bfe:	021b      	lsls	r3, r3, #8
 8005c00:	b21a      	sxth	r2, r3
 8005c02:	7b7b      	ldrb	r3, [r7, #13]
 8005c04:	b21b      	sxth	r3, r3
 8005c06:	4313      	orrs	r3, r2
 8005c08:	b21b      	sxth	r3, r3
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	801a      	strh	r2, [r3, #0]
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20000090 	.word	0x20000090
 8005c1c:	200000a0 	.word	0x200000a0

08005c20 <setCalibration_32V_2A>:

void setCalibration_32V_2A()
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
  ina219_calValue = 4096;
 8005c26:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <setCalibration_32V_2A+0x40>)
 8005c28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c2c:	601a      	str	r2, [r3, #0]

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 10;  // Current LSB = 100uA per bit (1000/100 = 10)
 8005c2e:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <setCalibration_32V_2A+0x44>)
 8005c30:	220a      	movs	r2, #10
 8005c32:	601a      	str	r2, [r3, #0]
  ina219_powerMultiplier_mW = 2;     // Power LSB = 1mW per bit (2/1)
 8005c34:	4b0c      	ldr	r3, [pc, #48]	; (8005c68 <setCalibration_32V_2A+0x48>)
 8005c36:	2202      	movs	r2, #2
 8005c38:	601a      	str	r2, [r3, #0]

  // Set Calibration register to 'Cal' calculated above
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8005c3a:	4b09      	ldr	r3, [pc, #36]	; (8005c60 <setCalibration_32V_2A+0x40>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	4619      	mov	r1, r3
 8005c42:	2005      	movs	r0, #5
 8005c44:	f7ff ff82 	bl	8005b4c <wireWriteRegister>

  // Set Config register to take into account the settings above
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8005c48:	f643 139f 	movw	r3, #14751	; 0x399f
 8005c4c:	80fb      	strh	r3, [r7, #6]
                    INA219_CONFIG_GAIN_8_320MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	4619      	mov	r1, r3
 8005c52:	2000      	movs	r0, #0
 8005c54:	f7ff ff7a 	bl	8005b4c <wireWriteRegister>
}
 8005c58:	bf00      	nop
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	20000094 	.word	0x20000094
 8005c64:	20000098 	.word	0x20000098
 8005c68:	2000009c 	.word	0x2000009c

08005c6c <setCalibration_16V_400mA>:
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
}

void setCalibration_16V_400mA() {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0

  ina219_calValue = 8192;
 8005c72:	4b0e      	ldr	r3, [pc, #56]	; (8005cac <setCalibration_16V_400mA+0x40>)
 8005c74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c78:	601a      	str	r2, [r3, #0]

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 20;  // Current LSB = 50uA per bit (1000/50 = 20)
 8005c7a:	4b0d      	ldr	r3, [pc, #52]	; (8005cb0 <setCalibration_16V_400mA+0x44>)
 8005c7c:	2214      	movs	r2, #20
 8005c7e:	601a      	str	r2, [r3, #0]
  ina219_powerMultiplier_mW = 1;     // Power LSB = 1mW per bit
 8005c80:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <setCalibration_16V_400mA+0x48>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	601a      	str	r2, [r3, #0]

  // Set Calibration register to 'Cal' calculated above
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8005c86:	4b09      	ldr	r3, [pc, #36]	; (8005cac <setCalibration_16V_400mA+0x40>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	2005      	movs	r0, #5
 8005c90:	f7ff ff5c 	bl	8005b4c <wireWriteRegister>

  // Set Config register to take into account the settings above
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 8005c94:	f240 139f 	movw	r3, #415	; 0x19f
 8005c98:	80fb      	strh	r3, [r7, #6]
                    INA219_CONFIG_GAIN_1_40MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	f7ff ff54 	bl	8005b4c <wireWriteRegister>
}
 8005ca4:	bf00      	nop
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	20000094 	.word	0x20000094
 8005cb0:	20000098 	.word	0x20000098
 8005cb4:	2000009c 	.word	0x2000009c

08005cb8 <ina219_init>:

void ina219_init(I2C_HandleTypeDef hi2c1, uint8_t ina219_addr) {
 8005cb8:	b084      	sub	sp, #16
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	f107 0c08 	add.w	ip, r7, #8
 8005cc2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  ina219_i2caddr = ina219_addr;
 8005cc6:	4a0d      	ldr	r2, [pc, #52]	; (8005cfc <ina219_init+0x44>)
 8005cc8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005ccc:	7013      	strb	r3, [r2, #0]
  ina219_currentDivider_mA = 0;
 8005cce:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <ina219_init+0x48>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	601a      	str	r2, [r3, #0]
  ina219_powerMultiplier_mW = 0;
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <ina219_init+0x4c>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
  ina219_hi2c1 = hi2c1;
 8005cda:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <ina219_init+0x50>)
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f107 0108 	add.w	r1, r7, #8
 8005ce2:	234c      	movs	r3, #76	; 0x4c
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	f001 f8d5 	bl	8006e94 <memcpy>

  // Set chip to large range config values to start
  setCalibration_32V_2A();
 8005cea:	f7ff ff99 	bl	8005c20 <setCalibration_32V_2A>
}
 8005cee:	bf00      	nop
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cf6:	b004      	add	sp, #16
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000090 	.word	0x20000090
 8005d00:	20000098 	.word	0x20000098
 8005d04:	2000009c 	.word	0x2000009c
 8005d08:	200000a0 	.word	0x200000a0

08005d0c <getBusVoltage_raw>:

int16_t getBusVoltage_raw() {
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
  uint16_t value;
  wireReadRegister(INA219_REG_BUSVOLTAGE, &value);
 8005d12:	1dbb      	adds	r3, r7, #6
 8005d14:	4619      	mov	r1, r3
 8005d16:	2002      	movs	r0, #2
 8005d18:	f7ff ff44 	bl	8005ba4 <wireReadRegister>

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
 8005d1c:	88fb      	ldrh	r3, [r7, #6]
 8005d1e:	08db      	lsrs	r3, r3, #3
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	b21b      	sxth	r3, r3
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <getShuntVoltage_raw>:

int16_t getShuntVoltage_raw() {
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
  uint16_t value;
  wireReadRegister(INA219_REG_SHUNTVOLTAGE, &value);
 8005d36:	1dbb      	adds	r3, r7, #6
 8005d38:	4619      	mov	r1, r3
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	f7ff ff32 	bl	8005ba4 <wireReadRegister>
  return (int16_t)value;
 8005d40:	88fb      	ldrh	r3, [r7, #6]
 8005d42:	b21b      	sxth	r3, r3
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <getCurrent_raw>:

int16_t getCurrent_raw() {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8005d52:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <getCurrent_raw+0x2c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	4619      	mov	r1, r3
 8005d5a:	2005      	movs	r0, #5
 8005d5c:	f7ff fef6 	bl	8005b4c <wireWriteRegister>

  // Now we can safely read the CURRENT register!
  wireReadRegister(INA219_REG_CURRENT, &value);
 8005d60:	1dbb      	adds	r3, r7, #6
 8005d62:	4619      	mov	r1, r3
 8005d64:	2004      	movs	r0, #4
 8005d66:	f7ff ff1d 	bl	8005ba4 <wireReadRegister>

  return (int16_t)value;
 8005d6a:	88fb      	ldrh	r3, [r7, #6]
 8005d6c:	b21b      	sxth	r3, r3
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000094 	.word	0x20000094

08005d7c <getPower_raw>:

int16_t getPower_raw() {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8005d82:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <getPower_raw+0x2c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	4619      	mov	r1, r3
 8005d8a:	2005      	movs	r0, #5
 8005d8c:	f7ff fede 	bl	8005b4c <wireWriteRegister>

  // Now we can safely read the POWER register!
  wireReadRegister(INA219_REG_POWER, &value);
 8005d90:	1dbb      	adds	r3, r7, #6
 8005d92:	4619      	mov	r1, r3
 8005d94:	2003      	movs	r0, #3
 8005d96:	f7ff ff05 	bl	8005ba4 <wireReadRegister>

  return (int16_t)value;
 8005d9a:	88fb      	ldrh	r3, [r7, #6]
 8005d9c:	b21b      	sxth	r3, r3
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000094 	.word	0x20000094
 8005dac:	00000000 	.word	0x00000000

08005db0 <getShuntVoltage_mV>:

float getShuntVoltage_mV() {
 8005db0:	b590      	push	{r4, r7, lr}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
  int16_t value;
  value = getShuntVoltage_raw();
 8005db6:	f7ff ffbb 	bl	8005d30 <getShuntVoltage_raw>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	80fb      	strh	r3, [r7, #6]
  return value * 0.01;
 8005dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fa fb52 	bl	800046c <__aeabi_i2d>
 8005dc8:	a309      	add	r3, pc, #36	; (adr r3, 8005df0 <getShuntVoltage_mV+0x40>)
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	f7fa fbb7 	bl	8000540 <__aeabi_dmul>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	4621      	mov	r1, r4
 8005dda:	f7fa fdc3 	bl	8000964 <__aeabi_d2f>
 8005dde:	4603      	mov	r3, r0
 8005de0:	ee07 3a90 	vmov	s15, r3
}
 8005de4:	eeb0 0a67 	vmov.f32	s0, s15
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd90      	pop	{r4, r7, pc}
 8005dee:	bf00      	nop
 8005df0:	47ae147b 	.word	0x47ae147b
 8005df4:	3f847ae1 	.word	0x3f847ae1

08005df8 <getBusVoltage_V>:

float getBusVoltage_V() {
 8005df8:	b590      	push	{r4, r7, lr}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
  int16_t value = getBusVoltage_raw();
 8005dfe:	f7ff ff85 	bl	8005d0c <getBusVoltage_raw>
 8005e02:	4603      	mov	r3, r0
 8005e04:	80fb      	strh	r3, [r7, #6]
  return value * 0.001;
 8005e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fa fb2e 	bl	800046c <__aeabi_i2d>
 8005e10:	a309      	add	r3, pc, #36	; (adr r3, 8005e38 <getBusVoltage_V+0x40>)
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	f7fa fb93 	bl	8000540 <__aeabi_dmul>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	4618      	mov	r0, r3
 8005e20:	4621      	mov	r1, r4
 8005e22:	f7fa fd9f 	bl	8000964 <__aeabi_d2f>
 8005e26:	4603      	mov	r3, r0
 8005e28:	ee07 3a90 	vmov	s15, r3
}
 8005e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd90      	pop	{r4, r7, pc}
 8005e36:	bf00      	nop
 8005e38:	d2f1a9fc 	.word	0xd2f1a9fc
 8005e3c:	3f50624d 	.word	0x3f50624d

08005e40 <getCurrent_mA>:

float getCurrent_mA() {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
  float valueDec = getCurrent_raw();
 8005e46:	f7ff ff81 	bl	8005d4c <getCurrent_raw>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	ee07 3a90 	vmov	s15, r3
 8005e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e54:	edc7 7a01 	vstr	s15, [r7, #4]
  valueDec /= ina219_currentDivider_mA;
 8005e58:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <getCurrent_mA+0x40>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	ee07 3a90 	vmov	s15, r3
 8005e60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e64:	edd7 6a01 	vldr	s13, [r7, #4]
 8005e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e6c:	edc7 7a01 	vstr	s15, [r7, #4]
  return valueDec;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	ee07 3a90 	vmov	s15, r3
}
 8005e76:	eeb0 0a67 	vmov.f32	s0, s15
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	20000098 	.word	0x20000098

08005e84 <getPower_mW>:

float getPower_mW() {
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
  float valueDec = getPower_raw();
 8005e8a:	f7ff ff77 	bl	8005d7c <getPower_raw>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	ee07 3a90 	vmov	s15, r3
 8005e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e98:	edc7 7a01 	vstr	s15, [r7, #4]
  valueDec *= ina219_powerMultiplier_mW;
 8005e9c:	4b09      	ldr	r3, [pc, #36]	; (8005ec4 <getPower_mW+0x40>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	ee07 3a90 	vmov	s15, r3
 8005ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea8:	ed97 7a01 	vldr	s14, [r7, #4]
 8005eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb0:	edc7 7a01 	vstr	s15, [r7, #4]
  return valueDec;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	ee07 3a90 	vmov	s15, r3
}
 8005eba:	eeb0 0a67 	vmov.f32	s0, s15
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	2000009c 	.word	0x2000009c

08005ec8 <getData>:

void getData(INA* ina){
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	ina->shuntvoltage = getShuntVoltage_mV();
 8005ed0:	f7ff ff6e 	bl	8005db0 <getShuntVoltage_mV>
 8005ed4:	eef0 7a40 	vmov.f32	s15, s0
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	edc3 7a00 	vstr	s15, [r3]
	ina->busvoltage = getBusVoltage_V();
 8005ede:	f7ff ff8b 	bl	8005df8 <getBusVoltage_V>
 8005ee2:	eef0 7a40 	vmov.f32	s15, s0
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	edc3 7a01 	vstr	s15, [r3, #4]
	ina->current_mA = getCurrent_mA();
 8005eec:	f7ff ffa8 	bl	8005e40 <getCurrent_mA>
 8005ef0:	eef0 7a40 	vmov.f32	s15, s0
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	edc3 7a02 	vstr	s15, [r3, #8]
	ina->power_mW = getPower_mW();
 8005efa:	f7ff ffc3 	bl	8005e84 <getPower_mW>
 8005efe:	eef0 7a40 	vmov.f32	s15, s0
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	edc3 7a04 	vstr	s15, [r3, #16]
	ina->loadvoltage = ina->busvoltage + (ina->shuntvoltage / 1000);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	edd3 6a00 	vldr	s13, [r3]
 8005f14:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8005f30 <getData+0x68>
 8005f18:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	447a0000 	.word	0x447a0000
 8005f34:	00000000 	.word	0x00000000

08005f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f3a:	b0cb      	sub	sp, #300	; 0x12c
 8005f3c:	af12      	add	r7, sp, #72	; 0x48
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f3e:	f7fa fd61 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f42:	f000 f8e7 	bl	8006114 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f46:	f000 fc25 	bl	8006794 <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 8005f4a:	f000 fae3 	bl	8006514 <_ZL12MX_CAN1_Initv>
  MX_ADC1_Init();
 8005f4e:	f000 f97f 	bl	8006250 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8005f52:	f000 fa03 	bl	800635c <_ZL12MX_ADC2_Initv>
  MX_ADC3_Init();
 8005f56:	f000 fa6f 	bl	8006438 <_ZL12MX_ADC3_Initv>
  MX_I2C1_Init();
 8005f5a:	f000 fb15 	bl	8006588 <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 8005f5e:	f000 fb61 	bl	8006624 <_ZL12MX_I2C2_Initv>
  MX_TIM5_Init();
 8005f62:	f000 fbad 	bl	80066c0 <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */

  double xPos = 0, yPos = 0, headingVel = 0;
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	f04f 0400 	mov.w	r4, #0
 8005f6e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8005f72:	f04f 0300 	mov.w	r3, #0
 8005f76:	f04f 0400 	mov.w	r4, #0
 8005f7a:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	f04f 0400 	mov.w	r4, #0
 8005f86:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
  uint16_t BNO055_SAMPLERATE_DELAY_MS = 10; //how often to read data from the board
 8005f8a:	230a      	movs	r3, #10
 8005f8c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
  uint16_t PRINT_DELAY_MS = 500; // how often to print the data
 8005f90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005f94:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
  uint16_t printCount = 0; //counter to avoid printing every 10MS sample
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
  double ACCEL_VEL_TRANSITION =  (double)(BNO055_SAMPLERATE_DELAY_MS) / 1000.0;
 8005f9e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fa fa52 	bl	800044c <__aeabi_ui2d>
 8005fa8:	f04f 0200 	mov.w	r2, #0
 8005fac:	4b4e      	ldr	r3, [pc, #312]	; (80060e8 <main+0x1b0>)
 8005fae:	f7fa fbf1 	bl	8000794 <__aeabi_ddiv>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
  double ACCEL_POS_TRANSITION = 0.5 * ACCEL_VEL_TRANSITION * ACCEL_VEL_TRANSITION;
 8005fba:	f04f 0200 	mov.w	r2, #0
 8005fbe:	4b4b      	ldr	r3, [pc, #300]	; (80060ec <main+0x1b4>)
 8005fc0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005fc4:	f7fa fabc 	bl	8000540 <__aeabi_dmul>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4623      	mov	r3, r4
 8005fd0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005fd4:	f7fa fab4 	bl	8000540 <__aeabi_dmul>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	460c      	mov	r4, r1
 8005fdc:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
  double DEG_2_RAD = 0.01745329251; //trig functions require radians, BNO055 outputs degrees
 8005fe0:	a43f      	add	r4, pc, #252	; (adr r4, 80060e0 <main+0x1a8>)
 8005fe2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005fe6:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8

  Adafruit_BNO055 bno = Adafruit_BNO055(hi2c1, 55);
 8005fea:	4e41      	ldr	r6, [pc, #260]	; (80060f0 <main+0x1b8>)
 8005fec:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8005ff0:	2328      	movs	r3, #40	; 0x28
 8005ff2:	9311      	str	r3, [sp, #68]	; 0x44
 8005ff4:	2337      	movs	r3, #55	; 0x37
 8005ff6:	9310      	str	r3, [sp, #64]	; 0x40
 8005ff8:	466d      	mov	r5, sp
 8005ffa:	f106 040c 	add.w	r4, r6, #12
 8005ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800600a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800600e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006012:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8006016:	4660      	mov	r0, ip
 8006018:	f7fe ff1e 	bl	8004e58 <_ZN15Adafruit_BNO055C1E19__I2C_HandleTypeDeflh>

  bno.begin();
 800601c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006020:	210c      	movs	r1, #12
 8006022:	4618      	mov	r0, r3
 8006024:	f7fe ff42 	bl	8004eac <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>

  ina219_init(hi2c1, INA_ADDR_1);
 8006028:	4e31      	ldr	r6, [pc, #196]	; (80060f0 <main+0x1b8>)
 800602a:	2340      	movs	r3, #64	; 0x40
 800602c:	930f      	str	r3, [sp, #60]	; 0x3c
 800602e:	466d      	mov	r5, sp
 8006030:	f106 0410 	add.w	r4, r6, #16
 8006034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800603a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800603c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800603e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006040:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006044:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006048:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800604c:	f7ff fe34 	bl	8005cb8 <ina219_init>
  setCalibration_16V_400mA();
 8006050:	f7ff fe0c 	bl	8005c6c <setCalibration_16V_400mA>

  // Initializing CAN Filter
  filterConfigCAN(&hcan1);
 8006054:	4827      	ldr	r0, [pc, #156]	; (80060f4 <main+0x1bc>)
 8006056:	f000 fe5d 	bl	8006d14 <filterConfigCAN>
  HAL_CAN_Start(&hcan1);
 800605a:	4826      	ldr	r0, [pc, #152]	; (80060f4 <main+0x1bc>)
 800605c:	f7fb fe33 	bl	8001cc6 <HAL_CAN_Start>

  // Initializing PWM Timer
  HAL_TIM_PWM_Init(&htim5);
 8006060:	4825      	ldr	r0, [pc, #148]	; (80060f8 <main+0x1c0>)
 8006062:	f7fe f9ad 	bl	80043c0 <HAL_TIM_PWM_Init>
  configPWM.OCMode = TIM_OCMODE_PWM1;
 8006066:	4b25      	ldr	r3, [pc, #148]	; (80060fc <main+0x1c4>)
 8006068:	2260      	movs	r2, #96	; 0x60
 800606a:	601a      	str	r2, [r3, #0]
  configPWM.Pulse = 0; // Largura do pulso
 800606c:	4b23      	ldr	r3, [pc, #140]	; (80060fc <main+0x1c4>)
 800606e:	2200      	movs	r2, #0
 8006070:	605a      	str	r2, [r3, #4]
  configPWM.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006072:	4b22      	ldr	r3, [pc, #136]	; (80060fc <main+0x1c4>)
 8006074:	2200      	movs	r2, #0
 8006076:	609a      	str	r2, [r3, #8]
  configPWM.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006078:	4b20      	ldr	r3, [pc, #128]	; (80060fc <main+0x1c4>)
 800607a:	2200      	movs	r2, #0
 800607c:	60da      	str	r2, [r3, #12]
  configPWM.OCFastMode = TIM_OCFAST_DISABLE;
 800607e:	4b1f      	ldr	r3, [pc, #124]	; (80060fc <main+0x1c4>)
 8006080:	2200      	movs	r2, #0
 8006082:	611a      	str	r2, [r3, #16]
  configPWM.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006084:	4b1d      	ldr	r3, [pc, #116]	; (80060fc <main+0x1c4>)
 8006086:	2200      	movs	r2, #0
 8006088:	615a      	str	r2, [r3, #20]
  configPWM.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800608a:	4b1c      	ldr	r3, [pc, #112]	; (80060fc <main+0x1c4>)
 800608c:	2200      	movs	r2, #0
 800608e:	619a      	str	r2, [r3, #24]
  HAL_TIM_PWM_ConfigChannel(&htim5, &configPWM, TIM_CHANNEL_1);
 8006090:	2200      	movs	r2, #0
 8006092:	491a      	ldr	r1, [pc, #104]	; (80060fc <main+0x1c4>)
 8006094:	4818      	ldr	r0, [pc, #96]	; (80060f8 <main+0x1c0>)
 8006096:	f7fe f9bf 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>

  can_tx_pkg.identifier = 2;
 800609a:	4b19      	ldr	r3, [pc, #100]	; (8006100 <main+0x1c8>)
 800609c:	2202      	movs	r2, #2
 800609e:	601a      	str	r2, [r3, #0]

    /* USER CODE BEGIN 3 */

	  sensors_event_t orientationData , linearAccelData, angVelData;
	  //bno.getEvent(&orientationData, Adafruit_BNO055::VECTOR_EULER);
	  bno.getEvent(&angVelData, Adafruit_BNO055::VECTOR_GYROSCOPE);
 80060a0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80060a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80060a8:	2214      	movs	r2, #20
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff fa37 	bl	800551e <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE>
	  getData(&ina1_i2c1);
 80060b0:	4814      	ldr	r0, [pc, #80]	; (8006104 <main+0x1cc>)
 80060b2:	f7ff ff09 	bl	8005ec8 <getData>
	  f1 = orientationData.orientation.roll;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	4a13      	ldr	r2, [pc, #76]	; (8006108 <main+0x1d0>)
 80060ba:	6013      	str	r3, [r2, #0]
	  f2 = ina1_i2c1.loadvoltage;
 80060bc:	4b11      	ldr	r3, [pc, #68]	; (8006104 <main+0x1cc>)
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	4a12      	ldr	r2, [pc, #72]	; (800610c <main+0x1d4>)
 80060c2:	6013      	str	r3, [r2, #0]
	  memcpy(can_tx_pkg.data, &f1, sizeof(float));
 80060c4:	4b10      	ldr	r3, [pc, #64]	; (8006108 <main+0x1d0>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a0d      	ldr	r2, [pc, #52]	; (8006100 <main+0x1c8>)
 80060ca:	6053      	str	r3, [r2, #4]
	  memcpy(can_tx_pkg.data + sizeof(float), &f2, sizeof(float));
 80060cc:	4a10      	ldr	r2, [pc, #64]	; (8006110 <main+0x1d8>)
 80060ce:	4b0f      	ldr	r3, [pc, #60]	; (800610c <main+0x1d4>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6013      	str	r3, [r2, #0]
	  sendCanMessage(&hcan1, can_tx_pkg);
 80060d4:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <main+0x1c8>)
 80060d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060d8:	4806      	ldr	r0, [pc, #24]	; (80060f4 <main+0x1bc>)
 80060da:	f000 fe3b 	bl	8006d54 <sendCanMessage>
	else if(temp >= 5 && flagPWM != 0){	//Stop
		HAL_TIM_PWM_Stop(&htim5,TIM_CHANNEL_1);
	}
	//HAL_GPIO_WritePin(PWM_T_GPIO_Port, PWM_T_Pin, GPIO_PIN_RESET);

  }
 80060de:	e7df      	b.n	80060a0 <main+0x168>
 80060e0:	a226e211 	.word	0xa226e211
 80060e4:	3f91df46 	.word	0x3f91df46
 80060e8:	408f4000 	.word	0x408f4000
 80060ec:	3fe00000 	.word	0x3fe00000
 80060f0:	20000240 	.word	0x20000240
 80060f4:	20000218 	.word	0x20000218
 80060f8:	200002d8 	.word	0x200002d8
 80060fc:	20000340 	.word	0x20000340
 8006100:	20000318 	.word	0x20000318
 8006104:	20000324 	.word	0x20000324
 8006108:	20000338 	.word	0x20000338
 800610c:	2000033c 	.word	0x2000033c
 8006110:	20000320 	.word	0x20000320

08006114 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b0b8      	sub	sp, #224	; 0xe0
 8006118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800611a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800611e:	2244      	movs	r2, #68	; 0x44
 8006120:	2100      	movs	r1, #0
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fec1 	bl	8006eaa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006128:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	605a      	str	r2, [r3, #4]
 8006132:	609a      	str	r2, [r3, #8]
 8006134:	60da      	str	r2, [r3, #12]
 8006136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006138:	463b      	mov	r3, r7
 800613a:	2288      	movs	r2, #136	; 0x88
 800613c:	2100      	movs	r1, #0
 800613e:	4618      	mov	r0, r3
 8006140:	f000 feb3 	bl	8006eaa <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006144:	2302      	movs	r3, #2
 8006146:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800614a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800614e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006152:	2310      	movs	r3, #16
 8006154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006158:	2302      	movs	r3, #2
 800615a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800615e:	2302      	movs	r3, #2
 8006160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006164:	2301      	movs	r3, #1
 8006166:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800616a:	230a      	movs	r3, #10
 800616c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006170:	2307      	movs	r3, #7
 8006172:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006176:	2302      	movs	r3, #2
 8006178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800617c:	2302      	movs	r3, #2
 800617e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006182:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006186:	4618      	mov	r0, r3
 8006188:	f7fc feee 	bl	8002f68 <HAL_RCC_OscConfig>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	bf14      	ite	ne
 8006192:	2301      	movne	r3, #1
 8006194:	2300      	moveq	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 800619c:	f000 fb44 	bl	8006828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80061a0:	230f      	movs	r3, #15
 80061a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80061a6:	2303      	movs	r3, #3
 80061a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80061ac:	2300      	movs	r3, #0
 80061ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80061b2:	2300      	movs	r3, #0
 80061b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80061b8:	2300      	movs	r3, #0
 80061ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80061be:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80061c2:	2104      	movs	r1, #4
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fd fa7f 	bl	80036c8 <HAL_RCC_ClockConfig>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bf14      	ite	ne
 80061d0:	2301      	movne	r3, #1
 80061d2:	2300      	moveq	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 80061da:	f000 fb25 	bl	8006828 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 80061de:	f244 03c0 	movw	r3, #16576	; 0x40c0
 80061e2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80061e4:	2300      	movs	r3, #0
 80061e6:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80061e8:	2300      	movs	r3, #0
 80061ea:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80061ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80061f0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80061f2:	2302      	movs	r3, #2
 80061f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80061f6:	2301      	movs	r3, #1
 80061f8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80061fa:	2308      	movs	r3, #8
 80061fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80061fe:	2307      	movs	r3, #7
 8006200:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8006202:	2302      	movs	r3, #2
 8006204:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8006206:	2302      	movs	r3, #2
 8006208:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800620a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800620e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006210:	463b      	mov	r3, r7
 8006212:	4618      	mov	r0, r3
 8006214:	f7fd fc24 	bl	8003a60 <HAL_RCCEx_PeriphCLKConfig>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	bf14      	ite	ne
 800621e:	2301      	movne	r3, #1
 8006220:	2300      	moveq	r3, #0
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <_Z18SystemClock_Configv+0x118>
  {
    Error_Handler();
 8006228:	f000 fafe 	bl	8006828 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800622c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006230:	f7fc fe44 	bl	8002ebc <HAL_PWREx_ControlVoltageScaling>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	bf14      	ite	ne
 800623a:	2301      	movne	r3, #1
 800623c:	2300      	moveq	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <_Z18SystemClock_Configv+0x134>
  {
    Error_Handler();
 8006244:	f000 faf0 	bl	8006828 <Error_Handler>
  }
}
 8006248:	bf00      	nop
 800624a:	37e0      	adds	r7, #224	; 0xe0
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08a      	sub	sp, #40	; 0x28
 8006254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8006256:	f107 031c 	add.w	r3, r7, #28
 800625a:	2200      	movs	r2, #0
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	605a      	str	r2, [r3, #4]
 8006260:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006262:	1d3b      	adds	r3, r7, #4
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	605a      	str	r2, [r3, #4]
 800626a:	609a      	str	r2, [r3, #8]
 800626c:	60da      	str	r2, [r3, #12]
 800626e:	611a      	str	r2, [r3, #16]
 8006270:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006272:	4b37      	ldr	r3, [pc, #220]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 8006274:	4a37      	ldr	r2, [pc, #220]	; (8006354 <_ZL12MX_ADC1_Initv+0x104>)
 8006276:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006278:	4b35      	ldr	r3, [pc, #212]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 800627a:	2200      	movs	r2, #0
 800627c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800627e:	4b34      	ldr	r3, [pc, #208]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 8006280:	2200      	movs	r2, #0
 8006282:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006284:	4b32      	ldr	r3, [pc, #200]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 8006286:	2200      	movs	r2, #0
 8006288:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800628a:	4b31      	ldr	r3, [pc, #196]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 800628c:	2200      	movs	r2, #0
 800628e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006290:	4b2f      	ldr	r3, [pc, #188]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 8006292:	2204      	movs	r2, #4
 8006294:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006296:	4b2e      	ldr	r3, [pc, #184]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 8006298:	2200      	movs	r2, #0
 800629a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800629c:	4b2c      	ldr	r3, [pc, #176]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 800629e:	2200      	movs	r2, #0
 80062a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80062a2:	4b2b      	ldr	r3, [pc, #172]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 80062a4:	2201      	movs	r2, #1
 80062a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80062a8:	4b29      	ldr	r3, [pc, #164]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80062b0:	4b27      	ldr	r3, [pc, #156]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80062b6:	4b26      	ldr	r3, [pc, #152]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80062bc:	4b24      	ldr	r3, [pc, #144]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80062c4:	4b22      	ldr	r3, [pc, #136]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80062ca:	4b21      	ldr	r3, [pc, #132]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80062d2:	481f      	ldr	r0, [pc, #124]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 80062d4:	f7fa fda8 	bl	8000e28 <HAL_ADC_Init>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	bf14      	ite	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	2300      	moveq	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 80062e8:	f000 fa9e 	bl	8006828 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80062f0:	f107 031c 	add.w	r3, r7, #28
 80062f4:	4619      	mov	r1, r3
 80062f6:	4816      	ldr	r0, [pc, #88]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 80062f8:	f7fb fa74 	bl	80017e4 <HAL_ADCEx_MultiModeConfigChannel>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	bf14      	ite	ne
 8006302:	2301      	movne	r3, #1
 8006304:	2300      	moveq	r3, #0
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 800630c:	f000 fa8c 	bl	8006828 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006310:	4b11      	ldr	r3, [pc, #68]	; (8006358 <_ZL12MX_ADC1_Initv+0x108>)
 8006312:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006314:	2306      	movs	r3, #6
 8006316:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800631c:	237f      	movs	r3, #127	; 0x7f
 800631e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006320:	2304      	movs	r3, #4
 8006322:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006328:	1d3b      	adds	r3, r7, #4
 800632a:	4619      	mov	r1, r3
 800632c:	4808      	ldr	r0, [pc, #32]	; (8006350 <_ZL12MX_ADC1_Initv+0x100>)
 800632e:	f7fa fecf 	bl	80010d0 <HAL_ADC_ConfigChannel>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	bf14      	ite	ne
 8006338:	2301      	movne	r3, #1
 800633a:	2300      	moveq	r3, #0
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 8006342:	f000 fa71 	bl	8006828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006346:	bf00      	nop
 8006348:	3728      	adds	r7, #40	; 0x28
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	200000ec 	.word	0x200000ec
 8006354:	50040000 	.word	0x50040000
 8006358:	36902000 	.word	0x36902000

0800635c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006362:	463b      	mov	r3, r7
 8006364:	2200      	movs	r2, #0
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	605a      	str	r2, [r3, #4]
 800636a:	609a      	str	r2, [r3, #8]
 800636c:	60da      	str	r2, [r3, #12]
 800636e:	611a      	str	r2, [r3, #16]
 8006370:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8006372:	4b2e      	ldr	r3, [pc, #184]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 8006374:	4a2e      	ldr	r2, [pc, #184]	; (8006430 <_ZL12MX_ADC2_Initv+0xd4>)
 8006376:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006378:	4b2c      	ldr	r3, [pc, #176]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 800637a:	2200      	movs	r2, #0
 800637c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800637e:	4b2b      	ldr	r3, [pc, #172]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 8006380:	2200      	movs	r2, #0
 8006382:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006384:	4b29      	ldr	r3, [pc, #164]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 8006386:	2200      	movs	r2, #0
 8006388:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800638a:	4b28      	ldr	r3, [pc, #160]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 800638c:	2200      	movs	r2, #0
 800638e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006390:	4b26      	ldr	r3, [pc, #152]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 8006392:	2204      	movs	r2, #4
 8006394:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8006396:	4b25      	ldr	r3, [pc, #148]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 8006398:	2200      	movs	r2, #0
 800639a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800639c:	4b23      	ldr	r3, [pc, #140]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 800639e:	2200      	movs	r2, #0
 80063a0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80063a2:	4b22      	ldr	r3, [pc, #136]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 80063a4:	2201      	movs	r2, #1
 80063a6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80063a8:	4b20      	ldr	r3, [pc, #128]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80063b0:	4b1e      	ldr	r3, [pc, #120]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80063b6:	4b1d      	ldr	r3, [pc, #116]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80063bc:	4b1b      	ldr	r3, [pc, #108]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80063c4:	4b19      	ldr	r3, [pc, #100]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80063ca:	4b18      	ldr	r3, [pc, #96]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80063d2:	4816      	ldr	r0, [pc, #88]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 80063d4:	f7fa fd28 	bl	8000e28 <HAL_ADC_Init>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	bf14      	ite	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	2300      	moveq	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <_ZL12MX_ADC2_Initv+0x90>
  {
    Error_Handler();
 80063e8:	f000 fa1e 	bl	8006828 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80063ec:	4b11      	ldr	r3, [pc, #68]	; (8006434 <_ZL12MX_ADC2_Initv+0xd8>)
 80063ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80063f0:	2306      	movs	r3, #6
 80063f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80063f4:	2300      	movs	r3, #0
 80063f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80063f8:	237f      	movs	r3, #127	; 0x7f
 80063fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80063fc:	2304      	movs	r3, #4
 80063fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8006400:	2300      	movs	r3, #0
 8006402:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006404:	463b      	mov	r3, r7
 8006406:	4619      	mov	r1, r3
 8006408:	4808      	ldr	r0, [pc, #32]	; (800642c <_ZL12MX_ADC2_Initv+0xd0>)
 800640a:	f7fa fe61 	bl	80010d0 <HAL_ADC_ConfigChannel>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	bf14      	ite	ne
 8006414:	2301      	movne	r3, #1
 8006416:	2300      	moveq	r3, #0
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <_ZL12MX_ADC2_Initv+0xc6>
  {
    Error_Handler();
 800641e:	f000 fa03 	bl	8006828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006422:	bf00      	nop
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20000150 	.word	0x20000150
 8006430:	50040100 	.word	0x50040100
 8006434:	19200040 	.word	0x19200040

08006438 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800643e:	463b      	mov	r3, r7
 8006440:	2200      	movs	r2, #0
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	605a      	str	r2, [r3, #4]
 8006446:	609a      	str	r2, [r3, #8]
 8006448:	60da      	str	r2, [r3, #12]
 800644a:	611a      	str	r2, [r3, #16]
 800644c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 800644e:	4b2e      	ldr	r3, [pc, #184]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 8006450:	4a2e      	ldr	r2, [pc, #184]	; (800650c <_ZL12MX_ADC3_Initv+0xd4>)
 8006452:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006454:	4b2c      	ldr	r3, [pc, #176]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 8006456:	2200      	movs	r2, #0
 8006458:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800645a:	4b2b      	ldr	r3, [pc, #172]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 800645c:	2200      	movs	r2, #0
 800645e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006460:	4b29      	ldr	r3, [pc, #164]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 8006462:	2200      	movs	r2, #0
 8006464:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006466:	4b28      	ldr	r3, [pc, #160]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 8006468:	2200      	movs	r2, #0
 800646a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800646c:	4b26      	ldr	r3, [pc, #152]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 800646e:	2204      	movs	r2, #4
 8006470:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8006472:	4b25      	ldr	r3, [pc, #148]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 8006474:	2200      	movs	r2, #0
 8006476:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8006478:	4b23      	ldr	r3, [pc, #140]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 800647a:	2200      	movs	r2, #0
 800647c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800647e:	4b22      	ldr	r3, [pc, #136]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 8006480:	2201      	movs	r2, #1
 8006482:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8006484:	4b20      	ldr	r3, [pc, #128]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800648c:	4b1e      	ldr	r3, [pc, #120]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 800648e:	2200      	movs	r2, #0
 8006490:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006492:	4b1d      	ldr	r3, [pc, #116]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 8006494:	2200      	movs	r2, #0
 8006496:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8006498:	4b1b      	ldr	r3, [pc, #108]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80064a0:	4b19      	ldr	r3, [pc, #100]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80064a6:	4b18      	ldr	r3, [pc, #96]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80064ae:	4816      	ldr	r0, [pc, #88]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 80064b0:	f7fa fcba 	bl	8000e28 <HAL_ADC_Init>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	bf14      	ite	ne
 80064ba:	2301      	movne	r3, #1
 80064bc:	2300      	moveq	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <_ZL12MX_ADC3_Initv+0x90>
  {
    Error_Handler();
 80064c4:	f000 f9b0 	bl	8006828 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80064c8:	4b11      	ldr	r3, [pc, #68]	; (8006510 <_ZL12MX_ADC3_Initv+0xd8>)
 80064ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80064cc:	2306      	movs	r3, #6
 80064ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80064d4:	237f      	movs	r3, #127	; 0x7f
 80064d6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80064d8:	2304      	movs	r3, #4
 80064da:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80064dc:	2300      	movs	r3, #0
 80064de:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80064e0:	463b      	mov	r3, r7
 80064e2:	4619      	mov	r1, r3
 80064e4:	4808      	ldr	r0, [pc, #32]	; (8006508 <_ZL12MX_ADC3_Initv+0xd0>)
 80064e6:	f7fa fdf3 	bl	80010d0 <HAL_ADC_ConfigChannel>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	bf14      	ite	ne
 80064f0:	2301      	movne	r3, #1
 80064f2:	2300      	moveq	r3, #0
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <_ZL12MX_ADC3_Initv+0xc6>
  {
    Error_Handler();
 80064fa:	f000 f995 	bl	8006828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80064fe:	bf00      	nop
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	200001b4 	.word	0x200001b4
 800650c:	50040200 	.word	0x50040200
 8006510:	0c900008 	.word	0x0c900008

08006514 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006518:	4b19      	ldr	r3, [pc, #100]	; (8006580 <_ZL12MX_CAN1_Initv+0x6c>)
 800651a:	4a1a      	ldr	r2, [pc, #104]	; (8006584 <_ZL12MX_CAN1_Initv+0x70>)
 800651c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800651e:	4b18      	ldr	r3, [pc, #96]	; (8006580 <_ZL12MX_CAN1_Initv+0x6c>)
 8006520:	2210      	movs	r2, #16
 8006522:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006524:	4b16      	ldr	r3, [pc, #88]	; (8006580 <_ZL12MX_CAN1_Initv+0x6c>)
 8006526:	2200      	movs	r2, #0
 8006528:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800652a:	4b15      	ldr	r3, [pc, #84]	; (8006580 <_ZL12MX_CAN1_Initv+0x6c>)
 800652c:	2200      	movs	r2, #0
 800652e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8006530:	4b13      	ldr	r3, [pc, #76]	; (8006580 <_ZL12MX_CAN1_Initv+0x6c>)
 8006532:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006536:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8006538:	4b11      	ldr	r3, [pc, #68]	; (8006580 <_ZL12MX_CAN1_Initv+0x6c>)
 800653a:	2200      	movs	r2, #0
 800653c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800653e:	4b10      	ldr	r3, [pc, #64]	; (8006580 <_ZL12MX_CAN1_Initv+0x6c>)
 8006540:	2200      	movs	r2, #0
 8006542:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006544:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <_ZL12MX_CAN1_Initv+0x6c>)
 8006546:	2200      	movs	r2, #0
 8006548:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800654a:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <_ZL12MX_CAN1_Initv+0x6c>)
 800654c:	2200      	movs	r2, #0
 800654e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006550:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <_ZL12MX_CAN1_Initv+0x6c>)
 8006552:	2200      	movs	r2, #0
 8006554:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006556:	4b0a      	ldr	r3, [pc, #40]	; (8006580 <_ZL12MX_CAN1_Initv+0x6c>)
 8006558:	2200      	movs	r2, #0
 800655a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800655c:	4b08      	ldr	r3, [pc, #32]	; (8006580 <_ZL12MX_CAN1_Initv+0x6c>)
 800655e:	2200      	movs	r2, #0
 8006560:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006562:	4807      	ldr	r0, [pc, #28]	; (8006580 <_ZL12MX_CAN1_Initv+0x6c>)
 8006564:	f7fb f9ea 	bl	800193c <HAL_CAN_Init>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	bf14      	ite	ne
 800656e:	2301      	movne	r3, #1
 8006570:	2300      	moveq	r3, #0
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 8006578:	f000 f956 	bl	8006828 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800657c:	bf00      	nop
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20000218 	.word	0x20000218
 8006584:	40006400 	.word	0x40006400

08006588 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800658c:	4b22      	ldr	r3, [pc, #136]	; (8006618 <_ZL12MX_I2C1_Initv+0x90>)
 800658e:	4a23      	ldr	r2, [pc, #140]	; (800661c <_ZL12MX_I2C1_Initv+0x94>)
 8006590:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8006592:	4b21      	ldr	r3, [pc, #132]	; (8006618 <_ZL12MX_I2C1_Initv+0x90>)
 8006594:	4a22      	ldr	r2, [pc, #136]	; (8006620 <_ZL12MX_I2C1_Initv+0x98>)
 8006596:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006598:	4b1f      	ldr	r3, [pc, #124]	; (8006618 <_ZL12MX_I2C1_Initv+0x90>)
 800659a:	2200      	movs	r2, #0
 800659c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800659e:	4b1e      	ldr	r3, [pc, #120]	; (8006618 <_ZL12MX_I2C1_Initv+0x90>)
 80065a0:	2201      	movs	r2, #1
 80065a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80065a4:	4b1c      	ldr	r3, [pc, #112]	; (8006618 <_ZL12MX_I2C1_Initv+0x90>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80065aa:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <_ZL12MX_I2C1_Initv+0x90>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80065b0:	4b19      	ldr	r3, [pc, #100]	; (8006618 <_ZL12MX_I2C1_Initv+0x90>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80065b6:	4b18      	ldr	r3, [pc, #96]	; (8006618 <_ZL12MX_I2C1_Initv+0x90>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80065bc:	4b16      	ldr	r3, [pc, #88]	; (8006618 <_ZL12MX_I2C1_Initv+0x90>)
 80065be:	2200      	movs	r2, #0
 80065c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80065c2:	4815      	ldr	r0, [pc, #84]	; (8006618 <_ZL12MX_I2C1_Initv+0x90>)
 80065c4:	f7fb ff7a 	bl	80024bc <HAL_I2C_Init>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	bf14      	ite	ne
 80065ce:	2301      	movne	r3, #1
 80065d0:	2300      	moveq	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80065d8:	f000 f926 	bl	8006828 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80065dc:	2100      	movs	r1, #0
 80065de:	480e      	ldr	r0, [pc, #56]	; (8006618 <_ZL12MX_I2C1_Initv+0x90>)
 80065e0:	f7fc fbc6 	bl	8002d70 <HAL_I2CEx_ConfigAnalogFilter>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	bf14      	ite	ne
 80065ea:	2301      	movne	r3, #1
 80065ec:	2300      	moveq	r3, #0
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80065f4:	f000 f918 	bl	8006828 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80065f8:	2100      	movs	r1, #0
 80065fa:	4807      	ldr	r0, [pc, #28]	; (8006618 <_ZL12MX_I2C1_Initv+0x90>)
 80065fc:	f7fc fc03 	bl	8002e06 <HAL_I2CEx_ConfigDigitalFilter>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	bf14      	ite	ne
 8006606:	2301      	movne	r3, #1
 8006608:	2300      	moveq	r3, #0
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8006610:	f000 f90a 	bl	8006828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006614:	bf00      	nop
 8006616:	bd80      	pop	{r7, pc}
 8006618:	20000240 	.word	0x20000240
 800661c:	40005400 	.word	0x40005400
 8006620:	10909cec 	.word	0x10909cec

08006624 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006628:	4b22      	ldr	r3, [pc, #136]	; (80066b4 <_ZL12MX_I2C2_Initv+0x90>)
 800662a:	4a23      	ldr	r2, [pc, #140]	; (80066b8 <_ZL12MX_I2C2_Initv+0x94>)
 800662c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800662e:	4b21      	ldr	r3, [pc, #132]	; (80066b4 <_ZL12MX_I2C2_Initv+0x90>)
 8006630:	4a22      	ldr	r2, [pc, #136]	; (80066bc <_ZL12MX_I2C2_Initv+0x98>)
 8006632:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006634:	4b1f      	ldr	r3, [pc, #124]	; (80066b4 <_ZL12MX_I2C2_Initv+0x90>)
 8006636:	2200      	movs	r2, #0
 8006638:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800663a:	4b1e      	ldr	r3, [pc, #120]	; (80066b4 <_ZL12MX_I2C2_Initv+0x90>)
 800663c:	2201      	movs	r2, #1
 800663e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006640:	4b1c      	ldr	r3, [pc, #112]	; (80066b4 <_ZL12MX_I2C2_Initv+0x90>)
 8006642:	2200      	movs	r2, #0
 8006644:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006646:	4b1b      	ldr	r3, [pc, #108]	; (80066b4 <_ZL12MX_I2C2_Initv+0x90>)
 8006648:	2200      	movs	r2, #0
 800664a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800664c:	4b19      	ldr	r3, [pc, #100]	; (80066b4 <_ZL12MX_I2C2_Initv+0x90>)
 800664e:	2200      	movs	r2, #0
 8006650:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006652:	4b18      	ldr	r3, [pc, #96]	; (80066b4 <_ZL12MX_I2C2_Initv+0x90>)
 8006654:	2200      	movs	r2, #0
 8006656:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006658:	4b16      	ldr	r3, [pc, #88]	; (80066b4 <_ZL12MX_I2C2_Initv+0x90>)
 800665a:	2200      	movs	r2, #0
 800665c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800665e:	4815      	ldr	r0, [pc, #84]	; (80066b4 <_ZL12MX_I2C2_Initv+0x90>)
 8006660:	f7fb ff2c 	bl	80024bc <HAL_I2C_Init>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	bf14      	ite	ne
 800666a:	2301      	movne	r3, #1
 800666c:	2300      	moveq	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8006674:	f000 f8d8 	bl	8006828 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006678:	2100      	movs	r1, #0
 800667a:	480e      	ldr	r0, [pc, #56]	; (80066b4 <_ZL12MX_I2C2_Initv+0x90>)
 800667c:	f7fc fb78 	bl	8002d70 <HAL_I2CEx_ConfigAnalogFilter>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	bf14      	ite	ne
 8006686:	2301      	movne	r3, #1
 8006688:	2300      	moveq	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8006690:	f000 f8ca 	bl	8006828 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006694:	2100      	movs	r1, #0
 8006696:	4807      	ldr	r0, [pc, #28]	; (80066b4 <_ZL12MX_I2C2_Initv+0x90>)
 8006698:	f7fc fbb5 	bl	8002e06 <HAL_I2CEx_ConfigDigitalFilter>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	bf14      	ite	ne
 80066a2:	2301      	movne	r3, #1
 80066a4:	2300      	moveq	r3, #0
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 80066ac:	f000 f8bc 	bl	8006828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80066b0:	bf00      	nop
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	2000028c 	.word	0x2000028c
 80066b8:	40005800 	.word	0x40005800
 80066bc:	10909cec 	.word	0x10909cec

080066c0 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08a      	sub	sp, #40	; 0x28
 80066c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066c6:	f107 031c 	add.w	r3, r7, #28
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	605a      	str	r2, [r3, #4]
 80066d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80066d2:	463b      	mov	r3, r7
 80066d4:	2200      	movs	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	605a      	str	r2, [r3, #4]
 80066da:	609a      	str	r2, [r3, #8]
 80066dc:	60da      	str	r2, [r3, #12]
 80066de:	611a      	str	r2, [r3, #16]
 80066e0:	615a      	str	r2, [r3, #20]
 80066e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80066e4:	4b29      	ldr	r3, [pc, #164]	; (800678c <_ZL12MX_TIM5_Initv+0xcc>)
 80066e6:	4a2a      	ldr	r2, [pc, #168]	; (8006790 <_ZL12MX_TIM5_Initv+0xd0>)
 80066e8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 40000;
 80066ea:	4b28      	ldr	r3, [pc, #160]	; (800678c <_ZL12MX_TIM5_Initv+0xcc>)
 80066ec:	f649 4240 	movw	r2, #40000	; 0x9c40
 80066f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066f2:	4b26      	ldr	r3, [pc, #152]	; (800678c <_ZL12MX_TIM5_Initv+0xcc>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000;
 80066f8:	4b24      	ldr	r3, [pc, #144]	; (800678c <_ZL12MX_TIM5_Initv+0xcc>)
 80066fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80066fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006700:	4b22      	ldr	r3, [pc, #136]	; (800678c <_ZL12MX_TIM5_Initv+0xcc>)
 8006702:	2200      	movs	r2, #0
 8006704:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006706:	4b21      	ldr	r3, [pc, #132]	; (800678c <_ZL12MX_TIM5_Initv+0xcc>)
 8006708:	2200      	movs	r2, #0
 800670a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800670c:	481f      	ldr	r0, [pc, #124]	; (800678c <_ZL12MX_TIM5_Initv+0xcc>)
 800670e:	f7fd fe57 	bl	80043c0 <HAL_TIM_PWM_Init>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	bf14      	ite	ne
 8006718:	2301      	movne	r3, #1
 800671a:	2300      	moveq	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <_ZL12MX_TIM5_Initv+0x66>
  {
    Error_Handler();
 8006722:	f000 f881 	bl	8006828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006726:	2300      	movs	r3, #0
 8006728:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800672a:	2300      	movs	r3, #0
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800672e:	f107 031c 	add.w	r3, r7, #28
 8006732:	4619      	mov	r1, r3
 8006734:	4815      	ldr	r0, [pc, #84]	; (800678c <_ZL12MX_TIM5_Initv+0xcc>)
 8006736:	f7fe faf7 	bl	8004d28 <HAL_TIMEx_MasterConfigSynchronization>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	bf14      	ite	ne
 8006740:	2301      	movne	r3, #1
 8006742:	2300      	moveq	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <_ZL12MX_TIM5_Initv+0x8e>
  {
    Error_Handler();
 800674a:	f000 f86d 	bl	8006828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800674e:	2360      	movs	r3, #96	; 0x60
 8006750:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006756:	2300      	movs	r3, #0
 8006758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800675a:	2300      	movs	r3, #0
 800675c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800675e:	463b      	mov	r3, r7
 8006760:	2200      	movs	r2, #0
 8006762:	4619      	mov	r1, r3
 8006764:	4809      	ldr	r0, [pc, #36]	; (800678c <_ZL12MX_TIM5_Initv+0xcc>)
 8006766:	f7fd fe57 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	bf14      	ite	ne
 8006770:	2301      	movne	r3, #1
 8006772:	2300      	moveq	r3, #0
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <_ZL12MX_TIM5_Initv+0xbe>
  {
    Error_Handler();
 800677a:	f000 f855 	bl	8006828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800677e:	4803      	ldr	r0, [pc, #12]	; (800678c <_ZL12MX_TIM5_Initv+0xcc>)
 8006780:	f000 fa0c 	bl	8006b9c <HAL_TIM_MspPostInit>

}
 8006784:	bf00      	nop
 8006786:	3728      	adds	r7, #40	; 0x28
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	200002d8 	.word	0x200002d8
 8006790:	40000c00 	.word	0x40000c00

08006794 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800679a:	f107 030c 	add.w	r3, r7, #12
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	605a      	str	r2, [r3, #4]
 80067a4:	609a      	str	r2, [r3, #8]
 80067a6:	60da      	str	r2, [r3, #12]
 80067a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80067aa:	4b1d      	ldr	r3, [pc, #116]	; (8006820 <_ZL12MX_GPIO_Initv+0x8c>)
 80067ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ae:	4a1c      	ldr	r2, [pc, #112]	; (8006820 <_ZL12MX_GPIO_Initv+0x8c>)
 80067b0:	f043 0304 	orr.w	r3, r3, #4
 80067b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067b6:	4b1a      	ldr	r3, [pc, #104]	; (8006820 <_ZL12MX_GPIO_Initv+0x8c>)
 80067b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ba:	f003 0304 	and.w	r3, r3, #4
 80067be:	60bb      	str	r3, [r7, #8]
 80067c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80067c2:	4b17      	ldr	r3, [pc, #92]	; (8006820 <_ZL12MX_GPIO_Initv+0x8c>)
 80067c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c6:	4a16      	ldr	r2, [pc, #88]	; (8006820 <_ZL12MX_GPIO_Initv+0x8c>)
 80067c8:	f043 0301 	orr.w	r3, r3, #1
 80067cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067ce:	4b14      	ldr	r3, [pc, #80]	; (8006820 <_ZL12MX_GPIO_Initv+0x8c>)
 80067d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	607b      	str	r3, [r7, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80067da:	4b11      	ldr	r3, [pc, #68]	; (8006820 <_ZL12MX_GPIO_Initv+0x8c>)
 80067dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067de:	4a10      	ldr	r2, [pc, #64]	; (8006820 <_ZL12MX_GPIO_Initv+0x8c>)
 80067e0:	f043 0302 	orr.w	r3, r3, #2
 80067e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067e6:	4b0e      	ldr	r3, [pc, #56]	; (8006820 <_ZL12MX_GPIO_Initv+0x8c>)
 80067e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	603b      	str	r3, [r7, #0]
 80067f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LBK_Pin, GPIO_PIN_RESET);
 80067f2:	2200      	movs	r2, #0
 80067f4:	21c0      	movs	r1, #192	; 0xc0
 80067f6:	480b      	ldr	r0, [pc, #44]	; (8006824 <_ZL12MX_GPIO_Initv+0x90>)
 80067f8:	f7fb fe48 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LBK_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LBK_Pin;
 80067fc:	23c0      	movs	r3, #192	; 0xc0
 80067fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006800:	2301      	movs	r3, #1
 8006802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006804:	2300      	movs	r3, #0
 8006806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006808:	2300      	movs	r3, #0
 800680a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800680c:	f107 030c 	add.w	r3, r7, #12
 8006810:	4619      	mov	r1, r3
 8006812:	4804      	ldr	r0, [pc, #16]	; (8006824 <_ZL12MX_GPIO_Initv+0x90>)
 8006814:	f7fb fc92 	bl	800213c <HAL_GPIO_Init>

}
 8006818:	bf00      	nop
 800681a:	3720      	adds	r7, #32
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	40021000 	.word	0x40021000
 8006824:	48000800 	.word	0x48000800

08006828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006828:	b480      	push	{r7}
 800682a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800682c:	bf00      	nop
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
	...

08006838 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800683e:	4b0f      	ldr	r3, [pc, #60]	; (800687c <HAL_MspInit+0x44>)
 8006840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006842:	4a0e      	ldr	r2, [pc, #56]	; (800687c <HAL_MspInit+0x44>)
 8006844:	f043 0301 	orr.w	r3, r3, #1
 8006848:	6613      	str	r3, [r2, #96]	; 0x60
 800684a:	4b0c      	ldr	r3, [pc, #48]	; (800687c <HAL_MspInit+0x44>)
 800684c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	607b      	str	r3, [r7, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006856:	4b09      	ldr	r3, [pc, #36]	; (800687c <HAL_MspInit+0x44>)
 8006858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685a:	4a08      	ldr	r2, [pc, #32]	; (800687c <HAL_MspInit+0x44>)
 800685c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006860:	6593      	str	r3, [r2, #88]	; 0x58
 8006862:	4b06      	ldr	r3, [pc, #24]	; (800687c <HAL_MspInit+0x44>)
 8006864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	40021000 	.word	0x40021000

08006880 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08e      	sub	sp, #56	; 0x38
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	605a      	str	r2, [r3, #4]
 8006892:	609a      	str	r2, [r3, #8]
 8006894:	60da      	str	r2, [r3, #12]
 8006896:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a4d      	ldr	r2, [pc, #308]	; (80069d4 <HAL_ADC_MspInit+0x154>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d12d      	bne.n	80068fe <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80068a2:	4b4d      	ldr	r3, [pc, #308]	; (80069d8 <HAL_ADC_MspInit+0x158>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3301      	adds	r3, #1
 80068a8:	4a4b      	ldr	r2, [pc, #300]	; (80069d8 <HAL_ADC_MspInit+0x158>)
 80068aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80068ac:	4b4a      	ldr	r3, [pc, #296]	; (80069d8 <HAL_ADC_MspInit+0x158>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d10b      	bne.n	80068cc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80068b4:	4b49      	ldr	r3, [pc, #292]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 80068b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b8:	4a48      	ldr	r2, [pc, #288]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 80068ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80068be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068c0:	4b46      	ldr	r3, [pc, #280]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 80068c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068c8:	623b      	str	r3, [r7, #32]
 80068ca:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068cc:	4b43      	ldr	r3, [pc, #268]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 80068ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d0:	4a42      	ldr	r2, [pc, #264]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 80068d2:	f043 0304 	orr.w	r3, r3, #4
 80068d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068d8:	4b40      	ldr	r3, [pc, #256]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 80068da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	61fb      	str	r3, [r7, #28]
 80068e2:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = THERM3_Pin;
 80068e4:	2310      	movs	r3, #16
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80068e8:	230b      	movs	r3, #11
 80068ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ec:	2300      	movs	r3, #0
 80068ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(THERM3_GPIO_Port, &GPIO_InitStruct);
 80068f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068f4:	4619      	mov	r1, r3
 80068f6:	483a      	ldr	r0, [pc, #232]	; (80069e0 <HAL_ADC_MspInit+0x160>)
 80068f8:	f7fb fc20 	bl	800213c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80068fc:	e065      	b.n	80069ca <HAL_ADC_MspInit+0x14a>
  else if(hadc->Instance==ADC2)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a38      	ldr	r2, [pc, #224]	; (80069e4 <HAL_ADC_MspInit+0x164>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d12e      	bne.n	8006966 <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC_CLK_ENABLED++;
 8006908:	4b33      	ldr	r3, [pc, #204]	; (80069d8 <HAL_ADC_MspInit+0x158>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3301      	adds	r3, #1
 800690e:	4a32      	ldr	r2, [pc, #200]	; (80069d8 <HAL_ADC_MspInit+0x158>)
 8006910:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8006912:	4b31      	ldr	r3, [pc, #196]	; (80069d8 <HAL_ADC_MspInit+0x158>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d10b      	bne.n	8006932 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 800691a:	4b30      	ldr	r3, [pc, #192]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 800691c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691e:	4a2f      	ldr	r2, [pc, #188]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 8006920:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006926:	4b2d      	ldr	r3, [pc, #180]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 8006928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800692e:	61bb      	str	r3, [r7, #24]
 8006930:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006932:	4b2a      	ldr	r3, [pc, #168]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 8006934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006936:	4a29      	ldr	r2, [pc, #164]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 8006938:	f043 0301 	orr.w	r3, r3, #1
 800693c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800693e:	4b27      	ldr	r3, [pc, #156]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 8006940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = THERM2_Pin;
 800694a:	2302      	movs	r3, #2
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800694e:	230b      	movs	r3, #11
 8006950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006952:	2300      	movs	r3, #0
 8006954:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(THERM2_GPIO_Port, &GPIO_InitStruct);
 8006956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800695a:	4619      	mov	r1, r3
 800695c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006960:	f7fb fbec 	bl	800213c <HAL_GPIO_Init>
}
 8006964:	e031      	b.n	80069ca <HAL_ADC_MspInit+0x14a>
  else if(hadc->Instance==ADC3)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a1f      	ldr	r2, [pc, #124]	; (80069e8 <HAL_ADC_MspInit+0x168>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d12c      	bne.n	80069ca <HAL_ADC_MspInit+0x14a>
    HAL_RCC_ADC_CLK_ENABLED++;
 8006970:	4b19      	ldr	r3, [pc, #100]	; (80069d8 <HAL_ADC_MspInit+0x158>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3301      	adds	r3, #1
 8006976:	4a18      	ldr	r2, [pc, #96]	; (80069d8 <HAL_ADC_MspInit+0x158>)
 8006978:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800697a:	4b17      	ldr	r3, [pc, #92]	; (80069d8 <HAL_ADC_MspInit+0x158>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d10b      	bne.n	800699a <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8006982:	4b16      	ldr	r3, [pc, #88]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 8006984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006986:	4a15      	ldr	r2, [pc, #84]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 8006988:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800698c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800698e:	4b13      	ldr	r3, [pc, #76]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 8006990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006996:	613b      	str	r3, [r7, #16]
 8006998:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800699a:	4b10      	ldr	r3, [pc, #64]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 800699c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800699e:	4a0f      	ldr	r2, [pc, #60]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 80069a0:	f043 0304 	orr.w	r3, r3, #4
 80069a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069a6:	4b0d      	ldr	r3, [pc, #52]	; (80069dc <HAL_ADC_MspInit+0x15c>)
 80069a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = THERM1_Pin;
 80069b2:	2304      	movs	r3, #4
 80069b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80069b6:	230b      	movs	r3, #11
 80069b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(THERM1_GPIO_Port, &GPIO_InitStruct);
 80069be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069c2:	4619      	mov	r1, r3
 80069c4:	4806      	ldr	r0, [pc, #24]	; (80069e0 <HAL_ADC_MspInit+0x160>)
 80069c6:	f7fb fbb9 	bl	800213c <HAL_GPIO_Init>
}
 80069ca:	bf00      	nop
 80069cc:	3738      	adds	r7, #56	; 0x38
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	50040000 	.word	0x50040000
 80069d8:	2000035c 	.word	0x2000035c
 80069dc:	40021000 	.word	0x40021000
 80069e0:	48000800 	.word	0x48000800
 80069e4:	50040100 	.word	0x50040100
 80069e8:	50040200 	.word	0x50040200

080069ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08a      	sub	sp, #40	; 0x28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069f4:	f107 0314 	add.w	r3, r7, #20
 80069f8:	2200      	movs	r2, #0
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	605a      	str	r2, [r3, #4]
 80069fe:	609a      	str	r2, [r3, #8]
 8006a00:	60da      	str	r2, [r3, #12]
 8006a02:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a18      	ldr	r2, [pc, #96]	; (8006a6c <HAL_CAN_MspInit+0x80>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d129      	bne.n	8006a62 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006a0e:	4b18      	ldr	r3, [pc, #96]	; (8006a70 <HAL_CAN_MspInit+0x84>)
 8006a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a12:	4a17      	ldr	r2, [pc, #92]	; (8006a70 <HAL_CAN_MspInit+0x84>)
 8006a14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a18:	6593      	str	r3, [r2, #88]	; 0x58
 8006a1a:	4b15      	ldr	r3, [pc, #84]	; (8006a70 <HAL_CAN_MspInit+0x84>)
 8006a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a26:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <HAL_CAN_MspInit+0x84>)
 8006a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a2a:	4a11      	ldr	r2, [pc, #68]	; (8006a70 <HAL_CAN_MspInit+0x84>)
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a32:	4b0f      	ldr	r3, [pc, #60]	; (8006a70 <HAL_CAN_MspInit+0x84>)
 8006a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006a3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a44:	2302      	movs	r3, #2
 8006a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006a50:	2309      	movs	r3, #9
 8006a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a54:	f107 0314 	add.w	r3, r7, #20
 8006a58:	4619      	mov	r1, r3
 8006a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a5e:	f7fb fb6d 	bl	800213c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8006a62:	bf00      	nop
 8006a64:	3728      	adds	r7, #40	; 0x28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40006400 	.word	0x40006400
 8006a70:	40021000 	.word	0x40021000

08006a74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b08c      	sub	sp, #48	; 0x30
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a7c:	f107 031c 	add.w	r3, r7, #28
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	605a      	str	r2, [r3, #4]
 8006a86:	609a      	str	r2, [r3, #8]
 8006a88:	60da      	str	r2, [r3, #12]
 8006a8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a2e      	ldr	r2, [pc, #184]	; (8006b4c <HAL_I2C_MspInit+0xd8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d128      	bne.n	8006ae8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a96:	4b2e      	ldr	r3, [pc, #184]	; (8006b50 <HAL_I2C_MspInit+0xdc>)
 8006a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a9a:	4a2d      	ldr	r2, [pc, #180]	; (8006b50 <HAL_I2C_MspInit+0xdc>)
 8006a9c:	f043 0302 	orr.w	r3, r3, #2
 8006aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006aa2:	4b2b      	ldr	r3, [pc, #172]	; (8006b50 <HAL_I2C_MspInit+0xdc>)
 8006aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	61bb      	str	r3, [r7, #24]
 8006aac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006aae:	23c0      	movs	r3, #192	; 0xc0
 8006ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ab2:	2312      	movs	r3, #18
 8006ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006aba:	2303      	movs	r3, #3
 8006abc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006abe:	2304      	movs	r3, #4
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ac2:	f107 031c 	add.w	r3, r7, #28
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4822      	ldr	r0, [pc, #136]	; (8006b54 <HAL_I2C_MspInit+0xe0>)
 8006aca:	f7fb fb37 	bl	800213c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006ace:	4b20      	ldr	r3, [pc, #128]	; (8006b50 <HAL_I2C_MspInit+0xdc>)
 8006ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad2:	4a1f      	ldr	r2, [pc, #124]	; (8006b50 <HAL_I2C_MspInit+0xdc>)
 8006ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8006ada:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <HAL_I2C_MspInit+0xdc>)
 8006adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006ae6:	e02d      	b.n	8006b44 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a1a      	ldr	r2, [pc, #104]	; (8006b58 <HAL_I2C_MspInit+0xe4>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d128      	bne.n	8006b44 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006af2:	4b17      	ldr	r3, [pc, #92]	; (8006b50 <HAL_I2C_MspInit+0xdc>)
 8006af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af6:	4a16      	ldr	r2, [pc, #88]	; (8006b50 <HAL_I2C_MspInit+0xdc>)
 8006af8:	f043 0302 	orr.w	r3, r3, #2
 8006afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006afe:	4b14      	ldr	r3, [pc, #80]	; (8006b50 <HAL_I2C_MspInit+0xdc>)
 8006b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	613b      	str	r3, [r7, #16]
 8006b08:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8006b0a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b10:	2312      	movs	r3, #18
 8006b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b14:	2301      	movs	r3, #1
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006b1c:	2304      	movs	r3, #4
 8006b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b20:	f107 031c 	add.w	r3, r7, #28
 8006b24:	4619      	mov	r1, r3
 8006b26:	480b      	ldr	r0, [pc, #44]	; (8006b54 <HAL_I2C_MspInit+0xe0>)
 8006b28:	f7fb fb08 	bl	800213c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006b2c:	4b08      	ldr	r3, [pc, #32]	; (8006b50 <HAL_I2C_MspInit+0xdc>)
 8006b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b30:	4a07      	ldr	r2, [pc, #28]	; (8006b50 <HAL_I2C_MspInit+0xdc>)
 8006b32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b36:	6593      	str	r3, [r2, #88]	; 0x58
 8006b38:	4b05      	ldr	r3, [pc, #20]	; (8006b50 <HAL_I2C_MspInit+0xdc>)
 8006b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	68fb      	ldr	r3, [r7, #12]
}
 8006b44:	bf00      	nop
 8006b46:	3730      	adds	r7, #48	; 0x30
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	40005400 	.word	0x40005400
 8006b50:	40021000 	.word	0x40021000
 8006b54:	48000400 	.word	0x48000400
 8006b58:	40005800 	.word	0x40005800

08006b5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a0a      	ldr	r2, [pc, #40]	; (8006b94 <HAL_TIM_PWM_MspInit+0x38>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d10b      	bne.n	8006b86 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006b6e:	4b0a      	ldr	r3, [pc, #40]	; (8006b98 <HAL_TIM_PWM_MspInit+0x3c>)
 8006b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b72:	4a09      	ldr	r2, [pc, #36]	; (8006b98 <HAL_TIM_PWM_MspInit+0x3c>)
 8006b74:	f043 0308 	orr.w	r3, r3, #8
 8006b78:	6593      	str	r3, [r2, #88]	; 0x58
 8006b7a:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <HAL_TIM_PWM_MspInit+0x3c>)
 8006b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7e:	f003 0308 	and.w	r3, r3, #8
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006b86:	bf00      	nop
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	40000c00 	.word	0x40000c00
 8006b98:	40021000 	.word	0x40021000

08006b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ba4:	f107 030c 	add.w	r3, r7, #12
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	605a      	str	r2, [r3, #4]
 8006bae:	609a      	str	r2, [r3, #8]
 8006bb0:	60da      	str	r2, [r3, #12]
 8006bb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a11      	ldr	r2, [pc, #68]	; (8006c00 <HAL_TIM_MspPostInit+0x64>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d11c      	bne.n	8006bf8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bbe:	4b11      	ldr	r3, [pc, #68]	; (8006c04 <HAL_TIM_MspPostInit+0x68>)
 8006bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc2:	4a10      	ldr	r2, [pc, #64]	; (8006c04 <HAL_TIM_MspPostInit+0x68>)
 8006bc4:	f043 0301 	orr.w	r3, r3, #1
 8006bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bca:	4b0e      	ldr	r3, [pc, #56]	; (8006c04 <HAL_TIM_MspPostInit+0x68>)
 8006bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	60bb      	str	r3, [r7, #8]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration    
    PA0     ------> TIM5_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bda:	2302      	movs	r3, #2
 8006bdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006be2:	2300      	movs	r3, #0
 8006be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006be6:	2302      	movs	r3, #2
 8006be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bea:	f107 030c 	add.w	r3, r7, #12
 8006bee:	4619      	mov	r1, r3
 8006bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006bf4:	f7fb faa2 	bl	800213c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8006bf8:	bf00      	nop
 8006bfa:	3720      	adds	r7, #32
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	40000c00 	.word	0x40000c00
 8006c04:	40021000 	.word	0x40021000

08006c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006c0c:	bf00      	nop
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c16:	b480      	push	{r7}
 8006c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c1a:	e7fe      	b.n	8006c1a <HardFault_Handler+0x4>

08006c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c20:	e7fe      	b.n	8006c20 <MemManage_Handler+0x4>

08006c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006c22:	b480      	push	{r7}
 8006c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c26:	e7fe      	b.n	8006c26 <BusFault_Handler+0x4>

08006c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c2c:	e7fe      	b.n	8006c2c <UsageFault_Handler+0x4>

08006c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006c32:	bf00      	nop
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006c40:	bf00      	nop
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006c4e:	bf00      	nop
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006c5c:	f7f9 ff24 	bl	8000aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006c60:	bf00      	nop
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006c64:	b480      	push	{r7}
 8006c66:	af00      	add	r7, sp, #0
	return 1;
 8006c68:	2301      	movs	r3, #1
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <_kill>:

int _kill(int pid, int sig)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006c7e:	f000 f8d7 	bl	8006e30 <__errno>
 8006c82:	4602      	mov	r2, r0
 8006c84:	2316      	movs	r3, #22
 8006c86:	6013      	str	r3, [r2, #0]
	return -1;
 8006c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <_exit>:

void _exit (int status)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7ff ffe7 	bl	8006c74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006ca6:	e7fe      	b.n	8006ca6 <_exit+0x12>

08006ca8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006cac:	4b17      	ldr	r3, [pc, #92]	; (8006d0c <SystemInit+0x64>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb2:	4a16      	ldr	r2, [pc, #88]	; (8006d0c <SystemInit+0x64>)
 8006cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006cbc:	4b14      	ldr	r3, [pc, #80]	; (8006d10 <SystemInit+0x68>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a13      	ldr	r2, [pc, #76]	; (8006d10 <SystemInit+0x68>)
 8006cc2:	f043 0301 	orr.w	r3, r3, #1
 8006cc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006cc8:	4b11      	ldr	r3, [pc, #68]	; (8006d10 <SystemInit+0x68>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006cce:	4b10      	ldr	r3, [pc, #64]	; (8006d10 <SystemInit+0x68>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a0f      	ldr	r2, [pc, #60]	; (8006d10 <SystemInit+0x68>)
 8006cd4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006cd8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006cdc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006cde:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <SystemInit+0x68>)
 8006ce0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ce4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006ce6:	4b0a      	ldr	r3, [pc, #40]	; (8006d10 <SystemInit+0x68>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <SystemInit+0x68>)
 8006cec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cf0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006cf2:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <SystemInit+0x68>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006cf8:	4b04      	ldr	r3, [pc, #16]	; (8006d0c <SystemInit+0x64>)
 8006cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006cfe:	609a      	str	r2, [r3, #8]
#endif
}
 8006d00:	bf00      	nop
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	e000ed00 	.word	0xe000ed00
 8006d10:	40021000 	.word	0x40021000

08006d14 <filterConfigCAN>:
#include "zenith_can_lib.h"

Z_CAN_Package NULL_MSG = {-1, {0,0,0,0,0,0,0,0}};

void filterConfigCAN(CAN_HandleTypeDef *hcan1)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08c      	sub	sp, #48	; 0x30
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]

	CAN_FilterTypeDef can1FilterInit;

	can1FilterInit.FilterActivation = ENABLE;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	62bb      	str	r3, [r7, #40]	; 0x28
	can1FilterInit.FilterBank = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	61fb      	str	r3, [r7, #28]
	can1FilterInit.FilterFIFOAssignment = CAN_RX_FIFO0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	61bb      	str	r3, [r7, #24]
	can1FilterInit.FilterIdHigh = 0x0000;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60bb      	str	r3, [r7, #8]
	can1FilterInit.FilterIdLow = 0x0000;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60fb      	str	r3, [r7, #12]
	can1FilterInit.FilterMaskIdHigh = 0x0000;
 8006d30:	2300      	movs	r3, #0
 8006d32:	613b      	str	r3, [r7, #16]
	can1FilterInit.FilterMaskIdLow = 0x0000;
 8006d34:	2300      	movs	r3, #0
 8006d36:	617b      	str	r3, [r7, #20]
	can1FilterInit.FilterMode = CAN_FILTERMODE_IDMASK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	623b      	str	r3, [r7, #32]
	can1FilterInit.FilterScale = CAN_FILTERSCALE_32BIT;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcan1, &can1FilterInit);
 8006d40:	f107 0308 	add.w	r3, r7, #8
 8006d44:	4619      	mov	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7fa fef3 	bl	8001b32 <HAL_CAN_ConfigFilter>
}
 8006d4c:	bf00      	nop
 8006d4e:	3730      	adds	r7, #48	; 0x30
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <sendCanMessage>:

uint8_t sendCanMessage(CAN_HandleTypeDef *hcan1, Z_CAN_Package package)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08c      	sub	sp, #48	; 0x30
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint32_t pTxMailbox;

	//Mounting the CAN header
	CAN_TxHeaderTypeDef pTxHeader;
	pTxHeader.DLC = 8;
 8006d62:	2308      	movs	r3, #8
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
	pTxHeader.IDE = CAN_ID_STD;
 8006d66:	2300      	movs	r3, #0
 8006d68:	61fb      	str	r3, [r7, #28]
	pTxHeader.RTR = CAN_RTR_DATA;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	623b      	str	r3, [r7, #32]
	pTxHeader.StdId = package.identifier;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	617b      	str	r3, [r7, #20]

	if(HAL_CAN_GetTxMailboxesFreeLevel(hcan1) != 0){
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7fb f8c6 	bl	8001f04 <HAL_CAN_GetTxMailboxesFreeLevel>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00b      	beq.n	8006d96 <sendCanMessage+0x42>
		HAL_CAN_AddTxMessage(hcan1, &pTxHeader, package.data, &pTxMailbox);
 8006d7e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8006d82:	463b      	mov	r3, r7
 8006d84:	1d1a      	adds	r2, r3, #4
 8006d86:	f107 0114 	add.w	r1, r7, #20
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f7fa ffde 	bl	8001d4e <HAL_CAN_AddTxMessage>
		return 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e000      	b.n	8006d98 <sendCanMessage+0x44>
	}
	else{
		return -1;
 8006d96:	23ff      	movs	r3, #255	; 0xff
	}
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3730      	adds	r7, #48	; 0x30
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006dd8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006da4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006da6:	e003      	b.n	8006db0 <LoopCopyDataInit>

08006da8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006da8:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006daa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006dac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006dae:	3104      	adds	r1, #4

08006db0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006db0:	480b      	ldr	r0, [pc, #44]	; (8006de0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006db2:	4b0c      	ldr	r3, [pc, #48]	; (8006de4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006db4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006db6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006db8:	d3f6      	bcc.n	8006da8 <CopyDataInit>
	ldr	r2, =_sbss
 8006dba:	4a0b      	ldr	r2, [pc, #44]	; (8006de8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006dbc:	e002      	b.n	8006dc4 <LoopFillZerobss>

08006dbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006dbe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006dc0:	f842 3b04 	str.w	r3, [r2], #4

08006dc4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006dc4:	4b09      	ldr	r3, [pc, #36]	; (8006dec <LoopForever+0x16>)
	cmp	r2, r3
 8006dc6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006dc8:	d3f9      	bcc.n	8006dbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006dca:	f7ff ff6d 	bl	8006ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006dce:	f000 f835 	bl	8006e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006dd2:	f7ff f8b1 	bl	8005f38 <main>

08006dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8006dd6:	e7fe      	b.n	8006dd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006dd8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006ddc:	080070b0 	.word	0x080070b0
	ldr	r0, =_sdata
 8006de0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006de4:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8006de8:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8006dec:	2000036c 	.word	0x2000036c

08006df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006df0:	e7fe      	b.n	8006df0 <ADC1_2_IRQHandler>

08006df2 <__cxa_pure_virtual>:
 8006df2:	b508      	push	{r3, lr}
 8006df4:	f000 f810 	bl	8006e18 <_ZSt9terminatev>

08006df8 <_ZdlPvj>:
 8006df8:	f000 b800 	b.w	8006dfc <_ZdlPv>

08006dfc <_ZdlPv>:
 8006dfc:	f000 b842 	b.w	8006e84 <free>

08006e00 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006e00:	b508      	push	{r3, lr}
 8006e02:	4780      	blx	r0
 8006e04:	f000 f80d 	bl	8006e22 <abort>

08006e08 <_ZSt13get_terminatev>:
 8006e08:	4b02      	ldr	r3, [pc, #8]	; (8006e14 <_ZSt13get_terminatev+0xc>)
 8006e0a:	6818      	ldr	r0, [r3, #0]
 8006e0c:	f3bf 8f5b 	dmb	ish
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	2000000c 	.word	0x2000000c

08006e18 <_ZSt9terminatev>:
 8006e18:	b508      	push	{r3, lr}
 8006e1a:	f7ff fff5 	bl	8006e08 <_ZSt13get_terminatev>
 8006e1e:	f7ff ffef 	bl	8006e00 <_ZN10__cxxabiv111__terminateEPFvvE>

08006e22 <abort>:
 8006e22:	b508      	push	{r3, lr}
 8006e24:	2006      	movs	r0, #6
 8006e26:	f000 f8bf 	bl	8006fa8 <raise>
 8006e2a:	2001      	movs	r0, #1
 8006e2c:	f7ff ff32 	bl	8006c94 <_exit>

08006e30 <__errno>:
 8006e30:	4b01      	ldr	r3, [pc, #4]	; (8006e38 <__errno+0x8>)
 8006e32:	6818      	ldr	r0, [r3, #0]
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	20000010 	.word	0x20000010

08006e3c <__libc_init_array>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	4e0d      	ldr	r6, [pc, #52]	; (8006e74 <__libc_init_array+0x38>)
 8006e40:	4c0d      	ldr	r4, [pc, #52]	; (8006e78 <__libc_init_array+0x3c>)
 8006e42:	1ba4      	subs	r4, r4, r6
 8006e44:	10a4      	asrs	r4, r4, #2
 8006e46:	2500      	movs	r5, #0
 8006e48:	42a5      	cmp	r5, r4
 8006e4a:	d109      	bne.n	8006e60 <__libc_init_array+0x24>
 8006e4c:	4e0b      	ldr	r6, [pc, #44]	; (8006e7c <__libc_init_array+0x40>)
 8006e4e:	4c0c      	ldr	r4, [pc, #48]	; (8006e80 <__libc_init_array+0x44>)
 8006e50:	f000 f8de 	bl	8007010 <_init>
 8006e54:	1ba4      	subs	r4, r4, r6
 8006e56:	10a4      	asrs	r4, r4, #2
 8006e58:	2500      	movs	r5, #0
 8006e5a:	42a5      	cmp	r5, r4
 8006e5c:	d105      	bne.n	8006e6a <__libc_init_array+0x2e>
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
 8006e60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e64:	4798      	blx	r3
 8006e66:	3501      	adds	r5, #1
 8006e68:	e7ee      	b.n	8006e48 <__libc_init_array+0xc>
 8006e6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e6e:	4798      	blx	r3
 8006e70:	3501      	adds	r5, #1
 8006e72:	e7f2      	b.n	8006e5a <__libc_init_array+0x1e>
 8006e74:	080070a8 	.word	0x080070a8
 8006e78:	080070a8 	.word	0x080070a8
 8006e7c:	080070a8 	.word	0x080070a8
 8006e80:	080070ac 	.word	0x080070ac

08006e84 <free>:
 8006e84:	4b02      	ldr	r3, [pc, #8]	; (8006e90 <free+0xc>)
 8006e86:	4601      	mov	r1, r0
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	f000 b817 	b.w	8006ebc <_free_r>
 8006e8e:	bf00      	nop
 8006e90:	20000010 	.word	0x20000010

08006e94 <memcpy>:
 8006e94:	b510      	push	{r4, lr}
 8006e96:	1e43      	subs	r3, r0, #1
 8006e98:	440a      	add	r2, r1
 8006e9a:	4291      	cmp	r1, r2
 8006e9c:	d100      	bne.n	8006ea0 <memcpy+0xc>
 8006e9e:	bd10      	pop	{r4, pc}
 8006ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ea8:	e7f7      	b.n	8006e9a <memcpy+0x6>

08006eaa <memset>:
 8006eaa:	4402      	add	r2, r0
 8006eac:	4603      	mov	r3, r0
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d100      	bne.n	8006eb4 <memset+0xa>
 8006eb2:	4770      	bx	lr
 8006eb4:	f803 1b01 	strb.w	r1, [r3], #1
 8006eb8:	e7f9      	b.n	8006eae <memset+0x4>
	...

08006ebc <_free_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	2900      	cmp	r1, #0
 8006ec2:	d045      	beq.n	8006f50 <_free_r+0x94>
 8006ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ec8:	1f0c      	subs	r4, r1, #4
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	bfb8      	it	lt
 8006ece:	18e4      	addlt	r4, r4, r3
 8006ed0:	f000 f89b 	bl	800700a <__malloc_lock>
 8006ed4:	4a1f      	ldr	r2, [pc, #124]	; (8006f54 <_free_r+0x98>)
 8006ed6:	6813      	ldr	r3, [r2, #0]
 8006ed8:	4610      	mov	r0, r2
 8006eda:	b933      	cbnz	r3, 8006eea <_free_r+0x2e>
 8006edc:	6063      	str	r3, [r4, #4]
 8006ede:	6014      	str	r4, [r2, #0]
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ee6:	f000 b891 	b.w	800700c <__malloc_unlock>
 8006eea:	42a3      	cmp	r3, r4
 8006eec:	d90c      	bls.n	8006f08 <_free_r+0x4c>
 8006eee:	6821      	ldr	r1, [r4, #0]
 8006ef0:	1862      	adds	r2, r4, r1
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	bf04      	itt	eq
 8006ef6:	681a      	ldreq	r2, [r3, #0]
 8006ef8:	685b      	ldreq	r3, [r3, #4]
 8006efa:	6063      	str	r3, [r4, #4]
 8006efc:	bf04      	itt	eq
 8006efe:	1852      	addeq	r2, r2, r1
 8006f00:	6022      	streq	r2, [r4, #0]
 8006f02:	6004      	str	r4, [r0, #0]
 8006f04:	e7ec      	b.n	8006ee0 <_free_r+0x24>
 8006f06:	4613      	mov	r3, r2
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	b10a      	cbz	r2, 8006f10 <_free_r+0x54>
 8006f0c:	42a2      	cmp	r2, r4
 8006f0e:	d9fa      	bls.n	8006f06 <_free_r+0x4a>
 8006f10:	6819      	ldr	r1, [r3, #0]
 8006f12:	1858      	adds	r0, r3, r1
 8006f14:	42a0      	cmp	r0, r4
 8006f16:	d10b      	bne.n	8006f30 <_free_r+0x74>
 8006f18:	6820      	ldr	r0, [r4, #0]
 8006f1a:	4401      	add	r1, r0
 8006f1c:	1858      	adds	r0, r3, r1
 8006f1e:	4282      	cmp	r2, r0
 8006f20:	6019      	str	r1, [r3, #0]
 8006f22:	d1dd      	bne.n	8006ee0 <_free_r+0x24>
 8006f24:	6810      	ldr	r0, [r2, #0]
 8006f26:	6852      	ldr	r2, [r2, #4]
 8006f28:	605a      	str	r2, [r3, #4]
 8006f2a:	4401      	add	r1, r0
 8006f2c:	6019      	str	r1, [r3, #0]
 8006f2e:	e7d7      	b.n	8006ee0 <_free_r+0x24>
 8006f30:	d902      	bls.n	8006f38 <_free_r+0x7c>
 8006f32:	230c      	movs	r3, #12
 8006f34:	602b      	str	r3, [r5, #0]
 8006f36:	e7d3      	b.n	8006ee0 <_free_r+0x24>
 8006f38:	6820      	ldr	r0, [r4, #0]
 8006f3a:	1821      	adds	r1, r4, r0
 8006f3c:	428a      	cmp	r2, r1
 8006f3e:	bf04      	itt	eq
 8006f40:	6811      	ldreq	r1, [r2, #0]
 8006f42:	6852      	ldreq	r2, [r2, #4]
 8006f44:	6062      	str	r2, [r4, #4]
 8006f46:	bf04      	itt	eq
 8006f48:	1809      	addeq	r1, r1, r0
 8006f4a:	6021      	streq	r1, [r4, #0]
 8006f4c:	605c      	str	r4, [r3, #4]
 8006f4e:	e7c7      	b.n	8006ee0 <_free_r+0x24>
 8006f50:	bd38      	pop	{r3, r4, r5, pc}
 8006f52:	bf00      	nop
 8006f54:	20000360 	.word	0x20000360

08006f58 <_raise_r>:
 8006f58:	291f      	cmp	r1, #31
 8006f5a:	b538      	push	{r3, r4, r5, lr}
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	460d      	mov	r5, r1
 8006f60:	d904      	bls.n	8006f6c <_raise_r+0x14>
 8006f62:	2316      	movs	r3, #22
 8006f64:	6003      	str	r3, [r0, #0]
 8006f66:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f6e:	b112      	cbz	r2, 8006f76 <_raise_r+0x1e>
 8006f70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f74:	b94b      	cbnz	r3, 8006f8a <_raise_r+0x32>
 8006f76:	4620      	mov	r0, r4
 8006f78:	f000 f830 	bl	8006fdc <_getpid_r>
 8006f7c:	462a      	mov	r2, r5
 8006f7e:	4601      	mov	r1, r0
 8006f80:	4620      	mov	r0, r4
 8006f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f86:	f000 b817 	b.w	8006fb8 <_kill_r>
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d00a      	beq.n	8006fa4 <_raise_r+0x4c>
 8006f8e:	1c59      	adds	r1, r3, #1
 8006f90:	d103      	bne.n	8006f9a <_raise_r+0x42>
 8006f92:	2316      	movs	r3, #22
 8006f94:	6003      	str	r3, [r0, #0]
 8006f96:	2001      	movs	r0, #1
 8006f98:	e7e7      	b.n	8006f6a <_raise_r+0x12>
 8006f9a:	2400      	movs	r4, #0
 8006f9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	4798      	blx	r3
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	e7e0      	b.n	8006f6a <_raise_r+0x12>

08006fa8 <raise>:
 8006fa8:	4b02      	ldr	r3, [pc, #8]	; (8006fb4 <raise+0xc>)
 8006faa:	4601      	mov	r1, r0
 8006fac:	6818      	ldr	r0, [r3, #0]
 8006fae:	f7ff bfd3 	b.w	8006f58 <_raise_r>
 8006fb2:	bf00      	nop
 8006fb4:	20000010 	.word	0x20000010

08006fb8 <_kill_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4c07      	ldr	r4, [pc, #28]	; (8006fd8 <_kill_r+0x20>)
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	4605      	mov	r5, r0
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	f7ff fe55 	bl	8006c74 <_kill>
 8006fca:	1c43      	adds	r3, r0, #1
 8006fcc:	d102      	bne.n	8006fd4 <_kill_r+0x1c>
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	b103      	cbz	r3, 8006fd4 <_kill_r+0x1c>
 8006fd2:	602b      	str	r3, [r5, #0]
 8006fd4:	bd38      	pop	{r3, r4, r5, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000368 	.word	0x20000368

08006fdc <_getpid_r>:
 8006fdc:	f7ff be42 	b.w	8006c64 <_getpid>

08006fe0 <strncpy>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	3901      	subs	r1, #1
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	b902      	cbnz	r2, 8006fea <strncpy+0xa>
 8006fe8:	bd70      	pop	{r4, r5, r6, pc}
 8006fea:	4623      	mov	r3, r4
 8006fec:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8006ff0:	f803 5b01 	strb.w	r5, [r3], #1
 8006ff4:	1e56      	subs	r6, r2, #1
 8006ff6:	b92d      	cbnz	r5, 8007004 <strncpy+0x24>
 8006ff8:	4414      	add	r4, r2
 8006ffa:	42a3      	cmp	r3, r4
 8006ffc:	d0f4      	beq.n	8006fe8 <strncpy+0x8>
 8006ffe:	f803 5b01 	strb.w	r5, [r3], #1
 8007002:	e7fa      	b.n	8006ffa <strncpy+0x1a>
 8007004:	461c      	mov	r4, r3
 8007006:	4632      	mov	r2, r6
 8007008:	e7ed      	b.n	8006fe6 <strncpy+0x6>

0800700a <__malloc_lock>:
 800700a:	4770      	bx	lr

0800700c <__malloc_unlock>:
 800700c:	4770      	bx	lr
	...

08007010 <_init>:
 8007010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007012:	bf00      	nop
 8007014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007016:	bc08      	pop	{r3}
 8007018:	469e      	mov	lr, r3
 800701a:	4770      	bx	lr

0800701c <_fini>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	bf00      	nop
 8007020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007022:	bc08      	pop	{r3}
 8007024:	469e      	mov	lr, r3
 8007026:	4770      	bx	lr
