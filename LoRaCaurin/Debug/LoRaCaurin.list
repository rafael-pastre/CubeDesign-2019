
LoRaCaurin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060c0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006248  08006248  00016248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006340  08006340  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006340  08006340  00016340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006348  08006348  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006348  08006348  00016348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000070  080063c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080063c4  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001497f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002626  00000000  00000000  00034a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001278  00000000  00000000  00037048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001160  00000000  00000000  000382c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b231  00000000  00000000  00039420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d3cb  00000000  00000000  00064651  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f8bd5  00000000  00000000  00071a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016a5f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000557c  00000000  00000000  0016a66c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006230 	.word	0x08006230

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08006230 	.word	0x08006230

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__gedf2>:
 8000540:	f04f 3cff 	mov.w	ip, #4294967295
 8000544:	e006      	b.n	8000554 <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__ledf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e002      	b.n	8000554 <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__cmpdf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800055c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	bf18      	it	ne
 8000566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056a:	d01b      	beq.n	80005a4 <__cmpdf2+0x54>
 800056c:	b001      	add	sp, #4
 800056e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000572:	bf0c      	ite	eq
 8000574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000578:	ea91 0f03 	teqne	r1, r3
 800057c:	bf02      	ittt	eq
 800057e:	ea90 0f02 	teqeq	r0, r2
 8000582:	2000      	moveq	r0, #0
 8000584:	4770      	bxeq	lr
 8000586:	f110 0f00 	cmn.w	r0, #0
 800058a:	ea91 0f03 	teq	r1, r3
 800058e:	bf58      	it	pl
 8000590:	4299      	cmppl	r1, r3
 8000592:	bf08      	it	eq
 8000594:	4290      	cmpeq	r0, r2
 8000596:	bf2c      	ite	cs
 8000598:	17d8      	asrcs	r0, r3, #31
 800059a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059e:	f040 0001 	orr.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ac:	d102      	bne.n	80005b4 <__cmpdf2+0x64>
 80005ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b2:	d107      	bne.n	80005c4 <__cmpdf2+0x74>
 80005b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d1d6      	bne.n	800056c <__cmpdf2+0x1c>
 80005be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c2:	d0d3      	beq.n	800056c <__cmpdf2+0x1c>
 80005c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__aeabi_cdrcmple>:
 80005cc:	4684      	mov	ip, r0
 80005ce:	4610      	mov	r0, r2
 80005d0:	4662      	mov	r2, ip
 80005d2:	468c      	mov	ip, r1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4663      	mov	r3, ip
 80005d8:	e000      	b.n	80005dc <__aeabi_cdcmpeq>
 80005da:	bf00      	nop

080005dc <__aeabi_cdcmpeq>:
 80005dc:	b501      	push	{r0, lr}
 80005de:	f7ff ffb7 	bl	8000550 <__cmpdf2>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	bf48      	it	mi
 80005e6:	f110 0f00 	cmnmi.w	r0, #0
 80005ea:	bd01      	pop	{r0, pc}

080005ec <__aeabi_dcmpeq>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff fff4 	bl	80005dc <__aeabi_cdcmpeq>
 80005f4:	bf0c      	ite	eq
 80005f6:	2001      	moveq	r0, #1
 80005f8:	2000      	movne	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmplt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffea 	bl	80005dc <__aeabi_cdcmpeq>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmple>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffe0 	bl	80005dc <__aeabi_cdcmpeq>
 800061c:	bf94      	ite	ls
 800061e:	2001      	movls	r0, #1
 8000620:	2000      	movhi	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmpge>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffce 	bl	80005cc <__aeabi_cdrcmple>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpgt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffc4 	bl	80005cc <__aeabi_cdrcmple>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_uldivmod>:
 8000650:	b953      	cbnz	r3, 8000668 <__aeabi_uldivmod+0x18>
 8000652:	b94a      	cbnz	r2, 8000668 <__aeabi_uldivmod+0x18>
 8000654:	2900      	cmp	r1, #0
 8000656:	bf08      	it	eq
 8000658:	2800      	cmpeq	r0, #0
 800065a:	bf1c      	itt	ne
 800065c:	f04f 31ff 	movne.w	r1, #4294967295
 8000660:	f04f 30ff 	movne.w	r0, #4294967295
 8000664:	f000 b972 	b.w	800094c <__aeabi_idiv0>
 8000668:	f1ad 0c08 	sub.w	ip, sp, #8
 800066c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000670:	f000 f806 	bl	8000680 <__udivmoddi4>
 8000674:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800067c:	b004      	add	sp, #16
 800067e:	4770      	bx	lr

08000680 <__udivmoddi4>:
 8000680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000684:	9e08      	ldr	r6, [sp, #32]
 8000686:	4604      	mov	r4, r0
 8000688:	4688      	mov	r8, r1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d14b      	bne.n	8000726 <__udivmoddi4+0xa6>
 800068e:	428a      	cmp	r2, r1
 8000690:	4615      	mov	r5, r2
 8000692:	d967      	bls.n	8000764 <__udivmoddi4+0xe4>
 8000694:	fab2 f282 	clz	r2, r2
 8000698:	b14a      	cbz	r2, 80006ae <__udivmoddi4+0x2e>
 800069a:	f1c2 0720 	rsb	r7, r2, #32
 800069e:	fa01 f302 	lsl.w	r3, r1, r2
 80006a2:	fa20 f707 	lsr.w	r7, r0, r7
 80006a6:	4095      	lsls	r5, r2
 80006a8:	ea47 0803 	orr.w	r8, r7, r3
 80006ac:	4094      	lsls	r4, r2
 80006ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006b2:	0c23      	lsrs	r3, r4, #16
 80006b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80006b8:	fa1f fc85 	uxth.w	ip, r5
 80006bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80006c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006c4:	fb07 f10c 	mul.w	r1, r7, ip
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d909      	bls.n	80006e0 <__udivmoddi4+0x60>
 80006cc:	18eb      	adds	r3, r5, r3
 80006ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80006d2:	f080 811b 	bcs.w	800090c <__udivmoddi4+0x28c>
 80006d6:	4299      	cmp	r1, r3
 80006d8:	f240 8118 	bls.w	800090c <__udivmoddi4+0x28c>
 80006dc:	3f02      	subs	r7, #2
 80006de:	442b      	add	r3, r5
 80006e0:	1a5b      	subs	r3, r3, r1
 80006e2:	b2a4      	uxth	r4, r4
 80006e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80006e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80006ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80006f4:	45a4      	cmp	ip, r4
 80006f6:	d909      	bls.n	800070c <__udivmoddi4+0x8c>
 80006f8:	192c      	adds	r4, r5, r4
 80006fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80006fe:	f080 8107 	bcs.w	8000910 <__udivmoddi4+0x290>
 8000702:	45a4      	cmp	ip, r4
 8000704:	f240 8104 	bls.w	8000910 <__udivmoddi4+0x290>
 8000708:	3802      	subs	r0, #2
 800070a:	442c      	add	r4, r5
 800070c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000710:	eba4 040c 	sub.w	r4, r4, ip
 8000714:	2700      	movs	r7, #0
 8000716:	b11e      	cbz	r6, 8000720 <__udivmoddi4+0xa0>
 8000718:	40d4      	lsrs	r4, r2
 800071a:	2300      	movs	r3, #0
 800071c:	e9c6 4300 	strd	r4, r3, [r6]
 8000720:	4639      	mov	r1, r7
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	428b      	cmp	r3, r1
 8000728:	d909      	bls.n	800073e <__udivmoddi4+0xbe>
 800072a:	2e00      	cmp	r6, #0
 800072c:	f000 80eb 	beq.w	8000906 <__udivmoddi4+0x286>
 8000730:	2700      	movs	r7, #0
 8000732:	e9c6 0100 	strd	r0, r1, [r6]
 8000736:	4638      	mov	r0, r7
 8000738:	4639      	mov	r1, r7
 800073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073e:	fab3 f783 	clz	r7, r3
 8000742:	2f00      	cmp	r7, #0
 8000744:	d147      	bne.n	80007d6 <__udivmoddi4+0x156>
 8000746:	428b      	cmp	r3, r1
 8000748:	d302      	bcc.n	8000750 <__udivmoddi4+0xd0>
 800074a:	4282      	cmp	r2, r0
 800074c:	f200 80fa 	bhi.w	8000944 <__udivmoddi4+0x2c4>
 8000750:	1a84      	subs	r4, r0, r2
 8000752:	eb61 0303 	sbc.w	r3, r1, r3
 8000756:	2001      	movs	r0, #1
 8000758:	4698      	mov	r8, r3
 800075a:	2e00      	cmp	r6, #0
 800075c:	d0e0      	beq.n	8000720 <__udivmoddi4+0xa0>
 800075e:	e9c6 4800 	strd	r4, r8, [r6]
 8000762:	e7dd      	b.n	8000720 <__udivmoddi4+0xa0>
 8000764:	b902      	cbnz	r2, 8000768 <__udivmoddi4+0xe8>
 8000766:	deff      	udf	#255	; 0xff
 8000768:	fab2 f282 	clz	r2, r2
 800076c:	2a00      	cmp	r2, #0
 800076e:	f040 808f 	bne.w	8000890 <__udivmoddi4+0x210>
 8000772:	1b49      	subs	r1, r1, r5
 8000774:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000778:	fa1f f885 	uxth.w	r8, r5
 800077c:	2701      	movs	r7, #1
 800077e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000782:	0c23      	lsrs	r3, r4, #16
 8000784:	fb0e 111c 	mls	r1, lr, ip, r1
 8000788:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800078c:	fb08 f10c 	mul.w	r1, r8, ip
 8000790:	4299      	cmp	r1, r3
 8000792:	d907      	bls.n	80007a4 <__udivmoddi4+0x124>
 8000794:	18eb      	adds	r3, r5, r3
 8000796:	f10c 30ff 	add.w	r0, ip, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x122>
 800079c:	4299      	cmp	r1, r3
 800079e:	f200 80cd 	bhi.w	800093c <__udivmoddi4+0x2bc>
 80007a2:	4684      	mov	ip, r0
 80007a4:	1a59      	subs	r1, r3, r1
 80007a6:	b2a3      	uxth	r3, r4
 80007a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80007ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80007b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007b4:	fb08 f800 	mul.w	r8, r8, r0
 80007b8:	45a0      	cmp	r8, r4
 80007ba:	d907      	bls.n	80007cc <__udivmoddi4+0x14c>
 80007bc:	192c      	adds	r4, r5, r4
 80007be:	f100 33ff 	add.w	r3, r0, #4294967295
 80007c2:	d202      	bcs.n	80007ca <__udivmoddi4+0x14a>
 80007c4:	45a0      	cmp	r8, r4
 80007c6:	f200 80b6 	bhi.w	8000936 <__udivmoddi4+0x2b6>
 80007ca:	4618      	mov	r0, r3
 80007cc:	eba4 0408 	sub.w	r4, r4, r8
 80007d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007d4:	e79f      	b.n	8000716 <__udivmoddi4+0x96>
 80007d6:	f1c7 0c20 	rsb	ip, r7, #32
 80007da:	40bb      	lsls	r3, r7
 80007dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80007e4:	fa01 f407 	lsl.w	r4, r1, r7
 80007e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80007ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80007f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007f4:	4325      	orrs	r5, r4
 80007f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80007fa:	0c2c      	lsrs	r4, r5, #16
 80007fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000800:	fa1f fa8e 	uxth.w	sl, lr
 8000804:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000808:	fb09 f40a 	mul.w	r4, r9, sl
 800080c:	429c      	cmp	r4, r3
 800080e:	fa02 f207 	lsl.w	r2, r2, r7
 8000812:	fa00 f107 	lsl.w	r1, r0, r7
 8000816:	d90b      	bls.n	8000830 <__udivmoddi4+0x1b0>
 8000818:	eb1e 0303 	adds.w	r3, lr, r3
 800081c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000820:	f080 8087 	bcs.w	8000932 <__udivmoddi4+0x2b2>
 8000824:	429c      	cmp	r4, r3
 8000826:	f240 8084 	bls.w	8000932 <__udivmoddi4+0x2b2>
 800082a:	f1a9 0902 	sub.w	r9, r9, #2
 800082e:	4473      	add	r3, lr
 8000830:	1b1b      	subs	r3, r3, r4
 8000832:	b2ad      	uxth	r5, r5
 8000834:	fbb3 f0f8 	udiv	r0, r3, r8
 8000838:	fb08 3310 	mls	r3, r8, r0, r3
 800083c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000840:	fb00 fa0a 	mul.w	sl, r0, sl
 8000844:	45a2      	cmp	sl, r4
 8000846:	d908      	bls.n	800085a <__udivmoddi4+0x1da>
 8000848:	eb1e 0404 	adds.w	r4, lr, r4
 800084c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000850:	d26b      	bcs.n	800092a <__udivmoddi4+0x2aa>
 8000852:	45a2      	cmp	sl, r4
 8000854:	d969      	bls.n	800092a <__udivmoddi4+0x2aa>
 8000856:	3802      	subs	r0, #2
 8000858:	4474      	add	r4, lr
 800085a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800085e:	fba0 8902 	umull	r8, r9, r0, r2
 8000862:	eba4 040a 	sub.w	r4, r4, sl
 8000866:	454c      	cmp	r4, r9
 8000868:	46c2      	mov	sl, r8
 800086a:	464b      	mov	r3, r9
 800086c:	d354      	bcc.n	8000918 <__udivmoddi4+0x298>
 800086e:	d051      	beq.n	8000914 <__udivmoddi4+0x294>
 8000870:	2e00      	cmp	r6, #0
 8000872:	d069      	beq.n	8000948 <__udivmoddi4+0x2c8>
 8000874:	ebb1 050a 	subs.w	r5, r1, sl
 8000878:	eb64 0403 	sbc.w	r4, r4, r3
 800087c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000880:	40fd      	lsrs	r5, r7
 8000882:	40fc      	lsrs	r4, r7
 8000884:	ea4c 0505 	orr.w	r5, ip, r5
 8000888:	e9c6 5400 	strd	r5, r4, [r6]
 800088c:	2700      	movs	r7, #0
 800088e:	e747      	b.n	8000720 <__udivmoddi4+0xa0>
 8000890:	f1c2 0320 	rsb	r3, r2, #32
 8000894:	fa20 f703 	lsr.w	r7, r0, r3
 8000898:	4095      	lsls	r5, r2
 800089a:	fa01 f002 	lsl.w	r0, r1, r2
 800089e:	fa21 f303 	lsr.w	r3, r1, r3
 80008a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008a6:	4338      	orrs	r0, r7
 80008a8:	0c01      	lsrs	r1, r0, #16
 80008aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80008ae:	fa1f f885 	uxth.w	r8, r5
 80008b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80008b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ba:	fb07 f308 	mul.w	r3, r7, r8
 80008be:	428b      	cmp	r3, r1
 80008c0:	fa04 f402 	lsl.w	r4, r4, r2
 80008c4:	d907      	bls.n	80008d6 <__udivmoddi4+0x256>
 80008c6:	1869      	adds	r1, r5, r1
 80008c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80008cc:	d22f      	bcs.n	800092e <__udivmoddi4+0x2ae>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d92d      	bls.n	800092e <__udivmoddi4+0x2ae>
 80008d2:	3f02      	subs	r7, #2
 80008d4:	4429      	add	r1, r5
 80008d6:	1acb      	subs	r3, r1, r3
 80008d8:	b281      	uxth	r1, r0
 80008da:	fbb3 f0fe 	udiv	r0, r3, lr
 80008de:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e6:	fb00 f308 	mul.w	r3, r0, r8
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d907      	bls.n	80008fe <__udivmoddi4+0x27e>
 80008ee:	1869      	adds	r1, r5, r1
 80008f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f4:	d217      	bcs.n	8000926 <__udivmoddi4+0x2a6>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d915      	bls.n	8000926 <__udivmoddi4+0x2a6>
 80008fa:	3802      	subs	r0, #2
 80008fc:	4429      	add	r1, r5
 80008fe:	1ac9      	subs	r1, r1, r3
 8000900:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000904:	e73b      	b.n	800077e <__udivmoddi4+0xfe>
 8000906:	4637      	mov	r7, r6
 8000908:	4630      	mov	r0, r6
 800090a:	e709      	b.n	8000720 <__udivmoddi4+0xa0>
 800090c:	4607      	mov	r7, r0
 800090e:	e6e7      	b.n	80006e0 <__udivmoddi4+0x60>
 8000910:	4618      	mov	r0, r3
 8000912:	e6fb      	b.n	800070c <__udivmoddi4+0x8c>
 8000914:	4541      	cmp	r1, r8
 8000916:	d2ab      	bcs.n	8000870 <__udivmoddi4+0x1f0>
 8000918:	ebb8 0a02 	subs.w	sl, r8, r2
 800091c:	eb69 020e 	sbc.w	r2, r9, lr
 8000920:	3801      	subs	r0, #1
 8000922:	4613      	mov	r3, r2
 8000924:	e7a4      	b.n	8000870 <__udivmoddi4+0x1f0>
 8000926:	4660      	mov	r0, ip
 8000928:	e7e9      	b.n	80008fe <__udivmoddi4+0x27e>
 800092a:	4618      	mov	r0, r3
 800092c:	e795      	b.n	800085a <__udivmoddi4+0x1da>
 800092e:	4667      	mov	r7, ip
 8000930:	e7d1      	b.n	80008d6 <__udivmoddi4+0x256>
 8000932:	4681      	mov	r9, r0
 8000934:	e77c      	b.n	8000830 <__udivmoddi4+0x1b0>
 8000936:	3802      	subs	r0, #2
 8000938:	442c      	add	r4, r5
 800093a:	e747      	b.n	80007cc <__udivmoddi4+0x14c>
 800093c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000940:	442b      	add	r3, r5
 8000942:	e72f      	b.n	80007a4 <__udivmoddi4+0x124>
 8000944:	4638      	mov	r0, r7
 8000946:	e708      	b.n	800075a <__udivmoddi4+0xda>
 8000948:	4637      	mov	r7, r6
 800094a:	e6e9      	b.n	8000720 <__udivmoddi4+0xa0>

0800094c <__aeabi_idiv0>:
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop

08000950 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_Init+0x3c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <HAL_Init+0x3c>)
 8000960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000964:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000966:	2003      	movs	r0, #3
 8000968:	f000 f95c 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800096c:	2000      	movs	r0, #0
 800096e:	f000 f80f 	bl	8000990 <HAL_InitTick>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d002      	beq.n	800097e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	71fb      	strb	r3, [r7, #7]
 800097c:	e001      	b.n	8000982 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800097e:	f004 fd99 	bl	80054b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000982:	79fb      	ldrb	r3, [r7, #7]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40022000 	.word	0x40022000

08000990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <HAL_InitTick+0x68>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d022      	beq.n	80009ea <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_InitTick+0x6c>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <HAL_InitTick+0x68>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80009b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 f968 	bl	8000c8e <HAL_SYSTICK_Config>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10f      	bne.n	80009e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b0f      	cmp	r3, #15
 80009c8:	d809      	bhi.n	80009de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ca:	2200      	movs	r2, #0
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	f04f 30ff 	mov.w	r0, #4294967295
 80009d2:	f000 f932 	bl	8000c3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <HAL_InitTick+0x70>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	e007      	b.n	80009ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	73fb      	strb	r3, [r7, #15]
 80009e2:	e004      	b.n	80009ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	73fb      	strb	r3, [r7, #15]
 80009e8:	e001      	b.n	80009ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000004 	.word	0x20000004
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000000 	.word	0x20000000

08000a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_IncTick+0x1c>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x20>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4413      	add	r3, r2
 8000a12:	4a03      	ldr	r2, [pc, #12]	; (8000a20 <HAL_IncTick+0x1c>)
 8000a14:	6013      	str	r3, [r2, #0]
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	20000234 	.word	0x20000234
 8000a24:	20000004 	.word	0x20000004

08000a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_GetTick+0x14>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000234 	.word	0x20000234

08000a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a48:	f7ff ffee 	bl	8000a28 <HAL_GetTick>
 8000a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a58:	d004      	beq.n	8000a64 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_Delay+0x40>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	4413      	add	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a64:	bf00      	nop
 8000a66:	f7ff ffdf 	bl	8000a28 <HAL_GetTick>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d8f7      	bhi.n	8000a66 <HAL_Delay+0x26>
  {
  }
}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000004 	.word	0x20000004

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4907      	ldr	r1, [pc, #28]	; (8000b20 <__NVIC_EnableIRQ+0x38>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f7ff ff8e 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff29 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c4c:	f7ff ff3e 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f7ff ff8e 	bl	8000b78 <NVIC_EncodePriority>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff5d 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff31 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ffa2 	bl	8000be0 <SysTick_Config>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb6:	e17f      	b.n	8000fb8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 8171 	beq.w	8000fb2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d003      	beq.n	8000ce0 <HAL_GPIO_Init+0x38>
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b12      	cmp	r3, #18
 8000cde:	d123      	bne.n	8000d28 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	08da      	lsrs	r2, r3, #3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3208      	adds	r2, #8
 8000ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f003 0307 	and.w	r3, r3, #7
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	220f      	movs	r2, #15
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	691a      	ldr	r2, [r3, #16]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	08da      	lsrs	r2, r3, #3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3208      	adds	r2, #8
 8000d22:	6939      	ldr	r1, [r7, #16]
 8000d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0203 	and.w	r2, r3, #3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d00b      	beq.n	8000d7c <HAL_GPIO_Init+0xd4>
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d007      	beq.n	8000d7c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d70:	2b11      	cmp	r3, #17
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b12      	cmp	r3, #18
 8000d7a:	d130      	bne.n	8000dde <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000db2:	2201      	movs	r2, #1
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	091b      	lsrs	r3, r3, #4
 8000dc8:	f003 0201 	and.w	r2, r3, #1
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d118      	bne.n	8000e1c <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000df0:	2201      	movs	r2, #1
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	08db      	lsrs	r3, r3, #3
 8000e06:	f003 0201 	and.w	r2, r3, #1
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 80ac 	beq.w	8000fb2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	4b5e      	ldr	r3, [pc, #376]	; (8000fd4 <HAL_GPIO_Init+0x32c>)
 8000e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5e:	4a5d      	ldr	r2, [pc, #372]	; (8000fd4 <HAL_GPIO_Init+0x32c>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6613      	str	r3, [r2, #96]	; 0x60
 8000e66:	4b5b      	ldr	r3, [pc, #364]	; (8000fd4 <HAL_GPIO_Init+0x32c>)
 8000e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e72:	4a59      	ldr	r2, [pc, #356]	; (8000fd8 <HAL_GPIO_Init+0x330>)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	220f      	movs	r2, #15
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e9c:	d025      	beq.n	8000eea <HAL_GPIO_Init+0x242>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4e      	ldr	r2, [pc, #312]	; (8000fdc <HAL_GPIO_Init+0x334>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d01f      	beq.n	8000ee6 <HAL_GPIO_Init+0x23e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4d      	ldr	r2, [pc, #308]	; (8000fe0 <HAL_GPIO_Init+0x338>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d019      	beq.n	8000ee2 <HAL_GPIO_Init+0x23a>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4c      	ldr	r2, [pc, #304]	; (8000fe4 <HAL_GPIO_Init+0x33c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0x236>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4b      	ldr	r2, [pc, #300]	; (8000fe8 <HAL_GPIO_Init+0x340>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00d      	beq.n	8000eda <HAL_GPIO_Init+0x232>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4a      	ldr	r2, [pc, #296]	; (8000fec <HAL_GPIO_Init+0x344>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x22e>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a49      	ldr	r2, [pc, #292]	; (8000ff0 <HAL_GPIO_Init+0x348>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_Init+0x22a>
 8000ece:	2306      	movs	r3, #6
 8000ed0:	e00c      	b.n	8000eec <HAL_GPIO_Init+0x244>
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	e00a      	b.n	8000eec <HAL_GPIO_Init+0x244>
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	e008      	b.n	8000eec <HAL_GPIO_Init+0x244>
 8000eda:	2304      	movs	r3, #4
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x244>
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e004      	b.n	8000eec <HAL_GPIO_Init+0x244>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e002      	b.n	8000eec <HAL_GPIO_Init+0x244>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <HAL_GPIO_Init+0x244>
 8000eea:	2300      	movs	r3, #0
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	f002 0203 	and.w	r2, r2, #3
 8000ef2:	0092      	lsls	r2, r2, #2
 8000ef4:	4093      	lsls	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000efc:	4936      	ldr	r1, [pc, #216]	; (8000fd8 <HAL_GPIO_Init+0x330>)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3302      	adds	r3, #2
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <HAL_GPIO_Init+0x34c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f2e:	4a31      	ldr	r2, [pc, #196]	; (8000ff4 <HAL_GPIO_Init+0x34c>)
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000f34:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <HAL_GPIO_Init+0x34c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f58:	4a26      	ldr	r2, [pc, #152]	; (8000ff4 <HAL_GPIO_Init+0x34c>)
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <HAL_GPIO_Init+0x34c>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f82:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <HAL_GPIO_Init+0x34c>)
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <HAL_GPIO_Init+0x34c>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fac:	4a11      	ldr	r2, [pc, #68]	; (8000ff4 <HAL_GPIO_Init+0x34c>)
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f47f ae78 	bne.w	8000cb8 <HAL_GPIO_Init+0x10>
  }
}
 8000fc8:	bf00      	nop
 8000fca:	371c      	adds	r7, #28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40010000 	.word	0x40010000
 8000fdc:	48000400 	.word	0x48000400
 8000fe0:	48000800 	.word	0x48000800
 8000fe4:	48000c00 	.word	0x48000c00
 8000fe8:	48001000 	.word	0x48001000
 8000fec:	48001400 	.word	0x48001400
 8000ff0:	48001800 	.word	0x48001800
 8000ff4:	40010400 	.word	0x40010400

08000ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
 8001004:	4613      	mov	r3, r2
 8001006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001008:	787b      	ldrb	r3, [r7, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800100e:	887a      	ldrh	r2, [r7, #2]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001014:	e002      	b.n	800101c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	4013      	ands	r3, r2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d006      	beq.n	800104c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	4618      	mov	r0, r3
 8001048:	f004 f9ec 	bl	8005424 <HAL_GPIO_EXTI_Callback>
  }
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <HAL_PWREx_GetVoltageRange+0x18>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40007000 	.word	0x40007000

08001074 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001082:	d130      	bne.n	80010e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800108c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001090:	d038      	beq.n	8001104 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800109a:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800109c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2232      	movs	r2, #50	; 0x32
 80010a8:	fb02 f303 	mul.w	r3, r2, r3
 80010ac:	4a1b      	ldr	r2, [pc, #108]	; (800111c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010ae:	fba2 2303 	umull	r2, r3, r2, r3
 80010b2:	0c9b      	lsrs	r3, r3, #18
 80010b4:	3301      	adds	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b8:	e002      	b.n	80010c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3b01      	subs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010cc:	d102      	bne.n	80010d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f2      	bne.n	80010ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010e0:	d110      	bne.n	8001104 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e00f      	b.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f2:	d007      	beq.n	8001104 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010fc:	4a05      	ldr	r2, [pc, #20]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001102:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40007000 	.word	0x40007000
 8001118:	20000008 	.word	0x20000008
 800111c:	431bde83 	.word	0x431bde83

08001120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e39d      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001132:	4ba4      	ldr	r3, [pc, #656]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800113c:	4ba1      	ldr	r3, [pc, #644]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 80e1 	beq.w	8001316 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <HAL_RCC_OscConfig+0x4a>
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	2b0c      	cmp	r3, #12
 800115e:	f040 8088 	bne.w	8001272 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2b01      	cmp	r3, #1
 8001166:	f040 8084 	bne.w	8001272 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800116a:	4b96      	ldr	r3, [pc, #600]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <HAL_RCC_OscConfig+0x62>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e375      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a1a      	ldr	r2, [r3, #32]
 8001186:	4b8f      	ldr	r3, [pc, #572]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d004      	beq.n	800119c <HAL_RCC_OscConfig+0x7c>
 8001192:	4b8c      	ldr	r3, [pc, #560]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800119a:	e005      	b.n	80011a8 <HAL_RCC_OscConfig+0x88>
 800119c:	4b89      	ldr	r3, [pc, #548]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 800119e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d223      	bcs.n	80011f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fd09 	bl	8001bc8 <RCC_SetFlashLatencyFromMSIRange>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e356      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011c0:	4b80      	ldr	r3, [pc, #512]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a7f      	ldr	r2, [pc, #508]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b7d      	ldr	r3, [pc, #500]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	497a      	ldr	r1, [pc, #488]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011de:	4b79      	ldr	r3, [pc, #484]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	4975      	ldr	r1, [pc, #468]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	604b      	str	r3, [r1, #4]
 80011f2:	e022      	b.n	800123a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011f4:	4b73      	ldr	r3, [pc, #460]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a72      	ldr	r2, [pc, #456]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80011fa:	f043 0308 	orr.w	r3, r3, #8
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b70      	ldr	r3, [pc, #448]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	496d      	ldr	r1, [pc, #436]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 800120e:	4313      	orrs	r3, r2
 8001210:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001212:	4b6c      	ldr	r3, [pc, #432]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	4968      	ldr	r1, [pc, #416]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fccc 	bl	8001bc8 <RCC_SetFlashLatencyFromMSIRange>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e319      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800123a:	f000 fc03 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 800123e:	4601      	mov	r1, r0
 8001240:	4b60      	ldr	r3, [pc, #384]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	091b      	lsrs	r3, r3, #4
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	4a5f      	ldr	r2, [pc, #380]	; (80013c8 <HAL_RCC_OscConfig+0x2a8>)
 800124c:	5cd3      	ldrb	r3, [r2, r3]
 800124e:	f003 031f 	and.w	r3, r3, #31
 8001252:	fa21 f303 	lsr.w	r3, r1, r3
 8001256:	4a5d      	ldr	r2, [pc, #372]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 8001258:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800125a:	4b5d      	ldr	r3, [pc, #372]	; (80013d0 <HAL_RCC_OscConfig+0x2b0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fb96 	bl	8000990 <HAL_InitTick>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d052      	beq.n	8001314 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	e2fd      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d032      	beq.n	80012e0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800127a:	4b52      	ldr	r3, [pc, #328]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a51      	ldr	r2, [pc, #324]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001286:	f7ff fbcf 	bl	8000a28 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800128e:	f7ff fbcb 	bl	8000a28 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e2e6      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012a0:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ac:	4b45      	ldr	r3, [pc, #276]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a44      	ldr	r2, [pc, #272]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80012b2:	f043 0308 	orr.w	r3, r3, #8
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	493f      	ldr	r1, [pc, #252]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ca:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	493a      	ldr	r1, [pc, #232]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	604b      	str	r3, [r1, #4]
 80012de:	e01a      	b.n	8001316 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012e0:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a37      	ldr	r2, [pc, #220]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 80012e6:	f023 0301 	bic.w	r3, r3, #1
 80012ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fb9c 	bl	8000a28 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012f4:	f7ff fb98 	bl	8000a28 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e2b3      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001306:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x1d4>
 8001312:	e000      	b.n	8001316 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001314:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d074      	beq.n	800140c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	2b08      	cmp	r3, #8
 8001326:	d005      	beq.n	8001334 <HAL_RCC_OscConfig+0x214>
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2b0c      	cmp	r3, #12
 800132c:	d10e      	bne.n	800134c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2b03      	cmp	r3, #3
 8001332:	d10b      	bne.n	800134c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d064      	beq.n	800140a <HAL_RCC_OscConfig+0x2ea>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d160      	bne.n	800140a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e290      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001354:	d106      	bne.n	8001364 <HAL_RCC_OscConfig+0x244>
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a1a      	ldr	r2, [pc, #104]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e01d      	b.n	80013a0 <HAL_RCC_OscConfig+0x280>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800136c:	d10c      	bne.n	8001388 <HAL_RCC_OscConfig+0x268>
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 8001374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 8001380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e00b      	b.n	80013a0 <HAL_RCC_OscConfig+0x280>
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 800138e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <HAL_RCC_OscConfig+0x2a4>)
 800139a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d01c      	beq.n	80013e2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fb3e 	bl	8000a28 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ae:	e011      	b.n	80013d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fb3a 	bl	8000a28 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d90a      	bls.n	80013d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e255      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	08006294 	.word	0x08006294
 80013cc:	20000008 	.word	0x20000008
 80013d0:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d4:	4bae      	ldr	r3, [pc, #696]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0e7      	beq.n	80013b0 <HAL_RCC_OscConfig+0x290>
 80013e0:	e014      	b.n	800140c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff fb21 	bl	8000a28 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ea:	f7ff fb1d 	bl	8000a28 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b64      	cmp	r3, #100	; 0x64
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e238      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013fc:	4ba4      	ldr	r3, [pc, #656]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x2ca>
 8001408:	e000      	b.n	800140c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d060      	beq.n	80014da <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2b04      	cmp	r3, #4
 800141c:	d005      	beq.n	800142a <HAL_RCC_OscConfig+0x30a>
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	2b0c      	cmp	r3, #12
 8001422:	d119      	bne.n	8001458 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d116      	bne.n	8001458 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800142a:	4b99      	ldr	r3, [pc, #612]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <HAL_RCC_OscConfig+0x322>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e215      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001442:	4b93      	ldr	r3, [pc, #588]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	061b      	lsls	r3, r3, #24
 8001450:	498f      	ldr	r1, [pc, #572]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 8001452:	4313      	orrs	r3, r2
 8001454:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001456:	e040      	b.n	80014da <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d023      	beq.n	80014a8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001460:	4b8b      	ldr	r3, [pc, #556]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a8a      	ldr	r2, [pc, #552]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 8001466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fadc 	bl	8000a28 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001474:	f7ff fad8 	bl	8000a28 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e1f3      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001486:	4b82      	ldr	r3, [pc, #520]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001492:	4b7f      	ldr	r3, [pc, #508]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	061b      	lsls	r3, r3, #24
 80014a0:	497b      	ldr	r1, [pc, #492]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]
 80014a6:	e018      	b.n	80014da <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a8:	4b79      	ldr	r3, [pc, #484]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a78      	ldr	r2, [pc, #480]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 80014ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff fab8 	bl	8000a28 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014bc:	f7ff fab4 	bl	8000a28 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e1cf      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ce:	4b70      	ldr	r3, [pc, #448]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d03c      	beq.n	8001560 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d01c      	beq.n	8001528 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ee:	4b68      	ldr	r3, [pc, #416]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 80014f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f4:	4a66      	ldr	r2, [pc, #408]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fe:	f7ff fa93 	bl	8000a28 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff fa8f 	bl	8000a28 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e1aa      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001518:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 800151a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0ef      	beq.n	8001506 <HAL_RCC_OscConfig+0x3e6>
 8001526:	e01b      	b.n	8001560 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001528:	4b59      	ldr	r3, [pc, #356]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 800152a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800152e:	4a58      	ldr	r2, [pc, #352]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001538:	f7ff fa76 	bl	8000a28 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001540:	f7ff fa72 	bl	8000a28 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e18d      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001552:	4b4f      	ldr	r3, [pc, #316]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 8001554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1ef      	bne.n	8001540 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80a5 	beq.w	80016b8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001572:	4b47      	ldr	r3, [pc, #284]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10d      	bne.n	800159a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	4b44      	ldr	r3, [pc, #272]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	4a43      	ldr	r2, [pc, #268]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6593      	str	r3, [r2, #88]	; 0x58
 800158a:	4b41      	ldr	r3, [pc, #260]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001596:	2301      	movs	r3, #1
 8001598:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159a:	4b3e      	ldr	r3, [pc, #248]	; (8001694 <HAL_RCC_OscConfig+0x574>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d118      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015a6:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <HAL_RCC_OscConfig+0x574>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a3a      	ldr	r2, [pc, #232]	; (8001694 <HAL_RCC_OscConfig+0x574>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b2:	f7ff fa39 	bl	8000a28 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ba:	f7ff fa35 	bl	8000a28 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e150      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015cc:	4b31      	ldr	r3, [pc, #196]	; (8001694 <HAL_RCC_OscConfig+0x574>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d108      	bne.n	80015f2 <HAL_RCC_OscConfig+0x4d2>
 80015e0:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 80015e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e6:	4a2a      	ldr	r2, [pc, #168]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015f0:	e024      	b.n	800163c <HAL_RCC_OscConfig+0x51c>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d110      	bne.n	800161c <HAL_RCC_OscConfig+0x4fc>
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 80015fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001600:	4a23      	ldr	r2, [pc, #140]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 800160c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001610:	4a1f      	ldr	r2, [pc, #124]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800161a:	e00f      	b.n	800163c <HAL_RCC_OscConfig+0x51c>
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 800161e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001622:	4a1b      	ldr	r2, [pc, #108]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 800162e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001632:	4a17      	ldr	r2, [pc, #92]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 8001634:	f023 0304 	bic.w	r3, r3, #4
 8001638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d016      	beq.n	8001672 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff f9f0 	bl	8000a28 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164c:	f7ff f9ec 	bl	8000a28 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	; 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e105      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_RCC_OscConfig+0x570>)
 8001664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0ed      	beq.n	800164c <HAL_RCC_OscConfig+0x52c>
 8001670:	e019      	b.n	80016a6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001672:	f7ff f9d9 	bl	8000a28 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001678:	e00e      	b.n	8001698 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f7ff f9d5 	bl	8000a28 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f241 3288 	movw	r2, #5000	; 0x1388
 8001688:	4293      	cmp	r3, r2
 800168a:	d905      	bls.n	8001698 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e0ee      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
 8001690:	40021000 	.word	0x40021000
 8001694:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001698:	4b77      	ldr	r3, [pc, #476]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1e9      	bne.n	800167a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016a6:	7ffb      	ldrb	r3, [r7, #31]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d105      	bne.n	80016b8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ac:	4b72      	ldr	r3, [pc, #456]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b0:	4a71      	ldr	r2, [pc, #452]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 80016b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80d5 	beq.w	800186c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b0c      	cmp	r3, #12
 80016c6:	f000 808e 	beq.w	80017e6 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d15b      	bne.n	800178a <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d2:	4b69      	ldr	r3, [pc, #420]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a68      	ldr	r2, [pc, #416]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 80016d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7ff f9a3 	bl	8000a28 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e6:	f7ff f99f 	bl	8000a28 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e0ba      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f8:	4b5f      	ldr	r3, [pc, #380]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001704:	4b5c      	ldr	r3, [pc, #368]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	4b5c      	ldr	r3, [pc, #368]	; (800187c <HAL_RCC_OscConfig+0x75c>)
 800170a:	4013      	ands	r3, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001714:	3a01      	subs	r2, #1
 8001716:	0112      	lsls	r2, r2, #4
 8001718:	4311      	orrs	r1, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800171e:	0212      	lsls	r2, r2, #8
 8001720:	4311      	orrs	r1, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001726:	0852      	lsrs	r2, r2, #1
 8001728:	3a01      	subs	r2, #1
 800172a:	0552      	lsls	r2, r2, #21
 800172c:	4311      	orrs	r1, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001732:	0852      	lsrs	r2, r2, #1
 8001734:	3a01      	subs	r2, #1
 8001736:	0652      	lsls	r2, r2, #25
 8001738:	4311      	orrs	r1, r2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800173e:	0912      	lsrs	r2, r2, #4
 8001740:	0452      	lsls	r2, r2, #17
 8001742:	430a      	orrs	r2, r1
 8001744:	494c      	ldr	r1, [pc, #304]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 8001746:	4313      	orrs	r3, r2
 8001748:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800174a:	4b4b      	ldr	r3, [pc, #300]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a4a      	ldr	r2, [pc, #296]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 8001750:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001754:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001756:	4b48      	ldr	r3, [pc, #288]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	4a47      	ldr	r2, [pc, #284]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 800175c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001760:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff f961 	bl	8000a28 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176a:	f7ff f95d 	bl	8000a28 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e078      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177c:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x64a>
 8001788:	e070      	b.n	800186c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178a:	4b3b      	ldr	r3, [pc, #236]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a3a      	ldr	r2, [pc, #232]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 8001790:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001794:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001796:	4b38      	ldr	r3, [pc, #224]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d105      	bne.n	80017ae <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80017a2:	4b35      	ldr	r3, [pc, #212]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	4a34      	ldr	r2, [pc, #208]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 80017a8:	f023 0303 	bic.w	r3, r3, #3
 80017ac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017ae:	4b32      	ldr	r3, [pc, #200]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	4a31      	ldr	r2, [pc, #196]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 80017b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80017b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017be:	f7ff f933 	bl	8000a28 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c6:	f7ff f92f 	bl	8000a28 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e04a      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f0      	bne.n	80017c6 <HAL_RCC_OscConfig+0x6a6>
 80017e4:	e042      	b.n	800186c <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e03d      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <HAL_RCC_OscConfig+0x758>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f003 0203 	and.w	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	429a      	cmp	r2, r3
 8001804:	d130      	bne.n	8001868 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	3b01      	subs	r3, #1
 8001812:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d127      	bne.n	8001868 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001822:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d11f      	bne.n	8001868 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001832:	2a07      	cmp	r2, #7
 8001834:	bf14      	ite	ne
 8001836:	2201      	movne	r2, #1
 8001838:	2200      	moveq	r2, #0
 800183a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800183c:	4293      	cmp	r3, r2
 800183e:	d113      	bne.n	8001868 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184a:	085b      	lsrs	r3, r3, #1
 800184c:	3b01      	subs	r3, #1
 800184e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001850:	429a      	cmp	r2, r3
 8001852:	d109      	bne.n	8001868 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	085b      	lsrs	r3, r3, #1
 8001860:	3b01      	subs	r3, #1
 8001862:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3720      	adds	r7, #32
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	f99d808c 	.word	0xf99d808c

08001880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0c8      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001894:	4b66      	ldr	r3, [pc, #408]	; (8001a30 <HAL_RCC_ClockConfig+0x1b0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d910      	bls.n	80018c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <HAL_RCC_ClockConfig+0x1b0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 0207 	bic.w	r2, r3, #7
 80018aa:	4961      	ldr	r1, [pc, #388]	; (8001a30 <HAL_RCC_ClockConfig+0x1b0>)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <HAL_RCC_ClockConfig+0x1b0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0b0      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d04c      	beq.n	800196a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d107      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d8:	4b56      	ldr	r3, [pc, #344]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d121      	bne.n	8001928 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e09e      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d107      	bne.n	8001900 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f0:	4b50      	ldr	r3, [pc, #320]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d115      	bne.n	8001928 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e092      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d107      	bne.n	8001918 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001908:	4b4a      	ldr	r3, [pc, #296]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e086      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001918:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e07e      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001928:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f023 0203 	bic.w	r2, r3, #3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	493f      	ldr	r1, [pc, #252]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800193a:	f7ff f875 	bl	8000a28 <HAL_GetTick>
 800193e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001940:	e00a      	b.n	8001958 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001942:	f7ff f871 	bl	8000a28 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e066      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001958:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 020c 	and.w	r2, r3, #12
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	429a      	cmp	r2, r3
 8001968:	d1eb      	bne.n	8001942 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d008      	beq.n	8001988 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001976:	4b2f      	ldr	r3, [pc, #188]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	492c      	ldr	r1, [pc, #176]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001988:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <HAL_RCC_ClockConfig+0x1b0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d210      	bcs.n	80019b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <HAL_RCC_ClockConfig+0x1b0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 0207 	bic.w	r2, r3, #7
 800199e:	4924      	ldr	r1, [pc, #144]	; (8001a30 <HAL_RCC_ClockConfig+0x1b0>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <HAL_RCC_ClockConfig+0x1b0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e036      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4918      	ldr	r1, [pc, #96]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4910      	ldr	r1, [pc, #64]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019f6:	f000 f825 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 80019fa:	4601      	mov	r1, r0
 80019fc:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	4a0c      	ldr	r2, [pc, #48]	; (8001a38 <HAL_RCC_ClockConfig+0x1b8>)
 8001a08:	5cd3      	ldrb	r3, [r2, r3]
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe ffb8 	bl	8000990 <HAL_InitTick>
 8001a20:	4603      	mov	r3, r0
 8001a22:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a24:	7afb      	ldrb	r3, [r7, #11]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40022000 	.word	0x40022000
 8001a34:	40021000 	.word	0x40021000
 8001a38:	08006294 	.word	0x08006294
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	20000000 	.word	0x20000000

08001a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a52:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0x34>
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	2b0c      	cmp	r3, #12
 8001a70:	d121      	bne.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d11e      	bne.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a78:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a84:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8a:	0a1b      	lsrs	r3, r3, #8
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e005      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a94:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001aa0:	4a2a      	ldr	r2, [pc, #168]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10d      	bne.n	8001acc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ab4:	e00a      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d102      	bne.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001abc:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001abe:	61bb      	str	r3, [r7, #24]
 8001ac0:	e004      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ac8:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001aca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2b0c      	cmp	r3, #12
 8001ad0:	d133      	bne.n	8001b3a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d002      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0xa4>
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d003      	beq.n	8001aee <HAL_RCC_GetSysClockFreq+0xaa>
 8001ae6:	e005      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001aea:	617b      	str	r3, [r7, #20]
      break;
 8001aec:	e005      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001aee:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001af0:	617b      	str	r3, [r7, #20]
      break;
 8001af2:	e002      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	617b      	str	r3, [r7, #20]
      break;
 8001af8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	3301      	adds	r3, #1
 8001b06:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	fb02 f203 	mul.w	r2, r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0e5b      	lsrs	r3, r3, #25
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b3a:	69bb      	ldr	r3, [r7, #24]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3724      	adds	r7, #36	; 0x24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	080062ac 	.word	0x080062ac
 8001b50:	00f42400 	.word	0x00f42400
 8001b54:	007a1200 	.word	0x007a1200

08001b58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008

08001b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b74:	f7ff fff0 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001b78:	4601      	mov	r1, r0
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b86:	5cd3      	ldrb	r3, [r2, r3]
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	080062a4 	.word	0x080062a4

08001b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ba0:	f7ff ffda 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001ba4:	4601      	mov	r1, r0
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	0adb      	lsrs	r3, r3, #11
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bb2:	5cd3      	ldrb	r3, [r2, r3]
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	080062a4 	.word	0x080062a4

08001bc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001be0:	f7ff fa3a 	bl	8001058 <HAL_PWREx_GetVoltageRange>
 8001be4:	6178      	str	r0, [r7, #20]
 8001be6:	e014      	b.n	8001c12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001be8:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bec:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c00:	f7ff fa2a 	bl	8001058 <HAL_PWREx_GetVoltageRange>
 8001c04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4a1d      	ldr	r2, [pc, #116]	; (8001c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c18:	d10b      	bne.n	8001c32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b80      	cmp	r3, #128	; 0x80
 8001c1e:	d919      	bls.n	8001c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2ba0      	cmp	r3, #160	; 0xa0
 8001c24:	d902      	bls.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c26:	2302      	movs	r3, #2
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	e013      	b.n	8001c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	e010      	b.n	8001c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b80      	cmp	r3, #128	; 0x80
 8001c36:	d902      	bls.n	8001c3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c38:	2303      	movs	r3, #3
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	e00a      	b.n	8001c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b80      	cmp	r3, #128	; 0x80
 8001c42:	d102      	bne.n	8001c4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c44:	2302      	movs	r3, #2
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	e004      	b.n	8001c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b70      	cmp	r3, #112	; 0x70
 8001c4e:	d101      	bne.n	8001c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c50:	2301      	movs	r3, #1
 8001c52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 0207 	bic.w	r2, r3, #7
 8001c5c:	4909      	ldr	r1, [pc, #36]	; (8001c84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c64:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d001      	beq.n	8001c76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40022000 	.word	0x40022000

08001c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c90:	2300      	movs	r3, #0
 8001c92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c94:	2300      	movs	r3, #0
 8001c96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d03f      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cac:	d01c      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cb2:	d802      	bhi.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00e      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001cb8:	e01f      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001cba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001cbe:	d003      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001cc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001cc4:	d01c      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001cc6:	e018      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cc8:	4b85      	ldr	r3, [pc, #532]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4a84      	ldr	r2, [pc, #528]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cd4:	e015      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fab9 	bl	8002254 <RCCEx_PLLSAI1_Config>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ce6:	e00c      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3320      	adds	r3, #32
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 fba0 	bl	8002434 <RCCEx_PLLSAI2_Config>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cf8:	e003      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	74fb      	strb	r3, [r7, #19]
      break;
 8001cfe:	e000      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d02:	7cfb      	ldrb	r3, [r7, #19]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10b      	bne.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d08:	4b75      	ldr	r3, [pc, #468]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d16:	4972      	ldr	r1, [pc, #456]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d1e:	e001      	b.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d20:	7cfb      	ldrb	r3, [r7, #19]
 8001d22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d03f      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d38:	d01c      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001d3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d3e:	d802      	bhi.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00e      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001d44:	e01f      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001d46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d4a:	d003      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001d4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d50:	d01c      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001d52:	e018      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d54:	4b62      	ldr	r3, [pc, #392]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4a61      	ldr	r2, [pc, #388]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d60:	e015      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fa73 	bl	8002254 <RCCEx_PLLSAI1_Config>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d72:	e00c      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3320      	adds	r3, #32
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fb5a 	bl	8002434 <RCCEx_PLLSAI2_Config>
 8001d80:	4603      	mov	r3, r0
 8001d82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d84:	e003      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	74fb      	strb	r3, [r7, #19]
      break;
 8001d8a:	e000      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d8e:	7cfb      	ldrb	r3, [r7, #19]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10b      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d94:	4b52      	ldr	r3, [pc, #328]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001da2:	494f      	ldr	r1, [pc, #316]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001daa:	e001      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dac:	7cfb      	ldrb	r3, [r7, #19]
 8001dae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80a0 	beq.w	8001efe <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dc2:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00d      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd8:	4b41      	ldr	r3, [pc, #260]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	4a40      	ldr	r2, [pc, #256]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de2:	6593      	str	r3, [r2, #88]	; 0x58
 8001de4:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df0:	2301      	movs	r3, #1
 8001df2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001df4:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a3a      	ldr	r2, [pc, #232]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e00:	f7fe fe12 	bl	8000a28 <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e06:	e009      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e08:	f7fe fe0e 	bl	8000a28 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d902      	bls.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	74fb      	strb	r3, [r7, #19]
        break;
 8001e1a:	e005      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e1c:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0ef      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001e28:	7cfb      	ldrb	r3, [r7, #19]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d15c      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d01f      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d019      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5e:	4a20      	ldr	r2, [pc, #128]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e68:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e78:	4a19      	ldr	r2, [pc, #100]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d016      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7fe fdcd 	bl	8000a28 <HAL_GetTick>
 8001e8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e90:	e00b      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f7fe fdc9 	bl	8000a28 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d902      	bls.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	74fb      	strb	r3, [r7, #19]
            break;
 8001ea8:	e006      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ec      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ece:	4904      	ldr	r1, [pc, #16]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ed6:	e009      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ed8:	7cfb      	ldrb	r3, [r7, #19]
 8001eda:	74bb      	strb	r3, [r7, #18]
 8001edc:	e006      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eec:	7c7b      	ldrb	r3, [r7, #17]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d105      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef2:	4b9e      	ldr	r3, [pc, #632]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	4a9d      	ldr	r2, [pc, #628]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00a      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f0a:	4b98      	ldr	r3, [pc, #608]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f10:	f023 0203 	bic.w	r2, r3, #3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f18:	4994      	ldr	r1, [pc, #592]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f2c:	4b8f      	ldr	r3, [pc, #572]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f32:	f023 020c 	bic.w	r2, r3, #12
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3a:	498c      	ldr	r1, [pc, #560]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f4e:	4b87      	ldr	r3, [pc, #540]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	4983      	ldr	r1, [pc, #524]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f70:	4b7e      	ldr	r3, [pc, #504]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	497b      	ldr	r1, [pc, #492]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f92:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fa0:	4972      	ldr	r1, [pc, #456]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fb4:	4b6d      	ldr	r3, [pc, #436]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	496a      	ldr	r1, [pc, #424]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fd6:	4b65      	ldr	r3, [pc, #404]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	4961      	ldr	r1, [pc, #388]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ff8:	4b5c      	ldr	r3, [pc, #368]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002006:	4959      	ldr	r1, [pc, #356]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800201a:	4b54      	ldr	r3, [pc, #336]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800201c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002020:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002028:	4950      	ldr	r1, [pc, #320]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800203c:	4b4b      	ldr	r3, [pc, #300]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	4948      	ldr	r1, [pc, #288]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800205e:	4b43      	ldr	r3, [pc, #268]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002064:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	493f      	ldr	r1, [pc, #252]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d028      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002080:	4b3a      	ldr	r3, [pc, #232]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800208e:	4937      	ldr	r1, [pc, #220]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800209a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800209e:	d106      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a0:	4b32      	ldr	r3, [pc, #200]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4a31      	ldr	r2, [pc, #196]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020aa:	60d3      	str	r3, [r2, #12]
 80020ac:	e011      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3304      	adds	r3, #4
 80020bc:	2101      	movs	r1, #1
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f8c8 	bl	8002254 <RCCEx_PLLSAI1_Config>
 80020c4:	4603      	mov	r3, r0
 80020c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80020ce:	7cfb      	ldrb	r3, [r7, #19]
 80020d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d028      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020de:	4b23      	ldr	r3, [pc, #140]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ec:	491f      	ldr	r1, [pc, #124]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020fc:	d106      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4a1a      	ldr	r2, [pc, #104]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002108:	60d3      	str	r3, [r2, #12]
 800210a:	e011      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002114:	d10c      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	2101      	movs	r1, #1
 800211c:	4618      	mov	r0, r3
 800211e:	f000 f899 	bl	8002254 <RCCEx_PLLSAI1_Config>
 8002122:	4603      	mov	r3, r0
 8002124:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d02b      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214a:	4908      	ldr	r1, [pc, #32]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800215a:	d109      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a02      	ldr	r2, [pc, #8]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002166:	60d3      	str	r3, [r2, #12]
 8002168:	e014      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002178:	d10c      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3304      	adds	r3, #4
 800217e:	2101      	movs	r1, #1
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f867 	bl	8002254 <RCCEx_PLLSAI1_Config>
 8002186:	4603      	mov	r3, r0
 8002188:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800218a:	7cfb      	ldrb	r3, [r7, #19]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d02f      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021a0:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021ae:	4928      	ldr	r1, [pc, #160]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021be:	d10d      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3304      	adds	r3, #4
 80021c4:	2102      	movs	r1, #2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f844 	bl	8002254 <RCCEx_PLLSAI1_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d014      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	74bb      	strb	r3, [r7, #18]
 80021da:	e011      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021e4:	d10c      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3320      	adds	r3, #32
 80021ea:	2102      	movs	r1, #2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f921 	bl	8002434 <RCCEx_PLLSAI2_Config>
 80021f2:	4603      	mov	r3, r0
 80021f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800221a:	490d      	ldr	r1, [pc, #52]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800223e:	4904      	ldr	r1, [pc, #16]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002246:	7cbb      	ldrb	r3, [r7, #18]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000

08002254 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002262:	4b73      	ldr	r3, [pc, #460]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d018      	beq.n	80022a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800226e:	4b70      	ldr	r3, [pc, #448]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0203 	and.w	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d10d      	bne.n	800229a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
       ||
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002286:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
       ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d044      	beq.n	8002324 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	e041      	b.n	8002324 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d00c      	beq.n	80022c2 <RCCEx_PLLSAI1_Config+0x6e>
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d013      	beq.n	80022d4 <RCCEx_PLLSAI1_Config+0x80>
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d120      	bne.n	80022f2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022b0:	4b5f      	ldr	r3, [pc, #380]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d11d      	bne.n	80022f8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c0:	e01a      	b.n	80022f8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022c2:	4b5b      	ldr	r3, [pc, #364]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d116      	bne.n	80022fc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d2:	e013      	b.n	80022fc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022d4:	4b56      	ldr	r3, [pc, #344]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10f      	bne.n	8002300 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022e0:	4b53      	ldr	r3, [pc, #332]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d109      	bne.n	8002300 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022f0:	e006      	b.n	8002300 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
      break;
 80022f6:	e004      	b.n	8002302 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80022f8:	bf00      	nop
 80022fa:	e002      	b.n	8002302 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80022fc:	bf00      	nop
 80022fe:	e000      	b.n	8002302 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002300:	bf00      	nop
    }

    if(status == HAL_OK)
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10d      	bne.n	8002324 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002308:	4b49      	ldr	r3, [pc, #292]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	3b01      	subs	r3, #1
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	430b      	orrs	r3, r1
 800231e:	4944      	ldr	r1, [pc, #272]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002320:	4313      	orrs	r3, r2
 8002322:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d17d      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800232a:	4b41      	ldr	r3, [pc, #260]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a40      	ldr	r2, [pc, #256]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002330:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002336:	f7fe fb77 	bl	8000a28 <HAL_GetTick>
 800233a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800233c:	e009      	b.n	8002352 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800233e:	f7fe fb73 	bl	8000a28 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d902      	bls.n	8002352 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	73fb      	strb	r3, [r7, #15]
        break;
 8002350:	e005      	b.n	800235e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002352:	4b37      	ldr	r3, [pc, #220]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1ef      	bne.n	800233e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d160      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d111      	bne.n	800238e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800236a:	4b31      	ldr	r3, [pc, #196]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6892      	ldr	r2, [r2, #8]
 800237a:	0211      	lsls	r1, r2, #8
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68d2      	ldr	r2, [r2, #12]
 8002380:	0912      	lsrs	r2, r2, #4
 8002382:	0452      	lsls	r2, r2, #17
 8002384:	430a      	orrs	r2, r1
 8002386:	492a      	ldr	r1, [pc, #168]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002388:	4313      	orrs	r3, r2
 800238a:	610b      	str	r3, [r1, #16]
 800238c:	e027      	b.n	80023de <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d112      	bne.n	80023ba <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002394:	4b26      	ldr	r3, [pc, #152]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800239c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6892      	ldr	r2, [r2, #8]
 80023a4:	0211      	lsls	r1, r2, #8
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6912      	ldr	r2, [r2, #16]
 80023aa:	0852      	lsrs	r2, r2, #1
 80023ac:	3a01      	subs	r2, #1
 80023ae:	0552      	lsls	r2, r2, #21
 80023b0:	430a      	orrs	r2, r1
 80023b2:	491f      	ldr	r1, [pc, #124]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	610b      	str	r3, [r1, #16]
 80023b8:	e011      	b.n	80023de <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6892      	ldr	r2, [r2, #8]
 80023ca:	0211      	lsls	r1, r2, #8
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6952      	ldr	r2, [r2, #20]
 80023d0:	0852      	lsrs	r2, r2, #1
 80023d2:	3a01      	subs	r2, #1
 80023d4:	0652      	lsls	r2, r2, #25
 80023d6:	430a      	orrs	r2, r1
 80023d8:	4915      	ldr	r1, [pc, #84]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023de:	4b14      	ldr	r3, [pc, #80]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ea:	f7fe fb1d 	bl	8000a28 <HAL_GetTick>
 80023ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023f0:	e009      	b.n	8002406 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023f2:	f7fe fb19 	bl	8000a28 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d902      	bls.n	8002406 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	73fb      	strb	r3, [r7, #15]
          break;
 8002404:	e005      	b.n	8002412 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0ef      	beq.n	80023f2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d106      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	4903      	ldr	r1, [pc, #12]	; (8002430 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002422:	4313      	orrs	r3, r2
 8002424:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002426:	7bfb      	ldrb	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000

08002434 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002442:	4b68      	ldr	r3, [pc, #416]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d018      	beq.n	8002480 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 0203 	and.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d10d      	bne.n	800247a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
       ||
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	091b      	lsrs	r3, r3, #4
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
       ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d044      	beq.n	8002504 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
 800247e:	e041      	b.n	8002504 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d00c      	beq.n	80024a2 <RCCEx_PLLSAI2_Config+0x6e>
 8002488:	2b03      	cmp	r3, #3
 800248a:	d013      	beq.n	80024b4 <RCCEx_PLLSAI2_Config+0x80>
 800248c:	2b01      	cmp	r3, #1
 800248e:	d120      	bne.n	80024d2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002490:	4b54      	ldr	r3, [pc, #336]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d11d      	bne.n	80024d8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a0:	e01a      	b.n	80024d8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024a2:	4b50      	ldr	r3, [pc, #320]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d116      	bne.n	80024dc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b2:	e013      	b.n	80024dc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024b4:	4b4b      	ldr	r3, [pc, #300]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10f      	bne.n	80024e0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024c0:	4b48      	ldr	r3, [pc, #288]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d109      	bne.n	80024e0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024d0:	e006      	b.n	80024e0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
      break;
 80024d6:	e004      	b.n	80024e2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80024d8:	bf00      	nop
 80024da:	e002      	b.n	80024e2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80024dc:	bf00      	nop
 80024de:	e000      	b.n	80024e2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80024e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10d      	bne.n	8002504 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024e8:	4b3e      	ldr	r3, [pc, #248]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	430b      	orrs	r3, r1
 80024fe:	4939      	ldr	r1, [pc, #228]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002500:	4313      	orrs	r3, r2
 8002502:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d167      	bne.n	80025da <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a35      	ldr	r2, [pc, #212]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002516:	f7fe fa87 	bl	8000a28 <HAL_GetTick>
 800251a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800251c:	e009      	b.n	8002532 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800251e:	f7fe fa83 	bl	8000a28 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d902      	bls.n	8002532 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	73fb      	strb	r3, [r7, #15]
        break;
 8002530:	e005      	b.n	800253e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002532:	4b2c      	ldr	r3, [pc, #176]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1ef      	bne.n	800251e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d14a      	bne.n	80025da <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d111      	bne.n	800256e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6892      	ldr	r2, [r2, #8]
 800255a:	0211      	lsls	r1, r2, #8
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68d2      	ldr	r2, [r2, #12]
 8002560:	0912      	lsrs	r2, r2, #4
 8002562:	0452      	lsls	r2, r2, #17
 8002564:	430a      	orrs	r2, r1
 8002566:	491f      	ldr	r1, [pc, #124]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002568:	4313      	orrs	r3, r2
 800256a:	614b      	str	r3, [r1, #20]
 800256c:	e011      	b.n	8002592 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002576:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6892      	ldr	r2, [r2, #8]
 800257e:	0211      	lsls	r1, r2, #8
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6912      	ldr	r2, [r2, #16]
 8002584:	0852      	lsrs	r2, r2, #1
 8002586:	3a01      	subs	r2, #1
 8002588:	0652      	lsls	r2, r2, #25
 800258a:	430a      	orrs	r2, r1
 800258c:	4915      	ldr	r1, [pc, #84]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800258e:	4313      	orrs	r3, r2
 8002590:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a13      	ldr	r2, [pc, #76]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259e:	f7fe fa43 	bl	8000a28 <HAL_GetTick>
 80025a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025a4:	e009      	b.n	80025ba <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025a6:	f7fe fa3f 	bl	8000a28 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d902      	bls.n	80025ba <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	73fb      	strb	r3, [r7, #15]
          break;
 80025b8:	e005      	b.n	80025c6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0ef      	beq.n	80025a6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d106      	bne.n	80025da <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	4903      	ldr	r1, [pc, #12]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000

080025e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e07c      	b.n	80026f4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d106      	bne.n	800261a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f002 ff71 	bl	80054fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002630:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800263a:	d902      	bls.n	8002642 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	e002      	b.n	8002648 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002646:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002650:	d007      	beq.n	8002662 <HAL_SPI_Init+0x7a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800265a:	d002      	beq.n	8002662 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10b      	bne.n	8002682 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002672:	d903      	bls.n	800267c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	631a      	str	r2, [r3, #48]	; 0x30
 800267a:	e002      	b.n	8002682 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	ea42 0103 	orr.w	r1, r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	f003 0204 	and.w	r2, r3, #4
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	ea42 0103 	orr.w	r1, r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_SPI_Transmit+0x22>
 800271a:	2302      	movs	r3, #2
 800271c:	e150      	b.n	80029c0 <HAL_SPI_Transmit+0x2c4>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002726:	f7fe f97f 	bl	8000a28 <HAL_GetTick>
 800272a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b01      	cmp	r3, #1
 800273a:	d002      	beq.n	8002742 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800273c:	2302      	movs	r3, #2
 800273e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002740:	e135      	b.n	80029ae <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <HAL_SPI_Transmit+0x52>
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d102      	bne.n	8002754 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002752:	e12c      	b.n	80029ae <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2203      	movs	r2, #3
 8002758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	88fa      	ldrh	r2, [r7, #6]
 800276c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	88fa      	ldrh	r2, [r7, #6]
 8002772:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800279e:	d107      	bne.n	80027b0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ba:	2b40      	cmp	r3, #64	; 0x40
 80027bc:	d007      	beq.n	80027ce <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027d6:	d94b      	bls.n	8002870 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_SPI_Transmit+0xea>
 80027e0:	8afb      	ldrh	r3, [r7, #22]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d13e      	bne.n	8002864 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	881a      	ldrh	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	1c9a      	adds	r2, r3, #2
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800280a:	e02b      	b.n	8002864 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b02      	cmp	r3, #2
 8002818:	d112      	bne.n	8002840 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281e:	881a      	ldrh	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	1c9a      	adds	r2, r3, #2
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800283e:	e011      	b.n	8002864 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002840:	f7fe f8f2 	bl	8000a28 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d803      	bhi.n	8002858 <HAL_SPI_Transmit+0x15c>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002856:	d102      	bne.n	800285e <HAL_SPI_Transmit+0x162>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002862:	e0a4      	b.n	80029ae <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1ce      	bne.n	800280c <HAL_SPI_Transmit+0x110>
 800286e:	e07c      	b.n	800296a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <HAL_SPI_Transmit+0x182>
 8002878:	8afb      	ldrh	r3, [r7, #22]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d170      	bne.n	8002960 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d912      	bls.n	80028ae <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288c:	881a      	ldrh	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	1c9a      	adds	r2, r3, #2
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b02      	subs	r3, #2
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028ac:	e058      	b.n	8002960 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	330c      	adds	r3, #12
 80028b8:	7812      	ldrb	r2, [r2, #0]
 80028ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80028d4:	e044      	b.n	8002960 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d12b      	bne.n	800293c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d912      	bls.n	8002914 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	881a      	ldrh	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	1c9a      	adds	r2, r3, #2
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b02      	subs	r3, #2
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002912:	e025      	b.n	8002960 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	330c      	adds	r3, #12
 800291e:	7812      	ldrb	r2, [r2, #0]
 8002920:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	87da      	strh	r2, [r3, #62]	; 0x3e
 800293a:	e011      	b.n	8002960 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800293c:	f7fe f874 	bl	8000a28 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d803      	bhi.n	8002954 <HAL_SPI_Transmit+0x258>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002952:	d102      	bne.n	800295a <HAL_SPI_Transmit+0x25e>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d102      	bne.n	8002960 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800295e:	e026      	b.n	80029ae <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1b5      	bne.n	80028d6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	6839      	ldr	r1, [r7, #0]
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fc94 	bl	800329c <SPI_EndRxTxTransaction>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	77fb      	strb	r3, [r7, #31]
 80029aa:	e000      	b.n	80029ae <HAL_SPI_Transmit+0x2b2>
  }

error:
 80029ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80029be:	7ffb      	ldrb	r3, [r7, #31]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029e4:	d112      	bne.n	8002a0c <HAL_SPI_Receive+0x44>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10e      	bne.n	8002a0c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2204      	movs	r2, #4
 80029f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80029f6:	88fa      	ldrh	r2, [r7, #6]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f908 	bl	8002c18 <HAL_SPI_TransmitReceive>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	e101      	b.n	8002c10 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_SPI_Receive+0x52>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e0fa      	b.n	8002c10 <HAL_SPI_Receive+0x248>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a22:	f7fe f801 	bl	8000a28 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d002      	beq.n	8002a3a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
 8002a36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a38:	e0e1      	b.n	8002bfe <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_SPI_Receive+0x7e>
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a4a:	e0d8      	b.n	8002bfe <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2204      	movs	r2, #4
 8002a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	88fa      	ldrh	r2, [r7, #6]
 8002a64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	88fa      	ldrh	r2, [r7, #6]
 8002a6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a96:	d908      	bls.n	8002aaa <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002aa6:	605a      	str	r2, [r3, #4]
 8002aa8:	e007      	b.n	8002aba <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ab8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac2:	d107      	bne.n	8002ad4 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ad2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d007      	beq.n	8002af2 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002af0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002afa:	d867      	bhi.n	8002bcc <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002afc:	e030      	b.n	8002b60 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d117      	bne.n	8002b3c <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f103 020c 	add.w	r2, r3, #12
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	7812      	ldrb	r2, [r2, #0]
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002b3a:	e011      	b.n	8002b60 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b3c:	f7fd ff74 	bl	8000a28 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d803      	bhi.n	8002b54 <HAL_SPI_Receive+0x18c>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b52:	d102      	bne.n	8002b5a <HAL_SPI_Receive+0x192>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b5e:	e04e      	b.n	8002bfe <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1c8      	bne.n	8002afe <HAL_SPI_Receive+0x136>
 8002b6c:	e034      	b.n	8002bd8 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d115      	bne.n	8002ba8 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	b292      	uxth	r2, r2
 8002b88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	1c9a      	adds	r2, r3, #2
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002ba6:	e011      	b.n	8002bcc <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ba8:	f7fd ff3e 	bl	8000a28 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d803      	bhi.n	8002bc0 <HAL_SPI_Receive+0x1f8>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbe:	d102      	bne.n	8002bc6 <HAL_SPI_Receive+0x1fe>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002bca:	e018      	b.n	8002bfe <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1ca      	bne.n	8002b6e <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	6839      	ldr	r1, [r7, #0]
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fb05 	bl	80031ec <SPI_EndRxTransaction>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	75fb      	strb	r3, [r7, #23]
 8002bfa:	e000      	b.n	8002bfe <HAL_SPI_Receive+0x236>
  }

error :
 8002bfc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c26:	2301      	movs	r3, #1
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_SPI_TransmitReceive+0x26>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e1fb      	b.n	8003036 <HAL_SPI_TransmitReceive+0x41e>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c46:	f7fd feef 	bl	8000a28 <HAL_GetTick>
 8002c4a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c52:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002c5a:	887b      	ldrh	r3, [r7, #2]
 8002c5c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c62:	7efb      	ldrb	r3, [r7, #27]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d00e      	beq.n	8002c86 <HAL_SPI_TransmitReceive+0x6e>
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c6e:	d106      	bne.n	8002c7e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <HAL_SPI_TransmitReceive+0x66>
 8002c78:	7efb      	ldrb	r3, [r7, #27]
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d003      	beq.n	8002c86 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c84:	e1cd      	b.n	8003022 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0x80>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0x80>
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d103      	bne.n	8002ca0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c9e:	e1c0      	b.n	8003022 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d003      	beq.n	8002cb4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2205      	movs	r2, #5
 8002cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	887a      	ldrh	r2, [r7, #2]
 8002cc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	887a      	ldrh	r2, [r7, #2]
 8002ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	887a      	ldrh	r2, [r7, #2]
 8002cda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	887a      	ldrh	r2, [r7, #2]
 8002ce0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cf6:	d802      	bhi.n	8002cfe <HAL_SPI_TransmitReceive+0xe6>
 8002cf8:	8a3b      	ldrh	r3, [r7, #16]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d908      	bls.n	8002d10 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	e007      	b.n	8002d20 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d1e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d007      	beq.n	8002d3e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d46:	d97c      	bls.n	8002e42 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_SPI_TransmitReceive+0x13e>
 8002d50:	8a7b      	ldrh	r3, [r7, #18]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d169      	bne.n	8002e2a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	881a      	ldrh	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	1c9a      	adds	r2, r3, #2
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d7a:	e056      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d11b      	bne.n	8002dc2 <HAL_SPI_TransmitReceive+0x1aa>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d016      	beq.n	8002dc2 <HAL_SPI_TransmitReceive+0x1aa>
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d113      	bne.n	8002dc2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	881a      	ldrh	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	1c9a      	adds	r2, r3, #2
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d11c      	bne.n	8002e0a <HAL_SPI_TransmitReceive+0x1f2>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d016      	beq.n	8002e0a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	b292      	uxth	r2, r2
 8002de8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	1c9a      	adds	r2, r3, #2
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e06:	2301      	movs	r3, #1
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e0a:	f7fd fe0d 	bl	8000a28 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d807      	bhi.n	8002e2a <HAL_SPI_TransmitReceive+0x212>
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d003      	beq.n	8002e2a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002e28:	e0fb      	b.n	8003022 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1a3      	bne.n	8002d7c <HAL_SPI_TransmitReceive+0x164>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d19d      	bne.n	8002d7c <HAL_SPI_TransmitReceive+0x164>
 8002e40:	e0df      	b.n	8003002 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_SPI_TransmitReceive+0x23a>
 8002e4a:	8a7b      	ldrh	r3, [r7, #18]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	f040 80cb 	bne.w	8002fe8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d912      	bls.n	8002e82 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	881a      	ldrh	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	1c9a      	adds	r2, r3, #2
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b02      	subs	r3, #2
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e80:	e0b2      	b.n	8002fe8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	7812      	ldrb	r2, [r2, #0]
 8002e8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ea8:	e09e      	b.n	8002fe8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d134      	bne.n	8002f22 <HAL_SPI_TransmitReceive+0x30a>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d02f      	beq.n	8002f22 <HAL_SPI_TransmitReceive+0x30a>
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d12c      	bne.n	8002f22 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d912      	bls.n	8002ef8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	881a      	ldrh	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	1c9a      	adds	r2, r3, #2
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b02      	subs	r3, #2
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ef6:	e012      	b.n	8002f1e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	330c      	adds	r3, #12
 8002f02:	7812      	ldrb	r2, [r2, #0]
 8002f04:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d148      	bne.n	8002fc2 <HAL_SPI_TransmitReceive+0x3aa>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d042      	beq.n	8002fc2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d923      	bls.n	8002f90 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	b292      	uxth	r2, r2
 8002f54:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	1c9a      	adds	r2, r3, #2
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b02      	subs	r3, #2
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d81f      	bhi.n	8002fbe <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	e016      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f103 020c 	add.w	r2, r3, #12
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	7812      	ldrb	r2, [r2, #0]
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002fc2:	f7fd fd31 	bl	8000a28 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d803      	bhi.n	8002fda <HAL_SPI_TransmitReceive+0x3c2>
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d102      	bne.n	8002fe0 <HAL_SPI_TransmitReceive+0x3c8>
 8002fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d103      	bne.n	8002fe8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002fe6:	e01c      	b.n	8003022 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f47f af5b 	bne.w	8002eaa <HAL_SPI_TransmitReceive+0x292>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f47f af54 	bne.w	8002eaa <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f948 	bl	800329c <SPI_EndRxTxTransaction>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d006      	beq.n	8003020 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	661a      	str	r2, [r3, #96]	; 0x60
 800301e:	e000      	b.n	8003022 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003020:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003032:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003036:	4618      	mov	r0, r3
 8003038:	3728      	adds	r7, #40	; 0x28
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	4613      	mov	r3, r2
 800304c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800304e:	e04c      	b.n	80030ea <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d048      	beq.n	80030ea <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003058:	f7fd fce6 	bl	8000a28 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d902      	bls.n	800306e <SPI_WaitFlagStateUntilTimeout+0x30>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d13d      	bne.n	80030ea <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800307c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003086:	d111      	bne.n	80030ac <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003090:	d004      	beq.n	800309c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309a:	d107      	bne.n	80030ac <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b4:	d10f      	bne.n	80030d6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e00f      	b.n	800310a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4013      	ands	r3, r2
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	bf0c      	ite	eq
 80030fa:	2301      	moveq	r3, #1
 80030fc:	2300      	movne	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	429a      	cmp	r2, r3
 8003106:	d1a3      	bne.n	8003050 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003120:	e057      	b.n	80031d2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003128:	d106      	bne.n	8003138 <SPI_WaitFifoStateUntilTimeout+0x26>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d103      	bne.n	8003138 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	330c      	adds	r3, #12
 8003136:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d048      	beq.n	80031d2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003140:	f7fd fc72 	bl	8000a28 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d902      	bls.n	8003156 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d13d      	bne.n	80031d2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003164:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800316e:	d111      	bne.n	8003194 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003178:	d004      	beq.n	8003184 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003182:	d107      	bne.n	8003194 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003192:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319c:	d10f      	bne.n	80031be <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e008      	b.n	80031e4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4013      	ands	r3, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d19f      	bne.n	8003122 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003200:	d111      	bne.n	8003226 <SPI_EndRxTransaction+0x3a>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800320a:	d004      	beq.n	8003216 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003214:	d107      	bne.n	8003226 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003224:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2200      	movs	r2, #0
 800322e:	2180      	movs	r1, #128	; 0x80
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f7ff ff04 	bl	800303e <SPI_WaitFlagStateUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e023      	b.n	8003294 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003254:	d11d      	bne.n	8003292 <SPI_EndRxTransaction+0xa6>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800325e:	d004      	beq.n	800326a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003268:	d113      	bne.n	8003292 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2200      	movs	r2, #0
 8003272:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f7ff ff4b 	bl	8003112 <SPI_WaitFifoStateUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d007      	beq.n	8003292 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003286:	f043 0220 	orr.w	r2, r3, #32
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e000      	b.n	8003294 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7ff ff2c 	bl	8003112 <SPI_WaitFifoStateUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c4:	f043 0220 	orr.w	r2, r3, #32
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e027      	b.n	8003320 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2200      	movs	r2, #0
 80032d8:	2180      	movs	r1, #128	; 0x80
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f7ff feaf 	bl	800303e <SPI_WaitFlagStateUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d007      	beq.n	80032f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ea:	f043 0220 	orr.w	r2, r3, #32
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e014      	b.n	8003320 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f7ff ff05 	bl	8003112 <SPI_WaitFifoStateUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003312:	f043 0220 	orr.w	r2, r3, #32
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e000      	b.n	8003320 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e01d      	b.n	8003376 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f002 f936 	bl	80055c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3304      	adds	r3, #4
 8003364:	4619      	mov	r1, r3
 8003366:	4610      	mov	r0, r2
 8003368:	f000 f8c2 	bl	80034f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_TIM_ConfigClockSource+0x18>
 8003392:	2302      	movs	r3, #2
 8003394:	e0a8      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x16a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d067      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0x124>
 80033d2:	2b40      	cmp	r3, #64	; 0x40
 80033d4:	d80b      	bhi.n	80033ee <HAL_TIM_ConfigClockSource+0x70>
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d073      	beq.n	80034c2 <HAL_TIM_ConfigClockSource+0x144>
 80033da:	2b10      	cmp	r3, #16
 80033dc:	d802      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x66>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d06f      	beq.n	80034c2 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80033e2:	e078      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d06c      	beq.n	80034c2 <HAL_TIM_ConfigClockSource+0x144>
 80033e8:	2b30      	cmp	r3, #48	; 0x30
 80033ea:	d06a      	beq.n	80034c2 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80033ec:	e073      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80033ee:	2b70      	cmp	r3, #112	; 0x70
 80033f0:	d00d      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x90>
 80033f2:	2b70      	cmp	r3, #112	; 0x70
 80033f4:	d804      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x82>
 80033f6:	2b50      	cmp	r3, #80	; 0x50
 80033f8:	d033      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0xe4>
 80033fa:	2b60      	cmp	r3, #96	; 0x60
 80033fc:	d041      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80033fe:	e06a      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003404:	d066      	beq.n	80034d4 <HAL_TIM_ConfigClockSource+0x156>
 8003406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340a:	d017      	beq.n	800343c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800340c:	e063      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6899      	ldr	r1, [r3, #8]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f000 f97b 	bl	8003718 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003430:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	609a      	str	r2, [r3, #8]
      break;
 800343a:	e04c      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	6899      	ldr	r1, [r3, #8]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f000 f964 	bl	8003718 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800345e:	609a      	str	r2, [r3, #8]
      break;
 8003460:	e039      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6859      	ldr	r1, [r3, #4]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	461a      	mov	r2, r3
 8003470:	f000 f8d8 	bl	8003624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2150      	movs	r1, #80	; 0x50
 800347a:	4618      	mov	r0, r3
 800347c:	f000 f931 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8003480:	e029      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6859      	ldr	r1, [r3, #4]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	461a      	mov	r2, r3
 8003490:	f000 f8f7 	bl	8003682 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2160      	movs	r1, #96	; 0x60
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f921 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 80034a0:	e019      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6859      	ldr	r1, [r3, #4]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f000 f8b8 	bl	8003624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2140      	movs	r1, #64	; 0x40
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f911 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 80034c0:	e009      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4619      	mov	r1, r3
 80034cc:	4610      	mov	r0, r2
 80034ce:	f000 f908 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 80034d2:	e000      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80034d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a40      	ldr	r2, [pc, #256]	; (8003604 <TIM_Base_SetConfig+0x114>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d013      	beq.n	8003530 <TIM_Base_SetConfig+0x40>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350e:	d00f      	beq.n	8003530 <TIM_Base_SetConfig+0x40>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a3d      	ldr	r2, [pc, #244]	; (8003608 <TIM_Base_SetConfig+0x118>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00b      	beq.n	8003530 <TIM_Base_SetConfig+0x40>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a3c      	ldr	r2, [pc, #240]	; (800360c <TIM_Base_SetConfig+0x11c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d007      	beq.n	8003530 <TIM_Base_SetConfig+0x40>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a3b      	ldr	r2, [pc, #236]	; (8003610 <TIM_Base_SetConfig+0x120>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d003      	beq.n	8003530 <TIM_Base_SetConfig+0x40>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a3a      	ldr	r2, [pc, #232]	; (8003614 <TIM_Base_SetConfig+0x124>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d108      	bne.n	8003542 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2f      	ldr	r2, [pc, #188]	; (8003604 <TIM_Base_SetConfig+0x114>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01f      	beq.n	800358a <TIM_Base_SetConfig+0x9a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003550:	d01b      	beq.n	800358a <TIM_Base_SetConfig+0x9a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a2c      	ldr	r2, [pc, #176]	; (8003608 <TIM_Base_SetConfig+0x118>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d017      	beq.n	800358a <TIM_Base_SetConfig+0x9a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a2b      	ldr	r2, [pc, #172]	; (800360c <TIM_Base_SetConfig+0x11c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <TIM_Base_SetConfig+0x9a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a2a      	ldr	r2, [pc, #168]	; (8003610 <TIM_Base_SetConfig+0x120>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00f      	beq.n	800358a <TIM_Base_SetConfig+0x9a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a29      	ldr	r2, [pc, #164]	; (8003614 <TIM_Base_SetConfig+0x124>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00b      	beq.n	800358a <TIM_Base_SetConfig+0x9a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a28      	ldr	r2, [pc, #160]	; (8003618 <TIM_Base_SetConfig+0x128>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d007      	beq.n	800358a <TIM_Base_SetConfig+0x9a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a27      	ldr	r2, [pc, #156]	; (800361c <TIM_Base_SetConfig+0x12c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d003      	beq.n	800358a <TIM_Base_SetConfig+0x9a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a26      	ldr	r2, [pc, #152]	; (8003620 <TIM_Base_SetConfig+0x130>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d108      	bne.n	800359c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a10      	ldr	r2, [pc, #64]	; (8003604 <TIM_Base_SetConfig+0x114>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00f      	beq.n	80035e8 <TIM_Base_SetConfig+0xf8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a12      	ldr	r2, [pc, #72]	; (8003614 <TIM_Base_SetConfig+0x124>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00b      	beq.n	80035e8 <TIM_Base_SetConfig+0xf8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a11      	ldr	r2, [pc, #68]	; (8003618 <TIM_Base_SetConfig+0x128>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d007      	beq.n	80035e8 <TIM_Base_SetConfig+0xf8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a10      	ldr	r2, [pc, #64]	; (800361c <TIM_Base_SetConfig+0x12c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d003      	beq.n	80035e8 <TIM_Base_SetConfig+0xf8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a0f      	ldr	r2, [pc, #60]	; (8003620 <TIM_Base_SetConfig+0x130>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d103      	bne.n	80035f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	615a      	str	r2, [r3, #20]
}
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40012c00 	.word	0x40012c00
 8003608:	40000400 	.word	0x40000400
 800360c:	40000800 	.word	0x40000800
 8003610:	40000c00 	.word	0x40000c00
 8003614:	40013400 	.word	0x40013400
 8003618:	40014000 	.word	0x40014000
 800361c:	40014400 	.word	0x40014400
 8003620:	40014800 	.word	0x40014800

08003624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f023 0201 	bic.w	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f023 030a 	bic.w	r3, r3, #10
 8003660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003682:	b480      	push	{r7}
 8003684:	b087      	sub	sp, #28
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f023 0210 	bic.w	r2, r3, #16
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	031b      	lsls	r3, r3, #12
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	621a      	str	r2, [r3, #32]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	f043 0307 	orr.w	r3, r3, #7
 8003704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	609a      	str	r2, [r3, #8]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	021a      	lsls	r2, r3, #8
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	431a      	orrs	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4313      	orrs	r3, r2
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800376c:	2302      	movs	r3, #2
 800376e:	e045      	b.n	80037fc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1c      	ldr	r2, [pc, #112]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1b      	ldr	r2, [pc, #108]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d108      	bne.n	80037b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ce:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40013400 	.word	0x40013400

08003810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e040      	b.n	80038a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f001 fee4 	bl	8005600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2224      	movs	r2, #36	; 0x24
 800383c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f82c 	bl	80038ac <UART_SetConfig>
 8003854:	4603      	mov	r3, r0
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e022      	b.n	80038a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fb68 	bl	8003f3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800387a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800388a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fbef 	bl	8004080 <UART_CheckIdleState>
 80038a2:	4603      	mov	r3, r0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80038b0:	b088      	sub	sp, #32
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4bac      	ldr	r3, [pc, #688]	; (8003b94 <UART_SetConfig+0x2e8>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	69f9      	ldr	r1, [r7, #28]
 80038ea:	430b      	orrs	r3, r1
 80038ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4aa2      	ldr	r2, [pc, #648]	; (8003b98 <UART_SetConfig+0x2ec>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d004      	beq.n	800391e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	4313      	orrs	r3, r2
 800391c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	430a      	orrs	r2, r1
 8003930:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a99      	ldr	r2, [pc, #612]	; (8003b9c <UART_SetConfig+0x2f0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d121      	bne.n	8003980 <UART_SetConfig+0xd4>
 800393c:	4b98      	ldr	r3, [pc, #608]	; (8003ba0 <UART_SetConfig+0x2f4>)
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b03      	cmp	r3, #3
 8003948:	d816      	bhi.n	8003978 <UART_SetConfig+0xcc>
 800394a:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <UART_SetConfig+0xa4>)
 800394c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003950:	08003961 	.word	0x08003961
 8003954:	0800396d 	.word	0x0800396d
 8003958:	08003967 	.word	0x08003967
 800395c:	08003973 	.word	0x08003973
 8003960:	2301      	movs	r3, #1
 8003962:	76fb      	strb	r3, [r7, #27]
 8003964:	e0e8      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003966:	2302      	movs	r3, #2
 8003968:	76fb      	strb	r3, [r7, #27]
 800396a:	e0e5      	b.n	8003b38 <UART_SetConfig+0x28c>
 800396c:	2304      	movs	r3, #4
 800396e:	76fb      	strb	r3, [r7, #27]
 8003970:	e0e2      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003972:	2308      	movs	r3, #8
 8003974:	76fb      	strb	r3, [r7, #27]
 8003976:	e0df      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003978:	2310      	movs	r3, #16
 800397a:	76fb      	strb	r3, [r7, #27]
 800397c:	bf00      	nop
 800397e:	e0db      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a87      	ldr	r2, [pc, #540]	; (8003ba4 <UART_SetConfig+0x2f8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d134      	bne.n	80039f4 <UART_SetConfig+0x148>
 800398a:	4b85      	ldr	r3, [pc, #532]	; (8003ba0 <UART_SetConfig+0x2f4>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	f003 030c 	and.w	r3, r3, #12
 8003994:	2b0c      	cmp	r3, #12
 8003996:	d829      	bhi.n	80039ec <UART_SetConfig+0x140>
 8003998:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <UART_SetConfig+0xf4>)
 800399a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399e:	bf00      	nop
 80039a0:	080039d5 	.word	0x080039d5
 80039a4:	080039ed 	.word	0x080039ed
 80039a8:	080039ed 	.word	0x080039ed
 80039ac:	080039ed 	.word	0x080039ed
 80039b0:	080039e1 	.word	0x080039e1
 80039b4:	080039ed 	.word	0x080039ed
 80039b8:	080039ed 	.word	0x080039ed
 80039bc:	080039ed 	.word	0x080039ed
 80039c0:	080039db 	.word	0x080039db
 80039c4:	080039ed 	.word	0x080039ed
 80039c8:	080039ed 	.word	0x080039ed
 80039cc:	080039ed 	.word	0x080039ed
 80039d0:	080039e7 	.word	0x080039e7
 80039d4:	2300      	movs	r3, #0
 80039d6:	76fb      	strb	r3, [r7, #27]
 80039d8:	e0ae      	b.n	8003b38 <UART_SetConfig+0x28c>
 80039da:	2302      	movs	r3, #2
 80039dc:	76fb      	strb	r3, [r7, #27]
 80039de:	e0ab      	b.n	8003b38 <UART_SetConfig+0x28c>
 80039e0:	2304      	movs	r3, #4
 80039e2:	76fb      	strb	r3, [r7, #27]
 80039e4:	e0a8      	b.n	8003b38 <UART_SetConfig+0x28c>
 80039e6:	2308      	movs	r3, #8
 80039e8:	76fb      	strb	r3, [r7, #27]
 80039ea:	e0a5      	b.n	8003b38 <UART_SetConfig+0x28c>
 80039ec:	2310      	movs	r3, #16
 80039ee:	76fb      	strb	r3, [r7, #27]
 80039f0:	bf00      	nop
 80039f2:	e0a1      	b.n	8003b38 <UART_SetConfig+0x28c>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a6b      	ldr	r2, [pc, #428]	; (8003ba8 <UART_SetConfig+0x2fc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d120      	bne.n	8003a40 <UART_SetConfig+0x194>
 80039fe:	4b68      	ldr	r3, [pc, #416]	; (8003ba0 <UART_SetConfig+0x2f4>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a08:	2b10      	cmp	r3, #16
 8003a0a:	d00f      	beq.n	8003a2c <UART_SetConfig+0x180>
 8003a0c:	2b10      	cmp	r3, #16
 8003a0e:	d802      	bhi.n	8003a16 <UART_SetConfig+0x16a>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <UART_SetConfig+0x174>
 8003a14:	e010      	b.n	8003a38 <UART_SetConfig+0x18c>
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d005      	beq.n	8003a26 <UART_SetConfig+0x17a>
 8003a1a:	2b30      	cmp	r3, #48	; 0x30
 8003a1c:	d009      	beq.n	8003a32 <UART_SetConfig+0x186>
 8003a1e:	e00b      	b.n	8003a38 <UART_SetConfig+0x18c>
 8003a20:	2300      	movs	r3, #0
 8003a22:	76fb      	strb	r3, [r7, #27]
 8003a24:	e088      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003a26:	2302      	movs	r3, #2
 8003a28:	76fb      	strb	r3, [r7, #27]
 8003a2a:	e085      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	76fb      	strb	r3, [r7, #27]
 8003a30:	e082      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003a32:	2308      	movs	r3, #8
 8003a34:	76fb      	strb	r3, [r7, #27]
 8003a36:	e07f      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	76fb      	strb	r3, [r7, #27]
 8003a3c:	bf00      	nop
 8003a3e:	e07b      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a59      	ldr	r2, [pc, #356]	; (8003bac <UART_SetConfig+0x300>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d120      	bne.n	8003a8c <UART_SetConfig+0x1e0>
 8003a4a:	4b55      	ldr	r3, [pc, #340]	; (8003ba0 <UART_SetConfig+0x2f4>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d00f      	beq.n	8003a78 <UART_SetConfig+0x1cc>
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d802      	bhi.n	8003a62 <UART_SetConfig+0x1b6>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <UART_SetConfig+0x1c0>
 8003a60:	e010      	b.n	8003a84 <UART_SetConfig+0x1d8>
 8003a62:	2b80      	cmp	r3, #128	; 0x80
 8003a64:	d005      	beq.n	8003a72 <UART_SetConfig+0x1c6>
 8003a66:	2bc0      	cmp	r3, #192	; 0xc0
 8003a68:	d009      	beq.n	8003a7e <UART_SetConfig+0x1d2>
 8003a6a:	e00b      	b.n	8003a84 <UART_SetConfig+0x1d8>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	76fb      	strb	r3, [r7, #27]
 8003a70:	e062      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003a72:	2302      	movs	r3, #2
 8003a74:	76fb      	strb	r3, [r7, #27]
 8003a76:	e05f      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003a78:	2304      	movs	r3, #4
 8003a7a:	76fb      	strb	r3, [r7, #27]
 8003a7c:	e05c      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003a7e:	2308      	movs	r3, #8
 8003a80:	76fb      	strb	r3, [r7, #27]
 8003a82:	e059      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003a84:	2310      	movs	r3, #16
 8003a86:	76fb      	strb	r3, [r7, #27]
 8003a88:	bf00      	nop
 8003a8a:	e055      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a47      	ldr	r2, [pc, #284]	; (8003bb0 <UART_SetConfig+0x304>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d124      	bne.n	8003ae0 <UART_SetConfig+0x234>
 8003a96:	4b42      	ldr	r3, [pc, #264]	; (8003ba0 <UART_SetConfig+0x2f4>)
 8003a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa4:	d012      	beq.n	8003acc <UART_SetConfig+0x220>
 8003aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aaa:	d802      	bhi.n	8003ab2 <UART_SetConfig+0x206>
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <UART_SetConfig+0x214>
 8003ab0:	e012      	b.n	8003ad8 <UART_SetConfig+0x22c>
 8003ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ab6:	d006      	beq.n	8003ac6 <UART_SetConfig+0x21a>
 8003ab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003abc:	d009      	beq.n	8003ad2 <UART_SetConfig+0x226>
 8003abe:	e00b      	b.n	8003ad8 <UART_SetConfig+0x22c>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	76fb      	strb	r3, [r7, #27]
 8003ac4:	e038      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	76fb      	strb	r3, [r7, #27]
 8003aca:	e035      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003acc:	2304      	movs	r3, #4
 8003ace:	76fb      	strb	r3, [r7, #27]
 8003ad0:	e032      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	76fb      	strb	r3, [r7, #27]
 8003ad6:	e02f      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003ad8:	2310      	movs	r3, #16
 8003ada:	76fb      	strb	r3, [r7, #27]
 8003adc:	bf00      	nop
 8003ade:	e02b      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a2c      	ldr	r2, [pc, #176]	; (8003b98 <UART_SetConfig+0x2ec>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d124      	bne.n	8003b34 <UART_SetConfig+0x288>
 8003aea:	4b2d      	ldr	r3, [pc, #180]	; (8003ba0 <UART_SetConfig+0x2f4>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af8:	d012      	beq.n	8003b20 <UART_SetConfig+0x274>
 8003afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afe:	d802      	bhi.n	8003b06 <UART_SetConfig+0x25a>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <UART_SetConfig+0x268>
 8003b04:	e012      	b.n	8003b2c <UART_SetConfig+0x280>
 8003b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0a:	d006      	beq.n	8003b1a <UART_SetConfig+0x26e>
 8003b0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b10:	d009      	beq.n	8003b26 <UART_SetConfig+0x27a>
 8003b12:	e00b      	b.n	8003b2c <UART_SetConfig+0x280>
 8003b14:	2300      	movs	r3, #0
 8003b16:	76fb      	strb	r3, [r7, #27]
 8003b18:	e00e      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	76fb      	strb	r3, [r7, #27]
 8003b1e:	e00b      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003b20:	2304      	movs	r3, #4
 8003b22:	76fb      	strb	r3, [r7, #27]
 8003b24:	e008      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003b26:	2308      	movs	r3, #8
 8003b28:	76fb      	strb	r3, [r7, #27]
 8003b2a:	e005      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	76fb      	strb	r3, [r7, #27]
 8003b30:	bf00      	nop
 8003b32:	e001      	b.n	8003b38 <UART_SetConfig+0x28c>
 8003b34:	2310      	movs	r3, #16
 8003b36:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a16      	ldr	r2, [pc, #88]	; (8003b98 <UART_SetConfig+0x2ec>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	f040 80fa 	bne.w	8003d38 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b44:	7efb      	ldrb	r3, [r7, #27]
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d836      	bhi.n	8003bb8 <UART_SetConfig+0x30c>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <UART_SetConfig+0x2a4>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b75 	.word	0x08003b75
 8003b54:	08003bb9 	.word	0x08003bb9
 8003b58:	08003b7d 	.word	0x08003b7d
 8003b5c:	08003bb9 	.word	0x08003bb9
 8003b60:	08003b83 	.word	0x08003b83
 8003b64:	08003bb9 	.word	0x08003bb9
 8003b68:	08003bb9 	.word	0x08003bb9
 8003b6c:	08003bb9 	.word	0x08003bb9
 8003b70:	08003b8b 	.word	0x08003b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003b74:	f7fd fffc 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 8003b78:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b7a:	e020      	b.n	8003bbe <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003b7c:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <UART_SetConfig+0x308>)
 8003b7e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b80:	e01d      	b.n	8003bbe <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003b82:	f7fd ff5f 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 8003b86:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b88:	e019      	b.n	8003bbe <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b8e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b90:	e015      	b.n	8003bbe <UART_SetConfig+0x312>
 8003b92:	bf00      	nop
 8003b94:	efff69f3 	.word	0xefff69f3
 8003b98:	40008000 	.word	0x40008000
 8003b9c:	40013800 	.word	0x40013800
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40004400 	.word	0x40004400
 8003ba8:	40004800 	.word	0x40004800
 8003bac:	40004c00 	.word	0x40004c00
 8003bb0:	40005000 	.word	0x40005000
 8003bb4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	74fb      	strb	r3, [r7, #19]
        break;
 8003bbc:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 81ac 	beq.w	8003f1e <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	4413      	add	r3, r2
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d305      	bcc.n	8003be2 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d902      	bls.n	8003be8 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	74fb      	strb	r3, [r7, #19]
 8003be6:	e19a      	b.n	8003f1e <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8003be8:	7efb      	ldrb	r3, [r7, #27]
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	f200 8091 	bhi.w	8003d12 <UART_SetConfig+0x466>
 8003bf0:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <UART_SetConfig+0x34c>)
 8003bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf6:	bf00      	nop
 8003bf8:	08003c1d 	.word	0x08003c1d
 8003bfc:	08003d13 	.word	0x08003d13
 8003c00:	08003c69 	.word	0x08003c69
 8003c04:	08003d13 	.word	0x08003d13
 8003c08:	08003c9d 	.word	0x08003c9d
 8003c0c:	08003d13 	.word	0x08003d13
 8003c10:	08003d13 	.word	0x08003d13
 8003c14:	08003d13 	.word	0x08003d13
 8003c18:	08003ce9 	.word	0x08003ce9
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003c1c:	f7fd ffa8 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 8003c20:	4603      	mov	r3, r0
 8003c22:	4619      	mov	r1, r3
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	f04f 0400 	mov.w	r4, #0
 8003c30:	0214      	lsls	r4, r2, #8
 8003c32:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003c36:	020b      	lsls	r3, r1, #8
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6852      	ldr	r2, [r2, #4]
 8003c3c:	0852      	lsrs	r2, r2, #1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	eb13 0b01 	adds.w	fp, r3, r1
 8003c48:	eb44 0c02 	adc.w	ip, r4, r2
 8003c4c:	4658      	mov	r0, fp
 8003c4e:	4661      	mov	r1, ip
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f04f 0400 	mov.w	r4, #0
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	f7fc fcf8 	bl	8000650 <__aeabi_uldivmod>
 8003c60:	4603      	mov	r3, r0
 8003c62:	460c      	mov	r4, r1
 8003c64:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003c66:	e057      	b.n	8003d18 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	f04f 0400 	mov.w	r4, #0
 8003c72:	49b1      	ldr	r1, [pc, #708]	; (8003f38 <UART_SetConfig+0x68c>)
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	eb13 0b01 	adds.w	fp, r3, r1
 8003c7c:	eb44 0c02 	adc.w	ip, r4, r2
 8003c80:	4658      	mov	r0, fp
 8003c82:	4661      	mov	r1, ip
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f04f 0400 	mov.w	r4, #0
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4623      	mov	r3, r4
 8003c90:	f7fc fcde 	bl	8000650 <__aeabi_uldivmod>
 8003c94:	4603      	mov	r3, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003c9a:	e03d      	b.n	8003d18 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003c9c:	f7fd fed2 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	f04f 0400 	mov.w	r4, #0
 8003cb0:	0214      	lsls	r4, r2, #8
 8003cb2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003cb6:	020b      	lsls	r3, r1, #8
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6852      	ldr	r2, [r2, #4]
 8003cbc:	0852      	lsrs	r2, r2, #1
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	eb13 0b01 	adds.w	fp, r3, r1
 8003cc8:	eb44 0c02 	adc.w	ip, r4, r2
 8003ccc:	4658      	mov	r0, fp
 8003cce:	4661      	mov	r1, ip
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f04f 0400 	mov.w	r4, #0
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4623      	mov	r3, r4
 8003cdc:	f7fc fcb8 	bl	8000650 <__aeabi_uldivmod>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003ce6:	e017      	b.n	8003d18 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	085b      	lsrs	r3, r3, #1
 8003cee:	f04f 0400 	mov.w	r4, #0
 8003cf2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003cf6:	f144 0100 	adc.w	r1, r4, #0
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f04f 0400 	mov.w	r4, #0
 8003d02:	461a      	mov	r2, r3
 8003d04:	4623      	mov	r3, r4
 8003d06:	f7fc fca3 	bl	8000650 <__aeabi_uldivmod>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	460c      	mov	r4, r1
 8003d0e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003d10:	e002      	b.n	8003d18 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	74fb      	strb	r3, [r7, #19]
            break;
 8003d16:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d1e:	d308      	bcc.n	8003d32 <UART_SetConfig+0x486>
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d26:	d204      	bcs.n	8003d32 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	60da      	str	r2, [r3, #12]
 8003d30:	e0f5      	b.n	8003f1e <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	74fb      	strb	r3, [r7, #19]
 8003d36:	e0f2      	b.n	8003f1e <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d40:	d17f      	bne.n	8003e42 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8003d42:	7efb      	ldrb	r3, [r7, #27]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d85c      	bhi.n	8003e02 <UART_SetConfig+0x556>
 8003d48:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <UART_SetConfig+0x4a4>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d75 	.word	0x08003d75
 8003d54:	08003d93 	.word	0x08003d93
 8003d58:	08003db1 	.word	0x08003db1
 8003d5c:	08003e03 	.word	0x08003e03
 8003d60:	08003dcd 	.word	0x08003dcd
 8003d64:	08003e03 	.word	0x08003e03
 8003d68:	08003e03 	.word	0x08003e03
 8003d6c:	08003e03 	.word	0x08003e03
 8003d70:	08003deb 	.word	0x08003deb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003d74:	f7fd fefc 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	005a      	lsls	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	085b      	lsrs	r3, r3, #1
 8003d82:	441a      	add	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d90:	e03a      	b.n	8003e08 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003d92:	f7fd ff03 	bl	8001b9c <HAL_RCC_GetPCLK2Freq>
 8003d96:	4603      	mov	r3, r0
 8003d98:	005a      	lsls	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	441a      	add	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003dae:	e02b      	b.n	8003e08 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	085b      	lsrs	r3, r3, #1
 8003db6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003dba:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6852      	ldr	r2, [r2, #4]
 8003dc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003dca:	e01d      	b.n	8003e08 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003dcc:	f7fd fe3a 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	005a      	lsls	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	441a      	add	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003de8:	e00e      	b.n	8003e08 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e00:	e002      	b.n	8003e08 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	74fb      	strb	r3, [r7, #19]
        break;
 8003e06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2b0f      	cmp	r3, #15
 8003e0c:	d916      	bls.n	8003e3c <UART_SetConfig+0x590>
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e14:	d212      	bcs.n	8003e3c <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f023 030f 	bic.w	r3, r3, #15
 8003e1e:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	085b      	lsrs	r3, r3, #1
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	897b      	ldrh	r3, [r7, #10]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	897a      	ldrh	r2, [r7, #10]
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	e070      	b.n	8003f1e <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	74fb      	strb	r3, [r7, #19]
 8003e40:	e06d      	b.n	8003f1e <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8003e42:	7efb      	ldrb	r3, [r7, #27]
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d859      	bhi.n	8003efc <UART_SetConfig+0x650>
 8003e48:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <UART_SetConfig+0x5a4>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003e75 	.word	0x08003e75
 8003e54:	08003e91 	.word	0x08003e91
 8003e58:	08003ead 	.word	0x08003ead
 8003e5c:	08003efd 	.word	0x08003efd
 8003e60:	08003ec9 	.word	0x08003ec9
 8003e64:	08003efd 	.word	0x08003efd
 8003e68:	08003efd 	.word	0x08003efd
 8003e6c:	08003efd 	.word	0x08003efd
 8003e70:	08003ee5 	.word	0x08003ee5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e74:	f7fd fe7c 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	085b      	lsrs	r3, r3, #1
 8003e80:	441a      	add	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e8e:	e038      	b.n	8003f02 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003e90:	f7fd fe84 	bl	8001b9c <HAL_RCC_GetPCLK2Freq>
 8003e94:	4602      	mov	r2, r0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	441a      	add	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003eaa:	e02a      	b.n	8003f02 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003eb6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6852      	ldr	r2, [r2, #4]
 8003ebe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ec6:	e01c      	b.n	8003f02 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003ec8:	f7fd fdbc 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	441a      	add	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ee2:	e00e      	b.n	8003f02 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	085b      	lsrs	r3, r3, #1
 8003eea:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003efa:	e002      	b.n	8003f02 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	74fb      	strb	r3, [r7, #19]
        break;
 8003f00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b0f      	cmp	r3, #15
 8003f06:	d908      	bls.n	8003f1a <UART_SetConfig+0x66e>
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0e:	d204      	bcs.n	8003f1a <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	60da      	str	r2, [r3, #12]
 8003f18:	e001      	b.n	8003f1e <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003f2a:	7cfb      	ldrb	r3, [r7, #19]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3720      	adds	r7, #32
 8003f30:	46bd      	mov	sp, r7
 8003f32:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003f36:	bf00      	nop
 8003f38:	f4240000 	.word	0xf4240000

08003f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01a      	beq.n	8004052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800403a:	d10a      	bne.n	8004052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	605a      	str	r2, [r3, #4]
  }
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af02      	add	r7, sp, #8
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800408e:	f7fc fccb 	bl	8000a28 <HAL_GetTick>
 8004092:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d10e      	bne.n	80040c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f82a 	bl	800410a <UART_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e020      	b.n	8004102 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d10e      	bne.n	80040ec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f814 	bl	800410a <UART_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e00a      	b.n	8004102 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b084      	sub	sp, #16
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	603b      	str	r3, [r7, #0]
 8004116:	4613      	mov	r3, r2
 8004118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411a:	e02a      	b.n	8004172 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004122:	d026      	beq.n	8004172 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004124:	f7fc fc80 	bl	8000a28 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	429a      	cmp	r2, r3
 8004132:	d302      	bcc.n	800413a <UART_WaitOnFlagUntilTimeout+0x30>
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d11b      	bne.n	8004172 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004148:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0201 	bic.w	r2, r2, #1
 8004158:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e00f      	b.n	8004192 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4013      	ands	r3, r2
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	429a      	cmp	r2, r3
 8004180:	bf0c      	ite	eq
 8004182:	2301      	moveq	r3, #1
 8004184:	2300      	movne	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	429a      	cmp	r2, r3
 800418e:	d0c5      	beq.n	800411c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <_ZN9LoRaClassC1Ev>:
#define IRQ_PAYLOAD_CRC_ERROR_MASK 0x20
#define IRQ_RX_DONE_MASK           0x40

#define MAX_PKT_LENGTH           255

LoRaClass::LoRaClass() :
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(NULL)
 80041a4:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <_ZN9LoRaClassC1Ev+0x34>)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	61da      	str	r2, [r3, #28]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	621a      	str	r2, [r3, #32]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	629a      	str	r2, [r3, #40]	; 0x28
{
  // overide Stream timeout value
  //setTimeout(0);
}
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	0800627c 	.word	0x0800627c

080041d4 <_ZN9LoRaClass10sendPacketEPvj>:

//New methods
int LoRaClass::sendPacket(void* pData, size_t dataSize){
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
	size_t i;
	beginPacket();
 80041e0:	2100      	movs	r1, #0
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f8d2 	bl	800438c <_ZN9LoRaClass11beginPacketEi>
	for(i = 0; i < dataSize; i++)
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d20b      	bcs.n	800420c <_ZN9LoRaClass10sendPacketEPvj+0x38>
		print(((char*)pData)[i]);
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	4413      	add	r3, r2
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	4619      	mov	r1, r3
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fe4e 	bl	8004ea0 <_ZN9LoRaClass5printEc>
	for(i = 0; i < dataSize; i++)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	3301      	adds	r3, #1
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	e7ef      	b.n	80041ec <_ZN9LoRaClass10sendPacketEPvj+0x18>
	endPacket();
 800420c:	2100      	movs	r1, #0
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f902 	bl	8004418 <_ZN9LoRaClass9endPacketEb>

	return 1;
 8004214:	2301      	movs	r3, #1
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <_ZN9LoRaClass10readPacketEPvj>:

int LoRaClass::readPacket(void* pBuffer, size_t bufferSize){
 800421e:	b580      	push	{r7, lr}
 8004220:	b086      	sub	sp, #24
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
	size_t i = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
	size_t packetSize;

	packetSize = parsePacket();
 800422e:	2100      	movs	r1, #0
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f949 	bl	80044c8 <_ZN9LoRaClass11parsePacketEi>
 8004236:	4603      	mov	r3, r0
 8004238:	613b      	str	r3, [r7, #16]

	while (available() && i < bufferSize && i < packetSize) {
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3308      	adds	r3, #8
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	4798      	blx	r3
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d009      	beq.n	8004260 <_ZN9LoRaClass10readPacketEPvj+0x42>
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	429a      	cmp	r2, r3
 8004252:	d205      	bcs.n	8004260 <_ZN9LoRaClass10readPacketEPvj+0x42>
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	429a      	cmp	r2, r3
 800425a:	d201      	bcs.n	8004260 <_ZN9LoRaClass10readPacketEPvj+0x42>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <_ZN9LoRaClass10readPacketEPvj+0x44>
 8004260:	2300      	movs	r3, #0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00e      	beq.n	8004284 <_ZN9LoRaClass10readPacketEPvj+0x66>
		((char*)pBuffer)[i++] = (char)read();
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	4798      	blx	r3
 8004272:	4601      	mov	r1, r0
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	617a      	str	r2, [r7, #20]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	4413      	add	r3, r2
 800427e:	b2ca      	uxtb	r2, r1
 8004280:	701a      	strb	r2, [r3, #0]
	while (available() && i < bufferSize && i < packetSize) {
 8004282:	e7da      	b.n	800423a <_ZN9LoRaClass10readPacketEPvj+0x1c>
	}

	reset();
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f805 	bl	8004294 <_ZN9LoRaClass5resetEv>

	return 1;
 800428a:	2301      	movs	r3, #1
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_ZN9LoRaClass5resetEv>:

void LoRaClass::reset(){
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	begin(_frequency);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	4619      	mov	r1, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f816 	bl	80042d4 <_ZN9LoRaClass5beginEl>

	setSignalBandwidth(125E3);
 80042a8:	4909      	ldr	r1, [pc, #36]	; (80042d0 <_ZN9LoRaClass5resetEv+0x3c>)
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fba0 	bl	80049f0 <_ZN9LoRaClass18setSignalBandwidthEl>
	setSpreadingFactor(11);
 80042b0:	210b      	movs	r1, #11
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fb0a 	bl	80048cc <_ZN9LoRaClass18setSpreadingFactorEi>
	enableCrc();
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fc94 	bl	8004be6 <_ZN9LoRaClass9enableCrcEv>
	receive();
 80042be:	2100      	movs	r1, #0
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fa23 	bl	800470c <_ZN9LoRaClass7receiveEi>
}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	0001e848 	.word	0x0001e848

080042d4 <_ZN9LoRaClass5beginEl>:

//LoRa Padrao
int LoRaClass::begin(long frequency)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]

  if (_reset_pin != 65535) {
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8b1b      	ldrh	r3, [r3, #24]
 80042e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d015      	beq.n	8004316 <_ZN9LoRaClass5beginEl+0x42>

    // perform reset
	HAL_GPIO_WritePin(_reset_gpio_port, _reset_pin, GPIO_PIN_RESET);	//digitalWrite(_reset, LOW);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6958      	ldr	r0, [r3, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8b1b      	ldrh	r3, [r3, #24]
 80042f2:	2200      	movs	r2, #0
 80042f4:	4619      	mov	r1, r3
 80042f6:	f7fc fe7f 	bl	8000ff8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80042fa:	200a      	movs	r0, #10
 80042fc:	f7fc fba0 	bl	8000a40 <HAL_Delay>
    HAL_GPIO_WritePin(_reset_gpio_port, _reset_pin, GPIO_PIN_SET);		//digitalWrite(_reset, HIGH);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6958      	ldr	r0, [r3, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8b1b      	ldrh	r3, [r3, #24]
 8004308:	2201      	movs	r2, #1
 800430a:	4619      	mov	r1, r3
 800430c:	f7fc fe74 	bl	8000ff8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8004310:	200a      	movs	r0, #10
 8004312:	f7fc fb95 	bl	8000a40 <HAL_Delay>

  // start SPI
  //_spi->begin();

  // check version
  uint8_t version = readRegister(REG_VERSION);
 8004316:	2142      	movs	r1, #66	; 0x42
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fd5a 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 800431e:	4603      	mov	r3, r0
 8004320:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	2b12      	cmp	r3, #18
 8004326:	d001      	beq.n	800432c <_ZN9LoRaClass5beginEl+0x58>
    return 0;
 8004328:	2300      	movs	r3, #0
 800432a:	e02b      	b.n	8004384 <_ZN9LoRaClass5beginEl+0xb0>
  }

  // put in sleep mode
  sleep();
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fa19 	bl	8004764 <_ZN9LoRaClass5sleepEv>

  // set frequency
  setFrequency(frequency);
 8004332:	6839      	ldr	r1, [r7, #0]
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fa77 	bl	8004828 <_ZN9LoRaClass12setFrequencyEl>

  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 800433a:	2200      	movs	r2, #0
 800433c:	210e      	movs	r1, #14
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fd78 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8004344:	2200      	movs	r2, #0
 8004346:	210f      	movs	r1, #15
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fd73 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>

  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 800434e:	210c      	movs	r1, #12
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fd3e 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004356:	4603      	mov	r3, r0
 8004358:	f043 0303 	orr.w	r3, r3, #3
 800435c:	b2db      	uxtb	r3, r3
 800435e:	461a      	mov	r2, r3
 8004360:	210c      	movs	r1, #12
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fd66 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>

  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8004368:	2204      	movs	r2, #4
 800436a:	2126      	movs	r1, #38	; 0x26
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fd61 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>

  // set output power to 17 dBm
  setTxPower(17);
 8004372:	2201      	movs	r2, #1
 8004374:	2111      	movs	r1, #17
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fa01 	bl	800477e <_ZN9LoRaClass10setTxPowerEii>

  // put in standby mode
  idle();
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f9e4 	bl	800474a <_ZN9LoRaClass4idleEv>

  return 1;
 8004382:	2301      	movs	r3, #1
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <_ZN9LoRaClass11beginPacketEi>:
  //_spi->end();
}

//LATER
int LoRaClass::beginPacket(int implicitHeader)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  if (isTransmitting()) {
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f86a 	bl	8004470 <_ZN9LoRaClass14isTransmittingEv>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <_ZN9LoRaClass11beginPacketEi+0x1a>
    return 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e017      	b.n	80043d6 <_ZN9LoRaClass11beginPacketEi+0x4a>
  }

  // put in standby mode
  idle();
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f9cf 	bl	800474a <_ZN9LoRaClass4idleEv>

  if (implicitHeader) {
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <_ZN9LoRaClass11beginPacketEi+0x2e>
    implicitHeaderMode();
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fcb1 	bl	8004d1a <_ZN9LoRaClass18implicitHeaderModeEv>
 80043b8:	e002      	b.n	80043c0 <_ZN9LoRaClass11beginPacketEi+0x34>
  } else {
    explicitHeaderMode();
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fc95 	bl	8004cea <_ZN9LoRaClass18explicitHeaderModeEv>
  }

  // reset FIFO address and paload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
 80043c0:	2200      	movs	r2, #0
 80043c2:	210d      	movs	r1, #13
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fd35 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 80043ca:	2200      	movs	r2, #0
 80043cc:	2122      	movs	r1, #34	; 0x22
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fd30 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>

  return 1;
 80043d4:	2301      	movs	r3, #1
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <_ZN9LoRaClass7delayUSEj>:

//NEW
void LoRaClass::delayUS(unsigned int us){
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
	_htim->Instance->CNT = 0;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2200      	movs	r2, #0
 80043f0:	625a      	str	r2, [r3, #36]	; 0x24
	while(_htim->Instance->CNT < us);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	bf8c      	ite	hi
 8004400:	2301      	movhi	r3, #1
 8004402:	2300      	movls	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d000      	beq.n	800440c <_ZN9LoRaClass7delayUSEj+0x2e>
 800440a:	e7f2      	b.n	80043f2 <_ZN9LoRaClass7delayUSEj+0x14>
	return;
 800440c:	bf00      	nop
}
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <_ZN9LoRaClass9endPacketEb>:

//writeRegister(), delayMicroseconds(), yield()
int LoRaClass::endPacket(bool async)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	70fb      	strb	r3, [r7, #3]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8004424:	2283      	movs	r2, #131	; 0x83
 8004426:	2101      	movs	r1, #1
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fd03 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>

  if (async) {
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d004      	beq.n	800443e <_ZN9LoRaClass9endPacketEb+0x26>
    // grace time is required for the radio
    delayUS(150);
 8004434:	2196      	movs	r1, #150	; 0x96
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff ffd1 	bl	80043de <_ZN9LoRaClass7delayUSEj>
 800443c:	e013      	b.n	8004466 <_ZN9LoRaClass9endPacketEb+0x4e>
  } else {
    // wait for TX done
    while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 800443e:	2112      	movs	r1, #18
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 fcc6 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004446:	4603      	mov	r3, r0
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	bf0c      	ite	eq
 8004450:	2301      	moveq	r3, #1
 8004452:	2300      	movne	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d000      	beq.n	800445c <_ZN9LoRaClass9endPacketEb+0x44>
 800445a:	e7f0      	b.n	800443e <_ZN9LoRaClass9endPacketEb+0x26>

      //yield();
    }
    // clear IRQ's
    writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 800445c:	2208      	movs	r2, #8
 800445e:	2112      	movs	r1, #18
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fce7 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
  }

  return 1;
 8004466:	2301      	movs	r3, #1
}
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <_ZN9LoRaClass14isTransmittingEv>:

//readRegister(), writeRegister()
bool LoRaClass::isTransmitting()
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  if ((readRegister(REG_OP_MODE) & MODE_TX) == MODE_TX) {
 8004478:	2101      	movs	r1, #1
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fca9 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004480:	4603      	mov	r3, r0
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b03      	cmp	r3, #3
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <_ZN9LoRaClass14isTransmittingEv+0x28>
    return true;
 8004494:	2301      	movs	r3, #1
 8004496:	e013      	b.n	80044c0 <_ZN9LoRaClass14isTransmittingEv+0x50>
  }

  if (readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) {
 8004498:	2112      	movs	r1, #18
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fc99 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bf14      	ite	ne
 80044aa:	2301      	movne	r3, #1
 80044ac:	2300      	moveq	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d004      	beq.n	80044be <_ZN9LoRaClass14isTransmittingEv+0x4e>
    // clear IRQ's
    writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80044b4:	2208      	movs	r2, #8
 80044b6:	2112      	movs	r1, #18
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fcbb 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
  }

  return false;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <_ZN9LoRaClass11parsePacketEi>:

//LATER
int LoRaClass::parsePacket(int size)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 80044d6:	2112      	movs	r1, #18
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fc7a 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 80044de:	4603      	mov	r3, r0
 80044e0:	60bb      	str	r3, [r7, #8]

  if (size > 0) {
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	dd0a      	ble.n	80044fe <_ZN9LoRaClass11parsePacketEi+0x36>
    implicitHeaderMode();
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fc16 	bl	8004d1a <_ZN9LoRaClass18implicitHeaderModeEv>

    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	461a      	mov	r2, r3
 80044f4:	2122      	movs	r1, #34	; 0x22
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fc9c 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
 80044fc:	e002      	b.n	8004504 <_ZN9LoRaClass11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fbf3 	bl	8004cea <_ZN9LoRaClass18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	2112      	movs	r1, #18
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fc91 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>

  if (!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK))) {
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d004      	beq.n	8004526 <_ZN9LoRaClass11parsePacketEi+0x5e>
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b00      	cmp	r3, #0
 8004524:	d121      	bne.n	800456a <_ZN9LoRaClass11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	621a      	str	r2, [r3, #32]

    // read packet length
    if (_implicitHeaderMode) {
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	2b00      	cmp	r3, #0
 8004532:	d006      	beq.n	8004542 <_ZN9LoRaClass11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8004534:	2122      	movs	r1, #34	; 0x22
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fc4b 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 800453c:	4603      	mov	r3, r0
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e005      	b.n	800454e <_ZN9LoRaClass11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 8004542:	2113      	movs	r1, #19
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fc44 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 800454a:	4603      	mov	r3, r0
 800454c:	60fb      	str	r3, [r7, #12]
    }

    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 800454e:	2110      	movs	r1, #16
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fc3e 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004556:	4603      	mov	r3, r0
 8004558:	461a      	mov	r2, r3
 800455a:	210d      	movs	r1, #13
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fc69 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>

    // put in standby mode
    idle();
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f8f1 	bl	800474a <_ZN9LoRaClass4idleEv>
 8004568:	e015      	b.n	8004596 <_ZN9LoRaClass11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 800456a:	2101      	movs	r1, #1
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fc30 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004572:	4603      	mov	r3, r0
 8004574:	2b86      	cmp	r3, #134	; 0x86
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <_ZN9LoRaClass11parsePacketEi+0xce>
    // not currently in RX mode

    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8004582:	2200      	movs	r2, #0
 8004584:	210d      	movs	r1, #13
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fc54 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>

    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 800458c:	2286      	movs	r2, #134	; 0x86
 800458e:	2101      	movs	r1, #1
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fc4f 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
  }

  return packetLength;
 8004596:	68fb      	ldr	r3, [r7, #12]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <_ZN9LoRaClass5writeEh>:
  return static_cast<long>(fError);
}

//readRegister(), writeRegister()
size_t LoRaClass::write(uint8_t byte)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3304      	adds	r3, #4
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	1cf9      	adds	r1, r7, #3
 80045b6:	2201      	movs	r2, #1
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	4798      	blx	r3
 80045bc:	4603      	mov	r3, r0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <_ZN9LoRaClass5writeEPKhj>:

//readRegister(), writeRegister()
size_t LoRaClass::write(const uint8_t *buffer, size_t size)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b086      	sub	sp, #24
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 80045d2:	2122      	movs	r1, #34	; 0x22
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 fbfc 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 80045da:	4603      	mov	r3, r0
 80045dc:	613b      	str	r3, [r7, #16]

  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4413      	add	r3, r2
 80045e4:	2bff      	cmp	r3, #255	; 0xff
 80045e6:	d903      	bls.n	80045f0 <_ZN9LoRaClass5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80045ee:	607b      	str	r3, [r7, #4]
  }

  // write data
  for (size_t i = 0; i < size; i++) {
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d20c      	bcs.n	8004616 <_ZN9LoRaClass5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	4413      	add	r3, r2
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	2100      	movs	r1, #0
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 fc13 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	3301      	adds	r3, #1
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	e7ee      	b.n	80045f4 <_ZN9LoRaClass5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	b2da      	uxtb	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	4413      	add	r3, r2
 8004620:	b2db      	uxtb	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	2122      	movs	r1, #34	; 0x22
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 fc04 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>

  return size;
 800462c:	687b      	ldr	r3, [r7, #4]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <_ZN9LoRaClass9availableEv>:

//readRegister()
int LoRaClass::available()
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 800463e:	2113      	movs	r1, #19
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fbc6 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004646:	4603      	mov	r3, r0
 8004648:	461a      	mov	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	1ad3      	subs	r3, r2, r3
}
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <_ZN9LoRaClass4readEv>:

//readRegister(), available()
int LoRaClass::read()
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3308      	adds	r3, #8
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	4798      	blx	r3
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	bf0c      	ite	eq
 8004672:	2301      	moveq	r3, #1
 8004674:	2300      	movne	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <_ZN9LoRaClass4readEv+0x2a>
    return -1;
 800467c:	f04f 33ff 	mov.w	r3, #4294967295
 8004680:	e009      	b.n	8004696 <_ZN9LoRaClass4readEv+0x3e>
  }

  _packetIndex++;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	621a      	str	r2, [r3, #32]

  return readRegister(REG_FIFO);
 800468c:	2100      	movs	r1, #0
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fb9f 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004694:	4603      	mov	r3, r0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <_ZN9LoRaClass4peekEv>:

//writeRegister(), readRegister()
int LoRaClass::peek()
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  if (!available()) {
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3308      	adds	r3, #8
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	4798      	blx	r3
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <_ZN9LoRaClass4peekEv+0x2a>
    return -1;
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295
 80046c6:	e013      	b.n	80046f0 <_ZN9LoRaClass4peekEv+0x52>
  }

  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 80046c8:	210d      	movs	r1, #13
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fb81 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 80046d0:	4603      	mov	r3, r0
 80046d2:	60fb      	str	r3, [r7, #12]

  // read
  uint8_t b = readRegister(REG_FIFO);
 80046d4:	2100      	movs	r1, #0
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fb7b 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 80046dc:	4603      	mov	r3, r0
 80046de:	72fb      	strb	r3, [r7, #11]

  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	210d      	movs	r1, #13
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fba3 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>

  return b;
 80046ee:	7afb      	ldrb	r3, [r7, #11]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <_ZN9LoRaClass5flushEv>:

//DONE
void LoRaClass::flush()
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <_ZN9LoRaClass7receiveEi>:
  }
}

//writeRegister(), explicitHeaderMode()
void LoRaClass::receive(int size)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  if (size > 0) {
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	dd0a      	ble.n	8004732 <_ZN9LoRaClass7receiveEi+0x26>
    implicitHeaderMode();
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fafc 	bl	8004d1a <_ZN9LoRaClass18implicitHeaderModeEv>

    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	2122      	movs	r1, #34	; 0x22
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fb82 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
 8004730:	e002      	b.n	8004738 <_ZN9LoRaClass7receiveEi+0x2c>
  } else {
    explicitHeaderMode();
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fad9 	bl	8004cea <_ZN9LoRaClass18explicitHeaderModeEv>
  }

  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8004738:	2285      	movs	r2, #133	; 0x85
 800473a:	2101      	movs	r1, #1
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fb79 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <_ZN9LoRaClass4idleEv>:

//writeRegister()
void LoRaClass::idle()
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8004752:	2281      	movs	r2, #129	; 0x81
 8004754:	2101      	movs	r1, #1
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fb6c 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <_ZN9LoRaClass5sleepEv>:

//writeRegister()
void LoRaClass::sleep()
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 800476c:	2280      	movs	r2, #128	; 0x80
 800476e:	2101      	movs	r1, #1
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fb5f 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <_ZN9LoRaClass10setTxPowerEii>:

//writeRegister()
void LoRaClass::setTxPower(int level, int outputPin)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d116      	bne.n	80047be <_ZN9LoRaClass10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	da02      	bge.n	800479c <_ZN9LoRaClass10setTxPowerEii+0x1e>
      level = 0;
 8004796:	2300      	movs	r3, #0
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	e004      	b.n	80047a6 <_ZN9LoRaClass10setTxPowerEii+0x28>
    } else if (level > 14) {
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b0e      	cmp	r3, #14
 80047a0:	dd01      	ble.n	80047a6 <_ZN9LoRaClass10setTxPowerEii+0x28>
      level = 14;
 80047a2:	230e      	movs	r3, #14
 80047a4:	60bb      	str	r3, [r7, #8]
    }

    writeRegister(REG_PA_CONFIG, 0x70 | level);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	b25b      	sxtb	r3, r3
 80047aa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80047ae:	b25b      	sxtb	r3, r3
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	2109      	movs	r1, #9
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fb3c 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
      setOCP(100);
    }

    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 80047bc:	e030      	b.n	8004820 <_ZN9LoRaClass10setTxPowerEii+0xa2>
    if (level > 17) {
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b11      	cmp	r3, #17
 80047c2:	dd11      	ble.n	80047e8 <_ZN9LoRaClass10setTxPowerEii+0x6a>
      if (level > 20) {
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b14      	cmp	r3, #20
 80047c8:	dd01      	ble.n	80047ce <_ZN9LoRaClass10setTxPowerEii+0x50>
        level = 20;
 80047ca:	2314      	movs	r3, #20
 80047cc:	60bb      	str	r3, [r7, #8]
      level -= 3;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	3b03      	subs	r3, #3
 80047d2:	60bb      	str	r3, [r7, #8]
      writeRegister(REG_PA_DAC, 0x87);
 80047d4:	2287      	movs	r2, #135	; 0x87
 80047d6:	214d      	movs	r1, #77	; 0x4d
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 fb2b 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
      setOCP(140);
 80047de:	218c      	movs	r1, #140	; 0x8c
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fa15 	bl	8004c10 <_ZN9LoRaClass6setOCPEh>
 80047e6:	e00d      	b.n	8004804 <_ZN9LoRaClass10setTxPowerEii+0x86>
      if (level < 2) {
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	dc01      	bgt.n	80047f2 <_ZN9LoRaClass10setTxPowerEii+0x74>
        level = 2;
 80047ee:	2302      	movs	r3, #2
 80047f0:	60bb      	str	r3, [r7, #8]
      writeRegister(REG_PA_DAC, 0x84);
 80047f2:	2284      	movs	r2, #132	; 0x84
 80047f4:	214d      	movs	r1, #77	; 0x4d
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 fb1c 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
      setOCP(100);
 80047fc:	2164      	movs	r1, #100	; 0x64
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fa06 	bl	8004c10 <_ZN9LoRaClass6setOCPEh>
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	b2db      	uxtb	r3, r3
 8004808:	3b02      	subs	r3, #2
 800480a:	b2db      	uxtb	r3, r3
 800480c:	b25b      	sxtb	r3, r3
 800480e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004812:	b25b      	sxtb	r3, r3
 8004814:	b2db      	uxtb	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	2109      	movs	r1, #9
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fb0a 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004820:	bf00      	nop
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <_ZN9LoRaClass12setFrequencyEl>:

//writeRegister()
void LoRaClass::setFrequency(long frequency)
{
 8004828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	61da      	str	r2, [r3, #28]

  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800483e:	135e      	asrs	r6, r3, #13
 8004840:	04dd      	lsls	r5, r3, #19
 8004842:	4a1a      	ldr	r2, [pc, #104]	; (80048ac <_ZN9LoRaClass12setFrequencyEl+0x84>)
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	4628      	mov	r0, r5
 800484a:	4631      	mov	r1, r6
 800484c:	f7fb ff00 	bl	8000650 <__aeabi_uldivmod>
 8004850:	4603      	mov	r3, r0
 8004852:	460c      	mov	r4, r1
 8004854:	e9c7 3402 	strd	r3, r4, [r7, #8]

  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8004858:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	f04f 0400 	mov.w	r4, #0
 8004864:	0c0b      	lsrs	r3, r1, #16
 8004866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800486a:	0c14      	lsrs	r4, r2, #16
 800486c:	b2db      	uxtb	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	2106      	movs	r1, #6
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fade 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8004878:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	f04f 0400 	mov.w	r4, #0
 8004884:	0a0b      	lsrs	r3, r1, #8
 8004886:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800488a:	0a14      	lsrs	r4, r2, #8
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	2107      	movs	r1, #7
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 face 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8004898:	7a3b      	ldrb	r3, [r7, #8]
 800489a:	461a      	mov	r2, r3
 800489c:	2108      	movs	r1, #8
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fac8 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
}
 80048a4:	bf00      	nop
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ac:	01e84800 	.word	0x01e84800

080048b0 <_ZN9LoRaClass18getSpreadingFactorEv>:

//readRegister()
int LoRaClass::getSpreadingFactor()
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  return readRegister(REG_MODEM_CONFIG_2) >> 4;
 80048b8:	211e      	movs	r1, #30
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fa89 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 80048c0:	4603      	mov	r3, r0
 80048c2:	111b      	asrs	r3, r3, #4
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <_ZN9LoRaClass18setSpreadingFactorEi>:

//writeRegister(), setLdoFlag(), readRegister()
void LoRaClass::setSpreadingFactor(int sf)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b05      	cmp	r3, #5
 80048da:	dc02      	bgt.n	80048e2 <_ZN9LoRaClass18setSpreadingFactorEi+0x16>
    sf = 6;
 80048dc:	2306      	movs	r3, #6
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	e004      	b.n	80048ec <_ZN9LoRaClass18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b0c      	cmp	r3, #12
 80048e6:	dd01      	ble.n	80048ec <_ZN9LoRaClass18setSpreadingFactorEi+0x20>
    sf = 12;
 80048e8:	230c      	movs	r3, #12
 80048ea:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b06      	cmp	r3, #6
 80048f0:	d10a      	bne.n	8004908 <_ZN9LoRaClass18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 80048f2:	22c5      	movs	r2, #197	; 0xc5
 80048f4:	2131      	movs	r1, #49	; 0x31
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fa9c 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 80048fc:	220c      	movs	r2, #12
 80048fe:	2137      	movs	r1, #55	; 0x37
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 fa97 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
 8004906:	e009      	b.n	800491c <_ZN9LoRaClass18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 8004908:	22c3      	movs	r2, #195	; 0xc3
 800490a:	2131      	movs	r1, #49	; 0x31
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fa91 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8004912:	220a      	movs	r2, #10
 8004914:	2137      	movs	r1, #55	; 0x37
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fa8c 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
  }

  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 800491c:	211e      	movs	r1, #30
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa57 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004924:	4603      	mov	r3, r0
 8004926:	b25b      	sxtb	r3, r3
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	b25a      	sxtb	r2, r3
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	b25b      	sxtb	r3, r3
 8004934:	4313      	orrs	r3, r2
 8004936:	b25b      	sxtb	r3, r3
 8004938:	b2db      	uxtb	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	211e      	movs	r1, #30
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fa78 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
  setLdoFlag();
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f917 	bl	8004b78 <_ZN9LoRaClass10setLdoFlagEv>
}
 800494a:	bf00      	nop
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <_ZN9LoRaClass18getSignalBandwidthEv>:

//readRegister()
long LoRaClass::getSignalBandwidth()
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint8_t bw = (readRegister(REG_MODEM_CONFIG_1) >> 4);
 800495c:	211d      	movs	r1, #29
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fa37 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004964:	4603      	mov	r3, r0
 8004966:	111b      	asrs	r3, r3, #4
 8004968:	73fb      	strb	r3, [r7, #15]

  switch (bw) {
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	2b09      	cmp	r3, #9
 800496e:	d832      	bhi.n	80049d6 <_ZN9LoRaClass18getSignalBandwidthEv+0x82>
 8004970:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <_ZN9LoRaClass18getSignalBandwidthEv+0x24>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	080049a1 	.word	0x080049a1
 800497c:	080049a7 	.word	0x080049a7
 8004980:	080049ad 	.word	0x080049ad
 8004984:	080049b3 	.word	0x080049b3
 8004988:	080049b9 	.word	0x080049b9
 800498c:	080049bf 	.word	0x080049bf
 8004990:	080049c5 	.word	0x080049c5
 8004994:	080049cb 	.word	0x080049cb
 8004998:	080049cf 	.word	0x080049cf
 800499c:	080049d3 	.word	0x080049d3
    case 0: return 7.8E3;
 80049a0:	f641 6378 	movw	r3, #7800	; 0x1e78
 80049a4:	e019      	b.n	80049da <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 1: return 10.4E3;
 80049a6:	f642 03a0 	movw	r3, #10400	; 0x28a0
 80049aa:	e016      	b.n	80049da <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 2: return 15.6E3;
 80049ac:	f643 43f0 	movw	r3, #15600	; 0x3cf0
 80049b0:	e013      	b.n	80049da <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 3: return 20.8E3;
 80049b2:	f245 1340 	movw	r3, #20800	; 0x5140
 80049b6:	e010      	b.n	80049da <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 4: return 31.25E3;
 80049b8:	f647 2312 	movw	r3, #31250	; 0x7a12
 80049bc:	e00d      	b.n	80049da <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 5: return 41.7E3;
 80049be:	f24a 23e4 	movw	r3, #41700	; 0xa2e4
 80049c2:	e00a      	b.n	80049da <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 6: return 62.5E3;
 80049c4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80049c8:	e007      	b.n	80049da <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 7: return 125E3;
 80049ca:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <_ZN9LoRaClass18getSignalBandwidthEv+0x90>)
 80049cc:	e005      	b.n	80049da <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 8: return 250E3;
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <_ZN9LoRaClass18getSignalBandwidthEv+0x94>)
 80049d0:	e003      	b.n	80049da <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 9: return 500E3;
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <_ZN9LoRaClass18getSignalBandwidthEv+0x98>)
 80049d4:	e001      	b.n	80049da <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
  }

  return -1;
 80049d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	0001e848 	.word	0x0001e848
 80049e8:	0003d090 	.word	0x0003d090
 80049ec:	0007a120 	.word	0x0007a120

080049f0 <_ZN9LoRaClass18setSignalBandwidthEl>:

//writeRegister(), setLdoFlag()
void LoRaClass::setSignalBandwidth(long sbw)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  int bw;

  if (sbw <= 7.8E3) {
 80049fa:	6838      	ldr	r0, [r7, #0]
 80049fc:	f7fb fd36 	bl	800046c <__aeabi_i2d>
 8004a00:	a34b      	add	r3, pc, #300	; (adr r3, 8004b30 <_ZN9LoRaClass18setSignalBandwidthEl+0x140>)
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	f7fb fe05 	bl	8000614 <__aeabi_dcmple>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <_ZN9LoRaClass18setSignalBandwidthEl+0x26>
    bw = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	e071      	b.n	8004afa <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 10.4E3) {
 8004a16:	6838      	ldr	r0, [r7, #0]
 8004a18:	f7fb fd28 	bl	800046c <__aeabi_i2d>
 8004a1c:	a346      	add	r3, pc, #280	; (adr r3, 8004b38 <_ZN9LoRaClass18setSignalBandwidthEl+0x148>)
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f7fb fdf7 	bl	8000614 <__aeabi_dcmple>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <_ZN9LoRaClass18setSignalBandwidthEl+0x42>
    bw = 1;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	e063      	b.n	8004afa <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 15.6E3) {
 8004a32:	6838      	ldr	r0, [r7, #0]
 8004a34:	f7fb fd1a 	bl	800046c <__aeabi_i2d>
 8004a38:	a341      	add	r3, pc, #260	; (adr r3, 8004b40 <_ZN9LoRaClass18setSignalBandwidthEl+0x150>)
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	f7fb fde9 	bl	8000614 <__aeabi_dcmple>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <_ZN9LoRaClass18setSignalBandwidthEl+0x5e>
    bw = 2;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	e055      	b.n	8004afa <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 20.8E3) {
 8004a4e:	6838      	ldr	r0, [r7, #0]
 8004a50:	f7fb fd0c 	bl	800046c <__aeabi_i2d>
 8004a54:	a33c      	add	r3, pc, #240	; (adr r3, 8004b48 <_ZN9LoRaClass18setSignalBandwidthEl+0x158>)
 8004a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5a:	f7fb fddb 	bl	8000614 <__aeabi_dcmple>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <_ZN9LoRaClass18setSignalBandwidthEl+0x7a>
    bw = 3;
 8004a64:	2303      	movs	r3, #3
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	e047      	b.n	8004afa <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 31.25E3) {
 8004a6a:	6838      	ldr	r0, [r7, #0]
 8004a6c:	f7fb fcfe 	bl	800046c <__aeabi_i2d>
 8004a70:	a337      	add	r3, pc, #220	; (adr r3, 8004b50 <_ZN9LoRaClass18setSignalBandwidthEl+0x160>)
 8004a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a76:	f7fb fdcd 	bl	8000614 <__aeabi_dcmple>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <_ZN9LoRaClass18setSignalBandwidthEl+0x96>
    bw = 4;
 8004a80:	2304      	movs	r3, #4
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	e039      	b.n	8004afa <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 41.7E3) {
 8004a86:	6838      	ldr	r0, [r7, #0]
 8004a88:	f7fb fcf0 	bl	800046c <__aeabi_i2d>
 8004a8c:	a332      	add	r3, pc, #200	; (adr r3, 8004b58 <_ZN9LoRaClass18setSignalBandwidthEl+0x168>)
 8004a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a92:	f7fb fdbf 	bl	8000614 <__aeabi_dcmple>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <_ZN9LoRaClass18setSignalBandwidthEl+0xb2>
    bw = 5;
 8004a9c:	2305      	movs	r3, #5
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	e02b      	b.n	8004afa <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 62.5E3) {
 8004aa2:	6838      	ldr	r0, [r7, #0]
 8004aa4:	f7fb fce2 	bl	800046c <__aeabi_i2d>
 8004aa8:	a32d      	add	r3, pc, #180	; (adr r3, 8004b60 <_ZN9LoRaClass18setSignalBandwidthEl+0x170>)
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	f7fb fdb1 	bl	8000614 <__aeabi_dcmple>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <_ZN9LoRaClass18setSignalBandwidthEl+0xce>
    bw = 6;
 8004ab8:	2306      	movs	r3, #6
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	e01d      	b.n	8004afa <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 125E3) {
 8004abe:	6838      	ldr	r0, [r7, #0]
 8004ac0:	f7fb fcd4 	bl	800046c <__aeabi_i2d>
 8004ac4:	a328      	add	r3, pc, #160	; (adr r3, 8004b68 <_ZN9LoRaClass18setSignalBandwidthEl+0x178>)
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	f7fb fda3 	bl	8000614 <__aeabi_dcmple>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <_ZN9LoRaClass18setSignalBandwidthEl+0xea>
    bw = 7;
 8004ad4:	2307      	movs	r3, #7
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e00f      	b.n	8004afa <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 250E3) {
 8004ada:	6838      	ldr	r0, [r7, #0]
 8004adc:	f7fb fcc6 	bl	800046c <__aeabi_i2d>
 8004ae0:	a323      	add	r3, pc, #140	; (adr r3, 8004b70 <_ZN9LoRaClass18setSignalBandwidthEl+0x180>)
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f7fb fd95 	bl	8000614 <__aeabi_dcmple>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <_ZN9LoRaClass18setSignalBandwidthEl+0x106>
    bw = 8;
 8004af0:	2308      	movs	r3, #8
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	e001      	b.n	8004afa <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 8004af6:	2309      	movs	r3, #9
 8004af8:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8004afa:	211d      	movs	r1, #29
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f968 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004b02:	4603      	mov	r3, r0
 8004b04:	b25b      	sxtb	r3, r3
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	b25a      	sxtb	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	b25b      	sxtb	r3, r3
 8004b12:	4313      	orrs	r3, r2
 8004b14:	b25b      	sxtb	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	211d      	movs	r1, #29
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f989 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
  setLdoFlag();
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f828 	bl	8004b78 <_ZN9LoRaClass10setLdoFlagEv>
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	00000000 	.word	0x00000000
 8004b34:	40be7800 	.word	0x40be7800
 8004b38:	00000000 	.word	0x00000000
 8004b3c:	40c45000 	.word	0x40c45000
 8004b40:	00000000 	.word	0x00000000
 8004b44:	40ce7800 	.word	0x40ce7800
 8004b48:	00000000 	.word	0x00000000
 8004b4c:	40d45000 	.word	0x40d45000
 8004b50:	00000000 	.word	0x00000000
 8004b54:	40de8480 	.word	0x40de8480
 8004b58:	00000000 	.word	0x00000000
 8004b5c:	40e45c80 	.word	0x40e45c80
 8004b60:	00000000 	.word	0x00000000
 8004b64:	40ee8480 	.word	0x40ee8480
 8004b68:	00000000 	.word	0x00000000
 8004b6c:	40fe8480 	.word	0x40fe8480
 8004b70:	00000000 	.word	0x00000000
 8004b74:	410e8480 	.word	0x410e8480

08004b78 <_ZN9LoRaClass10setLdoFlagEv>:

//writeRegister(), readRegister(), getSignalBandwidth(), getSpreadingFactor(), bitWrite()
void LoRaClass::setLdoFlag()
{
 8004b78:	b590      	push	{r4, r7, lr}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  // Section 4.1.1.5
  long symbolDuration = 1000 / ( getSignalBandwidth() / (1L << getSpreadingFactor()) ) ;
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff fee7 	bl	8004954 <_ZN9LoRaClass18getSignalBandwidthEv>
 8004b86:	4604      	mov	r4, r0
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff fe91 	bl	80048b0 <_ZN9LoRaClass18getSpreadingFactorEv>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	2301      	movs	r3, #1
 8004b92:	4093      	lsls	r3, r2
 8004b94:	fb94 f3f3 	sdiv	r3, r4, r3
 8004b98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004ba0:	613b      	str	r3, [r7, #16]

  // Section 4.1.1.6
  bool ldoOn = symbolDuration > 16;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b10      	cmp	r3, #16
 8004ba6:	bfcc      	ite	gt
 8004ba8:	2301      	movgt	r3, #1
 8004baa:	2300      	movle	r3, #0
 8004bac:	73fb      	strb	r3, [r7, #15]

  uint8_t config3 = readRegister(REG_MODEM_CONFIG_3);
 8004bae:	2126      	movs	r1, #38	; 0x26
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f90e 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	75fb      	strb	r3, [r7, #23]

  //bitWrite(config3, 3, ldoOn);
  //NEW
  if(ldoOn == true){
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d004      	beq.n	8004bca <_ZN9LoRaClass10setLdoFlagEv+0x52>
	  config3 ^= 0b00001000;
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	f083 0308 	eor.w	r3, r3, #8
 8004bc6:	75fb      	strb	r3, [r7, #23]
 8004bc8:	e003      	b.n	8004bd2 <_ZN9LoRaClass10setLdoFlagEv+0x5a>
  }
  else{
	  config3 &= 0b11110111;
 8004bca:	7dfb      	ldrb	r3, [r7, #23]
 8004bcc:	f023 0308 	bic.w	r3, r3, #8
 8004bd0:	75fb      	strb	r3, [r7, #23]
  }

  writeRegister(REG_MODEM_CONFIG_3, config3);
 8004bd2:	7dfb      	ldrb	r3, [r7, #23]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	2126      	movs	r1, #38	; 0x26
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f92b 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd90      	pop	{r4, r7, pc}

08004be6 <_ZN9LoRaClass9enableCrcEv>:
  writeRegister(REG_SYNC_WORD, sw);
}

//writeRegister()
void LoRaClass::enableCrc()
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  writeRegister(REG_MODEM_CONFIG_2, readRegister(REG_MODEM_CONFIG_2) | 0x04);
 8004bee:	211e      	movs	r1, #30
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f8ee 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	f043 0304 	orr.w	r3, r3, #4
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	211e      	movs	r1, #30
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f916 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004c08:	bf00      	nop
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <_ZN9LoRaClass6setOCPEh>:
  writeRegister(REG_INVERTIQ2, 0x1d);
}

//writeRegister()
void LoRaClass::setOCP(uint8_t mA)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	70fb      	strb	r3, [r7, #3]
  uint8_t ocpTrim = 27;
 8004c1c:	231b      	movs	r3, #27
 8004c1e:	73fb      	strb	r3, [r7, #15]

  if (mA <= 120) {
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	2b78      	cmp	r3, #120	; 0x78
 8004c24:	d809      	bhi.n	8004c3a <_ZN9LoRaClass6setOCPEh+0x2a>
    ocpTrim = (mA - 45) / 5;
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	3b2d      	subs	r3, #45	; 0x2d
 8004c2a:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <_ZN9LoRaClass6setOCPEh+0x64>)
 8004c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8004c30:	1052      	asrs	r2, r2, #1
 8004c32:	17db      	asrs	r3, r3, #31
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	73fb      	strb	r3, [r7, #15]
 8004c38:	e00b      	b.n	8004c52 <_ZN9LoRaClass6setOCPEh+0x42>
  } else if (mA <=240) {
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	2bf0      	cmp	r3, #240	; 0xf0
 8004c3e:	d808      	bhi.n	8004c52 <_ZN9LoRaClass6setOCPEh+0x42>
    ocpTrim = (mA + 30) / 10;
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	331e      	adds	r3, #30
 8004c44:	4a0b      	ldr	r2, [pc, #44]	; (8004c74 <_ZN9LoRaClass6setOCPEh+0x64>)
 8004c46:	fb82 1203 	smull	r1, r2, r2, r3
 8004c4a:	1092      	asrs	r2, r2, #2
 8004c4c:	17db      	asrs	r3, r3, #31
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	73fb      	strb	r3, [r7, #15]
  }

  writeRegister(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f043 0320 	orr.w	r3, r3, #32
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	210b      	movs	r1, #11
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f8e5 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004c6a:	bf00      	nop
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	66666667 	.word	0x66666667

08004c78 <_ZN9LoRaClass7setPinsEP12GPIO_TypeDeftS1_t9IRQn_Type>:
  return readRegister(REG_RSSI_WIDEBAND);
}

//internal setting
void LoRaClass::setPins(GPIO_TypeDef * nss_gpio_port, uint16_t nss_pin, GPIO_TypeDef * reset_gpio_port, uint16_t reset_pin, IRQn_Type dio0_IRQ)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	80fb      	strh	r3, [r7, #6]
	_nss_gpio_port = nss_gpio_port;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	60da      	str	r2, [r3, #12]
	_nss_pin = nss_pin,
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	88fa      	ldrh	r2, [r7, #6]
 8004c92:	821a      	strh	r2, [r3, #16]
	_reset_gpio_port = reset_gpio_port;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	615a      	str	r2, [r3, #20]
	_reset_pin = reset_pin;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8b3a      	ldrh	r2, [r7, #24]
 8004c9e:	831a      	strh	r2, [r3, #24]
	_dio0_IRQ = dio0_IRQ;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	7f3a      	ldrb	r2, [r7, #28]
 8004ca4:	769a      	strb	r2, [r3, #26]
}
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <_ZN9LoRaClass6setSPIEP19__SPI_HandleTypeDef>:

//internal setting
void LoRaClass::setSPI(SPI_HandleTypeDef* hspi)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	6039      	str	r1, [r7, #0]
  _hspi = hspi;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	605a      	str	r2, [r3, #4]
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <_ZN9LoRaClass6setTIMEP17TIM_HandleTypeDef>:

//NEW
void LoRaClass::setTIM(TIM_HandleTypeDef* htim)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
  _htim = htim;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	609a      	str	r2, [r3, #8]
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <_ZN9LoRaClass18explicitHeaderModeEv>:
  }
}

//writeRegister()
void LoRaClass::explicitHeaderMode()
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24

  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8004cf8:	211d      	movs	r1, #29
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f869 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f023 0301 	bic.w	r3, r3, #1
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	211d      	movs	r1, #29
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f891 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <_ZN9LoRaClass18implicitHeaderModeEv>:

//writeRegister()
void LoRaClass::implicitHeaderMode()
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8004d28:	211d      	movs	r1, #29
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f851 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	211d      	movs	r1, #29
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f879 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <_ZN9LoRaClass14handleDio0RiseEv>:

//readRegister(), writeRegister(), _onReceive
void LoRaClass::handleDio0Rise()
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8004d52:	2112      	movs	r1, #18
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f83c 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	60fb      	str	r3, [r7, #12]

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	461a      	mov	r2, r3
 8004d64:	2112      	movs	r1, #18
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f864 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>

  if ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d129      	bne.n	8004dca <_ZN9LoRaClass14handleDio0RiseEv+0x80>
    // received a packet
    _packetIndex = 0;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	621a      	str	r2, [r3, #32]

    // read packet length
    int packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <_ZN9LoRaClass14handleDio0RiseEv+0x46>
 8004d84:	2122      	movs	r1, #34	; 0x22
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f823 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	e004      	b.n	8004d9a <_ZN9LoRaClass14handleDio0RiseEv+0x50>
 8004d90:	2113      	movs	r1, #19
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f81d 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	60bb      	str	r3, [r7, #8]

    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8004d9c:	2110      	movs	r1, #16
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f817 	bl	8004dd2 <_ZN9LoRaClass12readRegisterEh>
 8004da4:	4603      	mov	r3, r0
 8004da6:	461a      	mov	r2, r3
 8004da8:	210d      	movs	r1, #13
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f842 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>

    if (_onReceive) {
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <_ZN9LoRaClass14handleDio0RiseEv+0x76>
      _onReceive(packetLength);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	68b8      	ldr	r0, [r7, #8]
 8004dbe:	4798      	blx	r3
    }

    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	210d      	movs	r1, #13
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f835 	bl	8004e34 <_ZN9LoRaClass13writeRegisterEhh>
  }
}
 8004dca:	bf00      	nop
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <_ZN9LoRaClass12readRegisterEh>:

//NEW
uint8_t LoRaClass::readRegister(uint8_t address)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	70fb      	strb	r3, [r7, #3]
  //return singleTransfer(address & 0x7f, 0x00);
	uint8_t value = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	73fb      	strb	r3, [r7, #15]
	address = address & 0x7f;
 8004de2:	78fb      	ldrb	r3, [r7, #3]
 8004de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(_nss_gpio_port, _nss_pin, GPIO_PIN_RESET);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68d8      	ldr	r0, [r3, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8a1b      	ldrh	r3, [r3, #16]
 8004df4:	2200      	movs	r2, #0
 8004df6:	4619      	mov	r1, r3
 8004df8:	f7fc f8fe 	bl	8000ff8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (_hspi, &address, 1, 100);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6858      	ldr	r0, [r3, #4]
 8004e00:	1cf9      	adds	r1, r7, #3
 8004e02:	2364      	movs	r3, #100	; 0x64
 8004e04:	2201      	movs	r2, #1
 8004e06:	f7fd fc79 	bl	80026fc <HAL_SPI_Transmit>
	HAL_SPI_Receive (_hspi, &value, 1, 100);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6858      	ldr	r0, [r3, #4]
 8004e0e:	f107 010f 	add.w	r1, r7, #15
 8004e12:	2364      	movs	r3, #100	; 0x64
 8004e14:	2201      	movs	r2, #1
 8004e16:	f7fd fdd7 	bl	80029c8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_nss_gpio_port, _nss_pin, GPIO_PIN_SET);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68d8      	ldr	r0, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8a1b      	ldrh	r3, [r3, #16]
 8004e22:	2201      	movs	r2, #1
 8004e24:	4619      	mov	r1, r3
 8004e26:	f7fc f8e7 	bl	8000ff8 <HAL_GPIO_WritePin>
	return value;
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <_ZN9LoRaClass13writeRegisterEhh>:

//NEW
void LoRaClass::writeRegister(uint8_t address, uint8_t value)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	70fb      	strb	r3, [r7, #3]
 8004e40:	4613      	mov	r3, r2
 8004e42:	70bb      	strb	r3, [r7, #2]
  //singleTransfer(address | 0x80, value);
	uint8_t MOSIBuffer[2];
	MOSIBuffer[0] = address | 0x80;
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	733b      	strb	r3, [r7, #12]
	MOSIBuffer[1] = value;
 8004e4e:	78bb      	ldrb	r3, [r7, #2]
 8004e50:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(_nss_gpio_port, _nss_pin, GPIO_PIN_RESET);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68d8      	ldr	r0, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	8a1b      	ldrh	r3, [r3, #16]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	f7fc f8cb 	bl	8000ff8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (_hspi, MOSIBuffer, 2, 100);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6858      	ldr	r0, [r3, #4]
 8004e66:	f107 010c 	add.w	r1, r7, #12
 8004e6a:	2364      	movs	r3, #100	; 0x64
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	f7fd fc45 	bl	80026fc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_nss_gpio_port, _nss_pin, GPIO_PIN_SET);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68d8      	ldr	r0, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	8a1b      	ldrh	r3, [r3, #16]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	f7fc f8bb 	bl	8000ff8 <HAL_GPIO_WritePin>
}
 8004e82:	bf00      	nop
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <_ZN9LoRaClass10onDio0RiseEv>:
  return response;
}

//handleDio0Rise()
void LoRaClass::onDio0Rise()
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  handleDio0Rise();
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff ff59 	bl	8004d4a <_ZN9LoRaClass14handleDio0RiseEv>
}
 8004e98:	bf00      	nop
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <_ZN9LoRaClass5printEc>:
{
  return write(str);
}

size_t LoRaClass::print(char c)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	70fb      	strb	r3, [r7, #3]
  return write(c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4798      	blx	r3
 8004eba:	4603      	mov	r3, r0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004eca:	f7fb fd41 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ece:	f000 f899 	bl	8005004 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ed2:	f000 f9f5 	bl	80052c0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8004ed6:	f000 f9bf 	bl	8005258 <_ZL19MX_USART2_UART_Initv>
  MX_SPI2_Init();
 8004eda:	f000 f91d 	bl	8005118 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 8004ede:	f000 f95d 	bl	800519c <_ZL12MX_TIM3_Initv>
  // Os "printf"s nao aparecem no console
  // Falta verificar como a interupcao (DIO0) funciona
  // O receptor do lora nao foi testado no stm

  //Inicializacao RX
  loraRX.setPins(SS_COMM_RX_GPIO_Port, SS_COMM_RX_Pin, NULL, -1, EXTI15_10_IRQn);
 8004ee2:	2328      	movs	r3, #40	; 0x28
 8004ee4:	9301      	str	r3, [sp, #4]
 8004ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	2300      	movs	r3, #0
 8004eee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ef2:	4939      	ldr	r1, [pc, #228]	; (8004fd8 <main+0x114>)
 8004ef4:	4839      	ldr	r0, [pc, #228]	; (8004fdc <main+0x118>)
 8004ef6:	f7ff febf 	bl	8004c78 <_ZN9LoRaClass7setPinsEP12GPIO_TypeDeftS1_t9IRQn_Type>
  loraRX.setSPI(&hspi2);
 8004efa:	4939      	ldr	r1, [pc, #228]	; (8004fe0 <main+0x11c>)
 8004efc:	4837      	ldr	r0, [pc, #220]	; (8004fdc <main+0x118>)
 8004efe:	f7ff fed8 	bl	8004cb2 <_ZN9LoRaClass6setSPIEP19__SPI_HandleTypeDef>
  loraRX.setTIM(&htim3);
 8004f02:	4938      	ldr	r1, [pc, #224]	; (8004fe4 <main+0x120>)
 8004f04:	4835      	ldr	r0, [pc, #212]	; (8004fdc <main+0x118>)
 8004f06:	f7ff fee2 	bl	8004cce <_ZN9LoRaClass6setTIMEP17TIM_HandleTypeDef>

    if (!loraRX.begin(433.123E6)) {
 8004f0a:	4937      	ldr	r1, [pc, #220]	; (8004fe8 <main+0x124>)
 8004f0c:	4833      	ldr	r0, [pc, #204]	; (8004fdc <main+0x118>)
 8004f0e:	f7ff f9e1 	bl	80042d4 <_ZN9LoRaClass5beginEl>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bf0c      	ite	eq
 8004f18:	2301      	moveq	r3, #1
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <main+0x66>
  	  printf("Starting LoRa RX failed!\n");
 8004f22:	4832      	ldr	r0, [pc, #200]	; (8004fec <main+0x128>)
 8004f24:	f000 fd78 	bl	8005a18 <puts>
  	  while (1);
 8004f28:	e7fe      	b.n	8004f28 <main+0x64>
    }

    loraRX.setSignalBandwidth(125E3);
 8004f2a:	4931      	ldr	r1, [pc, #196]	; (8004ff0 <main+0x12c>)
 8004f2c:	482b      	ldr	r0, [pc, #172]	; (8004fdc <main+0x118>)
 8004f2e:	f7ff fd5f 	bl	80049f0 <_ZN9LoRaClass18setSignalBandwidthEl>
    loraRX.setSpreadingFactor(11);
 8004f32:	210b      	movs	r1, #11
 8004f34:	4829      	ldr	r0, [pc, #164]	; (8004fdc <main+0x118>)
 8004f36:	f7ff fcc9 	bl	80048cc <_ZN9LoRaClass18setSpreadingFactorEi>
    loraRX.enableCrc();
 8004f3a:	4828      	ldr	r0, [pc, #160]	; (8004fdc <main+0x118>)
 8004f3c:	f7ff fe53 	bl	8004be6 <_ZN9LoRaClass9enableCrcEv>
    loraRX.receive();
 8004f40:	2100      	movs	r1, #0
 8004f42:	4826      	ldr	r0, [pc, #152]	; (8004fdc <main+0x118>)
 8004f44:	f7ff fbe2 	bl	800470c <_ZN9LoRaClass7receiveEi>
    printf("LoRa RX started\n");
 8004f48:	482a      	ldr	r0, [pc, #168]	; (8004ff4 <main+0x130>)
 8004f4a:	f000 fd65 	bl	8005a18 <puts>

   //Inicializacao TX
   loraTX.setPins(SS_COMM_TX_GPIO_Port, SS_COMM_TX_Pin, NULL, -1, EXTI15_10_IRQn);
 8004f4e:	2328      	movs	r3, #40	; 0x28
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f5e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8004f62:	4825      	ldr	r0, [pc, #148]	; (8004ff8 <main+0x134>)
 8004f64:	f7ff fe88 	bl	8004c78 <_ZN9LoRaClass7setPinsEP12GPIO_TypeDeftS1_t9IRQn_Type>
   loraTX.setSPI(&hspi2);
 8004f68:	491d      	ldr	r1, [pc, #116]	; (8004fe0 <main+0x11c>)
 8004f6a:	4823      	ldr	r0, [pc, #140]	; (8004ff8 <main+0x134>)
 8004f6c:	f7ff fea1 	bl	8004cb2 <_ZN9LoRaClass6setSPIEP19__SPI_HandleTypeDef>
   loraTX.setTIM(&htim3);
 8004f70:	491c      	ldr	r1, [pc, #112]	; (8004fe4 <main+0x120>)
 8004f72:	4821      	ldr	r0, [pc, #132]	; (8004ff8 <main+0x134>)
 8004f74:	f7ff feab 	bl	8004cce <_ZN9LoRaClass6setTIMEP17TIM_HandleTypeDef>

   if (!loraTX.begin(433.123E6)) {
 8004f78:	491b      	ldr	r1, [pc, #108]	; (8004fe8 <main+0x124>)
 8004f7a:	481f      	ldr	r0, [pc, #124]	; (8004ff8 <main+0x134>)
 8004f7c:	f7ff f9aa 	bl	80042d4 <_ZN9LoRaClass5beginEl>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	bf0c      	ite	eq
 8004f86:	2301      	moveq	r3, #1
 8004f88:	2300      	movne	r3, #0
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <main+0xd4>
	   printf("Starting LoRa RX failed!\n");
 8004f90:	4816      	ldr	r0, [pc, #88]	; (8004fec <main+0x128>)
 8004f92:	f000 fd41 	bl	8005a18 <puts>
	   while (1);
 8004f96:	e7fe      	b.n	8004f96 <main+0xd2>
   }
   loraTX.setTxPower(20, 1);
 8004f98:	2201      	movs	r2, #1
 8004f9a:	2114      	movs	r1, #20
 8004f9c:	4816      	ldr	r0, [pc, #88]	; (8004ff8 <main+0x134>)
 8004f9e:	f7ff fbee 	bl	800477e <_ZN9LoRaClass10setTxPowerEii>
   loraTX.setSignalBandwidth(125E3);
 8004fa2:	4913      	ldr	r1, [pc, #76]	; (8004ff0 <main+0x12c>)
 8004fa4:	4814      	ldr	r0, [pc, #80]	; (8004ff8 <main+0x134>)
 8004fa6:	f7ff fd23 	bl	80049f0 <_ZN9LoRaClass18setSignalBandwidthEl>
   loraTX.setSpreadingFactor(11);
 8004faa:	210b      	movs	r1, #11
 8004fac:	4812      	ldr	r0, [pc, #72]	; (8004ff8 <main+0x134>)
 8004fae:	f7ff fc8d 	bl	80048cc <_ZN9LoRaClass18setSpreadingFactorEi>
   loraTX.enableCrc();
 8004fb2:	4811      	ldr	r0, [pc, #68]	; (8004ff8 <main+0x134>)
 8004fb4:	f7ff fe17 	bl	8004be6 <_ZN9LoRaClass9enableCrcEv>
   printf("LoRa RX started\n");
 8004fb8:	480e      	ldr	r0, [pc, #56]	; (8004ff4 <main+0x130>)
 8004fba:	f000 fd2d 	bl	8005a18 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loraTX.sendPacket(&lorapacket, sizeof(LoRaPacket));
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	490e      	ldr	r1, [pc, #56]	; (8004ffc <main+0x138>)
 8004fc2:	480d      	ldr	r0, [pc, #52]	; (8004ff8 <main+0x134>)
 8004fc4:	f7ff f906 	bl	80041d4 <_ZN9LoRaClass10sendPacketEPvj>
	loraRX.readPacket(&lorapacketRX, sizeof(LoRaPacket));
 8004fc8:	2210      	movs	r2, #16
 8004fca:	490d      	ldr	r1, [pc, #52]	; (8005000 <main+0x13c>)
 8004fcc:	4803      	ldr	r0, [pc, #12]	; (8004fdc <main+0x118>)
 8004fce:	f7ff f926 	bl	800421e <_ZN9LoRaClass10readPacketEPvj>
	continue;
 8004fd2:	bf00      	nop
	loraTX.sendPacket(&lorapacket, sizeof(LoRaPacket));
 8004fd4:	e7f3      	b.n	8004fbe <main+0xfa>
 8004fd6:	bf00      	nop
 8004fd8:	48000400 	.word	0x48000400
 8004fdc:	200001d0 	.word	0x200001d0
 8004fe0:	2000008c 	.word	0x2000008c
 8004fe4:	200000f0 	.word	0x200000f0
 8004fe8:	19d0eeb8 	.word	0x19d0eeb8
 8004fec:	08006248 	.word	0x08006248
 8004ff0:	0001e848 	.word	0x0001e848
 8004ff4:	08006264 	.word	0x08006264
 8004ff8:	200001fc 	.word	0x200001fc
 8004ffc:	200001b0 	.word	0x200001b0
 8005000:	200001c0 	.word	0x200001c0

08005004 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b0b8      	sub	sp, #224	; 0xe0
 8005008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800500a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800500e:	2244      	movs	r2, #68	; 0x44
 8005010:	2100      	movs	r1, #0
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fc9c 	bl	8005950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005018:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	605a      	str	r2, [r3, #4]
 8005022:	609a      	str	r2, [r3, #8]
 8005024:	60da      	str	r2, [r3, #12]
 8005026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005028:	463b      	mov	r3, r7
 800502a:	2288      	movs	r2, #136	; 0x88
 800502c:	2100      	movs	r1, #0
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fc8e 	bl	8005950 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005034:	2302      	movs	r3, #2
 8005036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800503a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800503e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005042:	2310      	movs	r3, #16
 8005044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005048:	2302      	movs	r3, #2
 800504a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800504e:	2302      	movs	r3, #2
 8005050:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005054:	2301      	movs	r3, #1
 8005056:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800505a:	230a      	movs	r3, #10
 800505c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005060:	2307      	movs	r3, #7
 8005062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005066:	2302      	movs	r3, #2
 8005068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800506c:	2302      	movs	r3, #2
 800506e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005072:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005076:	4618      	mov	r0, r3
 8005078:	f7fc f852 	bl	8001120 <HAL_RCC_OscConfig>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	bf14      	ite	ne
 8005082:	2301      	movne	r3, #1
 8005084:	2300      	moveq	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 800508c:	f000 f9e6 	bl	800545c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005090:	230f      	movs	r3, #15
 8005092:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005096:	2303      	movs	r3, #3
 8005098:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800509c:	2300      	movs	r3, #0
 800509e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80050a2:	2300      	movs	r3, #0
 80050a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80050a8:	2300      	movs	r3, #0
 80050aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80050ae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80050b2:	2104      	movs	r1, #4
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fc fbe3 	bl	8001880 <HAL_RCC_ClockConfig>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	bf14      	ite	ne
 80050c0:	2301      	movne	r3, #1
 80050c2:	2300      	moveq	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 80050ca:	f000 f9c7 	bl	800545c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80050ce:	2302      	movs	r3, #2
 80050d0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80050d2:	2300      	movs	r3, #0
 80050d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050d6:	463b      	mov	r3, r7
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fc fdd5 	bl	8001c88 <HAL_RCCEx_PeriphCLKConfig>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	bf14      	ite	ne
 80050e4:	2301      	movne	r3, #1
 80050e6:	2300      	moveq	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 80050ee:	f000 f9b5 	bl	800545c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80050f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80050f6:	f7fb ffbd 	bl	8001074 <HAL_PWREx_ControlVoltageScaling>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	bf14      	ite	ne
 8005100:	2301      	movne	r3, #1
 8005102:	2300      	moveq	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <_Z18SystemClock_Configv+0x10a>
  {
    Error_Handler();
 800510a:	f000 f9a7 	bl	800545c <Error_Handler>
  }
}
 800510e:	bf00      	nop
 8005110:	37e0      	adds	r7, #224	; 0xe0
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800511c:	4b1d      	ldr	r3, [pc, #116]	; (8005194 <_ZL12MX_SPI2_Initv+0x7c>)
 800511e:	4a1e      	ldr	r2, [pc, #120]	; (8005198 <_ZL12MX_SPI2_Initv+0x80>)
 8005120:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005122:	4b1c      	ldr	r3, [pc, #112]	; (8005194 <_ZL12MX_SPI2_Initv+0x7c>)
 8005124:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005128:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800512a:	4b1a      	ldr	r3, [pc, #104]	; (8005194 <_ZL12MX_SPI2_Initv+0x7c>)
 800512c:	2200      	movs	r2, #0
 800512e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005130:	4b18      	ldr	r3, [pc, #96]	; (8005194 <_ZL12MX_SPI2_Initv+0x7c>)
 8005132:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005136:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005138:	4b16      	ldr	r3, [pc, #88]	; (8005194 <_ZL12MX_SPI2_Initv+0x7c>)
 800513a:	2200      	movs	r2, #0
 800513c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800513e:	4b15      	ldr	r3, [pc, #84]	; (8005194 <_ZL12MX_SPI2_Initv+0x7c>)
 8005140:	2200      	movs	r2, #0
 8005142:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005144:	4b13      	ldr	r3, [pc, #76]	; (8005194 <_ZL12MX_SPI2_Initv+0x7c>)
 8005146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800514a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800514c:	4b11      	ldr	r3, [pc, #68]	; (8005194 <_ZL12MX_SPI2_Initv+0x7c>)
 800514e:	2200      	movs	r2, #0
 8005150:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005152:	4b10      	ldr	r3, [pc, #64]	; (8005194 <_ZL12MX_SPI2_Initv+0x7c>)
 8005154:	2200      	movs	r2, #0
 8005156:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005158:	4b0e      	ldr	r3, [pc, #56]	; (8005194 <_ZL12MX_SPI2_Initv+0x7c>)
 800515a:	2200      	movs	r2, #0
 800515c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800515e:	4b0d      	ldr	r3, [pc, #52]	; (8005194 <_ZL12MX_SPI2_Initv+0x7c>)
 8005160:	2200      	movs	r2, #0
 8005162:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005164:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <_ZL12MX_SPI2_Initv+0x7c>)
 8005166:	2207      	movs	r2, #7
 8005168:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <_ZL12MX_SPI2_Initv+0x7c>)
 800516c:	2200      	movs	r2, #0
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005170:	4b08      	ldr	r3, [pc, #32]	; (8005194 <_ZL12MX_SPI2_Initv+0x7c>)
 8005172:	2208      	movs	r2, #8
 8005174:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005176:	4807      	ldr	r0, [pc, #28]	; (8005194 <_ZL12MX_SPI2_Initv+0x7c>)
 8005178:	f7fd fa36 	bl	80025e8 <HAL_SPI_Init>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	bf14      	ite	ne
 8005182:	2301      	movne	r3, #1
 8005184:	2300      	moveq	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 800518c:	f000 f966 	bl	800545c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005190:	bf00      	nop
 8005192:	bd80      	pop	{r7, pc}
 8005194:	2000008c 	.word	0x2000008c
 8005198:	40003800 	.word	0x40003800

0800519c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051a2:	f107 0310 	add.w	r3, r7, #16
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	605a      	str	r2, [r3, #4]
 80051ac:	609a      	str	r2, [r3, #8]
 80051ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051b0:	1d3b      	adds	r3, r7, #4
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	605a      	str	r2, [r3, #4]
 80051b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80051ba:	4b25      	ldr	r3, [pc, #148]	; (8005250 <_ZL12MX_TIM3_Initv+0xb4>)
 80051bc:	4a25      	ldr	r2, [pc, #148]	; (8005254 <_ZL12MX_TIM3_Initv+0xb8>)
 80051be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80051c0:	4b23      	ldr	r3, [pc, #140]	; (8005250 <_ZL12MX_TIM3_Initv+0xb4>)
 80051c2:	224f      	movs	r2, #79	; 0x4f
 80051c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051c6:	4b22      	ldr	r3, [pc, #136]	; (8005250 <_ZL12MX_TIM3_Initv+0xb4>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 80051cc:	4b20      	ldr	r3, [pc, #128]	; (8005250 <_ZL12MX_TIM3_Initv+0xb4>)
 80051ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051d4:	4b1e      	ldr	r3, [pc, #120]	; (8005250 <_ZL12MX_TIM3_Initv+0xb4>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051da:	4b1d      	ldr	r3, [pc, #116]	; (8005250 <_ZL12MX_TIM3_Initv+0xb4>)
 80051dc:	2200      	movs	r2, #0
 80051de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80051e0:	481b      	ldr	r0, [pc, #108]	; (8005250 <_ZL12MX_TIM3_Initv+0xb4>)
 80051e2:	f7fe f8a1 	bl	8003328 <HAL_TIM_Base_Init>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bf14      	ite	ne
 80051ec:	2301      	movne	r3, #1
 80051ee:	2300      	moveq	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 80051f6:	f000 f931 	bl	800545c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005200:	f107 0310 	add.w	r3, r7, #16
 8005204:	4619      	mov	r1, r3
 8005206:	4812      	ldr	r0, [pc, #72]	; (8005250 <_ZL12MX_TIM3_Initv+0xb4>)
 8005208:	f7fe f8b9 	bl	800337e <HAL_TIM_ConfigClockSource>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	bf14      	ite	ne
 8005212:	2301      	movne	r3, #1
 8005214:	2300      	moveq	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 800521c:	f000 f91e 	bl	800545c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005220:	2300      	movs	r3, #0
 8005222:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005228:	1d3b      	adds	r3, r7, #4
 800522a:	4619      	mov	r1, r3
 800522c:	4808      	ldr	r0, [pc, #32]	; (8005250 <_ZL12MX_TIM3_Initv+0xb4>)
 800522e:	f7fe fa93 	bl	8003758 <HAL_TIMEx_MasterConfigSynchronization>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	bf14      	ite	ne
 8005238:	2301      	movne	r3, #1
 800523a:	2300      	moveq	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8005242:	f000 f90b 	bl	800545c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005246:	bf00      	nop
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	200000f0 	.word	0x200000f0
 8005254:	40000400 	.word	0x40000400

08005258 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800525c:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800525e:	4a17      	ldr	r2, [pc, #92]	; (80052bc <_ZL19MX_USART2_UART_Initv+0x64>)
 8005260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005262:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8005264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800526c:	2200      	movs	r2, #0
 800526e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005270:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8005272:	2200      	movs	r2, #0
 8005274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005276:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8005278:	2200      	movs	r2, #0
 800527a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800527c:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800527e:	220c      	movs	r2, #12
 8005280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005282:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8005284:	2200      	movs	r2, #0
 8005286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800528a:	2200      	movs	r2, #0
 800528c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800528e:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8005290:	2200      	movs	r2, #0
 8005292:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005294:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8005296:	2200      	movs	r2, #0
 8005298:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800529a:	4807      	ldr	r0, [pc, #28]	; (80052b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800529c:	f7fe fab8 	bl	8003810 <HAL_UART_Init>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	bf14      	ite	ne
 80052a6:	2301      	movne	r3, #1
 80052a8:	2300      	moveq	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80052b0:	f000 f8d4 	bl	800545c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80052b4:	bf00      	nop
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20000130 	.word	0x20000130
 80052bc:	40004400 	.word	0x40004400

080052c0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08a      	sub	sp, #40	; 0x28
 80052c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c6:	f107 0314 	add.w	r3, r7, #20
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	605a      	str	r2, [r3, #4]
 80052d0:	609a      	str	r2, [r3, #8]
 80052d2:	60da      	str	r2, [r3, #12]
 80052d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80052d6:	4b4f      	ldr	r3, [pc, #316]	; (8005414 <_ZL12MX_GPIO_Initv+0x154>)
 80052d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052da:	4a4e      	ldr	r2, [pc, #312]	; (8005414 <_ZL12MX_GPIO_Initv+0x154>)
 80052dc:	f043 0304 	orr.w	r3, r3, #4
 80052e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052e2:	4b4c      	ldr	r3, [pc, #304]	; (8005414 <_ZL12MX_GPIO_Initv+0x154>)
 80052e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80052ee:	4b49      	ldr	r3, [pc, #292]	; (8005414 <_ZL12MX_GPIO_Initv+0x154>)
 80052f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f2:	4a48      	ldr	r2, [pc, #288]	; (8005414 <_ZL12MX_GPIO_Initv+0x154>)
 80052f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052fa:	4b46      	ldr	r3, [pc, #280]	; (8005414 <_ZL12MX_GPIO_Initv+0x154>)
 80052fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005306:	4b43      	ldr	r3, [pc, #268]	; (8005414 <_ZL12MX_GPIO_Initv+0x154>)
 8005308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530a:	4a42      	ldr	r2, [pc, #264]	; (8005414 <_ZL12MX_GPIO_Initv+0x154>)
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005312:	4b40      	ldr	r3, [pc, #256]	; (8005414 <_ZL12MX_GPIO_Initv+0x154>)
 8005314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	60bb      	str	r3, [r7, #8]
 800531c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800531e:	4b3d      	ldr	r3, [pc, #244]	; (8005414 <_ZL12MX_GPIO_Initv+0x154>)
 8005320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005322:	4a3c      	ldr	r2, [pc, #240]	; (8005414 <_ZL12MX_GPIO_Initv+0x154>)
 8005324:	f043 0302 	orr.w	r3, r3, #2
 8005328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800532a:	4b3a      	ldr	r3, [pc, #232]	; (8005414 <_ZL12MX_GPIO_Initv+0x154>)
 800532c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	607b      	str	r3, [r7, #4]
 8005334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8005336:	2200      	movs	r2, #0
 8005338:	2120      	movs	r1, #32
 800533a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800533e:	f7fb fe5b 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_COMM_RX_GPIO_Port, SS_COMM_RX_Pin, GPIO_PIN_SET);
 8005342:	2201      	movs	r2, #1
 8005344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005348:	4833      	ldr	r0, [pc, #204]	; (8005418 <_ZL12MX_GPIO_Initv+0x158>)
 800534a:	f7fb fe55 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_COMM_TX_GPIO_Port, SS_COMM_TX_Pin, GPIO_PIN_SET);
 800534e:	2201      	movs	r2, #1
 8005350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005358:	f7fb fe4e 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800535c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005362:	4b2e      	ldr	r3, [pc, #184]	; (800541c <_ZL12MX_GPIO_Initv+0x15c>)
 8005364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005366:	2300      	movs	r3, #0
 8005368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800536a:	f107 0314 	add.w	r3, r7, #20
 800536e:	4619      	mov	r1, r3
 8005370:	482b      	ldr	r0, [pc, #172]	; (8005420 <_ZL12MX_GPIO_Initv+0x160>)
 8005372:	f7fb fc99 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SS_COMM_TX_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SS_COMM_TX_Pin;
 8005376:	f44f 7390 	mov.w	r3, #288	; 0x120
 800537a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800537c:	2301      	movs	r3, #1
 800537e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005380:	2300      	movs	r3, #0
 8005382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005384:	2300      	movs	r3, #0
 8005386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005388:	f107 0314 	add.w	r3, r7, #20
 800538c:	4619      	mov	r1, r3
 800538e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005392:	f7fb fc89 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_COMM_RX_Pin */
  GPIO_InitStruct.Pin = SS_COMM_RX_Pin;
 8005396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800539a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800539c:	2301      	movs	r3, #1
 800539e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a4:	2300      	movs	r3, #0
 80053a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_COMM_RX_GPIO_Port, &GPIO_InitStruct);
 80053a8:	f107 0314 	add.w	r3, r7, #20
 80053ac:	4619      	mov	r1, r3
 80053ae:	481a      	ldr	r0, [pc, #104]	; (8005418 <_ZL12MX_GPIO_Initv+0x158>)
 80053b0:	f7fb fc7a 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_RX_Pin */
  GPIO_InitStruct.Pin = DIO0_RX_Pin;
 80053b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80053ba:	4b18      	ldr	r3, [pc, #96]	; (800541c <_ZL12MX_GPIO_Initv+0x15c>)
 80053bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_RX_GPIO_Port, &GPIO_InitStruct);
 80053c2:	f107 0314 	add.w	r3, r7, #20
 80053c6:	4619      	mov	r1, r3
 80053c8:	4813      	ldr	r0, [pc, #76]	; (8005418 <_ZL12MX_GPIO_Initv+0x158>)
 80053ca:	f7fb fc6d 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_COMM_TX_Pin */
  GPIO_InitStruct.Pin = DIO0_COMM_TX_Pin;
 80053ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80053d4:	4b11      	ldr	r3, [pc, #68]	; (800541c <_ZL12MX_GPIO_Initv+0x15c>)
 80053d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_COMM_TX_GPIO_Port, &GPIO_InitStruct);
 80053dc:	f107 0314 	add.w	r3, r7, #20
 80053e0:	4619      	mov	r1, r3
 80053e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053e6:	f7fb fc5f 	bl	8000ca8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80053ea:	2200      	movs	r2, #0
 80053ec:	2100      	movs	r1, #0
 80053ee:	2017      	movs	r0, #23
 80053f0:	f7fb fc23 	bl	8000c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80053f4:	2017      	movs	r0, #23
 80053f6:	f7fb fc3c 	bl	8000c72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80053fa:	2200      	movs	r2, #0
 80053fc:	2100      	movs	r1, #0
 80053fe:	2028      	movs	r0, #40	; 0x28
 8005400:	f7fb fc1b 	bl	8000c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005404:	2028      	movs	r0, #40	; 0x28
 8005406:	f7fb fc34 	bl	8000c72 <HAL_NVIC_EnableIRQ>

}
 800540a:	bf00      	nop
 800540c:	3728      	adds	r7, #40	; 0x28
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000
 8005418:	48000400 	.word	0x48000400
 800541c:	10210000 	.word	0x10210000
 8005420:	48000800 	.word	0x48000800

08005424 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DIO0_COMM_TX_Pin){
 800542e:	88fb      	ldrh	r3, [r7, #6]
 8005430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005434:	d102      	bne.n	800543c <HAL_GPIO_EXTI_Callback+0x18>
		loraTX.onDio0Rise();
 8005436:	4807      	ldr	r0, [pc, #28]	; (8005454 <HAL_GPIO_EXTI_Callback+0x30>)
 8005438:	f7ff fd27 	bl	8004e8a <_ZN9LoRaClass10onDio0RiseEv>
	}
	if(GPIO_Pin == DIO0_RX_Pin){
 800543c:	88fb      	ldrh	r3, [r7, #6]
 800543e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005442:	d102      	bne.n	800544a <HAL_GPIO_EXTI_Callback+0x26>
		loraRX.onDio0Rise();
 8005444:	4804      	ldr	r0, [pc, #16]	; (8005458 <HAL_GPIO_EXTI_Callback+0x34>)
 8005446:	f7ff fd20 	bl	8004e8a <_ZN9LoRaClass10onDio0RiseEv>
	}
}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	200001fc 	.word	0x200001fc
 8005458:	200001d0 	.word	0x200001d0

0800545c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005460:	bf00      	nop
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
	...

0800546c <_Z41__static_initialization_and_destruction_0ii>:
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d10a      	bne.n	8005492 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005482:	4293      	cmp	r3, r2
 8005484:	d105      	bne.n	8005492 <_Z41__static_initialization_and_destruction_0ii+0x26>
LoRaClass loraRX, loraTX;
 8005486:	4805      	ldr	r0, [pc, #20]	; (800549c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8005488:	f7fe fe88 	bl	800419c <_ZN9LoRaClassC1Ev>
 800548c:	4804      	ldr	r0, [pc, #16]	; (80054a0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800548e:	f7fe fe85 	bl	800419c <_ZN9LoRaClassC1Ev>
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	200001d0 	.word	0x200001d0
 80054a0:	200001fc 	.word	0x200001fc

080054a4 <_GLOBAL__sub_I_hspi2>:
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80054ac:	2001      	movs	r0, #1
 80054ae:	f7ff ffdd 	bl	800546c <_Z41__static_initialization_and_destruction_0ii>
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ba:	4b0f      	ldr	r3, [pc, #60]	; (80054f8 <HAL_MspInit+0x44>)
 80054bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054be:	4a0e      	ldr	r2, [pc, #56]	; (80054f8 <HAL_MspInit+0x44>)
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	6613      	str	r3, [r2, #96]	; 0x60
 80054c6:	4b0c      	ldr	r3, [pc, #48]	; (80054f8 <HAL_MspInit+0x44>)
 80054c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	607b      	str	r3, [r7, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054d2:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <HAL_MspInit+0x44>)
 80054d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d6:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <HAL_MspInit+0x44>)
 80054d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054dc:	6593      	str	r3, [r2, #88]	; 0x58
 80054de:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <HAL_MspInit+0x44>)
 80054e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e6:	603b      	str	r3, [r7, #0]
 80054e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40021000 	.word	0x40021000

080054fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	; 0x28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005504:	f107 0314 	add.w	r3, r7, #20
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	605a      	str	r2, [r3, #4]
 800550e:	609a      	str	r2, [r3, #8]
 8005510:	60da      	str	r2, [r3, #12]
 8005512:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a25      	ldr	r2, [pc, #148]	; (80055b0 <HAL_SPI_MspInit+0xb4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d144      	bne.n	80055a8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800551e:	4b25      	ldr	r3, [pc, #148]	; (80055b4 <HAL_SPI_MspInit+0xb8>)
 8005520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005522:	4a24      	ldr	r2, [pc, #144]	; (80055b4 <HAL_SPI_MspInit+0xb8>)
 8005524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005528:	6593      	str	r3, [r2, #88]	; 0x58
 800552a:	4b22      	ldr	r3, [pc, #136]	; (80055b4 <HAL_SPI_MspInit+0xb8>)
 800552c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005532:	613b      	str	r3, [r7, #16]
 8005534:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005536:	4b1f      	ldr	r3, [pc, #124]	; (80055b4 <HAL_SPI_MspInit+0xb8>)
 8005538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553a:	4a1e      	ldr	r2, [pc, #120]	; (80055b4 <HAL_SPI_MspInit+0xb8>)
 800553c:	f043 0304 	orr.w	r3, r3, #4
 8005540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005542:	4b1c      	ldr	r3, [pc, #112]	; (80055b4 <HAL_SPI_MspInit+0xb8>)
 8005544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800554e:	4b19      	ldr	r3, [pc, #100]	; (80055b4 <HAL_SPI_MspInit+0xb8>)
 8005550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005552:	4a18      	ldr	r2, [pc, #96]	; (80055b4 <HAL_SPI_MspInit+0xb8>)
 8005554:	f043 0302 	orr.w	r3, r3, #2
 8005558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800555a:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <HAL_SPI_MspInit+0xb8>)
 800555c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	60bb      	str	r3, [r7, #8]
 8005564:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005566:	230c      	movs	r3, #12
 8005568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800556a:	2302      	movs	r3, #2
 800556c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556e:	2300      	movs	r3, #0
 8005570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005572:	2303      	movs	r3, #3
 8005574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005576:	2305      	movs	r3, #5
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800557a:	f107 0314 	add.w	r3, r7, #20
 800557e:	4619      	mov	r1, r3
 8005580:	480d      	ldr	r0, [pc, #52]	; (80055b8 <HAL_SPI_MspInit+0xbc>)
 8005582:	f7fb fb91 	bl	8000ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800558a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800558c:	2302      	movs	r3, #2
 800558e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005590:	2300      	movs	r3, #0
 8005592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005594:	2303      	movs	r3, #3
 8005596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005598:	2305      	movs	r3, #5
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800559c:	f107 0314 	add.w	r3, r7, #20
 80055a0:	4619      	mov	r1, r3
 80055a2:	4806      	ldr	r0, [pc, #24]	; (80055bc <HAL_SPI_MspInit+0xc0>)
 80055a4:	f7fb fb80 	bl	8000ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80055a8:	bf00      	nop
 80055aa:	3728      	adds	r7, #40	; 0x28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40003800 	.word	0x40003800
 80055b4:	40021000 	.word	0x40021000
 80055b8:	48000800 	.word	0x48000800
 80055bc:	48000400 	.word	0x48000400

080055c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a0a      	ldr	r2, [pc, #40]	; (80055f8 <HAL_TIM_Base_MspInit+0x38>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d10b      	bne.n	80055ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80055d2:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <HAL_TIM_Base_MspInit+0x3c>)
 80055d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d6:	4a09      	ldr	r2, [pc, #36]	; (80055fc <HAL_TIM_Base_MspInit+0x3c>)
 80055d8:	f043 0302 	orr.w	r3, r3, #2
 80055dc:	6593      	str	r3, [r2, #88]	; 0x58
 80055de:	4b07      	ldr	r3, [pc, #28]	; (80055fc <HAL_TIM_Base_MspInit+0x3c>)
 80055e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40000400 	.word	0x40000400
 80055fc:	40021000 	.word	0x40021000

08005600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08a      	sub	sp, #40	; 0x28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005608:	f107 0314 	add.w	r3, r7, #20
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	605a      	str	r2, [r3, #4]
 8005612:	609a      	str	r2, [r3, #8]
 8005614:	60da      	str	r2, [r3, #12]
 8005616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a17      	ldr	r2, [pc, #92]	; (800567c <HAL_UART_MspInit+0x7c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d128      	bne.n	8005674 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005622:	4b17      	ldr	r3, [pc, #92]	; (8005680 <HAL_UART_MspInit+0x80>)
 8005624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005626:	4a16      	ldr	r2, [pc, #88]	; (8005680 <HAL_UART_MspInit+0x80>)
 8005628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800562c:	6593      	str	r3, [r2, #88]	; 0x58
 800562e:	4b14      	ldr	r3, [pc, #80]	; (8005680 <HAL_UART_MspInit+0x80>)
 8005630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800563a:	4b11      	ldr	r3, [pc, #68]	; (8005680 <HAL_UART_MspInit+0x80>)
 800563c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563e:	4a10      	ldr	r2, [pc, #64]	; (8005680 <HAL_UART_MspInit+0x80>)
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005646:	4b0e      	ldr	r3, [pc, #56]	; (8005680 <HAL_UART_MspInit+0x80>)
 8005648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005652:	230c      	movs	r3, #12
 8005654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005656:	2302      	movs	r3, #2
 8005658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565a:	2300      	movs	r3, #0
 800565c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800565e:	2303      	movs	r3, #3
 8005660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005662:	2307      	movs	r3, #7
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005666:	f107 0314 	add.w	r3, r7, #20
 800566a:	4619      	mov	r1, r3
 800566c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005670:	f7fb fb1a 	bl	8000ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005674:	bf00      	nop
 8005676:	3728      	adds	r7, #40	; 0x28
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40004400 	.word	0x40004400
 8005680:	40021000 	.word	0x40021000

08005684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005688:	bf00      	nop
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005692:	b480      	push	{r7}
 8005694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005696:	e7fe      	b.n	8005696 <HardFault_Handler+0x4>

08005698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800569c:	e7fe      	b.n	800569c <MemManage_Handler+0x4>

0800569e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800569e:	b480      	push	{r7}
 80056a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056a2:	e7fe      	b.n	80056a2 <BusFault_Handler+0x4>

080056a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056a8:	e7fe      	b.n	80056a8 <UsageFault_Handler+0x4>

080056aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056aa:	b480      	push	{r7}
 80056ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056ae:	bf00      	nop
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056bc:	bf00      	nop
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056c6:	b480      	push	{r7}
 80056c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056ca:	bf00      	nop
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056d8:	f7fb f994 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056dc:	bf00      	nop
 80056de:	bd80      	pop	{r7, pc}

080056e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80056e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80056e8:	f7fb fc9e 	bl	8001028 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80056ec:	bf00      	nop
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80056f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80056f8:	f7fb fc96 	bl	8001028 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80056fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005700:	f7fb fc92 	bl	8001028 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005704:	bf00      	nop
 8005706:	bd80      	pop	{r7, pc}

08005708 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005714:	2300      	movs	r3, #0
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	e00a      	b.n	8005730 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800571a:	f3af 8000 	nop.w
 800571e:	4601      	mov	r1, r0
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	60ba      	str	r2, [r7, #8]
 8005726:	b2ca      	uxtb	r2, r1
 8005728:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	3301      	adds	r3, #1
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	429a      	cmp	r2, r3
 8005736:	dbf0      	blt.n	800571a <_read+0x12>
	}

return len;
 8005738:	687b      	ldr	r3, [r7, #4]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b086      	sub	sp, #24
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	e009      	b.n	8005768 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	60ba      	str	r2, [r7, #8]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	3301      	adds	r3, #1
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	429a      	cmp	r2, r3
 800576e:	dbf1      	blt.n	8005754 <_write+0x12>
	}
	return len;
 8005770:	687b      	ldr	r3, [r7, #4]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <_close>:

int _close(int file)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
	return -1;
 8005782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005786:	4618      	mov	r0, r3
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057a2:	605a      	str	r2, [r3, #4]
	return 0;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <_isatty>:

int _isatty(int file)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
	return 1;
 80057ba:	2301      	movs	r3, #1
}
 80057bc:	4618      	mov	r0, r3
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
	return 0;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80057ec:	4b11      	ldr	r3, [pc, #68]	; (8005834 <_sbrk+0x50>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d102      	bne.n	80057fa <_sbrk+0x16>
		heap_end = &end;
 80057f4:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <_sbrk+0x50>)
 80057f6:	4a10      	ldr	r2, [pc, #64]	; (8005838 <_sbrk+0x54>)
 80057f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80057fa:	4b0e      	ldr	r3, [pc, #56]	; (8005834 <_sbrk+0x50>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005800:	4b0c      	ldr	r3, [pc, #48]	; (8005834 <_sbrk+0x50>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4413      	add	r3, r2
 8005808:	466a      	mov	r2, sp
 800580a:	4293      	cmp	r3, r2
 800580c:	d907      	bls.n	800581e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800580e:	f000 f875 	bl	80058fc <__errno>
 8005812:	4602      	mov	r2, r0
 8005814:	230c      	movs	r3, #12
 8005816:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005818:	f04f 33ff 	mov.w	r3, #4294967295
 800581c:	e006      	b.n	800582c <_sbrk+0x48>
	}

	heap_end += incr;
 800581e:	4b05      	ldr	r3, [pc, #20]	; (8005834 <_sbrk+0x50>)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4413      	add	r3, r2
 8005826:	4a03      	ldr	r2, [pc, #12]	; (8005834 <_sbrk+0x50>)
 8005828:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800582a:	68fb      	ldr	r3, [r7, #12]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	20000228 	.word	0x20000228
 8005838:	20000240 	.word	0x20000240

0800583c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005840:	4b17      	ldr	r3, [pc, #92]	; (80058a0 <SystemInit+0x64>)
 8005842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005846:	4a16      	ldr	r2, [pc, #88]	; (80058a0 <SystemInit+0x64>)
 8005848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800584c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005850:	4b14      	ldr	r3, [pc, #80]	; (80058a4 <SystemInit+0x68>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a13      	ldr	r2, [pc, #76]	; (80058a4 <SystemInit+0x68>)
 8005856:	f043 0301 	orr.w	r3, r3, #1
 800585a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800585c:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <SystemInit+0x68>)
 800585e:	2200      	movs	r2, #0
 8005860:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005862:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <SystemInit+0x68>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a0f      	ldr	r2, [pc, #60]	; (80058a4 <SystemInit+0x68>)
 8005868:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800586c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005870:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005872:	4b0c      	ldr	r3, [pc, #48]	; (80058a4 <SystemInit+0x68>)
 8005874:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005878:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800587a:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <SystemInit+0x68>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a09      	ldr	r2, [pc, #36]	; (80058a4 <SystemInit+0x68>)
 8005880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005884:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005886:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <SystemInit+0x68>)
 8005888:	2200      	movs	r2, #0
 800588a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800588c:	4b04      	ldr	r3, [pc, #16]	; (80058a0 <SystemInit+0x64>)
 800588e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005892:	609a      	str	r2, [r3, #8]
#endif
}
 8005894:	bf00      	nop
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	e000ed00 	.word	0xe000ed00
 80058a4:	40021000 	.word	0x40021000

080058a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80058a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80058ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80058ae:	e003      	b.n	80058b8 <LoopCopyDataInit>

080058b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80058b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80058b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80058b6:	3104      	adds	r1, #4

080058b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80058b8:	480b      	ldr	r0, [pc, #44]	; (80058e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80058ba:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80058bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80058be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80058c0:	d3f6      	bcc.n	80058b0 <CopyDataInit>
	ldr	r2, =_sbss
 80058c2:	4a0b      	ldr	r2, [pc, #44]	; (80058f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80058c4:	e002      	b.n	80058cc <LoopFillZerobss>

080058c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80058c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80058c8:	f842 3b04 	str.w	r3, [r2], #4

080058cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80058cc:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <LoopForever+0x16>)
	cmp	r2, r3
 80058ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80058d0:	d3f9      	bcc.n	80058c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80058d2:	f7ff ffb3 	bl	800583c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058d6:	f000 f817 	bl	8005908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80058da:	f7ff faf3 	bl	8004ec4 <main>

080058de <LoopForever>:

LoopForever:
    b LoopForever
 80058de:	e7fe      	b.n	80058de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80058e0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80058e4:	08006354 	.word	0x08006354
	ldr	r0, =_sdata
 80058e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80058ec:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80058f0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80058f4:	2000023c 	.word	0x2000023c

080058f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80058f8:	e7fe      	b.n	80058f8 <ADC1_2_IRQHandler>
	...

080058fc <__errno>:
 80058fc:	4b01      	ldr	r3, [pc, #4]	; (8005904 <__errno+0x8>)
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	2000000c 	.word	0x2000000c

08005908 <__libc_init_array>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	4e0d      	ldr	r6, [pc, #52]	; (8005940 <__libc_init_array+0x38>)
 800590c:	4c0d      	ldr	r4, [pc, #52]	; (8005944 <__libc_init_array+0x3c>)
 800590e:	1ba4      	subs	r4, r4, r6
 8005910:	10a4      	asrs	r4, r4, #2
 8005912:	2500      	movs	r5, #0
 8005914:	42a5      	cmp	r5, r4
 8005916:	d109      	bne.n	800592c <__libc_init_array+0x24>
 8005918:	4e0b      	ldr	r6, [pc, #44]	; (8005948 <__libc_init_array+0x40>)
 800591a:	4c0c      	ldr	r4, [pc, #48]	; (800594c <__libc_init_array+0x44>)
 800591c:	f000 fc88 	bl	8006230 <_init>
 8005920:	1ba4      	subs	r4, r4, r6
 8005922:	10a4      	asrs	r4, r4, #2
 8005924:	2500      	movs	r5, #0
 8005926:	42a5      	cmp	r5, r4
 8005928:	d105      	bne.n	8005936 <__libc_init_array+0x2e>
 800592a:	bd70      	pop	{r4, r5, r6, pc}
 800592c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005930:	4798      	blx	r3
 8005932:	3501      	adds	r5, #1
 8005934:	e7ee      	b.n	8005914 <__libc_init_array+0xc>
 8005936:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800593a:	4798      	blx	r3
 800593c:	3501      	adds	r5, #1
 800593e:	e7f2      	b.n	8005926 <__libc_init_array+0x1e>
 8005940:	08006348 	.word	0x08006348
 8005944:	08006348 	.word	0x08006348
 8005948:	08006348 	.word	0x08006348
 800594c:	08006350 	.word	0x08006350

08005950 <memset>:
 8005950:	4402      	add	r2, r0
 8005952:	4603      	mov	r3, r0
 8005954:	4293      	cmp	r3, r2
 8005956:	d100      	bne.n	800595a <memset+0xa>
 8005958:	4770      	bx	lr
 800595a:	f803 1b01 	strb.w	r1, [r3], #1
 800595e:	e7f9      	b.n	8005954 <memset+0x4>

08005960 <_puts_r>:
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	460e      	mov	r6, r1
 8005964:	4605      	mov	r5, r0
 8005966:	b118      	cbz	r0, 8005970 <_puts_r+0x10>
 8005968:	6983      	ldr	r3, [r0, #24]
 800596a:	b90b      	cbnz	r3, 8005970 <_puts_r+0x10>
 800596c:	f000 fa0c 	bl	8005d88 <__sinit>
 8005970:	69ab      	ldr	r3, [r5, #24]
 8005972:	68ac      	ldr	r4, [r5, #8]
 8005974:	b913      	cbnz	r3, 800597c <_puts_r+0x1c>
 8005976:	4628      	mov	r0, r5
 8005978:	f000 fa06 	bl	8005d88 <__sinit>
 800597c:	4b23      	ldr	r3, [pc, #140]	; (8005a0c <_puts_r+0xac>)
 800597e:	429c      	cmp	r4, r3
 8005980:	d117      	bne.n	80059b2 <_puts_r+0x52>
 8005982:	686c      	ldr	r4, [r5, #4]
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	071b      	lsls	r3, r3, #28
 8005988:	d51d      	bpl.n	80059c6 <_puts_r+0x66>
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	b1db      	cbz	r3, 80059c6 <_puts_r+0x66>
 800598e:	3e01      	subs	r6, #1
 8005990:	68a3      	ldr	r3, [r4, #8]
 8005992:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005996:	3b01      	subs	r3, #1
 8005998:	60a3      	str	r3, [r4, #8]
 800599a:	b9e9      	cbnz	r1, 80059d8 <_puts_r+0x78>
 800599c:	2b00      	cmp	r3, #0
 800599e:	da2e      	bge.n	80059fe <_puts_r+0x9e>
 80059a0:	4622      	mov	r2, r4
 80059a2:	210a      	movs	r1, #10
 80059a4:	4628      	mov	r0, r5
 80059a6:	f000 f83f 	bl	8005a28 <__swbuf_r>
 80059aa:	3001      	adds	r0, #1
 80059ac:	d011      	beq.n	80059d2 <_puts_r+0x72>
 80059ae:	200a      	movs	r0, #10
 80059b0:	e011      	b.n	80059d6 <_puts_r+0x76>
 80059b2:	4b17      	ldr	r3, [pc, #92]	; (8005a10 <_puts_r+0xb0>)
 80059b4:	429c      	cmp	r4, r3
 80059b6:	d101      	bne.n	80059bc <_puts_r+0x5c>
 80059b8:	68ac      	ldr	r4, [r5, #8]
 80059ba:	e7e3      	b.n	8005984 <_puts_r+0x24>
 80059bc:	4b15      	ldr	r3, [pc, #84]	; (8005a14 <_puts_r+0xb4>)
 80059be:	429c      	cmp	r4, r3
 80059c0:	bf08      	it	eq
 80059c2:	68ec      	ldreq	r4, [r5, #12]
 80059c4:	e7de      	b.n	8005984 <_puts_r+0x24>
 80059c6:	4621      	mov	r1, r4
 80059c8:	4628      	mov	r0, r5
 80059ca:	f000 f87f 	bl	8005acc <__swsetup_r>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d0dd      	beq.n	800598e <_puts_r+0x2e>
 80059d2:	f04f 30ff 	mov.w	r0, #4294967295
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	2b00      	cmp	r3, #0
 80059da:	da04      	bge.n	80059e6 <_puts_r+0x86>
 80059dc:	69a2      	ldr	r2, [r4, #24]
 80059de:	429a      	cmp	r2, r3
 80059e0:	dc06      	bgt.n	80059f0 <_puts_r+0x90>
 80059e2:	290a      	cmp	r1, #10
 80059e4:	d004      	beq.n	80059f0 <_puts_r+0x90>
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	6022      	str	r2, [r4, #0]
 80059ec:	7019      	strb	r1, [r3, #0]
 80059ee:	e7cf      	b.n	8005990 <_puts_r+0x30>
 80059f0:	4622      	mov	r2, r4
 80059f2:	4628      	mov	r0, r5
 80059f4:	f000 f818 	bl	8005a28 <__swbuf_r>
 80059f8:	3001      	adds	r0, #1
 80059fa:	d1c9      	bne.n	8005990 <_puts_r+0x30>
 80059fc:	e7e9      	b.n	80059d2 <_puts_r+0x72>
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	200a      	movs	r0, #10
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	6022      	str	r2, [r4, #0]
 8005a06:	7018      	strb	r0, [r3, #0]
 8005a08:	e7e5      	b.n	80059d6 <_puts_r+0x76>
 8005a0a:	bf00      	nop
 8005a0c:	08006300 	.word	0x08006300
 8005a10:	08006320 	.word	0x08006320
 8005a14:	080062e0 	.word	0x080062e0

08005a18 <puts>:
 8005a18:	4b02      	ldr	r3, [pc, #8]	; (8005a24 <puts+0xc>)
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	f7ff bf9f 	b.w	8005960 <_puts_r>
 8005a22:	bf00      	nop
 8005a24:	2000000c 	.word	0x2000000c

08005a28 <__swbuf_r>:
 8005a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2a:	460e      	mov	r6, r1
 8005a2c:	4614      	mov	r4, r2
 8005a2e:	4605      	mov	r5, r0
 8005a30:	b118      	cbz	r0, 8005a3a <__swbuf_r+0x12>
 8005a32:	6983      	ldr	r3, [r0, #24]
 8005a34:	b90b      	cbnz	r3, 8005a3a <__swbuf_r+0x12>
 8005a36:	f000 f9a7 	bl	8005d88 <__sinit>
 8005a3a:	4b21      	ldr	r3, [pc, #132]	; (8005ac0 <__swbuf_r+0x98>)
 8005a3c:	429c      	cmp	r4, r3
 8005a3e:	d12a      	bne.n	8005a96 <__swbuf_r+0x6e>
 8005a40:	686c      	ldr	r4, [r5, #4]
 8005a42:	69a3      	ldr	r3, [r4, #24]
 8005a44:	60a3      	str	r3, [r4, #8]
 8005a46:	89a3      	ldrh	r3, [r4, #12]
 8005a48:	071a      	lsls	r2, r3, #28
 8005a4a:	d52e      	bpl.n	8005aaa <__swbuf_r+0x82>
 8005a4c:	6923      	ldr	r3, [r4, #16]
 8005a4e:	b363      	cbz	r3, 8005aaa <__swbuf_r+0x82>
 8005a50:	6923      	ldr	r3, [r4, #16]
 8005a52:	6820      	ldr	r0, [r4, #0]
 8005a54:	1ac0      	subs	r0, r0, r3
 8005a56:	6963      	ldr	r3, [r4, #20]
 8005a58:	b2f6      	uxtb	r6, r6
 8005a5a:	4283      	cmp	r3, r0
 8005a5c:	4637      	mov	r7, r6
 8005a5e:	dc04      	bgt.n	8005a6a <__swbuf_r+0x42>
 8005a60:	4621      	mov	r1, r4
 8005a62:	4628      	mov	r0, r5
 8005a64:	f000 f926 	bl	8005cb4 <_fflush_r>
 8005a68:	bb28      	cbnz	r0, 8005ab6 <__swbuf_r+0x8e>
 8005a6a:	68a3      	ldr	r3, [r4, #8]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	60a3      	str	r3, [r4, #8]
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	6022      	str	r2, [r4, #0]
 8005a76:	701e      	strb	r6, [r3, #0]
 8005a78:	6963      	ldr	r3, [r4, #20]
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	4283      	cmp	r3, r0
 8005a7e:	d004      	beq.n	8005a8a <__swbuf_r+0x62>
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	07db      	lsls	r3, r3, #31
 8005a84:	d519      	bpl.n	8005aba <__swbuf_r+0x92>
 8005a86:	2e0a      	cmp	r6, #10
 8005a88:	d117      	bne.n	8005aba <__swbuf_r+0x92>
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f000 f911 	bl	8005cb4 <_fflush_r>
 8005a92:	b190      	cbz	r0, 8005aba <__swbuf_r+0x92>
 8005a94:	e00f      	b.n	8005ab6 <__swbuf_r+0x8e>
 8005a96:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <__swbuf_r+0x9c>)
 8005a98:	429c      	cmp	r4, r3
 8005a9a:	d101      	bne.n	8005aa0 <__swbuf_r+0x78>
 8005a9c:	68ac      	ldr	r4, [r5, #8]
 8005a9e:	e7d0      	b.n	8005a42 <__swbuf_r+0x1a>
 8005aa0:	4b09      	ldr	r3, [pc, #36]	; (8005ac8 <__swbuf_r+0xa0>)
 8005aa2:	429c      	cmp	r4, r3
 8005aa4:	bf08      	it	eq
 8005aa6:	68ec      	ldreq	r4, [r5, #12]
 8005aa8:	e7cb      	b.n	8005a42 <__swbuf_r+0x1a>
 8005aaa:	4621      	mov	r1, r4
 8005aac:	4628      	mov	r0, r5
 8005aae:	f000 f80d 	bl	8005acc <__swsetup_r>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d0cc      	beq.n	8005a50 <__swbuf_r+0x28>
 8005ab6:	f04f 37ff 	mov.w	r7, #4294967295
 8005aba:	4638      	mov	r0, r7
 8005abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	08006300 	.word	0x08006300
 8005ac4:	08006320 	.word	0x08006320
 8005ac8:	080062e0 	.word	0x080062e0

08005acc <__swsetup_r>:
 8005acc:	4b32      	ldr	r3, [pc, #200]	; (8005b98 <__swsetup_r+0xcc>)
 8005ace:	b570      	push	{r4, r5, r6, lr}
 8005ad0:	681d      	ldr	r5, [r3, #0]
 8005ad2:	4606      	mov	r6, r0
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	b125      	cbz	r5, 8005ae2 <__swsetup_r+0x16>
 8005ad8:	69ab      	ldr	r3, [r5, #24]
 8005ada:	b913      	cbnz	r3, 8005ae2 <__swsetup_r+0x16>
 8005adc:	4628      	mov	r0, r5
 8005ade:	f000 f953 	bl	8005d88 <__sinit>
 8005ae2:	4b2e      	ldr	r3, [pc, #184]	; (8005b9c <__swsetup_r+0xd0>)
 8005ae4:	429c      	cmp	r4, r3
 8005ae6:	d10f      	bne.n	8005b08 <__swsetup_r+0x3c>
 8005ae8:	686c      	ldr	r4, [r5, #4]
 8005aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	0715      	lsls	r5, r2, #28
 8005af2:	d42c      	bmi.n	8005b4e <__swsetup_r+0x82>
 8005af4:	06d0      	lsls	r0, r2, #27
 8005af6:	d411      	bmi.n	8005b1c <__swsetup_r+0x50>
 8005af8:	2209      	movs	r2, #9
 8005afa:	6032      	str	r2, [r6, #0]
 8005afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b00:	81a3      	strh	r3, [r4, #12]
 8005b02:	f04f 30ff 	mov.w	r0, #4294967295
 8005b06:	e03e      	b.n	8005b86 <__swsetup_r+0xba>
 8005b08:	4b25      	ldr	r3, [pc, #148]	; (8005ba0 <__swsetup_r+0xd4>)
 8005b0a:	429c      	cmp	r4, r3
 8005b0c:	d101      	bne.n	8005b12 <__swsetup_r+0x46>
 8005b0e:	68ac      	ldr	r4, [r5, #8]
 8005b10:	e7eb      	b.n	8005aea <__swsetup_r+0x1e>
 8005b12:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <__swsetup_r+0xd8>)
 8005b14:	429c      	cmp	r4, r3
 8005b16:	bf08      	it	eq
 8005b18:	68ec      	ldreq	r4, [r5, #12]
 8005b1a:	e7e6      	b.n	8005aea <__swsetup_r+0x1e>
 8005b1c:	0751      	lsls	r1, r2, #29
 8005b1e:	d512      	bpl.n	8005b46 <__swsetup_r+0x7a>
 8005b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b22:	b141      	cbz	r1, 8005b36 <__swsetup_r+0x6a>
 8005b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b28:	4299      	cmp	r1, r3
 8005b2a:	d002      	beq.n	8005b32 <__swsetup_r+0x66>
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	f000 fa19 	bl	8005f64 <_free_r>
 8005b32:	2300      	movs	r3, #0
 8005b34:	6363      	str	r3, [r4, #52]	; 0x34
 8005b36:	89a3      	ldrh	r3, [r4, #12]
 8005b38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b3c:	81a3      	strh	r3, [r4, #12]
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6063      	str	r3, [r4, #4]
 8005b42:	6923      	ldr	r3, [r4, #16]
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	f043 0308 	orr.w	r3, r3, #8
 8005b4c:	81a3      	strh	r3, [r4, #12]
 8005b4e:	6923      	ldr	r3, [r4, #16]
 8005b50:	b94b      	cbnz	r3, 8005b66 <__swsetup_r+0x9a>
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b5c:	d003      	beq.n	8005b66 <__swsetup_r+0x9a>
 8005b5e:	4621      	mov	r1, r4
 8005b60:	4630      	mov	r0, r6
 8005b62:	f000 f9bf 	bl	8005ee4 <__smakebuf_r>
 8005b66:	89a2      	ldrh	r2, [r4, #12]
 8005b68:	f012 0301 	ands.w	r3, r2, #1
 8005b6c:	d00c      	beq.n	8005b88 <__swsetup_r+0xbc>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60a3      	str	r3, [r4, #8]
 8005b72:	6963      	ldr	r3, [r4, #20]
 8005b74:	425b      	negs	r3, r3
 8005b76:	61a3      	str	r3, [r4, #24]
 8005b78:	6923      	ldr	r3, [r4, #16]
 8005b7a:	b953      	cbnz	r3, 8005b92 <__swsetup_r+0xc6>
 8005b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b80:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005b84:	d1ba      	bne.n	8005afc <__swsetup_r+0x30>
 8005b86:	bd70      	pop	{r4, r5, r6, pc}
 8005b88:	0792      	lsls	r2, r2, #30
 8005b8a:	bf58      	it	pl
 8005b8c:	6963      	ldrpl	r3, [r4, #20]
 8005b8e:	60a3      	str	r3, [r4, #8]
 8005b90:	e7f2      	b.n	8005b78 <__swsetup_r+0xac>
 8005b92:	2000      	movs	r0, #0
 8005b94:	e7f7      	b.n	8005b86 <__swsetup_r+0xba>
 8005b96:	bf00      	nop
 8005b98:	2000000c 	.word	0x2000000c
 8005b9c:	08006300 	.word	0x08006300
 8005ba0:	08006320 	.word	0x08006320
 8005ba4:	080062e0 	.word	0x080062e0

08005ba8 <__sflush_r>:
 8005ba8:	898a      	ldrh	r2, [r1, #12]
 8005baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bae:	4605      	mov	r5, r0
 8005bb0:	0710      	lsls	r0, r2, #28
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	d458      	bmi.n	8005c68 <__sflush_r+0xc0>
 8005bb6:	684b      	ldr	r3, [r1, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	dc05      	bgt.n	8005bc8 <__sflush_r+0x20>
 8005bbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	dc02      	bgt.n	8005bc8 <__sflush_r+0x20>
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bca:	2e00      	cmp	r6, #0
 8005bcc:	d0f9      	beq.n	8005bc2 <__sflush_r+0x1a>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bd4:	682f      	ldr	r7, [r5, #0]
 8005bd6:	6a21      	ldr	r1, [r4, #32]
 8005bd8:	602b      	str	r3, [r5, #0]
 8005bda:	d032      	beq.n	8005c42 <__sflush_r+0x9a>
 8005bdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	075a      	lsls	r2, r3, #29
 8005be2:	d505      	bpl.n	8005bf0 <__sflush_r+0x48>
 8005be4:	6863      	ldr	r3, [r4, #4]
 8005be6:	1ac0      	subs	r0, r0, r3
 8005be8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bea:	b10b      	cbz	r3, 8005bf0 <__sflush_r+0x48>
 8005bec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bee:	1ac0      	subs	r0, r0, r3
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bf6:	6a21      	ldr	r1, [r4, #32]
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	47b0      	blx	r6
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	89a3      	ldrh	r3, [r4, #12]
 8005c00:	d106      	bne.n	8005c10 <__sflush_r+0x68>
 8005c02:	6829      	ldr	r1, [r5, #0]
 8005c04:	291d      	cmp	r1, #29
 8005c06:	d848      	bhi.n	8005c9a <__sflush_r+0xf2>
 8005c08:	4a29      	ldr	r2, [pc, #164]	; (8005cb0 <__sflush_r+0x108>)
 8005c0a:	40ca      	lsrs	r2, r1
 8005c0c:	07d6      	lsls	r6, r2, #31
 8005c0e:	d544      	bpl.n	8005c9a <__sflush_r+0xf2>
 8005c10:	2200      	movs	r2, #0
 8005c12:	6062      	str	r2, [r4, #4]
 8005c14:	04d9      	lsls	r1, r3, #19
 8005c16:	6922      	ldr	r2, [r4, #16]
 8005c18:	6022      	str	r2, [r4, #0]
 8005c1a:	d504      	bpl.n	8005c26 <__sflush_r+0x7e>
 8005c1c:	1c42      	adds	r2, r0, #1
 8005c1e:	d101      	bne.n	8005c24 <__sflush_r+0x7c>
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	b903      	cbnz	r3, 8005c26 <__sflush_r+0x7e>
 8005c24:	6560      	str	r0, [r4, #84]	; 0x54
 8005c26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c28:	602f      	str	r7, [r5, #0]
 8005c2a:	2900      	cmp	r1, #0
 8005c2c:	d0c9      	beq.n	8005bc2 <__sflush_r+0x1a>
 8005c2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c32:	4299      	cmp	r1, r3
 8005c34:	d002      	beq.n	8005c3c <__sflush_r+0x94>
 8005c36:	4628      	mov	r0, r5
 8005c38:	f000 f994 	bl	8005f64 <_free_r>
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	6360      	str	r0, [r4, #52]	; 0x34
 8005c40:	e7c0      	b.n	8005bc4 <__sflush_r+0x1c>
 8005c42:	2301      	movs	r3, #1
 8005c44:	4628      	mov	r0, r5
 8005c46:	47b0      	blx	r6
 8005c48:	1c41      	adds	r1, r0, #1
 8005c4a:	d1c8      	bne.n	8005bde <__sflush_r+0x36>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0c5      	beq.n	8005bde <__sflush_r+0x36>
 8005c52:	2b1d      	cmp	r3, #29
 8005c54:	d001      	beq.n	8005c5a <__sflush_r+0xb2>
 8005c56:	2b16      	cmp	r3, #22
 8005c58:	d101      	bne.n	8005c5e <__sflush_r+0xb6>
 8005c5a:	602f      	str	r7, [r5, #0]
 8005c5c:	e7b1      	b.n	8005bc2 <__sflush_r+0x1a>
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c64:	81a3      	strh	r3, [r4, #12]
 8005c66:	e7ad      	b.n	8005bc4 <__sflush_r+0x1c>
 8005c68:	690f      	ldr	r7, [r1, #16]
 8005c6a:	2f00      	cmp	r7, #0
 8005c6c:	d0a9      	beq.n	8005bc2 <__sflush_r+0x1a>
 8005c6e:	0793      	lsls	r3, r2, #30
 8005c70:	680e      	ldr	r6, [r1, #0]
 8005c72:	bf08      	it	eq
 8005c74:	694b      	ldreq	r3, [r1, #20]
 8005c76:	600f      	str	r7, [r1, #0]
 8005c78:	bf18      	it	ne
 8005c7a:	2300      	movne	r3, #0
 8005c7c:	eba6 0807 	sub.w	r8, r6, r7
 8005c80:	608b      	str	r3, [r1, #8]
 8005c82:	f1b8 0f00 	cmp.w	r8, #0
 8005c86:	dd9c      	ble.n	8005bc2 <__sflush_r+0x1a>
 8005c88:	4643      	mov	r3, r8
 8005c8a:	463a      	mov	r2, r7
 8005c8c:	6a21      	ldr	r1, [r4, #32]
 8005c8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c90:	4628      	mov	r0, r5
 8005c92:	47b0      	blx	r6
 8005c94:	2800      	cmp	r0, #0
 8005c96:	dc06      	bgt.n	8005ca6 <__sflush_r+0xfe>
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c9e:	81a3      	strh	r3, [r4, #12]
 8005ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca4:	e78e      	b.n	8005bc4 <__sflush_r+0x1c>
 8005ca6:	4407      	add	r7, r0
 8005ca8:	eba8 0800 	sub.w	r8, r8, r0
 8005cac:	e7e9      	b.n	8005c82 <__sflush_r+0xda>
 8005cae:	bf00      	nop
 8005cb0:	20400001 	.word	0x20400001

08005cb4 <_fflush_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	690b      	ldr	r3, [r1, #16]
 8005cb8:	4605      	mov	r5, r0
 8005cba:	460c      	mov	r4, r1
 8005cbc:	b1db      	cbz	r3, 8005cf6 <_fflush_r+0x42>
 8005cbe:	b118      	cbz	r0, 8005cc8 <_fflush_r+0x14>
 8005cc0:	6983      	ldr	r3, [r0, #24]
 8005cc2:	b90b      	cbnz	r3, 8005cc8 <_fflush_r+0x14>
 8005cc4:	f000 f860 	bl	8005d88 <__sinit>
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <_fflush_r+0x48>)
 8005cca:	429c      	cmp	r4, r3
 8005ccc:	d109      	bne.n	8005ce2 <_fflush_r+0x2e>
 8005cce:	686c      	ldr	r4, [r5, #4]
 8005cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cd4:	b17b      	cbz	r3, 8005cf6 <_fflush_r+0x42>
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	4628      	mov	r0, r5
 8005cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cde:	f7ff bf63 	b.w	8005ba8 <__sflush_r>
 8005ce2:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <_fflush_r+0x4c>)
 8005ce4:	429c      	cmp	r4, r3
 8005ce6:	d101      	bne.n	8005cec <_fflush_r+0x38>
 8005ce8:	68ac      	ldr	r4, [r5, #8]
 8005cea:	e7f1      	b.n	8005cd0 <_fflush_r+0x1c>
 8005cec:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <_fflush_r+0x50>)
 8005cee:	429c      	cmp	r4, r3
 8005cf0:	bf08      	it	eq
 8005cf2:	68ec      	ldreq	r4, [r5, #12]
 8005cf4:	e7ec      	b.n	8005cd0 <_fflush_r+0x1c>
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	bd38      	pop	{r3, r4, r5, pc}
 8005cfa:	bf00      	nop
 8005cfc:	08006300 	.word	0x08006300
 8005d00:	08006320 	.word	0x08006320
 8005d04:	080062e0 	.word	0x080062e0

08005d08 <std>:
 8005d08:	2300      	movs	r3, #0
 8005d0a:	b510      	push	{r4, lr}
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d12:	6083      	str	r3, [r0, #8]
 8005d14:	8181      	strh	r1, [r0, #12]
 8005d16:	6643      	str	r3, [r0, #100]	; 0x64
 8005d18:	81c2      	strh	r2, [r0, #14]
 8005d1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d1e:	6183      	str	r3, [r0, #24]
 8005d20:	4619      	mov	r1, r3
 8005d22:	2208      	movs	r2, #8
 8005d24:	305c      	adds	r0, #92	; 0x5c
 8005d26:	f7ff fe13 	bl	8005950 <memset>
 8005d2a:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <std+0x38>)
 8005d2c:	6263      	str	r3, [r4, #36]	; 0x24
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <std+0x3c>)
 8005d30:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <std+0x40>)
 8005d34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d36:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <std+0x44>)
 8005d38:	6224      	str	r4, [r4, #32]
 8005d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8005d3c:	bd10      	pop	{r4, pc}
 8005d3e:	bf00      	nop
 8005d40:	080060d5 	.word	0x080060d5
 8005d44:	080060f7 	.word	0x080060f7
 8005d48:	0800612f 	.word	0x0800612f
 8005d4c:	08006153 	.word	0x08006153

08005d50 <_cleanup_r>:
 8005d50:	4901      	ldr	r1, [pc, #4]	; (8005d58 <_cleanup_r+0x8>)
 8005d52:	f000 b885 	b.w	8005e60 <_fwalk_reent>
 8005d56:	bf00      	nop
 8005d58:	08005cb5 	.word	0x08005cb5

08005d5c <__sfmoreglue>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	1e4a      	subs	r2, r1, #1
 8005d60:	2568      	movs	r5, #104	; 0x68
 8005d62:	4355      	muls	r5, r2
 8005d64:	460e      	mov	r6, r1
 8005d66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d6a:	f000 f949 	bl	8006000 <_malloc_r>
 8005d6e:	4604      	mov	r4, r0
 8005d70:	b140      	cbz	r0, 8005d84 <__sfmoreglue+0x28>
 8005d72:	2100      	movs	r1, #0
 8005d74:	e9c0 1600 	strd	r1, r6, [r0]
 8005d78:	300c      	adds	r0, #12
 8005d7a:	60a0      	str	r0, [r4, #8]
 8005d7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d80:	f7ff fde6 	bl	8005950 <memset>
 8005d84:	4620      	mov	r0, r4
 8005d86:	bd70      	pop	{r4, r5, r6, pc}

08005d88 <__sinit>:
 8005d88:	6983      	ldr	r3, [r0, #24]
 8005d8a:	b510      	push	{r4, lr}
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	bb33      	cbnz	r3, 8005dde <__sinit+0x56>
 8005d90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005d94:	6503      	str	r3, [r0, #80]	; 0x50
 8005d96:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <__sinit+0x58>)
 8005d98:	4a12      	ldr	r2, [pc, #72]	; (8005de4 <__sinit+0x5c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6282      	str	r2, [r0, #40]	; 0x28
 8005d9e:	4298      	cmp	r0, r3
 8005da0:	bf04      	itt	eq
 8005da2:	2301      	moveq	r3, #1
 8005da4:	6183      	streq	r3, [r0, #24]
 8005da6:	f000 f81f 	bl	8005de8 <__sfp>
 8005daa:	6060      	str	r0, [r4, #4]
 8005dac:	4620      	mov	r0, r4
 8005dae:	f000 f81b 	bl	8005de8 <__sfp>
 8005db2:	60a0      	str	r0, [r4, #8]
 8005db4:	4620      	mov	r0, r4
 8005db6:	f000 f817 	bl	8005de8 <__sfp>
 8005dba:	2200      	movs	r2, #0
 8005dbc:	60e0      	str	r0, [r4, #12]
 8005dbe:	2104      	movs	r1, #4
 8005dc0:	6860      	ldr	r0, [r4, #4]
 8005dc2:	f7ff ffa1 	bl	8005d08 <std>
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	2109      	movs	r1, #9
 8005dca:	68a0      	ldr	r0, [r4, #8]
 8005dcc:	f7ff ff9c 	bl	8005d08 <std>
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	2112      	movs	r1, #18
 8005dd4:	68e0      	ldr	r0, [r4, #12]
 8005dd6:	f7ff ff97 	bl	8005d08 <std>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	61a3      	str	r3, [r4, #24]
 8005dde:	bd10      	pop	{r4, pc}
 8005de0:	080062dc 	.word	0x080062dc
 8005de4:	08005d51 	.word	0x08005d51

08005de8 <__sfp>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	4b1b      	ldr	r3, [pc, #108]	; (8005e58 <__sfp+0x70>)
 8005dec:	681e      	ldr	r6, [r3, #0]
 8005dee:	69b3      	ldr	r3, [r6, #24]
 8005df0:	4607      	mov	r7, r0
 8005df2:	b913      	cbnz	r3, 8005dfa <__sfp+0x12>
 8005df4:	4630      	mov	r0, r6
 8005df6:	f7ff ffc7 	bl	8005d88 <__sinit>
 8005dfa:	3648      	adds	r6, #72	; 0x48
 8005dfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	d503      	bpl.n	8005e0c <__sfp+0x24>
 8005e04:	6833      	ldr	r3, [r6, #0]
 8005e06:	b133      	cbz	r3, 8005e16 <__sfp+0x2e>
 8005e08:	6836      	ldr	r6, [r6, #0]
 8005e0a:	e7f7      	b.n	8005dfc <__sfp+0x14>
 8005e0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e10:	b16d      	cbz	r5, 8005e2e <__sfp+0x46>
 8005e12:	3468      	adds	r4, #104	; 0x68
 8005e14:	e7f4      	b.n	8005e00 <__sfp+0x18>
 8005e16:	2104      	movs	r1, #4
 8005e18:	4638      	mov	r0, r7
 8005e1a:	f7ff ff9f 	bl	8005d5c <__sfmoreglue>
 8005e1e:	6030      	str	r0, [r6, #0]
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d1f1      	bne.n	8005e08 <__sfp+0x20>
 8005e24:	230c      	movs	r3, #12
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	4604      	mov	r4, r0
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e2e:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <__sfp+0x74>)
 8005e30:	6665      	str	r5, [r4, #100]	; 0x64
 8005e32:	e9c4 5500 	strd	r5, r5, [r4]
 8005e36:	60a5      	str	r5, [r4, #8]
 8005e38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005e3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005e40:	2208      	movs	r2, #8
 8005e42:	4629      	mov	r1, r5
 8005e44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e48:	f7ff fd82 	bl	8005950 <memset>
 8005e4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e54:	e7e9      	b.n	8005e2a <__sfp+0x42>
 8005e56:	bf00      	nop
 8005e58:	080062dc 	.word	0x080062dc
 8005e5c:	ffff0001 	.word	0xffff0001

08005e60 <_fwalk_reent>:
 8005e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e64:	4680      	mov	r8, r0
 8005e66:	4689      	mov	r9, r1
 8005e68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e6c:	2600      	movs	r6, #0
 8005e6e:	b914      	cbnz	r4, 8005e76 <_fwalk_reent+0x16>
 8005e70:	4630      	mov	r0, r6
 8005e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005e7a:	3f01      	subs	r7, #1
 8005e7c:	d501      	bpl.n	8005e82 <_fwalk_reent+0x22>
 8005e7e:	6824      	ldr	r4, [r4, #0]
 8005e80:	e7f5      	b.n	8005e6e <_fwalk_reent+0xe>
 8005e82:	89ab      	ldrh	r3, [r5, #12]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d907      	bls.n	8005e98 <_fwalk_reent+0x38>
 8005e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	d003      	beq.n	8005e98 <_fwalk_reent+0x38>
 8005e90:	4629      	mov	r1, r5
 8005e92:	4640      	mov	r0, r8
 8005e94:	47c8      	blx	r9
 8005e96:	4306      	orrs	r6, r0
 8005e98:	3568      	adds	r5, #104	; 0x68
 8005e9a:	e7ee      	b.n	8005e7a <_fwalk_reent+0x1a>

08005e9c <__swhatbuf_r>:
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	460e      	mov	r6, r1
 8005ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea4:	2900      	cmp	r1, #0
 8005ea6:	b096      	sub	sp, #88	; 0x58
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	461d      	mov	r5, r3
 8005eac:	da07      	bge.n	8005ebe <__swhatbuf_r+0x22>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	602b      	str	r3, [r5, #0]
 8005eb2:	89b3      	ldrh	r3, [r6, #12]
 8005eb4:	061a      	lsls	r2, r3, #24
 8005eb6:	d410      	bmi.n	8005eda <__swhatbuf_r+0x3e>
 8005eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ebc:	e00e      	b.n	8005edc <__swhatbuf_r+0x40>
 8005ebe:	466a      	mov	r2, sp
 8005ec0:	f000 f96e 	bl	80061a0 <_fstat_r>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	dbf2      	blt.n	8005eae <__swhatbuf_r+0x12>
 8005ec8:	9a01      	ldr	r2, [sp, #4]
 8005eca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ece:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ed2:	425a      	negs	r2, r3
 8005ed4:	415a      	adcs	r2, r3
 8005ed6:	602a      	str	r2, [r5, #0]
 8005ed8:	e7ee      	b.n	8005eb8 <__swhatbuf_r+0x1c>
 8005eda:	2340      	movs	r3, #64	; 0x40
 8005edc:	2000      	movs	r0, #0
 8005ede:	6023      	str	r3, [r4, #0]
 8005ee0:	b016      	add	sp, #88	; 0x58
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}

08005ee4 <__smakebuf_r>:
 8005ee4:	898b      	ldrh	r3, [r1, #12]
 8005ee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ee8:	079d      	lsls	r5, r3, #30
 8005eea:	4606      	mov	r6, r0
 8005eec:	460c      	mov	r4, r1
 8005eee:	d507      	bpl.n	8005f00 <__smakebuf_r+0x1c>
 8005ef0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	6123      	str	r3, [r4, #16]
 8005ef8:	2301      	movs	r3, #1
 8005efa:	6163      	str	r3, [r4, #20]
 8005efc:	b002      	add	sp, #8
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	ab01      	add	r3, sp, #4
 8005f02:	466a      	mov	r2, sp
 8005f04:	f7ff ffca 	bl	8005e9c <__swhatbuf_r>
 8005f08:	9900      	ldr	r1, [sp, #0]
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f000 f877 	bl	8006000 <_malloc_r>
 8005f12:	b948      	cbnz	r0, 8005f28 <__smakebuf_r+0x44>
 8005f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f18:	059a      	lsls	r2, r3, #22
 8005f1a:	d4ef      	bmi.n	8005efc <__smakebuf_r+0x18>
 8005f1c:	f023 0303 	bic.w	r3, r3, #3
 8005f20:	f043 0302 	orr.w	r3, r3, #2
 8005f24:	81a3      	strh	r3, [r4, #12]
 8005f26:	e7e3      	b.n	8005ef0 <__smakebuf_r+0xc>
 8005f28:	4b0d      	ldr	r3, [pc, #52]	; (8005f60 <__smakebuf_r+0x7c>)
 8005f2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	6020      	str	r0, [r4, #0]
 8005f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f34:	81a3      	strh	r3, [r4, #12]
 8005f36:	9b00      	ldr	r3, [sp, #0]
 8005f38:	6163      	str	r3, [r4, #20]
 8005f3a:	9b01      	ldr	r3, [sp, #4]
 8005f3c:	6120      	str	r0, [r4, #16]
 8005f3e:	b15b      	cbz	r3, 8005f58 <__smakebuf_r+0x74>
 8005f40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f44:	4630      	mov	r0, r6
 8005f46:	f000 f93d 	bl	80061c4 <_isatty_r>
 8005f4a:	b128      	cbz	r0, 8005f58 <__smakebuf_r+0x74>
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	81a3      	strh	r3, [r4, #12]
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	431d      	orrs	r5, r3
 8005f5c:	81a5      	strh	r5, [r4, #12]
 8005f5e:	e7cd      	b.n	8005efc <__smakebuf_r+0x18>
 8005f60:	08005d51 	.word	0x08005d51

08005f64 <_free_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4605      	mov	r5, r0
 8005f68:	2900      	cmp	r1, #0
 8005f6a:	d045      	beq.n	8005ff8 <_free_r+0x94>
 8005f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f70:	1f0c      	subs	r4, r1, #4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	bfb8      	it	lt
 8005f76:	18e4      	addlt	r4, r4, r3
 8005f78:	f000 f946 	bl	8006208 <__malloc_lock>
 8005f7c:	4a1f      	ldr	r2, [pc, #124]	; (8005ffc <_free_r+0x98>)
 8005f7e:	6813      	ldr	r3, [r2, #0]
 8005f80:	4610      	mov	r0, r2
 8005f82:	b933      	cbnz	r3, 8005f92 <_free_r+0x2e>
 8005f84:	6063      	str	r3, [r4, #4]
 8005f86:	6014      	str	r4, [r2, #0]
 8005f88:	4628      	mov	r0, r5
 8005f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f8e:	f000 b93c 	b.w	800620a <__malloc_unlock>
 8005f92:	42a3      	cmp	r3, r4
 8005f94:	d90c      	bls.n	8005fb0 <_free_r+0x4c>
 8005f96:	6821      	ldr	r1, [r4, #0]
 8005f98:	1862      	adds	r2, r4, r1
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	bf04      	itt	eq
 8005f9e:	681a      	ldreq	r2, [r3, #0]
 8005fa0:	685b      	ldreq	r3, [r3, #4]
 8005fa2:	6063      	str	r3, [r4, #4]
 8005fa4:	bf04      	itt	eq
 8005fa6:	1852      	addeq	r2, r2, r1
 8005fa8:	6022      	streq	r2, [r4, #0]
 8005faa:	6004      	str	r4, [r0, #0]
 8005fac:	e7ec      	b.n	8005f88 <_free_r+0x24>
 8005fae:	4613      	mov	r3, r2
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	b10a      	cbz	r2, 8005fb8 <_free_r+0x54>
 8005fb4:	42a2      	cmp	r2, r4
 8005fb6:	d9fa      	bls.n	8005fae <_free_r+0x4a>
 8005fb8:	6819      	ldr	r1, [r3, #0]
 8005fba:	1858      	adds	r0, r3, r1
 8005fbc:	42a0      	cmp	r0, r4
 8005fbe:	d10b      	bne.n	8005fd8 <_free_r+0x74>
 8005fc0:	6820      	ldr	r0, [r4, #0]
 8005fc2:	4401      	add	r1, r0
 8005fc4:	1858      	adds	r0, r3, r1
 8005fc6:	4282      	cmp	r2, r0
 8005fc8:	6019      	str	r1, [r3, #0]
 8005fca:	d1dd      	bne.n	8005f88 <_free_r+0x24>
 8005fcc:	6810      	ldr	r0, [r2, #0]
 8005fce:	6852      	ldr	r2, [r2, #4]
 8005fd0:	605a      	str	r2, [r3, #4]
 8005fd2:	4401      	add	r1, r0
 8005fd4:	6019      	str	r1, [r3, #0]
 8005fd6:	e7d7      	b.n	8005f88 <_free_r+0x24>
 8005fd8:	d902      	bls.n	8005fe0 <_free_r+0x7c>
 8005fda:	230c      	movs	r3, #12
 8005fdc:	602b      	str	r3, [r5, #0]
 8005fde:	e7d3      	b.n	8005f88 <_free_r+0x24>
 8005fe0:	6820      	ldr	r0, [r4, #0]
 8005fe2:	1821      	adds	r1, r4, r0
 8005fe4:	428a      	cmp	r2, r1
 8005fe6:	bf04      	itt	eq
 8005fe8:	6811      	ldreq	r1, [r2, #0]
 8005fea:	6852      	ldreq	r2, [r2, #4]
 8005fec:	6062      	str	r2, [r4, #4]
 8005fee:	bf04      	itt	eq
 8005ff0:	1809      	addeq	r1, r1, r0
 8005ff2:	6021      	streq	r1, [r4, #0]
 8005ff4:	605c      	str	r4, [r3, #4]
 8005ff6:	e7c7      	b.n	8005f88 <_free_r+0x24>
 8005ff8:	bd38      	pop	{r3, r4, r5, pc}
 8005ffa:	bf00      	nop
 8005ffc:	2000022c 	.word	0x2000022c

08006000 <_malloc_r>:
 8006000:	b570      	push	{r4, r5, r6, lr}
 8006002:	1ccd      	adds	r5, r1, #3
 8006004:	f025 0503 	bic.w	r5, r5, #3
 8006008:	3508      	adds	r5, #8
 800600a:	2d0c      	cmp	r5, #12
 800600c:	bf38      	it	cc
 800600e:	250c      	movcc	r5, #12
 8006010:	2d00      	cmp	r5, #0
 8006012:	4606      	mov	r6, r0
 8006014:	db01      	blt.n	800601a <_malloc_r+0x1a>
 8006016:	42a9      	cmp	r1, r5
 8006018:	d903      	bls.n	8006022 <_malloc_r+0x22>
 800601a:	230c      	movs	r3, #12
 800601c:	6033      	str	r3, [r6, #0]
 800601e:	2000      	movs	r0, #0
 8006020:	bd70      	pop	{r4, r5, r6, pc}
 8006022:	f000 f8f1 	bl	8006208 <__malloc_lock>
 8006026:	4a21      	ldr	r2, [pc, #132]	; (80060ac <_malloc_r+0xac>)
 8006028:	6814      	ldr	r4, [r2, #0]
 800602a:	4621      	mov	r1, r4
 800602c:	b991      	cbnz	r1, 8006054 <_malloc_r+0x54>
 800602e:	4c20      	ldr	r4, [pc, #128]	; (80060b0 <_malloc_r+0xb0>)
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	b91b      	cbnz	r3, 800603c <_malloc_r+0x3c>
 8006034:	4630      	mov	r0, r6
 8006036:	f000 f83d 	bl	80060b4 <_sbrk_r>
 800603a:	6020      	str	r0, [r4, #0]
 800603c:	4629      	mov	r1, r5
 800603e:	4630      	mov	r0, r6
 8006040:	f000 f838 	bl	80060b4 <_sbrk_r>
 8006044:	1c43      	adds	r3, r0, #1
 8006046:	d124      	bne.n	8006092 <_malloc_r+0x92>
 8006048:	230c      	movs	r3, #12
 800604a:	6033      	str	r3, [r6, #0]
 800604c:	4630      	mov	r0, r6
 800604e:	f000 f8dc 	bl	800620a <__malloc_unlock>
 8006052:	e7e4      	b.n	800601e <_malloc_r+0x1e>
 8006054:	680b      	ldr	r3, [r1, #0]
 8006056:	1b5b      	subs	r3, r3, r5
 8006058:	d418      	bmi.n	800608c <_malloc_r+0x8c>
 800605a:	2b0b      	cmp	r3, #11
 800605c:	d90f      	bls.n	800607e <_malloc_r+0x7e>
 800605e:	600b      	str	r3, [r1, #0]
 8006060:	50cd      	str	r5, [r1, r3]
 8006062:	18cc      	adds	r4, r1, r3
 8006064:	4630      	mov	r0, r6
 8006066:	f000 f8d0 	bl	800620a <__malloc_unlock>
 800606a:	f104 000b 	add.w	r0, r4, #11
 800606e:	1d23      	adds	r3, r4, #4
 8006070:	f020 0007 	bic.w	r0, r0, #7
 8006074:	1ac3      	subs	r3, r0, r3
 8006076:	d0d3      	beq.n	8006020 <_malloc_r+0x20>
 8006078:	425a      	negs	r2, r3
 800607a:	50e2      	str	r2, [r4, r3]
 800607c:	e7d0      	b.n	8006020 <_malloc_r+0x20>
 800607e:	428c      	cmp	r4, r1
 8006080:	684b      	ldr	r3, [r1, #4]
 8006082:	bf16      	itet	ne
 8006084:	6063      	strne	r3, [r4, #4]
 8006086:	6013      	streq	r3, [r2, #0]
 8006088:	460c      	movne	r4, r1
 800608a:	e7eb      	b.n	8006064 <_malloc_r+0x64>
 800608c:	460c      	mov	r4, r1
 800608e:	6849      	ldr	r1, [r1, #4]
 8006090:	e7cc      	b.n	800602c <_malloc_r+0x2c>
 8006092:	1cc4      	adds	r4, r0, #3
 8006094:	f024 0403 	bic.w	r4, r4, #3
 8006098:	42a0      	cmp	r0, r4
 800609a:	d005      	beq.n	80060a8 <_malloc_r+0xa8>
 800609c:	1a21      	subs	r1, r4, r0
 800609e:	4630      	mov	r0, r6
 80060a0:	f000 f808 	bl	80060b4 <_sbrk_r>
 80060a4:	3001      	adds	r0, #1
 80060a6:	d0cf      	beq.n	8006048 <_malloc_r+0x48>
 80060a8:	6025      	str	r5, [r4, #0]
 80060aa:	e7db      	b.n	8006064 <_malloc_r+0x64>
 80060ac:	2000022c 	.word	0x2000022c
 80060b0:	20000230 	.word	0x20000230

080060b4 <_sbrk_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4c06      	ldr	r4, [pc, #24]	; (80060d0 <_sbrk_r+0x1c>)
 80060b8:	2300      	movs	r3, #0
 80060ba:	4605      	mov	r5, r0
 80060bc:	4608      	mov	r0, r1
 80060be:	6023      	str	r3, [r4, #0]
 80060c0:	f7ff fb90 	bl	80057e4 <_sbrk>
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d102      	bne.n	80060ce <_sbrk_r+0x1a>
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	b103      	cbz	r3, 80060ce <_sbrk_r+0x1a>
 80060cc:	602b      	str	r3, [r5, #0]
 80060ce:	bd38      	pop	{r3, r4, r5, pc}
 80060d0:	20000238 	.word	0x20000238

080060d4 <__sread>:
 80060d4:	b510      	push	{r4, lr}
 80060d6:	460c      	mov	r4, r1
 80060d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060dc:	f000 f896 	bl	800620c <_read_r>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	bfab      	itete	ge
 80060e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060e6:	89a3      	ldrhlt	r3, [r4, #12]
 80060e8:	181b      	addge	r3, r3, r0
 80060ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060ee:	bfac      	ite	ge
 80060f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80060f2:	81a3      	strhlt	r3, [r4, #12]
 80060f4:	bd10      	pop	{r4, pc}

080060f6 <__swrite>:
 80060f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060fa:	461f      	mov	r7, r3
 80060fc:	898b      	ldrh	r3, [r1, #12]
 80060fe:	05db      	lsls	r3, r3, #23
 8006100:	4605      	mov	r5, r0
 8006102:	460c      	mov	r4, r1
 8006104:	4616      	mov	r6, r2
 8006106:	d505      	bpl.n	8006114 <__swrite+0x1e>
 8006108:	2302      	movs	r3, #2
 800610a:	2200      	movs	r2, #0
 800610c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006110:	f000 f868 	bl	80061e4 <_lseek_r>
 8006114:	89a3      	ldrh	r3, [r4, #12]
 8006116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800611a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800611e:	81a3      	strh	r3, [r4, #12]
 8006120:	4632      	mov	r2, r6
 8006122:	463b      	mov	r3, r7
 8006124:	4628      	mov	r0, r5
 8006126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800612a:	f000 b817 	b.w	800615c <_write_r>

0800612e <__sseek>:
 800612e:	b510      	push	{r4, lr}
 8006130:	460c      	mov	r4, r1
 8006132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006136:	f000 f855 	bl	80061e4 <_lseek_r>
 800613a:	1c43      	adds	r3, r0, #1
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	bf15      	itete	ne
 8006140:	6560      	strne	r0, [r4, #84]	; 0x54
 8006142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800614a:	81a3      	strheq	r3, [r4, #12]
 800614c:	bf18      	it	ne
 800614e:	81a3      	strhne	r3, [r4, #12]
 8006150:	bd10      	pop	{r4, pc}

08006152 <__sclose>:
 8006152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006156:	f000 b813 	b.w	8006180 <_close_r>
	...

0800615c <_write_r>:
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	4c07      	ldr	r4, [pc, #28]	; (800617c <_write_r+0x20>)
 8006160:	4605      	mov	r5, r0
 8006162:	4608      	mov	r0, r1
 8006164:	4611      	mov	r1, r2
 8006166:	2200      	movs	r2, #0
 8006168:	6022      	str	r2, [r4, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	f7ff fae9 	bl	8005742 <_write>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_write_r+0x1e>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	b103      	cbz	r3, 800617a <_write_r+0x1e>
 8006178:	602b      	str	r3, [r5, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	20000238 	.word	0x20000238

08006180 <_close_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4c06      	ldr	r4, [pc, #24]	; (800619c <_close_r+0x1c>)
 8006184:	2300      	movs	r3, #0
 8006186:	4605      	mov	r5, r0
 8006188:	4608      	mov	r0, r1
 800618a:	6023      	str	r3, [r4, #0]
 800618c:	f7ff faf5 	bl	800577a <_close>
 8006190:	1c43      	adds	r3, r0, #1
 8006192:	d102      	bne.n	800619a <_close_r+0x1a>
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	b103      	cbz	r3, 800619a <_close_r+0x1a>
 8006198:	602b      	str	r3, [r5, #0]
 800619a:	bd38      	pop	{r3, r4, r5, pc}
 800619c:	20000238 	.word	0x20000238

080061a0 <_fstat_r>:
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	4c07      	ldr	r4, [pc, #28]	; (80061c0 <_fstat_r+0x20>)
 80061a4:	2300      	movs	r3, #0
 80061a6:	4605      	mov	r5, r0
 80061a8:	4608      	mov	r0, r1
 80061aa:	4611      	mov	r1, r2
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	f7ff faf0 	bl	8005792 <_fstat>
 80061b2:	1c43      	adds	r3, r0, #1
 80061b4:	d102      	bne.n	80061bc <_fstat_r+0x1c>
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	b103      	cbz	r3, 80061bc <_fstat_r+0x1c>
 80061ba:	602b      	str	r3, [r5, #0]
 80061bc:	bd38      	pop	{r3, r4, r5, pc}
 80061be:	bf00      	nop
 80061c0:	20000238 	.word	0x20000238

080061c4 <_isatty_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4c06      	ldr	r4, [pc, #24]	; (80061e0 <_isatty_r+0x1c>)
 80061c8:	2300      	movs	r3, #0
 80061ca:	4605      	mov	r5, r0
 80061cc:	4608      	mov	r0, r1
 80061ce:	6023      	str	r3, [r4, #0]
 80061d0:	f7ff faef 	bl	80057b2 <_isatty>
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	d102      	bne.n	80061de <_isatty_r+0x1a>
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	b103      	cbz	r3, 80061de <_isatty_r+0x1a>
 80061dc:	602b      	str	r3, [r5, #0]
 80061de:	bd38      	pop	{r3, r4, r5, pc}
 80061e0:	20000238 	.word	0x20000238

080061e4 <_lseek_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	4c07      	ldr	r4, [pc, #28]	; (8006204 <_lseek_r+0x20>)
 80061e8:	4605      	mov	r5, r0
 80061ea:	4608      	mov	r0, r1
 80061ec:	4611      	mov	r1, r2
 80061ee:	2200      	movs	r2, #0
 80061f0:	6022      	str	r2, [r4, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	f7ff fae8 	bl	80057c8 <_lseek>
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	d102      	bne.n	8006202 <_lseek_r+0x1e>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	b103      	cbz	r3, 8006202 <_lseek_r+0x1e>
 8006200:	602b      	str	r3, [r5, #0]
 8006202:	bd38      	pop	{r3, r4, r5, pc}
 8006204:	20000238 	.word	0x20000238

08006208 <__malloc_lock>:
 8006208:	4770      	bx	lr

0800620a <__malloc_unlock>:
 800620a:	4770      	bx	lr

0800620c <_read_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	4c07      	ldr	r4, [pc, #28]	; (800622c <_read_r+0x20>)
 8006210:	4605      	mov	r5, r0
 8006212:	4608      	mov	r0, r1
 8006214:	4611      	mov	r1, r2
 8006216:	2200      	movs	r2, #0
 8006218:	6022      	str	r2, [r4, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	f7ff fa74 	bl	8005708 <_read>
 8006220:	1c43      	adds	r3, r0, #1
 8006222:	d102      	bne.n	800622a <_read_r+0x1e>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	b103      	cbz	r3, 800622a <_read_r+0x1e>
 8006228:	602b      	str	r3, [r5, #0]
 800622a:	bd38      	pop	{r3, r4, r5, pc}
 800622c:	20000238 	.word	0x20000238

08006230 <_init>:
 8006230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006232:	bf00      	nop
 8006234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006236:	bc08      	pop	{r3}
 8006238:	469e      	mov	lr, r3
 800623a:	4770      	bx	lr

0800623c <_fini>:
 800623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623e:	bf00      	nop
 8006240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006242:	bc08      	pop	{r3}
 8006244:	469e      	mov	lr, r3
 8006246:	4770      	bx	lr
