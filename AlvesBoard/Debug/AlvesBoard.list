
AlvesBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004950  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004ad8  08004ad8  00014ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b18  08004b18  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08004b18  08004b18  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b18  08004b18  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b18  08004b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b1c  08004b1c  00014b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08004b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000044  08004b64  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08004b64  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124bb  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000224d  00000000  00000000  0003252f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001010  00000000  00000000  00034780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f08  00000000  00000000  00035790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026c3d  00000000  00000000  00036698  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c234  00000000  00000000  0005d2d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f41a9  00000000  00000000  00069509  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015d6b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043ac  00000000  00000000  0015d730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000044 	.word	0x20000044
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ac0 	.word	0x08004ac0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000048 	.word	0x20000048
 80001c4:	08004ac0 	.word	0x08004ac0

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
 80001d4:	f000 fc9e 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 f80d 	bl	80001f8 <HAL_InitTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ea:	f004 f9d5 	bl	8004598 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000204:	4b16      	ldr	r3, [pc, #88]	; (8000260 <HAL_InitTick+0x68>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d022      	beq.n	8000252 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800020c:	4b15      	ldr	r3, [pc, #84]	; (8000264 <HAL_InitTick+0x6c>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b13      	ldr	r3, [pc, #76]	; (8000260 <HAL_InitTick+0x68>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000218:	fbb1 f3f3 	udiv	r3, r1, r3
 800021c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fcac 	bl	8000b7e <HAL_SYSTICK_Config>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d10f      	bne.n	800024c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b0f      	cmp	r3, #15
 8000230:	d809      	bhi.n	8000246 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000232:	2200      	movs	r2, #0
 8000234:	6879      	ldr	r1, [r7, #4]
 8000236:	f04f 30ff 	mov.w	r0, #4294967295
 800023a:	f000 fc76 	bl	8000b2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <HAL_InitTick+0x70>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	6013      	str	r3, [r2, #0]
 8000244:	e007      	b.n	8000256 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000246:	2301      	movs	r3, #1
 8000248:	73fb      	strb	r3, [r7, #15]
 800024a:	e004      	b.n	8000256 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800024c:	2301      	movs	r3, #1
 800024e:	73fb      	strb	r3, [r7, #15]
 8000250:	e001      	b.n	8000256 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000252:	2301      	movs	r3, #1
 8000254:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000256:	7bfb      	ldrb	r3, [r7, #15]
}
 8000258:	4618      	mov	r0, r3
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000004 	.word	0x20000004
 8000264:	20000034 	.word	0x20000034
 8000268:	20000000 	.word	0x20000000

0800026c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <HAL_IncTick+0x1c>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <HAL_IncTick+0x20>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4413      	add	r3, r2
 800027a:	4a03      	ldr	r2, [pc, #12]	; (8000288 <HAL_IncTick+0x1c>)
 800027c:	6013      	str	r3, [r2, #0]
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	20000228 	.word	0x20000228
 800028c:	20000004 	.word	0x20000004

08000290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  return uwTick;
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <HAL_GetTick+0x14>)
 8000296:	681b      	ldr	r3, [r3, #0]
}
 8000298:	4618      	mov	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000228 	.word	0x20000228

080002a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b0:	f7ff ffee 	bl	8000290 <HAL_GetTick>
 80002b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002c0:	d004      	beq.n	80002cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <HAL_Delay+0x40>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	4413      	add	r3, r2
 80002ca:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	bf00      	nop
 80002ce:	f7ff ffdf 	bl	8000290 <HAL_GetTick>
 80002d2:	4602      	mov	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x26>
  {
  }
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000004 	.word	0x20000004

080002ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d101      	bne.n	80002fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80002fa:	2301      	movs	r3, #1
 80002fc:	e0ed      	b.n	80004da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000304:	b2db      	uxtb	r3, r3
 8000306:	2b00      	cmp	r3, #0
 8000308:	d102      	bne.n	8000310 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f004 f968 	bl	80045e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f022 0202 	bic.w	r2, r2, #2
 800031e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000320:	f7ff ffb6 	bl	8000290 <HAL_GetTick>
 8000324:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000326:	e012      	b.n	800034e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000328:	f7ff ffb2 	bl	8000290 <HAL_GetTick>
 800032c:	4602      	mov	r2, r0
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	1ad3      	subs	r3, r2, r3
 8000332:	2b0a      	cmp	r3, #10
 8000334:	d90b      	bls.n	800034e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800033a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2205      	movs	r2, #5
 8000346:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800034a:	2301      	movs	r3, #1
 800034c:	e0c5      	b.n	80004da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	f003 0302 	and.w	r3, r3, #2
 8000358:	2b00      	cmp	r3, #0
 800035a:	d1e5      	bne.n	8000328 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f042 0201 	orr.w	r2, r2, #1
 800036a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800036c:	f7ff ff90 	bl	8000290 <HAL_GetTick>
 8000370:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000372:	e012      	b.n	800039a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000374:	f7ff ff8c 	bl	8000290 <HAL_GetTick>
 8000378:	4602      	mov	r2, r0
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	2b0a      	cmp	r3, #10
 8000380:	d90b      	bls.n	800039a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000386:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2205      	movs	r2, #5
 8000392:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000396:	2301      	movs	r3, #1
 8000398:	e09f      	b.n	80004da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d0e5      	beq.n	8000374 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	7e1b      	ldrb	r3, [r3, #24]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d108      	bne.n	80003c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	e007      	b.n	80003d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80003d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	7e5b      	ldrb	r3, [r3, #25]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d108      	bne.n	80003ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	e007      	b.n	80003fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80003fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	7e9b      	ldrb	r3, [r3, #26]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d108      	bne.n	8000416 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f042 0220 	orr.w	r2, r2, #32
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	e007      	b.n	8000426 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f022 0220 	bic.w	r2, r2, #32
 8000424:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	7edb      	ldrb	r3, [r3, #27]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d108      	bne.n	8000440 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f022 0210 	bic.w	r2, r2, #16
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	e007      	b.n	8000450 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f042 0210 	orr.w	r2, r2, #16
 800044e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	7f1b      	ldrb	r3, [r3, #28]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d108      	bne.n	800046a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f042 0208 	orr.w	r2, r2, #8
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	e007      	b.n	800047a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f022 0208 	bic.w	r2, r2, #8
 8000478:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	7f5b      	ldrb	r3, [r3, #29]
 800047e:	2b01      	cmp	r3, #1
 8000480:	d108      	bne.n	8000494 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f042 0204 	orr.w	r2, r2, #4
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	e007      	b.n	80004a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f022 0204 	bic.w	r2, r2, #4
 80004a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	689a      	ldr	r2, [r3, #8]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	431a      	orrs	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	691b      	ldr	r3, [r3, #16]
 80004b2:	431a      	orrs	r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	ea42 0103 	orr.w	r1, r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	1e5a      	subs	r2, r3, #1
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	430a      	orrs	r2, r1
 80004c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2200      	movs	r2, #0
 80004ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2201      	movs	r2, #1
 80004d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80004d8:	2300      	movs	r3, #0
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b087      	sub	sp, #28
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
 80004ea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004f8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80004fa:	7cfb      	ldrb	r3, [r7, #19]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d003      	beq.n	8000508 <HAL_CAN_ConfigFilter+0x26>
 8000500:	7cfb      	ldrb	r3, [r7, #19]
 8000502:	2b02      	cmp	r3, #2
 8000504:	f040 80aa 	bne.w	800065c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800050e:	f043 0201 	orr.w	r2, r3, #1
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f003 031f 	and.w	r3, r3, #31
 8000520:	2201      	movs	r2, #1
 8000522:	fa02 f303 	lsl.w	r3, r2, r3
 8000526:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	43db      	mvns	r3, r3
 8000532:	401a      	ands	r2, r3
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d123      	bne.n	800058a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	43db      	mvns	r3, r3
 800054c:	401a      	ands	r2, r3
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000564:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	3248      	adds	r2, #72	; 0x48
 800056a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800057e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000580:	6979      	ldr	r1, [r7, #20]
 8000582:	3348      	adds	r3, #72	; 0x48
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	440b      	add	r3, r1
 8000588:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d122      	bne.n	80005d8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	431a      	orrs	r2, r3
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80005b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3248      	adds	r2, #72	; 0x48
 80005b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80005ce:	6979      	ldr	r1, [r7, #20]
 80005d0:	3348      	adds	r3, #72	; 0x48
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	440b      	add	r3, r1
 80005d6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d109      	bne.n	80005f4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	43db      	mvns	r3, r3
 80005ea:	401a      	ands	r2, r3
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80005f2:	e007      	b.n	8000604 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	431a      	orrs	r2, r3
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d109      	bne.n	8000620 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	43db      	mvns	r3, r3
 8000616:	401a      	ands	r2, r3
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800061e:	e007      	b.n	8000630 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	431a      	orrs	r2, r3
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	6a1b      	ldr	r3, [r3, #32]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d107      	bne.n	8000648 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	431a      	orrs	r2, r3
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800064e:	f023 0201 	bic.w	r2, r3, #1
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000658:	2300      	movs	r3, #0
 800065a:	e006      	b.n	800066a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000660:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000668:	2301      	movs	r3, #1
  }
}
 800066a:	4618      	mov	r0, r3
 800066c:	371c      	adds	r7, #28
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b084      	sub	sp, #16
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b01      	cmp	r3, #1
 8000688:	d12e      	bne.n	80006e8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2202      	movs	r2, #2
 800068e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f022 0201 	bic.w	r2, r2, #1
 80006a0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80006a2:	f7ff fdf5 	bl	8000290 <HAL_GetTick>
 80006a6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80006a8:	e012      	b.n	80006d0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006aa:	f7ff fdf1 	bl	8000290 <HAL_GetTick>
 80006ae:	4602      	mov	r2, r0
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	2b0a      	cmp	r3, #10
 80006b6:	d90b      	bls.n	80006d0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2205      	movs	r2, #5
 80006c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80006cc:	2301      	movs	r3, #1
 80006ce:	e012      	b.n	80006f6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1e5      	bne.n	80006aa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80006e4:	2300      	movs	r3, #0
 80006e6:	e006      	b.n	80006f6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80006f4:	2301      	movs	r3, #1
  }
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80006fe:	b480      	push	{r7}
 8000700:	b087      	sub	sp, #28
 8000702:	af00      	add	r7, sp, #0
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	607a      	str	r2, [r7, #4]
 800070a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000712:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000714:	7dfb      	ldrb	r3, [r7, #23]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d003      	beq.n	8000722 <HAL_CAN_GetRxMessage+0x24>
 800071a:	7dfb      	ldrb	r3, [r7, #23]
 800071c:	2b02      	cmp	r3, #2
 800071e:	f040 80f4 	bne.w	800090a <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d10e      	bne.n	8000746 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	f003 0303 	and.w	r3, r3, #3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d116      	bne.n	8000764 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e0e8      	b.n	8000918 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	691b      	ldr	r3, [r3, #16]
 800074c:	f003 0303 	and.w	r3, r3, #3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d107      	bne.n	8000764 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000758:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	e0d9      	b.n	8000918 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	331b      	adds	r3, #27
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	4413      	add	r3, r2
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f003 0204 	and.w	r2, r3, #4
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d10c      	bne.n	800079c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	331b      	adds	r3, #27
 800078a:	011b      	lsls	r3, r3, #4
 800078c:	4413      	add	r3, r2
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	0d5b      	lsrs	r3, r3, #21
 8000792:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	e00b      	b.n	80007b4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	331b      	adds	r3, #27
 80007a4:	011b      	lsls	r3, r3, #4
 80007a6:	4413      	add	r3, r2
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	331b      	adds	r3, #27
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	4413      	add	r3, r2
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	085b      	lsrs	r3, r3, #1
 80007c4:	f003 0201 	and.w	r2, r3, #1
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	331b      	adds	r3, #27
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	4413      	add	r3, r2
 80007d8:	3304      	adds	r3, #4
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f003 020f 	and.w	r2, r3, #15
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	331b      	adds	r3, #27
 80007ec:	011b      	lsls	r3, r3, #4
 80007ee:	4413      	add	r3, r2
 80007f0:	3304      	adds	r3, #4
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	331b      	adds	r3, #27
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	4413      	add	r3, r2
 8000808:	3304      	adds	r3, #4
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	0c1b      	lsrs	r3, r3, #16
 800080e:	b29a      	uxth	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	4413      	add	r3, r2
 800081e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	011b      	lsls	r3, r3, #4
 8000832:	4413      	add	r3, r2
 8000834:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	0a1a      	lsrs	r2, r3, #8
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	3301      	adds	r3, #1
 8000840:	b2d2      	uxtb	r2, r2
 8000842:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	4413      	add	r3, r2
 800084e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	0c1a      	lsrs	r2, r3, #16
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	3302      	adds	r3, #2
 800085a:	b2d2      	uxtb	r2, r2
 800085c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	011b      	lsls	r3, r3, #4
 8000866:	4413      	add	r3, r2
 8000868:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	0e1a      	lsrs	r2, r3, #24
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	3303      	adds	r3, #3
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	4413      	add	r3, r2
 8000882:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	3304      	adds	r3, #4
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	011b      	lsls	r3, r3, #4
 8000898:	4413      	add	r3, r2
 800089a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	0a1a      	lsrs	r2, r3, #8
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	3305      	adds	r3, #5
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	011b      	lsls	r3, r3, #4
 80008b2:	4413      	add	r3, r2
 80008b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	0c1a      	lsrs	r2, r3, #16
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	3306      	adds	r3, #6
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	4413      	add	r3, r2
 80008ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	0e1a      	lsrs	r2, r3, #24
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	3307      	adds	r3, #7
 80008da:	b2d2      	uxtb	r2, r2
 80008dc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d108      	bne.n	80008f6 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	68da      	ldr	r2, [r3, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f042 0220 	orr.w	r2, r2, #32
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	e007      	b.n	8000906 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	691a      	ldr	r2, [r3, #16]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f042 0220 	orr.w	r2, r2, #32
 8000904:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	e006      	b.n	8000918 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
  }
}
 8000918:	4618      	mov	r0, r3
 800091a:	371c      	adds	r7, #28
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000938:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d002      	beq.n	8000946 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8000940:	7afb      	ldrb	r3, [r7, #11]
 8000942:	2b02      	cmp	r3, #2
 8000944:	d10f      	bne.n	8000966 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d106      	bne.n	800095a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	f003 0303 	and.w	r3, r3, #3
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	e005      	b.n	8000966 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	f003 0303 	and.w	r3, r3, #3
 8000964:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800099c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	60d3      	str	r3, [r2, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <__NVIC_GetPriorityGrouping+0x18>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	f003 0307 	and.w	r3, r3, #7
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db0b      	blt.n	8000a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f003 021f 	and.w	r2, r3, #31
 80009f0:	4907      	ldr	r1, [pc, #28]	; (8000a10 <__NVIC_EnableIRQ+0x38>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	095b      	lsrs	r3, r3, #5
 80009f8:	2001      	movs	r0, #1
 80009fa:	fa00 f202 	lsl.w	r2, r0, r2
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
         );
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f7ff ff8e 	bl	8000a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff29 	bl	8000974 <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3c:	f7ff ff3e 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000b40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ff8e 	bl	8000a68 <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff5d 	bl	8000a14 <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff31 	bl	80009d8 <__NVIC_EnableIRQ>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffa2 	bl	8000ad0 <SysTick_Config>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba6:	e17f      	b.n	8000ea8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 8171 	beq.w	8000ea2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x38>
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b12      	cmp	r3, #18
 8000bce:	d123      	bne.n	8000c18 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	08da      	lsrs	r2, r3, #3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3208      	adds	r2, #8
 8000bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	220f      	movs	r2, #15
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	691a      	ldr	r2, [r3, #16]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	08da      	lsrs	r2, r3, #3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3208      	adds	r2, #8
 8000c12:	6939      	ldr	r1, [r7, #16]
 8000c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2203      	movs	r2, #3
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 0203 	and.w	r2, r3, #3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d00b      	beq.n	8000c6c <HAL_GPIO_Init+0xd4>
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d007      	beq.n	8000c6c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c60:	2b11      	cmp	r3, #17
 8000c62:	d003      	beq.n	8000c6c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b12      	cmp	r3, #18
 8000c6a:	d130      	bne.n	8000cce <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2203      	movs	r2, #3
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	091b      	lsrs	r3, r3, #4
 8000cb8:	f003 0201 	and.w	r2, r3, #1
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	d118      	bne.n	8000d0c <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	08db      	lsrs	r3, r3, #3
 8000cf6:	f003 0201 	and.w	r2, r3, #1
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 80ac 	beq.w	8000ea2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b5e      	ldr	r3, [pc, #376]	; (8000ec4 <HAL_GPIO_Init+0x32c>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4e:	4a5d      	ldr	r2, [pc, #372]	; (8000ec4 <HAL_GPIO_Init+0x32c>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6613      	str	r3, [r2, #96]	; 0x60
 8000d56:	4b5b      	ldr	r3, [pc, #364]	; (8000ec4 <HAL_GPIO_Init+0x32c>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d62:	4a59      	ldr	r2, [pc, #356]	; (8000ec8 <HAL_GPIO_Init+0x330>)
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	220f      	movs	r2, #15
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d8c:	d025      	beq.n	8000dda <HAL_GPIO_Init+0x242>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4e      	ldr	r2, [pc, #312]	; (8000ecc <HAL_GPIO_Init+0x334>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d01f      	beq.n	8000dd6 <HAL_GPIO_Init+0x23e>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a4d      	ldr	r2, [pc, #308]	; (8000ed0 <HAL_GPIO_Init+0x338>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d019      	beq.n	8000dd2 <HAL_GPIO_Init+0x23a>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4c      	ldr	r2, [pc, #304]	; (8000ed4 <HAL_GPIO_Init+0x33c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d013      	beq.n	8000dce <HAL_GPIO_Init+0x236>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4b      	ldr	r2, [pc, #300]	; (8000ed8 <HAL_GPIO_Init+0x340>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d00d      	beq.n	8000dca <HAL_GPIO_Init+0x232>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4a      	ldr	r2, [pc, #296]	; (8000edc <HAL_GPIO_Init+0x344>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d007      	beq.n	8000dc6 <HAL_GPIO_Init+0x22e>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a49      	ldr	r2, [pc, #292]	; (8000ee0 <HAL_GPIO_Init+0x348>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d101      	bne.n	8000dc2 <HAL_GPIO_Init+0x22a>
 8000dbe:	2306      	movs	r3, #6
 8000dc0:	e00c      	b.n	8000ddc <HAL_GPIO_Init+0x244>
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	e00a      	b.n	8000ddc <HAL_GPIO_Init+0x244>
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	e008      	b.n	8000ddc <HAL_GPIO_Init+0x244>
 8000dca:	2304      	movs	r3, #4
 8000dcc:	e006      	b.n	8000ddc <HAL_GPIO_Init+0x244>
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e004      	b.n	8000ddc <HAL_GPIO_Init+0x244>
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	e002      	b.n	8000ddc <HAL_GPIO_Init+0x244>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <HAL_GPIO_Init+0x244>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	f002 0203 	and.w	r2, r2, #3
 8000de2:	0092      	lsls	r2, r2, #2
 8000de4:	4093      	lsls	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dec:	4936      	ldr	r1, [pc, #216]	; (8000ec8 <HAL_GPIO_Init+0x330>)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	3302      	adds	r3, #2
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dfa:	4b3a      	ldr	r3, [pc, #232]	; (8000ee4 <HAL_GPIO_Init+0x34c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e1e:	4a31      	ldr	r2, [pc, #196]	; (8000ee4 <HAL_GPIO_Init+0x34c>)
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e24:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <HAL_GPIO_Init+0x34c>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e48:	4a26      	ldr	r2, [pc, #152]	; (8000ee4 <HAL_GPIO_Init+0x34c>)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <HAL_GPIO_Init+0x34c>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e72:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <HAL_GPIO_Init+0x34c>)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <HAL_GPIO_Init+0x34c>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e9c:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <HAL_GPIO_Init+0x34c>)
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f47f ae78 	bne.w	8000ba8 <HAL_GPIO_Init+0x10>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	371c      	adds	r7, #28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010000 	.word	0x40010000
 8000ecc:	48000400 	.word	0x48000400
 8000ed0:	48000800 	.word	0x48000800
 8000ed4:	48000c00 	.word	0x48000c00
 8000ed8:	48001000 	.word	0x48001000
 8000edc:	48001400 	.word	0x48001400
 8000ee0:	48001800 	.word	0x48001800
 8000ee4:	40010400 	.word	0x40010400

08000ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef8:	787b      	ldrb	r3, [r7, #1]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f04:	e002      	b.n	8000f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e081      	b.n	800102e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d106      	bne.n	8000f44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f003 fb92 	bl	8004668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2224      	movs	r2, #36	; 0x24
 8000f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0201 	bic.w	r2, r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d107      	bne.n	8000f92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	e006      	b.n	8000fa0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d104      	bne.n	8000fb2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6812      	ldr	r2, [r2, #0]
 8000fbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691a      	ldr	r2, [r3, #16]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	ea42 0103 	orr.w	r1, r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	021a      	lsls	r2, r3, #8
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	430a      	orrs	r2, r1
 8000fee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69d9      	ldr	r1, [r3, #28]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a1a      	ldr	r2, [r3, #32]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2220      	movs	r2, #32
 800101a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b20      	cmp	r3, #32
 800104a:	d138      	bne.n	80010be <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001052:	2b01      	cmp	r3, #1
 8001054:	d101      	bne.n	800105a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001056:	2302      	movs	r3, #2
 8001058:	e032      	b.n	80010c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2224      	movs	r2, #36	; 0x24
 8001066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0201 	bic.w	r2, r2, #1
 8001078:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001088:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6819      	ldr	r1, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	430a      	orrs	r2, r1
 8001098:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 0201 	orr.w	r2, r2, #1
 80010a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2220      	movs	r2, #32
 80010ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e000      	b.n	80010c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80010be:	2302      	movs	r3, #2
  }
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b20      	cmp	r3, #32
 80010e0:	d139      	bne.n	8001156 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d101      	bne.n	80010f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e033      	b.n	8001158 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2224      	movs	r2, #36	; 0x24
 80010fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0201 	bic.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800111e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f042 0201 	orr.w	r2, r2, #1
 8001140:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2220      	movs	r2, #32
 8001146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001156:	2302      	movs	r3, #2
  }
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <HAL_PWREx_GetVoltageRange+0x18>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40007000 	.word	0x40007000

08001180 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800118e:	d130      	bne.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800119c:	d038      	beq.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011a6:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2232      	movs	r2, #50	; 0x32
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	0c9b      	lsrs	r3, r3, #18
 80011c0:	3301      	adds	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c4:	e002      	b.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d8:	d102      	bne.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f2      	bne.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ec:	d110      	bne.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e00f      	b.n	8001212 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fe:	d007      	beq.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001208:	4a05      	ldr	r2, [pc, #20]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40007000 	.word	0x40007000
 8001224:	20000034 	.word	0x20000034
 8001228:	431bde83 	.word	0x431bde83

0800122c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e39d      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800123e:	4ba4      	ldr	r3, [pc, #656]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001248:	4ba1      	ldr	r3, [pc, #644]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 80e1 	beq.w	8001422 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d007      	beq.n	8001276 <HAL_RCC_OscConfig+0x4a>
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	2b0c      	cmp	r3, #12
 800126a:	f040 8088 	bne.w	800137e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	2b01      	cmp	r3, #1
 8001272:	f040 8084 	bne.w	800137e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001276:	4b96      	ldr	r3, [pc, #600]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <HAL_RCC_OscConfig+0x62>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e375      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1a      	ldr	r2, [r3, #32]
 8001292:	4b8f      	ldr	r3, [pc, #572]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	d004      	beq.n	80012a8 <HAL_RCC_OscConfig+0x7c>
 800129e:	4b8c      	ldr	r3, [pc, #560]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012a6:	e005      	b.n	80012b4 <HAL_RCC_OscConfig+0x88>
 80012a8:	4b89      	ldr	r3, [pc, #548]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80012aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ae:	091b      	lsrs	r3, r3, #4
 80012b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d223      	bcs.n	8001300 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fcd1 	bl	8001c64 <RCC_SetFlashLatencyFromMSIRange>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e356      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012cc:	4b80      	ldr	r3, [pc, #512]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a7f      	ldr	r2, [pc, #508]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b7d      	ldr	r3, [pc, #500]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	497a      	ldr	r1, [pc, #488]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ea:	4b79      	ldr	r3, [pc, #484]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	4975      	ldr	r1, [pc, #468]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
 80012fe:	e022      	b.n	8001346 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001300:	4b73      	ldr	r3, [pc, #460]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a72      	ldr	r2, [pc, #456]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 8001306:	f043 0308 	orr.w	r3, r3, #8
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b70      	ldr	r3, [pc, #448]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	496d      	ldr	r1, [pc, #436]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800131e:	4b6c      	ldr	r3, [pc, #432]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	4968      	ldr	r1, [pc, #416]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 800132e:	4313      	orrs	r3, r2
 8001330:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fc94 	bl	8001c64 <RCC_SetFlashLatencyFromMSIRange>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e319      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001346:	f000 fc03 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 800134a:	4601      	mov	r1, r0
 800134c:	4b60      	ldr	r3, [pc, #384]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	4a5f      	ldr	r2, [pc, #380]	; (80014d4 <HAL_RCC_OscConfig+0x2a8>)
 8001358:	5cd3      	ldrb	r3, [r2, r3]
 800135a:	f003 031f 	and.w	r3, r3, #31
 800135e:	fa21 f303 	lsr.w	r3, r1, r3
 8001362:	4a5d      	ldr	r2, [pc, #372]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 8001364:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001366:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <HAL_RCC_OscConfig+0x2b0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7fe ff44 	bl	80001f8 <HAL_InitTick>
 8001370:	4603      	mov	r3, r0
 8001372:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d052      	beq.n	8001420 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	e2fd      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d032      	beq.n	80013ec <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001386:	4b52      	ldr	r3, [pc, #328]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a51      	ldr	r2, [pc, #324]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001392:	f7fe ff7d 	bl	8000290 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800139a:	f7fe ff79 	bl	8000290 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e2e6      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ac:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b8:	4b45      	ldr	r3, [pc, #276]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a44      	ldr	r2, [pc, #272]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80013be:	f043 0308 	orr.w	r3, r3, #8
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b42      	ldr	r3, [pc, #264]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	493f      	ldr	r1, [pc, #252]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	493a      	ldr	r1, [pc, #232]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	604b      	str	r3, [r1, #4]
 80013ea:	e01a      	b.n	8001422 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ec:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a37      	ldr	r2, [pc, #220]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80013f2:	f023 0301 	bic.w	r3, r3, #1
 80013f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013f8:	f7fe ff4a 	bl	8000290 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001400:	f7fe ff46 	bl	8000290 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e2b3      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001412:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x1d4>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001420:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d074      	beq.n	8001518 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d005      	beq.n	8001440 <HAL_RCC_OscConfig+0x214>
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2b0c      	cmp	r3, #12
 8001438:	d10e      	bne.n	8001458 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d10b      	bne.n	8001458 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d064      	beq.n	8001516 <HAL_RCC_OscConfig+0x2ea>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d160      	bne.n	8001516 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e290      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001460:	d106      	bne.n	8001470 <HAL_RCC_OscConfig+0x244>
 8001462:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a1a      	ldr	r2, [pc, #104]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e01d      	b.n	80014ac <HAL_RCC_OscConfig+0x280>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x268>
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 8001480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e00b      	b.n	80014ac <HAL_RCC_OscConfig+0x280>
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 800149a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 80014a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d01c      	beq.n	80014ee <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7fe feec 	bl	8000290 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ba:	e011      	b.n	80014e0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014bc:	f7fe fee8 	bl	8000290 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	; 0x64
 80014c8:	d90a      	bls.n	80014e0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e255      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000
 80014d4:	08004ad8 	.word	0x08004ad8
 80014d8:	20000034 	.word	0x20000034
 80014dc:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e0:	4bae      	ldr	r3, [pc, #696]	; (800179c <HAL_RCC_OscConfig+0x570>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0e7      	beq.n	80014bc <HAL_RCC_OscConfig+0x290>
 80014ec:	e014      	b.n	8001518 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7fe fecf 	bl	8000290 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f6:	f7fe fecb 	bl	8000290 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b64      	cmp	r3, #100	; 0x64
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e238      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001508:	4ba4      	ldr	r3, [pc, #656]	; (800179c <HAL_RCC_OscConfig+0x570>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f0      	bne.n	80014f6 <HAL_RCC_OscConfig+0x2ca>
 8001514:	e000      	b.n	8001518 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001516:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d060      	beq.n	80015e6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2b04      	cmp	r3, #4
 8001528:	d005      	beq.n	8001536 <HAL_RCC_OscConfig+0x30a>
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2b0c      	cmp	r3, #12
 800152e:	d119      	bne.n	8001564 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d116      	bne.n	8001564 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001536:	4b99      	ldr	r3, [pc, #612]	; (800179c <HAL_RCC_OscConfig+0x570>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_RCC_OscConfig+0x322>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e215      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154e:	4b93      	ldr	r3, [pc, #588]	; (800179c <HAL_RCC_OscConfig+0x570>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	061b      	lsls	r3, r3, #24
 800155c:	498f      	ldr	r1, [pc, #572]	; (800179c <HAL_RCC_OscConfig+0x570>)
 800155e:	4313      	orrs	r3, r2
 8001560:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001562:	e040      	b.n	80015e6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d023      	beq.n	80015b4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800156c:	4b8b      	ldr	r3, [pc, #556]	; (800179c <HAL_RCC_OscConfig+0x570>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a8a      	ldr	r2, [pc, #552]	; (800179c <HAL_RCC_OscConfig+0x570>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7fe fe8a 	bl	8000290 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001580:	f7fe fe86 	bl	8000290 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e1f3      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001592:	4b82      	ldr	r3, [pc, #520]	; (800179c <HAL_RCC_OscConfig+0x570>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159e:	4b7f      	ldr	r3, [pc, #508]	; (800179c <HAL_RCC_OscConfig+0x570>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	061b      	lsls	r3, r3, #24
 80015ac:	497b      	ldr	r1, [pc, #492]	; (800179c <HAL_RCC_OscConfig+0x570>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]
 80015b2:	e018      	b.n	80015e6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b4:	4b79      	ldr	r3, [pc, #484]	; (800179c <HAL_RCC_OscConfig+0x570>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a78      	ldr	r2, [pc, #480]	; (800179c <HAL_RCC_OscConfig+0x570>)
 80015ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7fe fe66 	bl	8000290 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c8:	f7fe fe62 	bl	8000290 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e1cf      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015da:	4b70      	ldr	r3, [pc, #448]	; (800179c <HAL_RCC_OscConfig+0x570>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d03c      	beq.n	800166c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d01c      	beq.n	8001634 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fa:	4b68      	ldr	r3, [pc, #416]	; (800179c <HAL_RCC_OscConfig+0x570>)
 80015fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001600:	4a66      	ldr	r2, [pc, #408]	; (800179c <HAL_RCC_OscConfig+0x570>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7fe fe41 	bl	8000290 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001612:	f7fe fe3d 	bl	8000290 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e1aa      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001624:	4b5d      	ldr	r3, [pc, #372]	; (800179c <HAL_RCC_OscConfig+0x570>)
 8001626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0ef      	beq.n	8001612 <HAL_RCC_OscConfig+0x3e6>
 8001632:	e01b      	b.n	800166c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001634:	4b59      	ldr	r3, [pc, #356]	; (800179c <HAL_RCC_OscConfig+0x570>)
 8001636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163a:	4a58      	ldr	r2, [pc, #352]	; (800179c <HAL_RCC_OscConfig+0x570>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7fe fe24 	bl	8000290 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7fe fe20 	bl	8000290 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e18d      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800165e:	4b4f      	ldr	r3, [pc, #316]	; (800179c <HAL_RCC_OscConfig+0x570>)
 8001660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1ef      	bne.n	800164c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80a5 	beq.w	80017c4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800167e:	4b47      	ldr	r3, [pc, #284]	; (800179c <HAL_RCC_OscConfig+0x570>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10d      	bne.n	80016a6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	4b44      	ldr	r3, [pc, #272]	; (800179c <HAL_RCC_OscConfig+0x570>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	4a43      	ldr	r2, [pc, #268]	; (800179c <HAL_RCC_OscConfig+0x570>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001694:	6593      	str	r3, [r2, #88]	; 0x58
 8001696:	4b41      	ldr	r3, [pc, #260]	; (800179c <HAL_RCC_OscConfig+0x570>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a2:	2301      	movs	r3, #1
 80016a4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a6:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <HAL_RCC_OscConfig+0x574>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d118      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b2:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <HAL_RCC_OscConfig+0x574>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a3a      	ldr	r2, [pc, #232]	; (80017a0 <HAL_RCC_OscConfig+0x574>)
 80016b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016be:	f7fe fde7 	bl	8000290 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c6:	f7fe fde3 	bl	8000290 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e150      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d8:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <HAL_RCC_OscConfig+0x574>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d108      	bne.n	80016fe <HAL_RCC_OscConfig+0x4d2>
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_RCC_OscConfig+0x570>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f2:	4a2a      	ldr	r2, [pc, #168]	; (800179c <HAL_RCC_OscConfig+0x570>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016fc:	e024      	b.n	8001748 <HAL_RCC_OscConfig+0x51c>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b05      	cmp	r3, #5
 8001704:	d110      	bne.n	8001728 <HAL_RCC_OscConfig+0x4fc>
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <HAL_RCC_OscConfig+0x570>)
 8001708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170c:	4a23      	ldr	r2, [pc, #140]	; (800179c <HAL_RCC_OscConfig+0x570>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001716:	4b21      	ldr	r3, [pc, #132]	; (800179c <HAL_RCC_OscConfig+0x570>)
 8001718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171c:	4a1f      	ldr	r2, [pc, #124]	; (800179c <HAL_RCC_OscConfig+0x570>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001726:	e00f      	b.n	8001748 <HAL_RCC_OscConfig+0x51c>
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <HAL_RCC_OscConfig+0x570>)
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172e:	4a1b      	ldr	r2, [pc, #108]	; (800179c <HAL_RCC_OscConfig+0x570>)
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_RCC_OscConfig+0x570>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <HAL_RCC_OscConfig+0x570>)
 8001740:	f023 0304 	bic.w	r3, r3, #4
 8001744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d016      	beq.n	800177e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001750:	f7fe fd9e 	bl	8000290 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001756:	e00a      	b.n	800176e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f7fe fd9a 	bl	8000290 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	; 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e105      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_OscConfig+0x570>)
 8001770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0ed      	beq.n	8001758 <HAL_RCC_OscConfig+0x52c>
 800177c:	e019      	b.n	80017b2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177e:	f7fe fd87 	bl	8000290 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001784:	e00e      	b.n	80017a4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001786:	f7fe fd83 	bl	8000290 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f241 3288 	movw	r2, #5000	; 0x1388
 8001794:	4293      	cmp	r3, r2
 8001796:	d905      	bls.n	80017a4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e0ee      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
 800179c:	40021000 	.word	0x40021000
 80017a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a4:	4b77      	ldr	r3, [pc, #476]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1e9      	bne.n	8001786 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b2:	7ffb      	ldrb	r3, [r7, #31]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d105      	bne.n	80017c4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b8:	4b72      	ldr	r3, [pc, #456]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017bc:	4a71      	ldr	r2, [pc, #452]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 80017be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80d5 	beq.w	8001978 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b0c      	cmp	r3, #12
 80017d2:	f000 808e 	beq.w	80018f2 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d15b      	bne.n	8001896 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b69      	ldr	r3, [pc, #420]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a68      	ldr	r2, [pc, #416]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 80017e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7fe fd51 	bl	8000290 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f2:	f7fe fd4d 	bl	8000290 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e0ba      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001804:	4b5f      	ldr	r3, [pc, #380]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f0      	bne.n	80017f2 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001810:	4b5c      	ldr	r3, [pc, #368]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	4b5c      	ldr	r3, [pc, #368]	; (8001988 <HAL_RCC_OscConfig+0x75c>)
 8001816:	4013      	ands	r3, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001820:	3a01      	subs	r2, #1
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	4311      	orrs	r1, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800182a:	0212      	lsls	r2, r2, #8
 800182c:	4311      	orrs	r1, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001832:	0852      	lsrs	r2, r2, #1
 8001834:	3a01      	subs	r2, #1
 8001836:	0552      	lsls	r2, r2, #21
 8001838:	4311      	orrs	r1, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800183e:	0852      	lsrs	r2, r2, #1
 8001840:	3a01      	subs	r2, #1
 8001842:	0652      	lsls	r2, r2, #25
 8001844:	4311      	orrs	r1, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800184a:	0912      	lsrs	r2, r2, #4
 800184c:	0452      	lsls	r2, r2, #17
 800184e:	430a      	orrs	r2, r1
 8001850:	494c      	ldr	r1, [pc, #304]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 8001852:	4313      	orrs	r3, r2
 8001854:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001856:	4b4b      	ldr	r3, [pc, #300]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a4a      	ldr	r2, [pc, #296]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 800185c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001860:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001862:	4b48      	ldr	r3, [pc, #288]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	4a47      	ldr	r2, [pc, #284]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 8001868:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800186c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186e:	f7fe fd0f 	bl	8000290 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001876:	f7fe fd0b 	bl	8000290 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e078      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001888:	4b3e      	ldr	r3, [pc, #248]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x64a>
 8001894:	e070      	b.n	8001978 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a3a      	ldr	r2, [pc, #232]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 800189c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018a0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80018a2:	4b38      	ldr	r3, [pc, #224]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d105      	bne.n	80018ba <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018ae:	4b35      	ldr	r3, [pc, #212]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	4a34      	ldr	r2, [pc, #208]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 80018b4:	f023 0303 	bic.w	r3, r3, #3
 80018b8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018ba:	4b32      	ldr	r3, [pc, #200]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	4a31      	ldr	r2, [pc, #196]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 80018c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ca:	f7fe fce1 	bl	8000290 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d2:	f7fe fcdd 	bl	8000290 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e04a      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x6a6>
 80018f0:	e042      	b.n	8001978 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e03d      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80018fe:	4b21      	ldr	r3, [pc, #132]	; (8001984 <HAL_RCC_OscConfig+0x758>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 0203 	and.w	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	429a      	cmp	r2, r3
 8001910:	d130      	bne.n	8001974 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	3b01      	subs	r3, #1
 800191e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d127      	bne.n	8001974 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001930:	429a      	cmp	r2, r3
 8001932:	d11f      	bne.n	8001974 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800193e:	2a07      	cmp	r2, #7
 8001940:	bf14      	ite	ne
 8001942:	2201      	movne	r2, #1
 8001944:	2200      	moveq	r2, #0
 8001946:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001948:	4293      	cmp	r3, r2
 800194a:	d113      	bne.n	8001974 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	3b01      	subs	r3, #1
 800195a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d109      	bne.n	8001974 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	085b      	lsrs	r3, r3, #1
 800196c:	3b01      	subs	r3, #1
 800196e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3720      	adds	r7, #32
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	f99d808c 	.word	0xf99d808c

0800198c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0c8      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a0:	4b66      	ldr	r3, [pc, #408]	; (8001b3c <HAL_RCC_ClockConfig+0x1b0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d910      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ae:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_RCC_ClockConfig+0x1b0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 0207 	bic.w	r2, r3, #7
 80019b6:	4961      	ldr	r1, [pc, #388]	; (8001b3c <HAL_RCC_ClockConfig+0x1b0>)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b5f      	ldr	r3, [pc, #380]	; (8001b3c <HAL_RCC_ClockConfig+0x1b0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0b0      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d04c      	beq.n	8001a76 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e4:	4b56      	ldr	r3, [pc, #344]	; (8001b40 <HAL_RCC_ClockConfig+0x1b4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d121      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e09e      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019fc:	4b50      	ldr	r3, [pc, #320]	; (8001b40 <HAL_RCC_ClockConfig+0x1b4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d115      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e092      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d107      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a14:	4b4a      	ldr	r3, [pc, #296]	; (8001b40 <HAL_RCC_ClockConfig+0x1b4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d109      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e086      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a24:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <HAL_RCC_ClockConfig+0x1b4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e07e      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a34:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <HAL_RCC_ClockConfig+0x1b4>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f023 0203 	bic.w	r2, r3, #3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	493f      	ldr	r1, [pc, #252]	; (8001b40 <HAL_RCC_ClockConfig+0x1b4>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a46:	f7fe fc23 	bl	8000290 <HAL_GetTick>
 8001a4a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4c:	e00a      	b.n	8001a64 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4e:	f7fe fc1f 	bl	8000290 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e066      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a64:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <HAL_RCC_ClockConfig+0x1b4>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 020c 	and.w	r2, r3, #12
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d1eb      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d008      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <HAL_RCC_ClockConfig+0x1b4>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	492c      	ldr	r1, [pc, #176]	; (8001b40 <HAL_RCC_ClockConfig+0x1b4>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a94:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <HAL_RCC_ClockConfig+0x1b0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d210      	bcs.n	8001ac4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_RCC_ClockConfig+0x1b0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 0207 	bic.w	r2, r3, #7
 8001aaa:	4924      	ldr	r1, [pc, #144]	; (8001b3c <HAL_RCC_ClockConfig+0x1b0>)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <HAL_RCC_ClockConfig+0x1b0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e036      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4918      	ldr	r1, [pc, #96]	; (8001b40 <HAL_RCC_ClockConfig+0x1b4>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d009      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_RCC_ClockConfig+0x1b4>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4910      	ldr	r1, [pc, #64]	; (8001b40 <HAL_RCC_ClockConfig+0x1b4>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b02:	f000 f825 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001b06:	4601      	mov	r1, r0
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_RCC_ClockConfig+0x1b4>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	5cd3      	ldrb	r3, [r2, r3]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	fa21 f303 	lsr.w	r3, r1, r3
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_RCC_ClockConfig+0x1c0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fb66 	bl	80001f8 <HAL_InitTick>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b30:	7afb      	ldrb	r3, [r7, #11]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40022000 	.word	0x40022000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08004ad8 	.word	0x08004ad8
 8001b48:	20000034 	.word	0x20000034
 8001b4c:	20000000 	.word	0x20000000

08001b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b68:	4b3a      	ldr	r3, [pc, #232]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x34>
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	2b0c      	cmp	r3, #12
 8001b7c:	d121      	bne.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d11e      	bne.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b84:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b90:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	e005      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ba0:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bac:	4a2a      	ldr	r2, [pc, #168]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10d      	bne.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d102      	bne.n	8001bce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bc8:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	e004      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	2b0c      	cmp	r3, #12
 8001bdc:	d133      	bne.n	8001c46 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d002      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xa4>
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d003      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0xaa>
 8001bf2:	e005      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bf6:	617b      	str	r3, [r7, #20]
      break;
 8001bf8:	e005      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bfc:	617b      	str	r3, [r7, #20]
      break;
 8001bfe:	e002      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	617b      	str	r3, [r7, #20]
      break;
 8001c04:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	3301      	adds	r3, #1
 8001c12:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	fb02 f203 	mul.w	r2, r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0e5b      	lsrs	r3, r3, #25
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	3301      	adds	r3, #1
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c44:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c46:	69bb      	ldr	r3, [r7, #24]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3724      	adds	r7, #36	; 0x24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08004ae8 	.word	0x08004ae8
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	007a1200 	.word	0x007a1200

08001c64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c70:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c7c:	f7ff fa72 	bl	8001164 <HAL_PWREx_GetVoltageRange>
 8001c80:	6178      	str	r0, [r7, #20]
 8001c82:	e014      	b.n	8001cae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c84:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	4a24      	ldr	r2, [pc, #144]	; (8001d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c90:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c9c:	f7ff fa62 	bl	8001164 <HAL_PWREx_GetVoltageRange>
 8001ca0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb4:	d10b      	bne.n	8001cce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b80      	cmp	r3, #128	; 0x80
 8001cba:	d919      	bls.n	8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2ba0      	cmp	r3, #160	; 0xa0
 8001cc0:	d902      	bls.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	e013      	b.n	8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cc8:	2301      	movs	r3, #1
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	e010      	b.n	8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b80      	cmp	r3, #128	; 0x80
 8001cd2:	d902      	bls.n	8001cda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	e00a      	b.n	8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b80      	cmp	r3, #128	; 0x80
 8001cde:	d102      	bne.n	8001ce6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	e004      	b.n	8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b70      	cmp	r3, #112	; 0x70
 8001cea:	d101      	bne.n	8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cec:	2301      	movs	r3, #1
 8001cee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 0207 	bic.w	r2, r3, #7
 8001cf8:	4909      	ldr	r1, [pc, #36]	; (8001d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d001      	beq.n	8001d12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40022000 	.word	0x40022000

08001d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d30:	2300      	movs	r3, #0
 8001d32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d03f      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d48:	d01c      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d4e:	d802      	bhi.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00e      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001d54:	e01f      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001d56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d5a:	d003      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001d5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d60:	d01c      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001d62:	e018      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d64:	4b85      	ldr	r3, [pc, #532]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4a84      	ldr	r2, [pc, #528]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d70:	e015      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fab9 	bl	80022f0 <RCCEx_PLLSAI1_Config>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d82:	e00c      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3320      	adds	r3, #32
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 fba0 	bl	80024d0 <RCCEx_PLLSAI2_Config>
 8001d90:	4603      	mov	r3, r0
 8001d92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d94:	e003      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	74fb      	strb	r3, [r7, #19]
      break;
 8001d9a:	e000      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d9e:	7cfb      	ldrb	r3, [r7, #19]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10b      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001da4:	4b75      	ldr	r3, [pc, #468]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001daa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001db2:	4972      	ldr	r1, [pc, #456]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dba:	e001      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dbc:	7cfb      	ldrb	r3, [r7, #19]
 8001dbe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d03f      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd4:	d01c      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001dd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dda:	d802      	bhi.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00e      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001de0:	e01f      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001de2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001de6:	d003      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001de8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001dec:	d01c      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001dee:	e018      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001df0:	4b62      	ldr	r3, [pc, #392]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4a61      	ldr	r2, [pc, #388]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001dfc:	e015      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 fa73 	bl	80022f0 <RCCEx_PLLSAI1_Config>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e0e:	e00c      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3320      	adds	r3, #32
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fb5a 	bl	80024d0 <RCCEx_PLLSAI2_Config>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e20:	e003      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	74fb      	strb	r3, [r7, #19]
      break;
 8001e26:	e000      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e2a:	7cfb      	ldrb	r3, [r7, #19]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10b      	bne.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e30:	4b52      	ldr	r3, [pc, #328]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e3e:	494f      	ldr	r1, [pc, #316]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e46:	e001      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e48:	7cfb      	ldrb	r3, [r7, #19]
 8001e4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80a0 	beq.w	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00d      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e74:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	4a40      	ldr	r2, [pc, #256]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e80:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e90:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a3a      	ldr	r2, [pc, #232]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e9c:	f7fe f9f8 	bl	8000290 <HAL_GetTick>
 8001ea0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ea2:	e009      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea4:	f7fe f9f4 	bl	8000290 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d902      	bls.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	74fb      	strb	r3, [r7, #19]
        break;
 8001eb6:	e005      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001eb8:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ef      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d15c      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eca:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d01f      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d019      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ee8:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ef4:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efa:	4a20      	ldr	r2, [pc, #128]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0a:	4a1c      	ldr	r2, [pc, #112]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f14:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d016      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f26:	f7fe f9b3 	bl	8000290 <HAL_GetTick>
 8001f2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f2c:	e00b      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7fe f9af 	bl	8000290 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d902      	bls.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	74fb      	strb	r3, [r7, #19]
            break;
 8001f44:	e006      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ec      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f6a:	4904      	ldr	r1, [pc, #16]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f72:	e009      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	74bb      	strb	r3, [r7, #18]
 8001f78:	e006      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
 8001f86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f88:	7c7b      	ldrb	r3, [r7, #17]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d105      	bne.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8e:	4b9e      	ldr	r3, [pc, #632]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	4a9d      	ldr	r2, [pc, #628]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fa6:	4b98      	ldr	r3, [pc, #608]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fac:	f023 0203 	bic.w	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb4:	4994      	ldr	r1, [pc, #592]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fc8:	4b8f      	ldr	r3, [pc, #572]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	f023 020c 	bic.w	r2, r3, #12
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	498c      	ldr	r1, [pc, #560]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fea:	4b87      	ldr	r3, [pc, #540]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	4983      	ldr	r1, [pc, #524]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800200c:	4b7e      	ldr	r3, [pc, #504]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	497b      	ldr	r1, [pc, #492]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800202e:	4b76      	ldr	r3, [pc, #472]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203c:	4972      	ldr	r1, [pc, #456]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002050:	4b6d      	ldr	r3, [pc, #436]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002056:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	496a      	ldr	r1, [pc, #424]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002072:	4b65      	ldr	r3, [pc, #404]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002078:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002080:	4961      	ldr	r1, [pc, #388]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002094:	4b5c      	ldr	r3, [pc, #368]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a2:	4959      	ldr	r1, [pc, #356]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020b6:	4b54      	ldr	r3, [pc, #336]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c4:	4950      	ldr	r1, [pc, #320]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020d8:	4b4b      	ldr	r3, [pc, #300]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e6:	4948      	ldr	r1, [pc, #288]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020fa:	4b43      	ldr	r3, [pc, #268]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	493f      	ldr	r1, [pc, #252]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d028      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002122:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800212a:	4937      	ldr	r1, [pc, #220]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800213a:	d106      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800213c:	4b32      	ldr	r3, [pc, #200]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4a31      	ldr	r2, [pc, #196]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002146:	60d3      	str	r3, [r2, #12]
 8002148:	e011      	b.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800214e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002152:	d10c      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3304      	adds	r3, #4
 8002158:	2101      	movs	r1, #1
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f8c8 	bl	80022f0 <RCCEx_PLLSAI1_Config>
 8002160:	4603      	mov	r3, r0
 8002162:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002164:	7cfb      	ldrb	r3, [r7, #19]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800216a:	7cfb      	ldrb	r3, [r7, #19]
 800216c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d028      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800217a:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002180:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	491f      	ldr	r1, [pc, #124]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002198:	d106      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021a4:	60d3      	str	r3, [r2, #12]
 80021a6:	e011      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021b0:	d10c      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2101      	movs	r1, #1
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 f899 	bl	80022f0 <RCCEx_PLLSAI1_Config>
 80021be:	4603      	mov	r3, r0
 80021c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021c2:	7cfb      	ldrb	r3, [r7, #19]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d02b      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021f6:	d109      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4a02      	ldr	r2, [pc, #8]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002202:	60d3      	str	r3, [r2, #12]
 8002204:	e014      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002214:	d10c      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3304      	adds	r3, #4
 800221a:	2101      	movs	r1, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f867 	bl	80022f0 <RCCEx_PLLSAI1_Config>
 8002222:	4603      	mov	r3, r0
 8002224:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002226:	7cfb      	ldrb	r3, [r7, #19]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d02f      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800224a:	4928      	ldr	r1, [pc, #160]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800225a:	d10d      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3304      	adds	r3, #4
 8002260:	2102      	movs	r1, #2
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f844 	bl	80022f0 <RCCEx_PLLSAI1_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800226c:	7cfb      	ldrb	r3, [r7, #19]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d014      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002272:	7cfb      	ldrb	r3, [r7, #19]
 8002274:	74bb      	strb	r3, [r7, #18]
 8002276:	e011      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800227c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002280:	d10c      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3320      	adds	r3, #32
 8002286:	2102      	movs	r1, #2
 8002288:	4618      	mov	r0, r3
 800228a:	f000 f921 	bl	80024d0 <RCCEx_PLLSAI2_Config>
 800228e:	4603      	mov	r3, r0
 8002290:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002292:	7cfb      	ldrb	r3, [r7, #19]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022a8:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b6:	490d      	ldr	r1, [pc, #52]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022da:	4904      	ldr	r1, [pc, #16]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000

080022f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022fe:	4b73      	ldr	r3, [pc, #460]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d018      	beq.n	800233c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800230a:	4b70      	ldr	r3, [pc, #448]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f003 0203 	and.w	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d10d      	bne.n	8002336 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
       ||
 800231e:	2b00      	cmp	r3, #0
 8002320:	d009      	beq.n	8002336 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002322:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
       ||
 8002332:	429a      	cmp	r2, r3
 8002334:	d044      	beq.n	80023c0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
 800233a:	e041      	b.n	80023c0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d00c      	beq.n	800235e <RCCEx_PLLSAI1_Config+0x6e>
 8002344:	2b03      	cmp	r3, #3
 8002346:	d013      	beq.n	8002370 <RCCEx_PLLSAI1_Config+0x80>
 8002348:	2b01      	cmp	r3, #1
 800234a:	d120      	bne.n	800238e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800234c:	4b5f      	ldr	r3, [pc, #380]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d11d      	bne.n	8002394 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800235c:	e01a      	b.n	8002394 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800235e:	4b5b      	ldr	r3, [pc, #364]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002366:	2b00      	cmp	r3, #0
 8002368:	d116      	bne.n	8002398 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800236e:	e013      	b.n	8002398 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002370:	4b56      	ldr	r3, [pc, #344]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10f      	bne.n	800239c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800237c:	4b53      	ldr	r3, [pc, #332]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800238c:	e006      	b.n	800239c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
      break;
 8002392:	e004      	b.n	800239e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002394:	bf00      	nop
 8002396:	e002      	b.n	800239e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002398:	bf00      	nop
 800239a:	e000      	b.n	800239e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800239c:	bf00      	nop
    }

    if(status == HAL_OK)
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10d      	bne.n	80023c0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023a4:	4b49      	ldr	r3, [pc, #292]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6819      	ldr	r1, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	430b      	orrs	r3, r1
 80023ba:	4944      	ldr	r1, [pc, #272]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d17d      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023c6:	4b41      	ldr	r3, [pc, #260]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a40      	ldr	r2, [pc, #256]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d2:	f7fd ff5d 	bl	8000290 <HAL_GetTick>
 80023d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023d8:	e009      	b.n	80023ee <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023da:	f7fd ff59 	bl	8000290 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d902      	bls.n	80023ee <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	73fb      	strb	r3, [r7, #15]
        break;
 80023ec:	e005      	b.n	80023fa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023ee:	4b37      	ldr	r3, [pc, #220]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1ef      	bne.n	80023da <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d160      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d111      	bne.n	800242a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002406:	4b31      	ldr	r3, [pc, #196]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800240e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6892      	ldr	r2, [r2, #8]
 8002416:	0211      	lsls	r1, r2, #8
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68d2      	ldr	r2, [r2, #12]
 800241c:	0912      	lsrs	r2, r2, #4
 800241e:	0452      	lsls	r2, r2, #17
 8002420:	430a      	orrs	r2, r1
 8002422:	492a      	ldr	r1, [pc, #168]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002424:	4313      	orrs	r3, r2
 8002426:	610b      	str	r3, [r1, #16]
 8002428:	e027      	b.n	800247a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d112      	bne.n	8002456 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002430:	4b26      	ldr	r3, [pc, #152]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002438:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6892      	ldr	r2, [r2, #8]
 8002440:	0211      	lsls	r1, r2, #8
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6912      	ldr	r2, [r2, #16]
 8002446:	0852      	lsrs	r2, r2, #1
 8002448:	3a01      	subs	r2, #1
 800244a:	0552      	lsls	r2, r2, #21
 800244c:	430a      	orrs	r2, r1
 800244e:	491f      	ldr	r1, [pc, #124]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002450:	4313      	orrs	r3, r2
 8002452:	610b      	str	r3, [r1, #16]
 8002454:	e011      	b.n	800247a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002456:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800245e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6892      	ldr	r2, [r2, #8]
 8002466:	0211      	lsls	r1, r2, #8
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6952      	ldr	r2, [r2, #20]
 800246c:	0852      	lsrs	r2, r2, #1
 800246e:	3a01      	subs	r2, #1
 8002470:	0652      	lsls	r2, r2, #25
 8002472:	430a      	orrs	r2, r1
 8002474:	4915      	ldr	r1, [pc, #84]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800247a:	4b14      	ldr	r3, [pc, #80]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a13      	ldr	r2, [pc, #76]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002480:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002484:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002486:	f7fd ff03 	bl	8000290 <HAL_GetTick>
 800248a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800248c:	e009      	b.n	80024a2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800248e:	f7fd feff 	bl	8000290 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d902      	bls.n	80024a2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	73fb      	strb	r3, [r7, #15]
          break;
 80024a0:	e005      	b.n	80024ae <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0ef      	beq.n	800248e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d106      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	4903      	ldr	r1, [pc, #12]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000

080024d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024de:	4b68      	ldr	r3, [pc, #416]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d018      	beq.n	800251c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80024ea:	4b65      	ldr	r3, [pc, #404]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0203 	and.w	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d10d      	bne.n	8002516 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
       ||
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002502:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
       ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d044      	beq.n	80025a0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	e041      	b.n	80025a0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d00c      	beq.n	800253e <RCCEx_PLLSAI2_Config+0x6e>
 8002524:	2b03      	cmp	r3, #3
 8002526:	d013      	beq.n	8002550 <RCCEx_PLLSAI2_Config+0x80>
 8002528:	2b01      	cmp	r3, #1
 800252a:	d120      	bne.n	800256e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800252c:	4b54      	ldr	r3, [pc, #336]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d11d      	bne.n	8002574 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800253c:	e01a      	b.n	8002574 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800253e:	4b50      	ldr	r3, [pc, #320]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002546:	2b00      	cmp	r3, #0
 8002548:	d116      	bne.n	8002578 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800254e:	e013      	b.n	8002578 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002550:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10f      	bne.n	800257c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800255c:	4b48      	ldr	r3, [pc, #288]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800256c:	e006      	b.n	800257c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
      break;
 8002572:	e004      	b.n	800257e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002574:	bf00      	nop
 8002576:	e002      	b.n	800257e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002578:	bf00      	nop
 800257a:	e000      	b.n	800257e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800257c:	bf00      	nop
    }

    if(status == HAL_OK)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10d      	bne.n	80025a0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002584:	4b3e      	ldr	r3, [pc, #248]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6819      	ldr	r1, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	3b01      	subs	r3, #1
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	430b      	orrs	r3, r1
 800259a:	4939      	ldr	r1, [pc, #228]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 800259c:	4313      	orrs	r3, r2
 800259e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d167      	bne.n	8002676 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025a6:	4b36      	ldr	r3, [pc, #216]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a35      	ldr	r2, [pc, #212]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b2:	f7fd fe6d 	bl	8000290 <HAL_GetTick>
 80025b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025b8:	e009      	b.n	80025ce <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025ba:	f7fd fe69 	bl	8000290 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d902      	bls.n	80025ce <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	73fb      	strb	r3, [r7, #15]
        break;
 80025cc:	e005      	b.n	80025da <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025ce:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ef      	bne.n	80025ba <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d14a      	bne.n	8002676 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d111      	bne.n	800260a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6892      	ldr	r2, [r2, #8]
 80025f6:	0211      	lsls	r1, r2, #8
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	68d2      	ldr	r2, [r2, #12]
 80025fc:	0912      	lsrs	r2, r2, #4
 80025fe:	0452      	lsls	r2, r2, #17
 8002600:	430a      	orrs	r2, r1
 8002602:	491f      	ldr	r1, [pc, #124]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002604:	4313      	orrs	r3, r2
 8002606:	614b      	str	r3, [r1, #20]
 8002608:	e011      	b.n	800262e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002612:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6892      	ldr	r2, [r2, #8]
 800261a:	0211      	lsls	r1, r2, #8
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6912      	ldr	r2, [r2, #16]
 8002620:	0852      	lsrs	r2, r2, #1
 8002622:	3a01      	subs	r2, #1
 8002624:	0652      	lsls	r2, r2, #25
 8002626:	430a      	orrs	r2, r1
 8002628:	4915      	ldr	r1, [pc, #84]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 800262a:	4313      	orrs	r3, r2
 800262c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a13      	ldr	r2, [pc, #76]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7fd fe29 	bl	8000290 <HAL_GetTick>
 800263e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002640:	e009      	b.n	8002656 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002642:	f7fd fe25 	bl	8000290 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d902      	bls.n	8002656 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	73fb      	strb	r3, [r7, #15]
          break;
 8002654:	e005      	b.n	8002662 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0ef      	beq.n	8002642 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d106      	bne.n	8002676 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	4903      	ldr	r1, [pc, #12]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002672:	4313      	orrs	r3, r2
 8002674:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002676:	7bfb      	ldrb	r3, [r7, #15]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000

08002684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e01d      	b.n	80026d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f002 f820 	bl	80046f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3304      	adds	r3, #4
 80026c0:	4619      	mov	r1, r3
 80026c2:	4610      	mov	r0, r2
 80026c4:	f000 fc4a 	bl	8002f5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_TIM_Base_Start_IT+0x50>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b06      	cmp	r3, #6
 8002704:	d00b      	beq.n	800271e <HAL_TIM_Base_Start_IT+0x42>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270c:	d007      	beq.n	800271e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	00010007 	.word	0x00010007

08002730 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e01d      	b.n	800277e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f815 	bl	8002786 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3304      	adds	r3, #4
 800276c:	4619      	mov	r1, r3
 800276e:	4610      	mov	r0, r2
 8002770:	f000 fbf4 	bl	8002f5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2201      	movs	r2, #1
 80027ac:	6839      	ldr	r1, [r7, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 ffde 	bl	8003770 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <HAL_TIM_PWM_Start+0x98>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_TIM_PWM_Start+0x4a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1d      	ldr	r2, [pc, #116]	; (8002838 <HAL_TIM_PWM_Start+0x9c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00e      	beq.n	80027e6 <HAL_TIM_PWM_Start+0x4a>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1b      	ldr	r2, [pc, #108]	; (800283c <HAL_TIM_PWM_Start+0xa0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d009      	beq.n	80027e6 <HAL_TIM_PWM_Start+0x4a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1a      	ldr	r2, [pc, #104]	; (8002840 <HAL_TIM_PWM_Start+0xa4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d004      	beq.n	80027e6 <HAL_TIM_PWM_Start+0x4a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a18      	ldr	r2, [pc, #96]	; (8002844 <HAL_TIM_PWM_Start+0xa8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_PWM_Start+0x4e>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_TIM_PWM_Start+0x50>
 80027ea:	2300      	movs	r3, #0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <HAL_TIM_PWM_Start+0xac>)
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b06      	cmp	r3, #6
 8002810:	d00b      	beq.n	800282a <HAL_TIM_PWM_Start+0x8e>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002818:	d007      	beq.n	800282a <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40013400 	.word	0x40013400
 800283c:	40014000 	.word	0x40014000
 8002840:	40014400 	.word	0x40014400
 8002844:	40014800 	.word	0x40014800
 8002848:	00010007 	.word	0x00010007

0800284c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	6839      	ldr	r1, [r7, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f000 ff86 	bl	8003770 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a2a      	ldr	r2, [pc, #168]	; (8002914 <HAL_TIM_PWM_Stop+0xc8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d013      	beq.n	8002896 <HAL_TIM_PWM_Stop+0x4a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a29      	ldr	r2, [pc, #164]	; (8002918 <HAL_TIM_PWM_Stop+0xcc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00e      	beq.n	8002896 <HAL_TIM_PWM_Stop+0x4a>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a27      	ldr	r2, [pc, #156]	; (800291c <HAL_TIM_PWM_Stop+0xd0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d009      	beq.n	8002896 <HAL_TIM_PWM_Stop+0x4a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a26      	ldr	r2, [pc, #152]	; (8002920 <HAL_TIM_PWM_Stop+0xd4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d004      	beq.n	8002896 <HAL_TIM_PWM_Stop+0x4a>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a24      	ldr	r2, [pc, #144]	; (8002924 <HAL_TIM_PWM_Stop+0xd8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_TIM_PWM_Stop+0x4e>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_TIM_PWM_Stop+0x50>
 800289a:	2300      	movs	r3, #0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d017      	beq.n	80028d0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6a1a      	ldr	r2, [r3, #32]
 80028a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10f      	bne.n	80028d0 <HAL_TIM_PWM_Stop+0x84>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6a1a      	ldr	r2, [r3, #32]
 80028b6:	f240 4344 	movw	r3, #1092	; 0x444
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d107      	bne.n	80028d0 <HAL_TIM_PWM_Stop+0x84>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6a1a      	ldr	r2, [r3, #32]
 80028d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10f      	bne.n	8002900 <HAL_TIM_PWM_Stop+0xb4>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a1a      	ldr	r2, [r3, #32]
 80028e6:	f240 4344 	movw	r3, #1092	; 0x444
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d107      	bne.n	8002900 <HAL_TIM_PWM_Stop+0xb4>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40012c00 	.word	0x40012c00
 8002918:	40013400 	.word	0x40013400
 800291c:	40014000 	.word	0x40014000
 8002920:	40014400 	.word	0x40014400
 8002924:	40014800 	.word	0x40014800

08002928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d122      	bne.n	8002984 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b02      	cmp	r3, #2
 800294a:	d11b      	bne.n	8002984 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0202 	mvn.w	r2, #2
 8002954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fad7 	bl	8002f1e <HAL_TIM_IC_CaptureCallback>
 8002970:	e005      	b.n	800297e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fac9 	bl	8002f0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fada 	bl	8002f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b04      	cmp	r3, #4
 8002990:	d122      	bne.n	80029d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b04      	cmp	r3, #4
 800299e:	d11b      	bne.n	80029d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0204 	mvn.w	r2, #4
 80029a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2202      	movs	r2, #2
 80029ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 faad 	bl	8002f1e <HAL_TIM_IC_CaptureCallback>
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fa9f 	bl	8002f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fab0 	bl	8002f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d122      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d11b      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0208 	mvn.w	r2, #8
 80029fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2204      	movs	r2, #4
 8002a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fa83 	bl	8002f1e <HAL_TIM_IC_CaptureCallback>
 8002a18:	e005      	b.n	8002a26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa75 	bl	8002f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 fa86 	bl	8002f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	d122      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d11b      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0210 	mvn.w	r2, #16
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2208      	movs	r2, #8
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fa59 	bl	8002f1e <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fa4b 	bl	8002f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fa5c 	bl	8002f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d10e      	bne.n	8002aac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d107      	bne.n	8002aac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0201 	mvn.w	r2, #1
 8002aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f001 fb28 	bl	80040fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab6:	2b80      	cmp	r3, #128	; 0x80
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac4:	2b80      	cmp	r3, #128	; 0x80
 8002ac6:	d107      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 ff56 	bl	8003984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae6:	d10e      	bne.n	8002b06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af2:	2b80      	cmp	r3, #128	; 0x80
 8002af4:	d107      	bne.n	8002b06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 ff49 	bl	8003998 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	d10e      	bne.n	8002b32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1e:	2b40      	cmp	r3, #64	; 0x40
 8002b20:	d107      	bne.n	8002b32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fa0a 	bl	8002f46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d10e      	bne.n	8002b5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	d107      	bne.n	8002b5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f06f 0220 	mvn.w	r2, #32
 8002b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 ff09 	bl	8003970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e105      	b.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x226>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b14      	cmp	r3, #20
 8002b96:	f200 80f0 	bhi.w	8002d7a <HAL_TIM_PWM_ConfigChannel+0x212>
 8002b9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ba0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba0:	08002bf5 	.word	0x08002bf5
 8002ba4:	08002d7b 	.word	0x08002d7b
 8002ba8:	08002d7b 	.word	0x08002d7b
 8002bac:	08002d7b 	.word	0x08002d7b
 8002bb0:	08002c35 	.word	0x08002c35
 8002bb4:	08002d7b 	.word	0x08002d7b
 8002bb8:	08002d7b 	.word	0x08002d7b
 8002bbc:	08002d7b 	.word	0x08002d7b
 8002bc0:	08002c77 	.word	0x08002c77
 8002bc4:	08002d7b 	.word	0x08002d7b
 8002bc8:	08002d7b 	.word	0x08002d7b
 8002bcc:	08002d7b 	.word	0x08002d7b
 8002bd0:	08002cb7 	.word	0x08002cb7
 8002bd4:	08002d7b 	.word	0x08002d7b
 8002bd8:	08002d7b 	.word	0x08002d7b
 8002bdc:	08002d7b 	.word	0x08002d7b
 8002be0:	08002cf9 	.word	0x08002cf9
 8002be4:	08002d7b 	.word	0x08002d7b
 8002be8:	08002d7b 	.word	0x08002d7b
 8002bec:	08002d7b 	.word	0x08002d7b
 8002bf0:	08002d39 	.word	0x08002d39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fa48 	bl	8003090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0208 	orr.w	r2, r2, #8
 8002c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0204 	bic.w	r2, r2, #4
 8002c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6999      	ldr	r1, [r3, #24]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	619a      	str	r2, [r3, #24]
      break;
 8002c32:	e0a3      	b.n	8002d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fab8 	bl	80031b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6999      	ldr	r1, [r3, #24]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	021a      	lsls	r2, r3, #8
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	619a      	str	r2, [r3, #24]
      break;
 8002c74:	e082      	b.n	8002d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fb21 	bl	80032c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69da      	ldr	r2, [r3, #28]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0208 	orr.w	r2, r2, #8
 8002c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0204 	bic.w	r2, r2, #4
 8002ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69d9      	ldr	r1, [r3, #28]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	61da      	str	r2, [r3, #28]
      break;
 8002cb4:	e062      	b.n	8002d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fb89 	bl	80033d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69da      	ldr	r2, [r3, #28]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69d9      	ldr	r1, [r3, #28]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	021a      	lsls	r2, r3, #8
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	61da      	str	r2, [r3, #28]
      break;
 8002cf6:	e041      	b.n	8002d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fbd2 	bl	80034a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0208 	orr.w	r2, r2, #8
 8002d12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0204 	bic.w	r2, r2, #4
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d36:	e021      	b.n	8002d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fc16 	bl	8003570 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	021a      	lsls	r2, r3, #8
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d78:	e000      	b.n	8002d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8002d7a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop

08002d98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_TIM_ConfigClockSource+0x18>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e0a8      	b.n	8002f02 <HAL_TIM_ConfigClockSource+0x16a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b40      	cmp	r3, #64	; 0x40
 8002dea:	d067      	beq.n	8002ebc <HAL_TIM_ConfigClockSource+0x124>
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d80b      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x70>
 8002df0:	2b10      	cmp	r3, #16
 8002df2:	d073      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0x144>
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d802      	bhi.n	8002dfe <HAL_TIM_ConfigClockSource+0x66>
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d06f      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002dfc:	e078      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d06c      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0x144>
 8002e02:	2b30      	cmp	r3, #48	; 0x30
 8002e04:	d06a      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002e06:	e073      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002e08:	2b70      	cmp	r3, #112	; 0x70
 8002e0a:	d00d      	beq.n	8002e28 <HAL_TIM_ConfigClockSource+0x90>
 8002e0c:	2b70      	cmp	r3, #112	; 0x70
 8002e0e:	d804      	bhi.n	8002e1a <HAL_TIM_ConfigClockSource+0x82>
 8002e10:	2b50      	cmp	r3, #80	; 0x50
 8002e12:	d033      	beq.n	8002e7c <HAL_TIM_ConfigClockSource+0xe4>
 8002e14:	2b60      	cmp	r3, #96	; 0x60
 8002e16:	d041      	beq.n	8002e9c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002e18:	e06a      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1e:	d066      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x156>
 8002e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e24:	d017      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002e26:	e063      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6899      	ldr	r1, [r3, #8]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f000 fc7a 	bl	8003730 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	609a      	str	r2, [r3, #8]
      break;
 8002e54:	e04c      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6899      	ldr	r1, [r3, #8]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f000 fc63 	bl	8003730 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e78:	609a      	str	r2, [r3, #8]
      break;
 8002e7a:	e039      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f000 fbd7 	bl	800363c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2150      	movs	r1, #80	; 0x50
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fc30 	bl	80036fa <TIM_ITRx_SetConfig>
      break;
 8002e9a:	e029      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f000 fbf6 	bl	800369a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2160      	movs	r1, #96	; 0x60
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fc20 	bl	80036fa <TIM_ITRx_SetConfig>
      break;
 8002eba:	e019      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f000 fbb7 	bl	800363c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2140      	movs	r1, #64	; 0x40
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fc10 	bl	80036fa <TIM_ITRx_SetConfig>
      break;
 8002eda:	e009      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	f000 fc07 	bl	80036fa <TIM_ITRx_SetConfig>
      break;
 8002eec:	e000      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002eee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a40      	ldr	r2, [pc, #256]	; (8003070 <TIM_Base_SetConfig+0x114>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7a:	d00f      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a3d      	ldr	r2, [pc, #244]	; (8003074 <TIM_Base_SetConfig+0x118>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00b      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a3c      	ldr	r2, [pc, #240]	; (8003078 <TIM_Base_SetConfig+0x11c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d007      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a3b      	ldr	r2, [pc, #236]	; (800307c <TIM_Base_SetConfig+0x120>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a3a      	ldr	r2, [pc, #232]	; (8003080 <TIM_Base_SetConfig+0x124>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d108      	bne.n	8002fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a2f      	ldr	r2, [pc, #188]	; (8003070 <TIM_Base_SetConfig+0x114>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d01f      	beq.n	8002ff6 <TIM_Base_SetConfig+0x9a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbc:	d01b      	beq.n	8002ff6 <TIM_Base_SetConfig+0x9a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a2c      	ldr	r2, [pc, #176]	; (8003074 <TIM_Base_SetConfig+0x118>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d017      	beq.n	8002ff6 <TIM_Base_SetConfig+0x9a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	; (8003078 <TIM_Base_SetConfig+0x11c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <TIM_Base_SetConfig+0x9a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a2a      	ldr	r2, [pc, #168]	; (800307c <TIM_Base_SetConfig+0x120>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00f      	beq.n	8002ff6 <TIM_Base_SetConfig+0x9a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a29      	ldr	r2, [pc, #164]	; (8003080 <TIM_Base_SetConfig+0x124>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00b      	beq.n	8002ff6 <TIM_Base_SetConfig+0x9a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a28      	ldr	r2, [pc, #160]	; (8003084 <TIM_Base_SetConfig+0x128>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d007      	beq.n	8002ff6 <TIM_Base_SetConfig+0x9a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a27      	ldr	r2, [pc, #156]	; (8003088 <TIM_Base_SetConfig+0x12c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d003      	beq.n	8002ff6 <TIM_Base_SetConfig+0x9a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a26      	ldr	r2, [pc, #152]	; (800308c <TIM_Base_SetConfig+0x130>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d108      	bne.n	8003008 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a10      	ldr	r2, [pc, #64]	; (8003070 <TIM_Base_SetConfig+0x114>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00f      	beq.n	8003054 <TIM_Base_SetConfig+0xf8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a12      	ldr	r2, [pc, #72]	; (8003080 <TIM_Base_SetConfig+0x124>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d00b      	beq.n	8003054 <TIM_Base_SetConfig+0xf8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a11      	ldr	r2, [pc, #68]	; (8003084 <TIM_Base_SetConfig+0x128>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d007      	beq.n	8003054 <TIM_Base_SetConfig+0xf8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a10      	ldr	r2, [pc, #64]	; (8003088 <TIM_Base_SetConfig+0x12c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <TIM_Base_SetConfig+0xf8>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a0f      	ldr	r2, [pc, #60]	; (800308c <TIM_Base_SetConfig+0x130>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d103      	bne.n	800305c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	615a      	str	r2, [r3, #20]
}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40012c00 	.word	0x40012c00
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800
 800307c:	40000c00 	.word	0x40000c00
 8003080:	40013400 	.word	0x40013400
 8003084:	40014000 	.word	0x40014000
 8003088:	40014400 	.word	0x40014400
 800308c:	40014800 	.word	0x40014800

08003090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f023 0201 	bic.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0303 	bic.w	r3, r3, #3
 80030ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 0302 	bic.w	r3, r3, #2
 80030dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a2c      	ldr	r2, [pc, #176]	; (800319c <TIM_OC1_SetConfig+0x10c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00f      	beq.n	8003110 <TIM_OC1_SetConfig+0x80>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a2b      	ldr	r2, [pc, #172]	; (80031a0 <TIM_OC1_SetConfig+0x110>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00b      	beq.n	8003110 <TIM_OC1_SetConfig+0x80>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a2a      	ldr	r2, [pc, #168]	; (80031a4 <TIM_OC1_SetConfig+0x114>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d007      	beq.n	8003110 <TIM_OC1_SetConfig+0x80>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a29      	ldr	r2, [pc, #164]	; (80031a8 <TIM_OC1_SetConfig+0x118>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d003      	beq.n	8003110 <TIM_OC1_SetConfig+0x80>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a28      	ldr	r2, [pc, #160]	; (80031ac <TIM_OC1_SetConfig+0x11c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d10c      	bne.n	800312a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f023 0308 	bic.w	r3, r3, #8
 8003116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f023 0304 	bic.w	r3, r3, #4
 8003128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1b      	ldr	r2, [pc, #108]	; (800319c <TIM_OC1_SetConfig+0x10c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00f      	beq.n	8003152 <TIM_OC1_SetConfig+0xc2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a1a      	ldr	r2, [pc, #104]	; (80031a0 <TIM_OC1_SetConfig+0x110>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00b      	beq.n	8003152 <TIM_OC1_SetConfig+0xc2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a19      	ldr	r2, [pc, #100]	; (80031a4 <TIM_OC1_SetConfig+0x114>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <TIM_OC1_SetConfig+0xc2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <TIM_OC1_SetConfig+0x118>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d003      	beq.n	8003152 <TIM_OC1_SetConfig+0xc2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a17      	ldr	r2, [pc, #92]	; (80031ac <TIM_OC1_SetConfig+0x11c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d111      	bne.n	8003176 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	621a      	str	r2, [r3, #32]
}
 8003190:	bf00      	nop
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	40012c00 	.word	0x40012c00
 80031a0:	40013400 	.word	0x40013400
 80031a4:	40014000 	.word	0x40014000
 80031a8:	40014400 	.word	0x40014400
 80031ac:	40014800 	.word	0x40014800

080031b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f023 0210 	bic.w	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f023 0320 	bic.w	r3, r3, #32
 80031fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a28      	ldr	r2, [pc, #160]	; (80032b0 <TIM_OC2_SetConfig+0x100>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_OC2_SetConfig+0x6c>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a27      	ldr	r2, [pc, #156]	; (80032b4 <TIM_OC2_SetConfig+0x104>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d10d      	bne.n	8003238 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003236:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <TIM_OC2_SetConfig+0x100>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00f      	beq.n	8003260 <TIM_OC2_SetConfig+0xb0>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <TIM_OC2_SetConfig+0x104>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00b      	beq.n	8003260 <TIM_OC2_SetConfig+0xb0>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a1b      	ldr	r2, [pc, #108]	; (80032b8 <TIM_OC2_SetConfig+0x108>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d007      	beq.n	8003260 <TIM_OC2_SetConfig+0xb0>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a1a      	ldr	r2, [pc, #104]	; (80032bc <TIM_OC2_SetConfig+0x10c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d003      	beq.n	8003260 <TIM_OC2_SetConfig+0xb0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a19      	ldr	r2, [pc, #100]	; (80032c0 <TIM_OC2_SetConfig+0x110>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d113      	bne.n	8003288 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003266:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800326e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	621a      	str	r2, [r3, #32]
}
 80032a2:	bf00      	nop
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	40013400 	.word	0x40013400
 80032b8:	40014000 	.word	0x40014000
 80032bc:	40014400 	.word	0x40014400
 80032c0:	40014800 	.word	0x40014800

080032c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0303 	bic.w	r3, r3, #3
 80032fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a27      	ldr	r2, [pc, #156]	; (80033c0 <TIM_OC3_SetConfig+0xfc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <TIM_OC3_SetConfig+0x6a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a26      	ldr	r2, [pc, #152]	; (80033c4 <TIM_OC3_SetConfig+0x100>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d10d      	bne.n	800334a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1c      	ldr	r2, [pc, #112]	; (80033c0 <TIM_OC3_SetConfig+0xfc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00f      	beq.n	8003372 <TIM_OC3_SetConfig+0xae>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <TIM_OC3_SetConfig+0x100>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00b      	beq.n	8003372 <TIM_OC3_SetConfig+0xae>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a1a      	ldr	r2, [pc, #104]	; (80033c8 <TIM_OC3_SetConfig+0x104>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <TIM_OC3_SetConfig+0xae>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a19      	ldr	r2, [pc, #100]	; (80033cc <TIM_OC3_SetConfig+0x108>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d003      	beq.n	8003372 <TIM_OC3_SetConfig+0xae>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a18      	ldr	r2, [pc, #96]	; (80033d0 <TIM_OC3_SetConfig+0x10c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d113      	bne.n	800339a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	621a      	str	r2, [r3, #32]
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40013400 	.word	0x40013400
 80033c8:	40014000 	.word	0x40014000
 80033cc:	40014400 	.word	0x40014400
 80033d0:	40014800 	.word	0x40014800

080033d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	031b      	lsls	r3, r3, #12
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a18      	ldr	r2, [pc, #96]	; (8003494 <TIM_OC4_SetConfig+0xc0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00f      	beq.n	8003458 <TIM_OC4_SetConfig+0x84>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a17      	ldr	r2, [pc, #92]	; (8003498 <TIM_OC4_SetConfig+0xc4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00b      	beq.n	8003458 <TIM_OC4_SetConfig+0x84>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a16      	ldr	r2, [pc, #88]	; (800349c <TIM_OC4_SetConfig+0xc8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d007      	beq.n	8003458 <TIM_OC4_SetConfig+0x84>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a15      	ldr	r2, [pc, #84]	; (80034a0 <TIM_OC4_SetConfig+0xcc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d003      	beq.n	8003458 <TIM_OC4_SetConfig+0x84>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <TIM_OC4_SetConfig+0xd0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d109      	bne.n	800346c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800345e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	019b      	lsls	r3, r3, #6
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	621a      	str	r2, [r3, #32]
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40013400 	.word	0x40013400
 800349c:	40014000 	.word	0x40014000
 80034a0:	40014400 	.word	0x40014400
 80034a4:	40014800 	.word	0x40014800

080034a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	041b      	lsls	r3, r3, #16
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a17      	ldr	r2, [pc, #92]	; (800355c <TIM_OC5_SetConfig+0xb4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00f      	beq.n	8003522 <TIM_OC5_SetConfig+0x7a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a16      	ldr	r2, [pc, #88]	; (8003560 <TIM_OC5_SetConfig+0xb8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00b      	beq.n	8003522 <TIM_OC5_SetConfig+0x7a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a15      	ldr	r2, [pc, #84]	; (8003564 <TIM_OC5_SetConfig+0xbc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <TIM_OC5_SetConfig+0x7a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a14      	ldr	r2, [pc, #80]	; (8003568 <TIM_OC5_SetConfig+0xc0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d003      	beq.n	8003522 <TIM_OC5_SetConfig+0x7a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a13      	ldr	r2, [pc, #76]	; (800356c <TIM_OC5_SetConfig+0xc4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d109      	bne.n	8003536 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003528:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	621a      	str	r2, [r3, #32]
}
 8003550:	bf00      	nop
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40013400 	.word	0x40013400
 8003564:	40014000 	.word	0x40014000
 8003568:	40014400 	.word	0x40014400
 800356c:	40014800 	.word	0x40014800

08003570 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800359e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	051b      	lsls	r3, r3, #20
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a18      	ldr	r2, [pc, #96]	; (8003628 <TIM_OC6_SetConfig+0xb8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00f      	beq.n	80035ec <TIM_OC6_SetConfig+0x7c>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a17      	ldr	r2, [pc, #92]	; (800362c <TIM_OC6_SetConfig+0xbc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00b      	beq.n	80035ec <TIM_OC6_SetConfig+0x7c>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a16      	ldr	r2, [pc, #88]	; (8003630 <TIM_OC6_SetConfig+0xc0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d007      	beq.n	80035ec <TIM_OC6_SetConfig+0x7c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a15      	ldr	r2, [pc, #84]	; (8003634 <TIM_OC6_SetConfig+0xc4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d003      	beq.n	80035ec <TIM_OC6_SetConfig+0x7c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a14      	ldr	r2, [pc, #80]	; (8003638 <TIM_OC6_SetConfig+0xc8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d109      	bne.n	8003600 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	029b      	lsls	r3, r3, #10
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	621a      	str	r2, [r3, #32]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40012c00 	.word	0x40012c00
 800362c:	40013400 	.word	0x40013400
 8003630:	40014000 	.word	0x40014000
 8003634:	40014400 	.word	0x40014400
 8003638:	40014800 	.word	0x40014800

0800363c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0201 	bic.w	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f023 030a 	bic.w	r3, r3, #10
 8003678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800369a:	b480      	push	{r7}
 800369c:	b087      	sub	sp, #28
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f023 0210 	bic.w	r2, r3, #16
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	031b      	lsls	r3, r3, #12
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	621a      	str	r2, [r3, #32]
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b085      	sub	sp, #20
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003710:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	f043 0307 	orr.w	r3, r3, #7
 800371c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	609a      	str	r2, [r3, #8]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800374a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	021a      	lsls	r2, r3, #8
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	431a      	orrs	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4313      	orrs	r3, r2
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	609a      	str	r2, [r3, #8]
}
 8003764:	bf00      	nop
 8003766:	371c      	adds	r7, #28
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	2201      	movs	r2, #1
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a1a      	ldr	r2, [r3, #32]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	43db      	mvns	r3, r3
 8003792:	401a      	ands	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a1a      	ldr	r2, [r3, #32]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	fa01 f303 	lsl.w	r3, r1, r3
 80037a8:	431a      	orrs	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	621a      	str	r2, [r3, #32]
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e045      	b.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1c      	ldr	r2, [pc, #112]	; (800386c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1b      	ldr	r2, [pc, #108]	; (8003870 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d108      	bne.n	800381a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800380e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003820:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003832:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	4313      	orrs	r3, r2
 800383c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	40012c00 	.word	0x40012c00
 8003870:	40013400 	.word	0x40013400

08003874 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800388c:	2302      	movs	r3, #2
 800388e:	e065      	b.n	800395c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	041b      	lsls	r3, r3, #16
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a16      	ldr	r2, [pc, #88]	; (8003968 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d004      	beq.n	800391e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a14      	ldr	r2, [pc, #80]	; (800396c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d115      	bne.n	800394a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	051b      	lsls	r3, r3, #20
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40013400 	.word	0x40013400

08003970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80039b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80039ba:	eef0 7ae7 	vabs.f32	s15, s15
 80039be:	eeb0 0a67 	vmov.f32	s0, s15
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039d2:	f7fc fbf9 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039d6:	f000 f8bf 	bl	8003b58 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039da:	f000 fb43 	bl	8004064 <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 80039de:	f000 f945 	bl	8003c6c <_ZL12MX_CAN1_Initv>
  MX_I2C2_Init();
 80039e2:	f000 f97d 	bl	8003ce0 <_ZL12MX_I2C2_Initv>
  MX_TIM2_Init();
 80039e6:	f000 f9c9 	bl	8003d7c <_ZL12MX_TIM2_Initv>
  MX_TIM16_Init();
 80039ea:	f000 fa23 	bl	8003e34 <_ZL13MX_TIM16_Initv>
  MX_TIM17_Init();
 80039ee:	f000 faad 	bl	8003f4c <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */
  // Inicialização padrão dos PWMs; para funcionar, falta os starts.
  HAL_TIM_PWM_Init(&htim16);
 80039f2:	484c      	ldr	r0, [pc, #304]	; (8003b24 <main+0x158>)
 80039f4:	f7fe fe9c 	bl	8002730 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim17);
 80039f8:	484b      	ldr	r0, [pc, #300]	; (8003b28 <main+0x15c>)
 80039fa:	f7fe fe99 	bl	8002730 <HAL_TIM_PWM_Init>

  // Inicialização dos timers
  HAL_TIM_Base_Start_IT(&htim2);
 80039fe:	484b      	ldr	r0, [pc, #300]	; (8003b2c <main+0x160>)
 8003a00:	f7fe fe6c 	bl	80026dc <HAL_TIM_Base_Start_IT>

  // Configuracao inicial dos timer
  configPWM_16.OCMode = TIM_OCMODE_PWM1;
 8003a04:	4b4a      	ldr	r3, [pc, #296]	; (8003b30 <main+0x164>)
 8003a06:	2260      	movs	r2, #96	; 0x60
 8003a08:	601a      	str	r2, [r3, #0]
  configPWM_16.Pulse = 0; // Largura do pulso
 8003a0a:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <main+0x164>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	605a      	str	r2, [r3, #4]
  configPWM_16.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a10:	4b47      	ldr	r3, [pc, #284]	; (8003b30 <main+0x164>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	609a      	str	r2, [r3, #8]
  configPWM_16.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a16:	4b46      	ldr	r3, [pc, #280]	; (8003b30 <main+0x164>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	60da      	str	r2, [r3, #12]
  configPWM_16.OCFastMode = TIM_OCFAST_DISABLE;
 8003a1c:	4b44      	ldr	r3, [pc, #272]	; (8003b30 <main+0x164>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	611a      	str	r2, [r3, #16]
  configPWM_16.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a22:	4b43      	ldr	r3, [pc, #268]	; (8003b30 <main+0x164>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	615a      	str	r2, [r3, #20]
  configPWM_16.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a28:	4b41      	ldr	r3, [pc, #260]	; (8003b30 <main+0x164>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	619a      	str	r2, [r3, #24]

  configPWM_17.OCMode = TIM_OCMODE_PWM1;
 8003a2e:	4b41      	ldr	r3, [pc, #260]	; (8003b34 <main+0x168>)
 8003a30:	2260      	movs	r2, #96	; 0x60
 8003a32:	601a      	str	r2, [r3, #0]
  configPWM_17.Pulse = 0; // Largura do pulso
 8003a34:	4b3f      	ldr	r3, [pc, #252]	; (8003b34 <main+0x168>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	605a      	str	r2, [r3, #4]
  configPWM_17.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a3a:	4b3e      	ldr	r3, [pc, #248]	; (8003b34 <main+0x168>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	609a      	str	r2, [r3, #8]
  configPWM_17.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a40:	4b3c      	ldr	r3, [pc, #240]	; (8003b34 <main+0x168>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	60da      	str	r2, [r3, #12]
  configPWM_17.OCFastMode = TIM_OCFAST_DISABLE;
 8003a46:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <main+0x168>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	611a      	str	r2, [r3, #16]
  configPWM_17.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a4c:	4b39      	ldr	r3, [pc, #228]	; (8003b34 <main+0x168>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	615a      	str	r2, [r3, #20]
  configPWM_17.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a52:	4b38      	ldr	r3, [pc, #224]	; (8003b34 <main+0x168>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	619a      	str	r2, [r3, #24]
  Adafruit_BNO055 bno = Adafruit_BNO055(hi2c2, 55, BNO055_ADDRESS_A);

  bno.begin();
*/
  // Initializing CAN Filter
  filterConfigCAN(&hcan1);
 8003a58:	4837      	ldr	r0, [pc, #220]	; (8003b38 <main+0x16c>)
 8003a5a:	f000 ff61 	bl	8004920 <_Z15filterConfigCANP19__CAN_HandleTypeDef>
  HAL_CAN_Start(&hcan1);
 8003a5e:	4836      	ldr	r0, [pc, #216]	; (8003b38 <main+0x16c>)
 8003a60:	f7fc fe09 	bl	8000676 <HAL_CAN_Start>

  //Delay para configurar IMU
  HAL_Delay(5000);
 8003a64:	f241 3088 	movw	r0, #5000	; 0x1388
 8003a68:	f7fc fc1e 	bl	80002a8 <HAL_Delay>

  //Forca dados iniciais para pos_IMU e Vcc
  can_rx_pkg.identifier = 0;
 8003a6c:	4b33      	ldr	r3, [pc, #204]	; (8003b3c <main+0x170>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
  while(can_rx_pkg.identifier != 2){
 8003a72:	4b32      	ldr	r3, [pc, #200]	; (8003b3c <main+0x170>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d00b      	beq.n	8003a92 <main+0xc6>
	  can_rx_pkg = readCanMessages(&hcan1);
 8003a7a:	4c30      	ldr	r4, [pc, #192]	; (8003b3c <main+0x170>)
 8003a7c:	463b      	mov	r3, r7
 8003a7e:	492e      	ldr	r1, [pc, #184]	; (8003b38 <main+0x16c>)
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 ff6d 	bl	8004960 <_Z15readCanMessagesP19__CAN_HandleTypeDef>
 8003a86:	463b      	mov	r3, r7
 8003a88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  while(can_rx_pkg.identifier != 2){
 8003a90:	e7ef      	b.n	8003a72 <main+0xa6>
  }

  memcpy(&pos_IMU, can_rx_pkg.data, sizeof(float));
 8003a92:	4b2a      	ldr	r3, [pc, #168]	; (8003b3c <main+0x170>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4a2a      	ldr	r2, [pc, #168]	; (8003b40 <main+0x174>)
 8003a98:	6013      	str	r3, [r2, #0]
  memcpy(&Vcc, can_rx_pkg.data + sizeof(float), sizeof(float));
 8003a9a:	4b2a      	ldr	r3, [pc, #168]	; (8003b44 <main+0x178>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	4b29      	ldr	r3, [pc, #164]	; (8003b48 <main+0x17c>)
 8003aa2:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Leitura CAN
	can_rx_pkg = readCanMessages(&hcan1);
 8003aa4:	4c25      	ldr	r4, [pc, #148]	; (8003b3c <main+0x170>)
 8003aa6:	463b      	mov	r3, r7
 8003aa8:	4923      	ldr	r1, [pc, #140]	; (8003b38 <main+0x16c>)
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 ff58 	bl	8004960 <_Z15readCanMessagesP19__CAN_HandleTypeDef>
 8003ab0:	463b      	mov	r3, r7
 8003ab2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ab6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	if(isEqual(can_rx_pkg, NULL_MSG)){				//Invalid Message
 8003aba:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <main+0x180>)
 8003abc:	4a1f      	ldr	r2, [pc, #124]	; (8003b3c <main+0x170>)
 8003abe:	466c      	mov	r4, sp
 8003ac0:	1d19      	adds	r1, r3, #4
 8003ac2:	c903      	ldmia	r1, {r0, r1}
 8003ac4:	e884 0003 	stmia.w	r4, {r0, r1}
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	ca07      	ldmia	r2, {r0, r1, r2}
 8003acc:	f000 ff74 	bl	80049b8 <_Z7isEqual13Z_CAN_PackageS_>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d110      	bne.n	8003b02 <main+0x136>
	}
	else if(can_rx_pkg.identifier == 1){
 8003ae0:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <main+0x170>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d00c      	beq.n	8003b02 <main+0x136>

	}
	else if(can_rx_pkg.identifier == 2){
 8003ae8:	4b14      	ldr	r3, [pc, #80]	; (8003b3c <main+0x170>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d108      	bne.n	8003b02 <main+0x136>
		memcpy(&pos_IMU, can_rx_pkg.data, sizeof(float));
 8003af0:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <main+0x170>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4a12      	ldr	r2, [pc, #72]	; (8003b40 <main+0x174>)
 8003af6:	6013      	str	r3, [r2, #0]
		memcpy(&Vcc, can_rx_pkg.data + sizeof(float), sizeof(float));
 8003af8:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <main+0x178>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <main+0x17c>)
 8003b00:	601a      	str	r2, [r3, #0]
	}

	//Para motores
	if(estado == 0) {
 8003b02:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <main+0x184>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1cc      	bne.n	8003aa4 <main+0xd8>
		// Stop nos dois PWMs; motor em repouso
		HAL_TIM_PWM_Stop(&htim16,TIM_CHANNEL_1);
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4805      	ldr	r0, [pc, #20]	; (8003b24 <main+0x158>)
 8003b0e:	f7fe fe9d 	bl	800284c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim17,TIM_CHANNEL_1);
 8003b12:	2100      	movs	r1, #0
 8003b14:	4804      	ldr	r0, [pc, #16]	; (8003b28 <main+0x15c>)
 8003b16:	f7fe fe99 	bl	800284c <HAL_TIM_PWM_Stop>

		init_flag = 1;
 8003b1a:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <main+0x188>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
	can_rx_pkg = readCanMessages(&hcan1);
 8003b20:	e7c0      	b.n	8003aa4 <main+0xd8>
 8003b22:	bf00      	nop
 8003b24:	20000114 	.word	0x20000114
 8003b28:	20000154 	.word	0x20000154
 8003b2c:	200000d4 	.word	0x200000d4
 8003b30:	2000020c 	.word	0x2000020c
 8003b34:	200001f0 	.word	0x200001f0
 8003b38:	20000060 	.word	0x20000060
 8003b3c:	20000194 	.word	0x20000194
 8003b40:	200001e4 	.word	0x200001e4
 8003b44:	2000019c 	.word	0x2000019c
 8003b48:	200001d0 	.word	0x200001d0
 8003b4c:	20000038 	.word	0x20000038
 8003b50:	200001a0 	.word	0x200001a0
 8003b54:	20000030 	.word	0x20000030

08003b58 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b0b8      	sub	sp, #224	; 0xe0
 8003b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b62:	2244      	movs	r2, #68	; 0x44
 8003b64:	2100      	movs	r1, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 ffa2 	bl	8004ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b6c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	605a      	str	r2, [r3, #4]
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	60da      	str	r2, [r3, #12]
 8003b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b7c:	463b      	mov	r3, r7
 8003b7e:	2288      	movs	r2, #136	; 0x88
 8003b80:	2100      	movs	r1, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 ff94 	bl	8004ab0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b96:	2310      	movs	r3, #16
 8003b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003bae:	230a      	movs	r3, #10
 8003bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003bb4:	2307      	movs	r3, #7
 8003bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bc6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fd fb2e 	bl	800122c <HAL_RCC_OscConfig>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bf14      	ite	ne
 8003bd6:	2301      	movne	r3, #1
 8003bd8:	2300      	moveq	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003be0:	f000 fcd2 	bl	8004588 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003be4:	230f      	movs	r3, #15
 8003be6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bea:	2303      	movs	r3, #3
 8003bec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003c02:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003c06:	2104      	movs	r1, #4
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fd febf 	bl	800198c <HAL_RCC_ClockConfig>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf14      	ite	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	2300      	moveq	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 8003c1e:	f000 fcb3 	bl	8004588 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003c26:	2300      	movs	r3, #0
 8003c28:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c2a:	463b      	mov	r3, r7
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe f879 	bl	8001d24 <HAL_RCCEx_PeriphCLKConfig>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf14      	ite	ne
 8003c38:	2301      	movne	r3, #1
 8003c3a:	2300      	moveq	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 8003c42:	f000 fca1 	bl	8004588 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003c46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003c4a:	f7fd fa99 	bl	8001180 <HAL_PWREx_ControlVoltageScaling>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2300      	moveq	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <_Z18SystemClock_Configv+0x10a>
  {
    Error_Handler();
 8003c5e:	f000 fc93 	bl	8004588 <Error_Handler>
  }
}
 8003c62:	bf00      	nop
 8003c64:	37e0      	adds	r7, #224	; 0xe0
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003c70:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <_ZL12MX_CAN1_Initv+0x6c>)
 8003c72:	4a1a      	ldr	r2, [pc, #104]	; (8003cdc <_ZL12MX_CAN1_Initv+0x70>)
 8003c74:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8003c76:	4b18      	ldr	r3, [pc, #96]	; (8003cd8 <_ZL12MX_CAN1_Initv+0x6c>)
 8003c78:	2210      	movs	r2, #16
 8003c7a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003c7c:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <_ZL12MX_CAN1_Initv+0x6c>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003c82:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <_ZL12MX_CAN1_Initv+0x6c>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8003c88:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <_ZL12MX_CAN1_Initv+0x6c>)
 8003c8a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003c8e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <_ZL12MX_CAN1_Initv+0x6c>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <_ZL12MX_CAN1_Initv+0x6c>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003c9c:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <_ZL12MX_CAN1_Initv+0x6c>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <_ZL12MX_CAN1_Initv+0x6c>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <_ZL12MX_CAN1_Initv+0x6c>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003cae:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <_ZL12MX_CAN1_Initv+0x6c>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <_ZL12MX_CAN1_Initv+0x6c>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003cba:	4807      	ldr	r0, [pc, #28]	; (8003cd8 <_ZL12MX_CAN1_Initv+0x6c>)
 8003cbc:	f7fc fb16 	bl	80002ec <HAL_CAN_Init>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 8003cd0:	f000 fc5a 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003cd4:	bf00      	nop
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000060 	.word	0x20000060
 8003cdc:	40006400 	.word	0x40006400

08003ce0 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003ce4:	4b22      	ldr	r3, [pc, #136]	; (8003d70 <_ZL12MX_I2C2_Initv+0x90>)
 8003ce6:	4a23      	ldr	r2, [pc, #140]	; (8003d74 <_ZL12MX_I2C2_Initv+0x94>)
 8003ce8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8003cea:	4b21      	ldr	r3, [pc, #132]	; (8003d70 <_ZL12MX_I2C2_Initv+0x90>)
 8003cec:	4a22      	ldr	r2, [pc, #136]	; (8003d78 <_ZL12MX_I2C2_Initv+0x98>)
 8003cee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003cf0:	4b1f      	ldr	r3, [pc, #124]	; (8003d70 <_ZL12MX_I2C2_Initv+0x90>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cf6:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <_ZL12MX_I2C2_Initv+0x90>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cfc:	4b1c      	ldr	r3, [pc, #112]	; (8003d70 <_ZL12MX_I2C2_Initv+0x90>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003d02:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <_ZL12MX_I2C2_Initv+0x90>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <_ZL12MX_I2C2_Initv+0x90>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d0e:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <_ZL12MX_I2C2_Initv+0x90>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d14:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <_ZL12MX_I2C2_Initv+0x90>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003d1a:	4815      	ldr	r0, [pc, #84]	; (8003d70 <_ZL12MX_I2C2_Initv+0x90>)
 8003d1c:	f7fd f8fc 	bl	8000f18 <HAL_I2C_Init>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf14      	ite	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	2300      	moveq	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8003d30:	f000 fc2a 	bl	8004588 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d34:	2100      	movs	r1, #0
 8003d36:	480e      	ldr	r0, [pc, #56]	; (8003d70 <_ZL12MX_I2C2_Initv+0x90>)
 8003d38:	f7fd f97d 	bl	8001036 <HAL_I2CEx_ConfigAnalogFilter>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bf14      	ite	ne
 8003d42:	2301      	movne	r3, #1
 8003d44:	2300      	moveq	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8003d4c:	f000 fc1c 	bl	8004588 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003d50:	2100      	movs	r1, #0
 8003d52:	4807      	ldr	r0, [pc, #28]	; (8003d70 <_ZL12MX_I2C2_Initv+0x90>)
 8003d54:	f7fd f9ba 	bl	80010cc <HAL_I2CEx_ConfigDigitalFilter>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bf14      	ite	ne
 8003d5e:	2301      	movne	r3, #1
 8003d60:	2300      	moveq	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 8003d68:	f000 fc0e 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003d6c:	bf00      	nop
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000088 	.word	0x20000088
 8003d74:	40005800 	.word	0x40005800
 8003d78:	10909cec 	.word	0x10909cec

08003d7c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d82:	f107 0310 	add.w	r3, r7, #16
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
 8003d8c:	609a      	str	r2, [r3, #8]
 8003d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d90:	1d3b      	adds	r3, r7, #4
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	605a      	str	r2, [r3, #4]
 8003d98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d9a:	4b25      	ldr	r3, [pc, #148]	; (8003e30 <_ZL12MX_TIM2_Initv+0xb4>)
 8003d9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003da0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000;
 8003da2:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <_ZL12MX_TIM2_Initv+0xb4>)
 8003da4:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003da8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003daa:	4b21      	ldr	r3, [pc, #132]	; (8003e30 <_ZL12MX_TIM2_Initv+0xb4>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80;
 8003db0:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <_ZL12MX_TIM2_Initv+0xb4>)
 8003db2:	2250      	movs	r2, #80	; 0x50
 8003db4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003db6:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <_ZL12MX_TIM2_Initv+0xb4>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dbc:	4b1c      	ldr	r3, [pc, #112]	; (8003e30 <_ZL12MX_TIM2_Initv+0xb4>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003dc2:	481b      	ldr	r0, [pc, #108]	; (8003e30 <_ZL12MX_TIM2_Initv+0xb4>)
 8003dc4:	f7fe fc5e 	bl	8002684 <HAL_TIM_Base_Init>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	bf14      	ite	ne
 8003dce:	2301      	movne	r3, #1
 8003dd0:	2300      	moveq	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8003dd8:	f000 fbd6 	bl	8004588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003de0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003de2:	f107 0310 	add.w	r3, r7, #16
 8003de6:	4619      	mov	r1, r3
 8003de8:	4811      	ldr	r0, [pc, #68]	; (8003e30 <_ZL12MX_TIM2_Initv+0xb4>)
 8003dea:	f7fe ffd5 	bl	8002d98 <HAL_TIM_ConfigClockSource>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf14      	ite	ne
 8003df4:	2301      	movne	r3, #1
 8003df6:	2300      	moveq	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8003dfe:	f000 fbc3 	bl	8004588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e02:	2300      	movs	r3, #0
 8003e04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e0a:	1d3b      	adds	r3, r7, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4808      	ldr	r0, [pc, #32]	; (8003e30 <_ZL12MX_TIM2_Initv+0xb4>)
 8003e10:	f7ff fcd4 	bl	80037bc <HAL_TIMEx_MasterConfigSynchronization>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bf14      	ite	ne
 8003e1a:	2301      	movne	r3, #1
 8003e1c:	2300      	moveq	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8003e24:	f000 fbb0 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003e28:	bf00      	nop
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	200000d4 	.word	0x200000d4

08003e34 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b092      	sub	sp, #72	; 0x48
 8003e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	605a      	str	r2, [r3, #4]
 8003e44:	609a      	str	r2, [r3, #8]
 8003e46:	60da      	str	r2, [r3, #12]
 8003e48:	611a      	str	r2, [r3, #16]
 8003e4a:	615a      	str	r2, [r3, #20]
 8003e4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e4e:	463b      	mov	r3, r7
 8003e50:	222c      	movs	r2, #44	; 0x2c
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fe2b 	bl	8004ab0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003e5a:	4b3a      	ldr	r3, [pc, #232]	; (8003f44 <_ZL13MX_TIM16_Initv+0x110>)
 8003e5c:	4a3a      	ldr	r2, [pc, #232]	; (8003f48 <_ZL13MX_TIM16_Initv+0x114>)
 8003e5e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 40;
 8003e60:	4b38      	ldr	r3, [pc, #224]	; (8003f44 <_ZL13MX_TIM16_Initv+0x110>)
 8003e62:	2228      	movs	r2, #40	; 0x28
 8003e64:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e66:	4b37      	ldr	r3, [pc, #220]	; (8003f44 <_ZL13MX_TIM16_Initv+0x110>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8003e6c:	4b35      	ldr	r3, [pc, #212]	; (8003f44 <_ZL13MX_TIM16_Initv+0x110>)
 8003e6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e72:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e74:	4b33      	ldr	r3, [pc, #204]	; (8003f44 <_ZL13MX_TIM16_Initv+0x110>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003e7a:	4b32      	ldr	r3, [pc, #200]	; (8003f44 <_ZL13MX_TIM16_Initv+0x110>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e80:	4b30      	ldr	r3, [pc, #192]	; (8003f44 <_ZL13MX_TIM16_Initv+0x110>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003e86:	482f      	ldr	r0, [pc, #188]	; (8003f44 <_ZL13MX_TIM16_Initv+0x110>)
 8003e88:	f7fe fbfc 	bl	8002684 <HAL_TIM_Base_Init>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bf14      	ite	ne
 8003e92:	2301      	movne	r3, #1
 8003e94:	2300      	moveq	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <_ZL13MX_TIM16_Initv+0x6c>
  {
    Error_Handler();
 8003e9c:	f000 fb74 	bl	8004588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003ea0:	4828      	ldr	r0, [pc, #160]	; (8003f44 <_ZL13MX_TIM16_Initv+0x110>)
 8003ea2:	f7fe fc45 	bl	8002730 <HAL_TIM_PWM_Init>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bf14      	ite	ne
 8003eac:	2301      	movne	r3, #1
 8003eae:	2300      	moveq	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <_ZL13MX_TIM16_Initv+0x86>
  {
    Error_Handler();
 8003eb6:	f000 fb67 	bl	8004588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003eba:	2360      	movs	r3, #96	; 0x60
 8003ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eda:	2200      	movs	r2, #0
 8003edc:	4619      	mov	r1, r3
 8003ede:	4819      	ldr	r0, [pc, #100]	; (8003f44 <_ZL13MX_TIM16_Initv+0x110>)
 8003ee0:	f7fe fe42 	bl	8002b68 <HAL_TIM_PWM_ConfigChannel>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	bf14      	ite	ne
 8003eea:	2301      	movne	r3, #1
 8003eec:	2300      	moveq	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <_ZL13MX_TIM16_Initv+0xc4>
  {
    Error_Handler();
 8003ef4:	f000 fb48 	bl	8004588 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003efc:	2300      	movs	r3, #0
 8003efe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f12:	2300      	movs	r3, #0
 8003f14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003f16:	463b      	mov	r3, r7
 8003f18:	4619      	mov	r1, r3
 8003f1a:	480a      	ldr	r0, [pc, #40]	; (8003f44 <_ZL13MX_TIM16_Initv+0x110>)
 8003f1c:	f7ff fcaa 	bl	8003874 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bf14      	ite	ne
 8003f26:	2301      	movne	r3, #1
 8003f28:	2300      	moveq	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <_ZL13MX_TIM16_Initv+0x100>
  {
    Error_Handler();
 8003f30:	f000 fb2a 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003f34:	4803      	ldr	r0, [pc, #12]	; (8003f44 <_ZL13MX_TIM16_Initv+0x110>)
 8003f36:	f000 fc27 	bl	8004788 <HAL_TIM_MspPostInit>

}
 8003f3a:	bf00      	nop
 8003f3c:	3748      	adds	r7, #72	; 0x48
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20000114 	.word	0x20000114
 8003f48:	40014400 	.word	0x40014400

08003f4c <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b092      	sub	sp, #72	; 0x48
 8003f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	605a      	str	r2, [r3, #4]
 8003f5c:	609a      	str	r2, [r3, #8]
 8003f5e:	60da      	str	r2, [r3, #12]
 8003f60:	611a      	str	r2, [r3, #16]
 8003f62:	615a      	str	r2, [r3, #20]
 8003f64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f66:	463b      	mov	r3, r7
 8003f68:	222c      	movs	r2, #44	; 0x2c
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fd9f 	bl	8004ab0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003f72:	4b3a      	ldr	r3, [pc, #232]	; (800405c <_ZL13MX_TIM17_Initv+0x110>)
 8003f74:	4a3a      	ldr	r2, [pc, #232]	; (8004060 <_ZL13MX_TIM17_Initv+0x114>)
 8003f76:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 40;
 8003f78:	4b38      	ldr	r3, [pc, #224]	; (800405c <_ZL13MX_TIM17_Initv+0x110>)
 8003f7a:	2228      	movs	r2, #40	; 0x28
 8003f7c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f7e:	4b37      	ldr	r3, [pc, #220]	; (800405c <_ZL13MX_TIM17_Initv+0x110>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8003f84:	4b35      	ldr	r3, [pc, #212]	; (800405c <_ZL13MX_TIM17_Initv+0x110>)
 8003f86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f8a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f8c:	4b33      	ldr	r3, [pc, #204]	; (800405c <_ZL13MX_TIM17_Initv+0x110>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003f92:	4b32      	ldr	r3, [pc, #200]	; (800405c <_ZL13MX_TIM17_Initv+0x110>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f98:	4b30      	ldr	r3, [pc, #192]	; (800405c <_ZL13MX_TIM17_Initv+0x110>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003f9e:	482f      	ldr	r0, [pc, #188]	; (800405c <_ZL13MX_TIM17_Initv+0x110>)
 8003fa0:	f7fe fb70 	bl	8002684 <HAL_TIM_Base_Init>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf14      	ite	ne
 8003faa:	2301      	movne	r3, #1
 8003fac:	2300      	moveq	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <_ZL13MX_TIM17_Initv+0x6c>
  {
    Error_Handler();
 8003fb4:	f000 fae8 	bl	8004588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8003fb8:	4828      	ldr	r0, [pc, #160]	; (800405c <_ZL13MX_TIM17_Initv+0x110>)
 8003fba:	f7fe fbb9 	bl	8002730 <HAL_TIM_PWM_Init>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bf14      	ite	ne
 8003fc4:	2301      	movne	r3, #1
 8003fc6:	2300      	moveq	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <_ZL13MX_TIM17_Initv+0x86>
  {
    Error_Handler();
 8003fce:	f000 fadb 	bl	8004588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fd2:	2360      	movs	r3, #96	; 0x60
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003fea:	2300      	movs	r3, #0
 8003fec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4819      	ldr	r0, [pc, #100]	; (800405c <_ZL13MX_TIM17_Initv+0x110>)
 8003ff8:	f7fe fdb6 	bl	8002b68 <HAL_TIM_PWM_ConfigChannel>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bf14      	ite	ne
 8004002:	2301      	movne	r3, #1
 8004004:	2300      	moveq	r3, #0
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <_ZL13MX_TIM17_Initv+0xc4>
  {
    Error_Handler();
 800400c:	f000 fabc 	bl	8004588 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004010:	2300      	movs	r3, #0
 8004012:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004014:	2300      	movs	r3, #0
 8004016:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004018:	2300      	movs	r3, #0
 800401a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800401c:	2300      	movs	r3, #0
 800401e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004020:	2300      	movs	r3, #0
 8004022:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004028:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800402a:	2300      	movs	r3, #0
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800402e:	463b      	mov	r3, r7
 8004030:	4619      	mov	r1, r3
 8004032:	480a      	ldr	r0, [pc, #40]	; (800405c <_ZL13MX_TIM17_Initv+0x110>)
 8004034:	f7ff fc1e 	bl	8003874 <HAL_TIMEx_ConfigBreakDeadTime>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf14      	ite	ne
 800403e:	2301      	movne	r3, #1
 8004040:	2300      	moveq	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <_ZL13MX_TIM17_Initv+0x100>
  {
    Error_Handler();
 8004048:	f000 fa9e 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800404c:	4803      	ldr	r0, [pc, #12]	; (800405c <_ZL13MX_TIM17_Initv+0x110>)
 800404e:	f000 fb9b 	bl	8004788 <HAL_TIM_MspPostInit>

}
 8004052:	bf00      	nop
 8004054:	3748      	adds	r7, #72	; 0x48
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000154 	.word	0x20000154
 8004060:	40014800 	.word	0x40014800

08004064 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406a:	f107 030c 	add.w	r3, r7, #12
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	609a      	str	r2, [r3, #8]
 8004076:	60da      	str	r2, [r3, #12]
 8004078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800407a:	4b1e      	ldr	r3, [pc, #120]	; (80040f4 <_ZL12MX_GPIO_Initv+0x90>)
 800407c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407e:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <_ZL12MX_GPIO_Initv+0x90>)
 8004080:	f043 0304 	orr.w	r3, r3, #4
 8004084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004086:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <_ZL12MX_GPIO_Initv+0x90>)
 8004088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004092:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <_ZL12MX_GPIO_Initv+0x90>)
 8004094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004096:	4a17      	ldr	r2, [pc, #92]	; (80040f4 <_ZL12MX_GPIO_Initv+0x90>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800409e:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <_ZL12MX_GPIO_Initv+0x90>)
 80040a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	607b      	str	r3, [r7, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040aa:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <_ZL12MX_GPIO_Initv+0x90>)
 80040ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ae:	4a11      	ldr	r2, [pc, #68]	; (80040f4 <_ZL12MX_GPIO_Initv+0x90>)
 80040b0:	f043 0302 	orr.w	r3, r3, #2
 80040b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040b6:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <_ZL12MX_GPIO_Initv+0x90>)
 80040b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|ENABLE_Pin, GPIO_PIN_RESET);
 80040c2:	2200      	movs	r2, #0
 80040c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80040c8:	480b      	ldr	r0, [pc, #44]	; (80040f8 <_ZL12MX_GPIO_Initv+0x94>)
 80040ca:	f7fc ff0d 	bl	8000ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin ENABLE_Pin */
  GPIO_InitStruct.Pin = LED_Pin|ENABLE_Pin;
 80040ce:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80040d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040d4:	2301      	movs	r3, #1
 80040d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040dc:	2300      	movs	r3, #0
 80040de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040e0:	f107 030c 	add.w	r3, r7, #12
 80040e4:	4619      	mov	r1, r3
 80040e6:	4804      	ldr	r0, [pc, #16]	; (80040f8 <_ZL12MX_GPIO_Initv+0x94>)
 80040e8:	f7fc fd56 	bl	8000b98 <HAL_GPIO_Init>

}
 80040ec:	bf00      	nop
 80040ee:	3720      	adds	r7, #32
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40021000 	.word	0x40021000
 80040f8:	48000800 	.word	0x48000800

080040fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b090      	sub	sp, #64	; 0x40
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef configPWM_16 = {0};
 8004104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	609a      	str	r2, [r3, #8]
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	611a      	str	r2, [r3, #16]
 8004114:	615a      	str	r2, [r3, #20]
 8004116:	619a      	str	r2, [r3, #24]
	TIM_OC_InitTypeDef configPWM_17 = {0};
 8004118:	f107 0308 	add.w	r3, r7, #8
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	609a      	str	r2, [r3, #8]
 8004124:	60da      	str	r2, [r3, #12]
 8004126:	611a      	str	r2, [r3, #16]
 8004128:	615a      	str	r2, [r3, #20]
 800412a:	619a      	str	r2, [r3, #24]

	configPWM_16.OCMode = TIM_OCMODE_PWM1;
 800412c:	2360      	movs	r3, #96	; 0x60
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
	configPWM_16.Pulse = 0; // Largura do pulso
 8004130:	2300      	movs	r3, #0
 8004132:	62bb      	str	r3, [r7, #40]	; 0x28
	configPWM_16.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004134:	2300      	movs	r3, #0
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
	configPWM_16.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004138:	2300      	movs	r3, #0
 800413a:	633b      	str	r3, [r7, #48]	; 0x30
	configPWM_16.OCFastMode = TIM_OCFAST_DISABLE;
 800413c:	2300      	movs	r3, #0
 800413e:	637b      	str	r3, [r7, #52]	; 0x34
	configPWM_16.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004140:	2300      	movs	r3, #0
 8004142:	63bb      	str	r3, [r7, #56]	; 0x38
	configPWM_16.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004144:	2300      	movs	r3, #0
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c

	configPWM_17.OCMode = TIM_OCMODE_PWM1;
 8004148:	2360      	movs	r3, #96	; 0x60
 800414a:	60bb      	str	r3, [r7, #8]
	configPWM_17.Pulse = 0; // Largura do pulso
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]
	configPWM_17.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004150:	2300      	movs	r3, #0
 8004152:	613b      	str	r3, [r7, #16]
	configPWM_17.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
	configPWM_17.OCFastMode = TIM_OCFAST_DISABLE;
 8004158:	2300      	movs	r3, #0
 800415a:	61bb      	str	r3, [r7, #24]
	configPWM_17.OCIdleState = TIM_OCIDLESTATE_RESET;
 800415c:	2300      	movs	r3, #0
 800415e:	61fb      	str	r3, [r7, #28]
	configPWM_17.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004160:	2300      	movs	r3, #0
 8004162:	623b      	str	r3, [r7, #32]

	if(htim->Instance == TIM2) { // Subrotina de interrupção do timer 2
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416c:	f040 81d2 	bne.w	8004514 <HAL_TIM_PeriodElapsedCallback+0x418>
		// Atualizar ação de controle: lembrar de girar para o sentido oposto

		//Maquina de estados
		if(estado == 0) {
 8004170:	4b42      	ldr	r3, [pc, #264]	; (800427c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10a      	bne.n	800418e <HAL_TIM_PeriodElapsedCallback+0x92>
			// Stop nos dois PWMs; motor em repouso
			HAL_TIM_PWM_Stop(&htim16,TIM_CHANNEL_1);
 8004178:	2100      	movs	r1, #0
 800417a:	4841      	ldr	r0, [pc, #260]	; (8004280 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800417c:	f7fe fb66 	bl	800284c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim17,TIM_CHANNEL_1);
 8004180:	2100      	movs	r1, #0
 8004182:	4840      	ldr	r0, [pc, #256]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8004184:	f7fe fb62 	bl	800284c <HAL_TIM_PWM_Stop>

			init_flag = 1;
 8004188:	4b3f      	ldr	r3, [pc, #252]	; (8004288 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]
		}
		if(estado == 1) {
 800418e:	4b3b      	ldr	r3, [pc, #236]	; (800427c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b01      	cmp	r3, #1
 8004194:	f040 80ac 	bne.w	80042f0 <HAL_TIM_PeriodElapsedCallback+0x1f4>
			q0 = q0_vel;
 8004198:	4b3c      	ldr	r3, [pc, #240]	; (800428c <HAL_TIM_PeriodElapsedCallback+0x190>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a3c      	ldr	r2, [pc, #240]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800419e:	6013      	str	r3, [r2, #0]
			q1 = q1_vel;
 80041a0:	4b3c      	ldr	r3, [pc, #240]	; (8004294 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a3c      	ldr	r2, [pc, #240]	; (8004298 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80041a6:	6013      	str	r3, [r2, #0]
			q2 = q2_vel;
 80041a8:	4b3c      	ldr	r3, [pc, #240]	; (800429c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a3c      	ldr	r2, [pc, #240]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80041ae:	6013      	str	r3, [r2, #0]
			qx = qx_vel;
 80041b0:	4b3c      	ldr	r3, [pc, #240]	; (80042a4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a3c      	ldr	r2, [pc, #240]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80041b6:	6013      	str	r3, [r2, #0]
			qy = qy_vel;
 80041b8:	4b3c      	ldr	r3, [pc, #240]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a3c      	ldr	r2, [pc, #240]	; (80042b0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80041be:	6013      	str	r3, [r2, #0]
			saidaDesejada = 0;
 80041c0:	4b3c      	ldr	r3, [pc, #240]	; (80042b4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]

			// Atualizacao saida e tratamento inicializacao
			if(init_flag == 1){
 80041c8:	4b2f      	ldr	r3, [pc, #188]	; (8004288 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d117      	bne.n	8004200 <HAL_TIM_PeriodElapsedCallback+0x104>
				pos_IMU_Anterior = pos_IMU;
 80041d0:	4b39      	ldr	r3, [pc, #228]	; (80042b8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a39      	ldr	r2, [pc, #228]	; (80042bc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80041d6:	6013      	str	r3, [r2, #0]

				u0 = 0; u00 = 0;
 80041d8:	4b39      	ldr	r3, [pc, #228]	; (80042c0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	4b38      	ldr	r3, [pc, #224]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
				e0 = 0; e00 = 0;
 80041e8:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	4b36      	ldr	r3, [pc, #216]	; (80042cc <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

				init_flag = 0;
 80041f8:	4b23      	ldr	r3, [pc, #140]	; (8004288 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e077      	b.n	80042f0 <HAL_TIM_PeriodElapsedCallback+0x1f4>
			}
			else{
				vel_IMU = (pos_IMU - pos_IMU_Anterior)/T0;
 8004200:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8004202:	ed93 7a00 	vldr	s14, [r3]
 8004206:	4b2d      	ldr	r3, [pc, #180]	; (80042bc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8004208:	edd3 7a00 	vldr	s15, [r3]
 800420c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004210:	4b2f      	ldr	r3, [pc, #188]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8004212:	ed93 7a00 	vldr	s14, [r3]
 8004216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800421a:	4b2e      	ldr	r3, [pc, #184]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800421c:	edc3 7a00 	vstr	s15, [r3]
				if(abs(vel_IMU) > 800){
 8004220:	4b2c      	ldr	r3, [pc, #176]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8004222:	edd3 7a00 	vldr	s15, [r3]
 8004226:	eeb0 0a67 	vmov.f32	s0, s15
 800422a:	f7ff fbbf 	bl	80039ac <_ZSt3absf>
 800422e:	eeb0 7a40 	vmov.f32	s14, s0
 8004232:	eddf 7a29 	vldr	s15, [pc, #164]	; 80042d8 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8004236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800423a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423e:	bfcc      	ite	gt
 8004240:	2301      	movgt	r3, #1
 8004242:	2300      	movle	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d04a      	beq.n	80042e0 <HAL_TIM_PeriodElapsedCallback+0x1e4>
					vel_IMU = ((360-pos_IMU_Anterior) + pos_IMU)/T0;
 800424a:	4b1c      	ldr	r3, [pc, #112]	; (80042bc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800424c:	edd3 7a00 	vldr	s15, [r3]
 8004250:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80042dc <HAL_TIM_PeriodElapsedCallback+0x1e0>
 8004254:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004258:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800425a:	edd3 7a00 	vldr	s15, [r3]
 800425e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8004262:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8004264:	ed93 7a00 	vldr	s14, [r3]
 8004268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800426e:	edc3 7a00 	vstr	s15, [r3]
					pos_IMU_Anterior = pos_IMU;
 8004272:	4b11      	ldr	r3, [pc, #68]	; (80042b8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a11      	ldr	r2, [pc, #68]	; (80042bc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e14b      	b.n	8004514 <HAL_TIM_PeriodElapsedCallback+0x418>
 800427c:	200001a0 	.word	0x200001a0
 8004280:	20000114 	.word	0x20000114
 8004284:	20000154 	.word	0x20000154
 8004288:	20000030 	.word	0x20000030
 800428c:	20000008 	.word	0x20000008
 8004290:	200001a4 	.word	0x200001a4
 8004294:	2000000c 	.word	0x2000000c
 8004298:	200001a8 	.word	0x200001a8
 800429c:	20000010 	.word	0x20000010
 80042a0:	200001ac 	.word	0x200001ac
 80042a4:	20000014 	.word	0x20000014
 80042a8:	200001b0 	.word	0x200001b0
 80042ac:	20000018 	.word	0x20000018
 80042b0:	200001b4 	.word	0x200001b4
 80042b4:	200001d8 	.word	0x200001d8
 80042b8:	200001e4 	.word	0x200001e4
 80042bc:	200001e8 	.word	0x200001e8
 80042c0:	200001c8 	.word	0x200001c8
 80042c4:	200001cc 	.word	0x200001cc
 80042c8:	200001bc 	.word	0x200001bc
 80042cc:	200001c0 	.word	0x200001c0
 80042d0:	20000028 	.word	0x20000028
 80042d4:	200001ec 	.word	0x200001ec
 80042d8:	44480000 	.word	0x44480000
 80042dc:	43b40000 	.word	0x43b40000
					return;
				}
				saidaAtual = vel_IMU;
 80042e0:	4b8e      	ldr	r3, [pc, #568]	; (800451c <HAL_TIM_PeriodElapsedCallback+0x420>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a8e      	ldr	r2, [pc, #568]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0x424>)
 80042e6:	6013      	str	r3, [r2, #0]
				pos_IMU_Anterior = pos_IMU;
 80042e8:	4b8e      	ldr	r3, [pc, #568]	; (8004524 <HAL_TIM_PeriodElapsedCallback+0x428>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a8e      	ldr	r2, [pc, #568]	; (8004528 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80042ee:	6013      	str	r3, [r2, #0]
			}

		}

		if(estado == 2) {
 80042f0:	4b8e      	ldr	r3, [pc, #568]	; (800452c <HAL_TIM_PeriodElapsedCallback+0x430>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d132      	bne.n	800435e <HAL_TIM_PeriodElapsedCallback+0x262>
			if(init_flag == 1){
 80042f8:	4b8d      	ldr	r3, [pc, #564]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0x434>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d112      	bne.n	8004326 <HAL_TIM_PeriodElapsedCallback+0x22a>
				u0 = 0; u00 = 0;
 8004300:	4b8c      	ldr	r3, [pc, #560]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	4b8b      	ldr	r3, [pc, #556]	; (8004538 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
				e0 = 0; e00 = 0;
 8004310:	4b8a      	ldr	r3, [pc, #552]	; (800453c <HAL_TIM_PeriodElapsedCallback+0x440>)
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	4b89      	ldr	r3, [pc, #548]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0x444>)
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

				init_flag = 0;
 8004320:	4b83      	ldr	r3, [pc, #524]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
			}

			q0 = q0_pos;
 8004326:	4b87      	ldr	r3, [pc, #540]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a87      	ldr	r2, [pc, #540]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0x44c>)
 800432c:	6013      	str	r3, [r2, #0]
			q1 = q1_pos;
 800432e:	4b87      	ldr	r3, [pc, #540]	; (800454c <HAL_TIM_PeriodElapsedCallback+0x450>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a87      	ldr	r2, [pc, #540]	; (8004550 <HAL_TIM_PeriodElapsedCallback+0x454>)
 8004334:	6013      	str	r3, [r2, #0]
			q2 = 0;
 8004336:	4b87      	ldr	r3, [pc, #540]	; (8004554 <HAL_TIM_PeriodElapsedCallback+0x458>)
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
			qx = qx_pos;
 800433e:	4b86      	ldr	r3, [pc, #536]	; (8004558 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a86      	ldr	r2, [pc, #536]	; (800455c <HAL_TIM_PeriodElapsedCallback+0x460>)
 8004344:	6013      	str	r3, [r2, #0]
			qy = 0;
 8004346:	4b86      	ldr	r3, [pc, #536]	; (8004560 <HAL_TIM_PeriodElapsedCallback+0x464>)
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	601a      	str	r2, [r3, #0]

			saidaAtual = pos_IMU;
 800434e:	4b75      	ldr	r3, [pc, #468]	; (8004524 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a73      	ldr	r2, [pc, #460]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8004354:	6013      	str	r3, [r2, #0]
			//TODO
			saidaDesejada = 0;//posIni_IMU +;
 8004356:	4b83      	ldr	r3, [pc, #524]	; (8004564 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
		}

		if(estado != 0) {
 800435e:	4b73      	ldr	r3, [pc, #460]	; (800452c <HAL_TIM_PeriodElapsedCallback+0x430>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d07c      	beq.n	8004460 <HAL_TIM_PeriodElapsedCallback+0x364>
			e = saidaDesejada - saidaAtual;
 8004366:	4b7f      	ldr	r3, [pc, #508]	; (8004564 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8004368:	ed93 7a00 	vldr	s14, [r3]
 800436c:	4b6c      	ldr	r3, [pc, #432]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0x424>)
 800436e:	edd3 7a00 	vldr	s15, [r3]
 8004372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004376:	4b7c      	ldr	r3, [pc, #496]	; (8004568 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8004378:	edc3 7a00 	vstr	s15, [r3]
			u = q0*e+q1*e0+q2*e00 -qx*u0 -qy*u00;
 800437c:	4b72      	ldr	r3, [pc, #456]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0x44c>)
 800437e:	ed93 7a00 	vldr	s14, [r3]
 8004382:	4b79      	ldr	r3, [pc, #484]	; (8004568 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8004384:	edd3 7a00 	vldr	s15, [r3]
 8004388:	ee27 7a27 	vmul.f32	s14, s14, s15
 800438c:	4b70      	ldr	r3, [pc, #448]	; (8004550 <HAL_TIM_PeriodElapsedCallback+0x454>)
 800438e:	edd3 6a00 	vldr	s13, [r3]
 8004392:	4b6a      	ldr	r3, [pc, #424]	; (800453c <HAL_TIM_PeriodElapsedCallback+0x440>)
 8004394:	edd3 7a00 	vldr	s15, [r3]
 8004398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800439c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043a0:	4b6c      	ldr	r3, [pc, #432]	; (8004554 <HAL_TIM_PeriodElapsedCallback+0x458>)
 80043a2:	edd3 6a00 	vldr	s13, [r3]
 80043a6:	4b66      	ldr	r3, [pc, #408]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0x444>)
 80043a8:	edd3 7a00 	vldr	s15, [r3]
 80043ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043b4:	4b69      	ldr	r3, [pc, #420]	; (800455c <HAL_TIM_PeriodElapsedCallback+0x460>)
 80043b6:	edd3 6a00 	vldr	s13, [r3]
 80043ba:	4b5e      	ldr	r3, [pc, #376]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x438>)
 80043bc:	edd3 7a00 	vldr	s15, [r3]
 80043c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043c8:	4b65      	ldr	r3, [pc, #404]	; (8004560 <HAL_TIM_PeriodElapsedCallback+0x464>)
 80043ca:	edd3 6a00 	vldr	s13, [r3]
 80043ce:	4b5a      	ldr	r3, [pc, #360]	; (8004538 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 80043d0:	edd3 7a00 	vldr	s15, [r3]
 80043d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043dc:	4b63      	ldr	r3, [pc, #396]	; (800456c <HAL_TIM_PeriodElapsedCallback+0x470>)
 80043de:	edc3 7a00 	vstr	s15, [r3]

			if(u > Vcc) {
 80043e2:	4b62      	ldr	r3, [pc, #392]	; (800456c <HAL_TIM_PeriodElapsedCallback+0x470>)
 80043e4:	ed93 7a00 	vldr	s14, [r3]
 80043e8:	4b61      	ldr	r3, [pc, #388]	; (8004570 <HAL_TIM_PeriodElapsedCallback+0x474>)
 80043ea:	edd3 7a00 	vldr	s15, [r3]
 80043ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f6:	dd03      	ble.n	8004400 <HAL_TIM_PeriodElapsedCallback+0x304>
				u = Vcc;
 80043f8:	4b5d      	ldr	r3, [pc, #372]	; (8004570 <HAL_TIM_PeriodElapsedCallback+0x474>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a5b      	ldr	r2, [pc, #364]	; (800456c <HAL_TIM_PeriodElapsedCallback+0x470>)
 80043fe:	6013      	str	r3, [r2, #0]
			}

			if(u < -Vcc) {
 8004400:	4b5b      	ldr	r3, [pc, #364]	; (8004570 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8004402:	edd3 7a00 	vldr	s15, [r3]
 8004406:	eeb1 7a67 	vneg.f32	s14, s15
 800440a:	4b58      	ldr	r3, [pc, #352]	; (800456c <HAL_TIM_PeriodElapsedCallback+0x470>)
 800440c:	edd3 7a00 	vldr	s15, [r3]
 8004410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004418:	dd07      	ble.n	800442a <HAL_TIM_PeriodElapsedCallback+0x32e>
				u = -Vcc;
 800441a:	4b55      	ldr	r3, [pc, #340]	; (8004570 <HAL_TIM_PeriodElapsedCallback+0x474>)
 800441c:	edd3 7a00 	vldr	s15, [r3]
 8004420:	eef1 7a67 	vneg.f32	s15, s15
 8004424:	4b51      	ldr	r3, [pc, #324]	; (800456c <HAL_TIM_PeriodElapsedCallback+0x470>)
 8004426:	edc3 7a00 	vstr	s15, [r3]
			}

			// Atualizar dutycicle
			dutyCicle = u/Vcc;
 800442a:	4b50      	ldr	r3, [pc, #320]	; (800456c <HAL_TIM_PeriodElapsedCallback+0x470>)
 800442c:	edd3 6a00 	vldr	s13, [r3]
 8004430:	4b4f      	ldr	r3, [pc, #316]	; (8004570 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8004432:	ed93 7a00 	vldr	s14, [r3]
 8004436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800443a:	4b4e      	ldr	r3, [pc, #312]	; (8004574 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800443c:	edc3 7a00 	vstr	s15, [r3]

			// Atualizar variáveis de memória
			e00 = e0;
 8004440:	4b3e      	ldr	r3, [pc, #248]	; (800453c <HAL_TIM_PeriodElapsedCallback+0x440>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a3e      	ldr	r2, [pc, #248]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8004446:	6013      	str	r3, [r2, #0]
			e0 = e;
 8004448:	4b47      	ldr	r3, [pc, #284]	; (8004568 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a3b      	ldr	r2, [pc, #236]	; (800453c <HAL_TIM_PeriodElapsedCallback+0x440>)
 800444e:	6013      	str	r3, [r2, #0]
			u00 = u0;
 8004450:	4b38      	ldr	r3, [pc, #224]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a38      	ldr	r2, [pc, #224]	; (8004538 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8004456:	6013      	str	r3, [r2, #0]
			u0 = u;
 8004458:	4b44      	ldr	r3, [pc, #272]	; (800456c <HAL_TIM_PeriodElapsedCallback+0x470>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a35      	ldr	r2, [pc, #212]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x438>)
 800445e:	6013      	str	r3, [r2, #0]

		}

		if(dutyCicle != 0) {
 8004460:	4b44      	ldr	r3, [pc, #272]	; (8004574 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8004462:	edd3 7a00 	vldr	s15, [r3]
 8004466:	eef5 7a40 	vcmp.f32	s15, #0.0
 800446a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446e:	d051      	beq.n	8004514 <HAL_TIM_PeriodElapsedCallback+0x418>
			dir = 0;
 8004470:	4b41      	ldr	r3, [pc, #260]	; (8004578 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
			if(dir == 0) {
 8004478:	4b3f      	ldr	r3, [pc, #252]	; (8004578 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 800447a:	edd3 7a00 	vldr	s15, [r3]
 800447e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004486:	d11d      	bne.n	80044c4 <HAL_TIM_PeriodElapsedCallback+0x3c8>

				configPWM_16.Pulse = dutyCicle*T0_PWM;
 8004488:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800448a:	ed93 7a00 	vldr	s14, [r3]
 800448e:	4b3b      	ldr	r3, [pc, #236]	; (800457c <HAL_TIM_PeriodElapsedCallback+0x480>)
 8004490:	edd3 7a00 	vldr	s15, [r3]
 8004494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800449c:	ee17 3a90 	vmov	r3, s15
 80044a0:	62bb      	str	r3, [r7, #40]	; 0x28
				configPWM_17.Pulse = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim16, &configPWM_16, TIM_CHANNEL_1);
 80044a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044aa:	2200      	movs	r2, #0
 80044ac:	4619      	mov	r1, r3
 80044ae:	4834      	ldr	r0, [pc, #208]	; (8004580 <HAL_TIM_PeriodElapsedCallback+0x484>)
 80044b0:	f7fe fb5a 	bl	8002b68 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim16,TIM_CHANNEL_1);
 80044b4:	2100      	movs	r1, #0
 80044b6:	4832      	ldr	r0, [pc, #200]	; (8004580 <HAL_TIM_PeriodElapsedCallback+0x484>)
 80044b8:	f7fe f970 	bl	800279c <HAL_TIM_PWM_Start>

				HAL_TIM_PWM_Stop(&htim17,TIM_CHANNEL_1);
 80044bc:	2100      	movs	r1, #0
 80044be:	4831      	ldr	r0, [pc, #196]	; (8004584 <HAL_TIM_PeriodElapsedCallback+0x488>)
 80044c0:	f7fe f9c4 	bl	800284c <HAL_TIM_PWM_Stop>

			}

			if(dir == 1) {
 80044c4:	4b2c      	ldr	r3, [pc, #176]	; (8004578 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 80044c6:	edd3 7a00 	vldr	s15, [r3]
 80044ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ce:	eef4 7a47 	vcmp.f32	s15, s14
 80044d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d6:	d11d      	bne.n	8004514 <HAL_TIM_PeriodElapsedCallback+0x418>

				configPWM_17.Pulse = dutyCicle*T0_PWM;
 80044d8:	4b26      	ldr	r3, [pc, #152]	; (8004574 <HAL_TIM_PeriodElapsedCallback+0x478>)
 80044da:	ed93 7a00 	vldr	s14, [r3]
 80044de:	4b27      	ldr	r3, [pc, #156]	; (800457c <HAL_TIM_PeriodElapsedCallback+0x480>)
 80044e0:	edd3 7a00 	vldr	s15, [r3]
 80044e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ec:	ee17 3a90 	vmov	r3, s15
 80044f0:	60fb      	str	r3, [r7, #12]
				configPWM_16.Pulse = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	62bb      	str	r3, [r7, #40]	; 0x28
				HAL_TIM_PWM_ConfigChannel(&htim17, &configPWM_17, TIM_CHANNEL_1);
 80044f6:	f107 0308 	add.w	r3, r7, #8
 80044fa:	2200      	movs	r2, #0
 80044fc:	4619      	mov	r1, r3
 80044fe:	4821      	ldr	r0, [pc, #132]	; (8004584 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8004500:	f7fe fb32 	bl	8002b68 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim17,TIM_CHANNEL_1);
 8004504:	2100      	movs	r1, #0
 8004506:	481f      	ldr	r0, [pc, #124]	; (8004584 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8004508:	f7fe f948 	bl	800279c <HAL_TIM_PWM_Start>

				HAL_TIM_PWM_Stop(&htim16,TIM_CHANNEL_1);
 800450c:	2100      	movs	r1, #0
 800450e:	481c      	ldr	r0, [pc, #112]	; (8004580 <HAL_TIM_PeriodElapsedCallback+0x484>)
 8004510:	f7fe f99c 	bl	800284c <HAL_TIM_PWM_Stop>
			}

		}
	}

}
 8004514:	3740      	adds	r7, #64	; 0x40
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	200001ec 	.word	0x200001ec
 8004520:	200001dc 	.word	0x200001dc
 8004524:	200001e4 	.word	0x200001e4
 8004528:	200001e8 	.word	0x200001e8
 800452c:	200001a0 	.word	0x200001a0
 8004530:	20000030 	.word	0x20000030
 8004534:	200001c8 	.word	0x200001c8
 8004538:	200001cc 	.word	0x200001cc
 800453c:	200001bc 	.word	0x200001bc
 8004540:	200001c0 	.word	0x200001c0
 8004544:	2000001c 	.word	0x2000001c
 8004548:	200001a4 	.word	0x200001a4
 800454c:	20000020 	.word	0x20000020
 8004550:	200001a8 	.word	0x200001a8
 8004554:	200001ac 	.word	0x200001ac
 8004558:	20000024 	.word	0x20000024
 800455c:	200001b0 	.word	0x200001b0
 8004560:	200001b4 	.word	0x200001b4
 8004564:	200001d8 	.word	0x200001d8
 8004568:	200001b8 	.word	0x200001b8
 800456c:	200001c4 	.word	0x200001c4
 8004570:	200001d0 	.word	0x200001d0
 8004574:	200001d4 	.word	0x200001d4
 8004578:	200001e0 	.word	0x200001e0
 800457c:	2000002c 	.word	0x2000002c
 8004580:	20000114 	.word	0x20000114
 8004584:	20000154 	.word	0x20000154

08004588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800458c:	bf00      	nop
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800459e:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <HAL_MspInit+0x44>)
 80045a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a2:	4a0e      	ldr	r2, [pc, #56]	; (80045dc <HAL_MspInit+0x44>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6613      	str	r3, [r2, #96]	; 0x60
 80045aa:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <HAL_MspInit+0x44>)
 80045ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	607b      	str	r3, [r7, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045b6:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HAL_MspInit+0x44>)
 80045b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ba:	4a08      	ldr	r2, [pc, #32]	; (80045dc <HAL_MspInit+0x44>)
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c0:	6593      	str	r3, [r2, #88]	; 0x58
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <HAL_MspInit+0x44>)
 80045c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000

080045e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e8:	f107 0314 	add.w	r3, r7, #20
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a18      	ldr	r2, [pc, #96]	; (8004660 <HAL_CAN_MspInit+0x80>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d129      	bne.n	8004656 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004602:	4b18      	ldr	r3, [pc, #96]	; (8004664 <HAL_CAN_MspInit+0x84>)
 8004604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004606:	4a17      	ldr	r2, [pc, #92]	; (8004664 <HAL_CAN_MspInit+0x84>)
 8004608:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800460c:	6593      	str	r3, [r2, #88]	; 0x58
 800460e:	4b15      	ldr	r3, [pc, #84]	; (8004664 <HAL_CAN_MspInit+0x84>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800461a:	4b12      	ldr	r3, [pc, #72]	; (8004664 <HAL_CAN_MspInit+0x84>)
 800461c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461e:	4a11      	ldr	r2, [pc, #68]	; (8004664 <HAL_CAN_MspInit+0x84>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004626:	4b0f      	ldr	r3, [pc, #60]	; (8004664 <HAL_CAN_MspInit+0x84>)
 8004628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004632:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004638:	2302      	movs	r3, #2
 800463a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463c:	2300      	movs	r3, #0
 800463e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004640:	2303      	movs	r3, #3
 8004642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004644:	2309      	movs	r3, #9
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004648:	f107 0314 	add.w	r3, r7, #20
 800464c:	4619      	mov	r1, r3
 800464e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004652:	f7fc faa1 	bl	8000b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004656:	bf00      	nop
 8004658:	3728      	adds	r7, #40	; 0x28
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40006400 	.word	0x40006400
 8004664:	40021000 	.word	0x40021000

08004668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	; 0x28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004670:	f107 0314 	add.w	r3, r7, #20
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a17      	ldr	r2, [pc, #92]	; (80046e4 <HAL_I2C_MspInit+0x7c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d128      	bne.n	80046dc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800468a:	4b17      	ldr	r3, [pc, #92]	; (80046e8 <HAL_I2C_MspInit+0x80>)
 800468c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468e:	4a16      	ldr	r2, [pc, #88]	; (80046e8 <HAL_I2C_MspInit+0x80>)
 8004690:	f043 0302 	orr.w	r3, r3, #2
 8004694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004696:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <HAL_I2C_MspInit+0x80>)
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80046a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80046a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046a8:	2312      	movs	r3, #18
 80046aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046ac:	2301      	movs	r3, #1
 80046ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b0:	2303      	movs	r3, #3
 80046b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80046b4:	2304      	movs	r3, #4
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046b8:	f107 0314 	add.w	r3, r7, #20
 80046bc:	4619      	mov	r1, r3
 80046be:	480b      	ldr	r0, [pc, #44]	; (80046ec <HAL_I2C_MspInit+0x84>)
 80046c0:	f7fc fa6a 	bl	8000b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80046c4:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <HAL_I2C_MspInit+0x80>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	4a07      	ldr	r2, [pc, #28]	; (80046e8 <HAL_I2C_MspInit+0x80>)
 80046ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046ce:	6593      	str	r3, [r2, #88]	; 0x58
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_I2C_MspInit+0x80>)
 80046d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80046dc:	bf00      	nop
 80046de:	3728      	adds	r7, #40	; 0x28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40005800 	.word	0x40005800
 80046e8:	40021000 	.word	0x40021000
 80046ec:	48000400 	.word	0x48000400

080046f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004700:	d114      	bne.n	800472c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004702:	4b1e      	ldr	r3, [pc, #120]	; (800477c <HAL_TIM_Base_MspInit+0x8c>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	4a1d      	ldr	r2, [pc, #116]	; (800477c <HAL_TIM_Base_MspInit+0x8c>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	6593      	str	r3, [r2, #88]	; 0x58
 800470e:	4b1b      	ldr	r3, [pc, #108]	; (800477c <HAL_TIM_Base_MspInit+0x8c>)
 8004710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800471a:	2200      	movs	r2, #0
 800471c:	2100      	movs	r1, #0
 800471e:	201c      	movs	r0, #28
 8004720:	f7fc fa03 	bl	8000b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004724:	201c      	movs	r0, #28
 8004726:	f7fc fa1c 	bl	8000b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800472a:	e022      	b.n	8004772 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a13      	ldr	r2, [pc, #76]	; (8004780 <HAL_TIM_Base_MspInit+0x90>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d10c      	bne.n	8004750 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004736:	4b11      	ldr	r3, [pc, #68]	; (800477c <HAL_TIM_Base_MspInit+0x8c>)
 8004738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800473a:	4a10      	ldr	r2, [pc, #64]	; (800477c <HAL_TIM_Base_MspInit+0x8c>)
 800473c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004740:	6613      	str	r3, [r2, #96]	; 0x60
 8004742:	4b0e      	ldr	r3, [pc, #56]	; (800477c <HAL_TIM_Base_MspInit+0x8c>)
 8004744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	693b      	ldr	r3, [r7, #16]
}
 800474e:	e010      	b.n	8004772 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a0b      	ldr	r2, [pc, #44]	; (8004784 <HAL_TIM_Base_MspInit+0x94>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d10b      	bne.n	8004772 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800475a:	4b08      	ldr	r3, [pc, #32]	; (800477c <HAL_TIM_Base_MspInit+0x8c>)
 800475c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475e:	4a07      	ldr	r2, [pc, #28]	; (800477c <HAL_TIM_Base_MspInit+0x8c>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004764:	6613      	str	r3, [r2, #96]	; 0x60
 8004766:	4b05      	ldr	r3, [pc, #20]	; (800477c <HAL_TIM_Base_MspInit+0x8c>)
 8004768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
}
 8004772:	bf00      	nop
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000
 8004780:	40014400 	.word	0x40014400
 8004784:	40014800 	.word	0x40014800

08004788 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	; 0x28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004790:	f107 0314 	add.w	r3, r7, #20
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	605a      	str	r2, [r3, #4]
 800479a:	609a      	str	r2, [r3, #8]
 800479c:	60da      	str	r2, [r3, #12]
 800479e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a23      	ldr	r2, [pc, #140]	; (8004834 <HAL_TIM_MspPostInit+0xac>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d11d      	bne.n	80047e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047aa:	4b23      	ldr	r3, [pc, #140]	; (8004838 <HAL_TIM_MspPostInit+0xb0>)
 80047ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ae:	4a22      	ldr	r2, [pc, #136]	; (8004838 <HAL_TIM_MspPostInit+0xb0>)
 80047b0:	f043 0302 	orr.w	r3, r3, #2
 80047b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047b6:	4b20      	ldr	r3, [pc, #128]	; (8004838 <HAL_TIM_MspPostInit+0xb0>)
 80047b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration    
    PB8     ------> TIM16_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80047c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c8:	2302      	movs	r3, #2
 80047ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d0:	2300      	movs	r3, #0
 80047d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80047d4:	230e      	movs	r3, #14
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047d8:	f107 0314 	add.w	r3, r7, #20
 80047dc:	4619      	mov	r1, r3
 80047de:	4817      	ldr	r0, [pc, #92]	; (800483c <HAL_TIM_MspPostInit+0xb4>)
 80047e0:	f7fc f9da 	bl	8000b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80047e4:	e021      	b.n	800482a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a15      	ldr	r2, [pc, #84]	; (8004840 <HAL_TIM_MspPostInit+0xb8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d11c      	bne.n	800482a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047f0:	4b11      	ldr	r3, [pc, #68]	; (8004838 <HAL_TIM_MspPostInit+0xb0>)
 80047f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f4:	4a10      	ldr	r2, [pc, #64]	; (8004838 <HAL_TIM_MspPostInit+0xb0>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047fc:	4b0e      	ldr	r3, [pc, #56]	; (8004838 <HAL_TIM_MspPostInit+0xb0>)
 80047fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480c:	2302      	movs	r3, #2
 800480e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004814:	2300      	movs	r3, #0
 8004816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8004818:	230e      	movs	r3, #14
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481c:	f107 0314 	add.w	r3, r7, #20
 8004820:	4619      	mov	r1, r3
 8004822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004826:	f7fc f9b7 	bl	8000b98 <HAL_GPIO_Init>
}
 800482a:	bf00      	nop
 800482c:	3728      	adds	r7, #40	; 0x28
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40014400 	.word	0x40014400
 8004838:	40021000 	.word	0x40021000
 800483c:	48000400 	.word	0x48000400
 8004840:	40014800 	.word	0x40014800

08004844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004848:	bf00      	nop
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004852:	b480      	push	{r7}
 8004854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004856:	e7fe      	b.n	8004856 <HardFault_Handler+0x4>

08004858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800485c:	e7fe      	b.n	800485c <MemManage_Handler+0x4>

0800485e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800485e:	b480      	push	{r7}
 8004860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004862:	e7fe      	b.n	8004862 <BusFault_Handler+0x4>

08004864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004868:	e7fe      	b.n	8004868 <UsageFault_Handler+0x4>

0800486a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800486a:	b480      	push	{r7}
 800486c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800486e:	bf00      	nop
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800487c:	bf00      	nop
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800488a:	bf00      	nop
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004898:	f7fb fce8 	bl	800026c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800489c:	bf00      	nop
 800489e:	bd80      	pop	{r7, pc}

080048a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048a4:	4802      	ldr	r0, [pc, #8]	; (80048b0 <TIM2_IRQHandler+0x10>)
 80048a6:	f7fe f83f 	bl	8002928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	200000d4 	.word	0x200000d4

080048b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048b8:	4b17      	ldr	r3, [pc, #92]	; (8004918 <SystemInit+0x64>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048be:	4a16      	ldr	r2, [pc, #88]	; (8004918 <SystemInit+0x64>)
 80048c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80048c8:	4b14      	ldr	r3, [pc, #80]	; (800491c <SystemInit+0x68>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a13      	ldr	r2, [pc, #76]	; (800491c <SystemInit+0x68>)
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80048d4:	4b11      	ldr	r3, [pc, #68]	; (800491c <SystemInit+0x68>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80048da:	4b10      	ldr	r3, [pc, #64]	; (800491c <SystemInit+0x68>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a0f      	ldr	r2, [pc, #60]	; (800491c <SystemInit+0x68>)
 80048e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80048e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80048e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80048ea:	4b0c      	ldr	r3, [pc, #48]	; (800491c <SystemInit+0x68>)
 80048ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80048f2:	4b0a      	ldr	r3, [pc, #40]	; (800491c <SystemInit+0x68>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a09      	ldr	r2, [pc, #36]	; (800491c <SystemInit+0x68>)
 80048f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80048fe:	4b07      	ldr	r3, [pc, #28]	; (800491c <SystemInit+0x68>)
 8004900:	2200      	movs	r2, #0
 8004902:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004904:	4b04      	ldr	r3, [pc, #16]	; (8004918 <SystemInit+0x64>)
 8004906:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800490a:	609a      	str	r2, [r3, #8]
#endif
}
 800490c:	bf00      	nop
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	e000ed00 	.word	0xe000ed00
 800491c:	40021000 	.word	0x40021000

08004920 <_Z15filterConfigCANP19__CAN_HandleTypeDef>:
#include "zenith_can_lib.h"

Z_CAN_Package NULL_MSG = {0xffffffff, {0,0,0,0,0,0,0,0}};

void filterConfigCAN(CAN_HandleTypeDef *hcan1)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08c      	sub	sp, #48	; 0x30
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

	CAN_FilterTypeDef can1FilterInit;

	can1FilterInit.FilterActivation = ENABLE;
 8004928:	2301      	movs	r3, #1
 800492a:	62bb      	str	r3, [r7, #40]	; 0x28
	can1FilterInit.FilterBank = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	61fb      	str	r3, [r7, #28]
	can1FilterInit.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004930:	2300      	movs	r3, #0
 8004932:	61bb      	str	r3, [r7, #24]
	can1FilterInit.FilterIdHigh = 0x0000;
 8004934:	2300      	movs	r3, #0
 8004936:	60bb      	str	r3, [r7, #8]
	can1FilterInit.FilterIdLow = 0x0000;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
	can1FilterInit.FilterMaskIdHigh = 0x0000;
 800493c:	2300      	movs	r3, #0
 800493e:	613b      	str	r3, [r7, #16]
	can1FilterInit.FilterMaskIdLow = 0x0000;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
	can1FilterInit.FilterMode = CAN_FILTERMODE_IDMASK;
 8004944:	2300      	movs	r3, #0
 8004946:	623b      	str	r3, [r7, #32]
	can1FilterInit.FilterScale = CAN_FILTERSCALE_32BIT;
 8004948:	2301      	movs	r3, #1
 800494a:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcan1, &can1FilterInit);
 800494c:	f107 0308 	add.w	r3, r7, #8
 8004950:	4619      	mov	r1, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fb fdc5 	bl	80004e2 <HAL_CAN_ConfigFilter>
}
 8004958:	bf00      	nop
 800495a:	3730      	adds	r7, #48	; 0x30
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <_Z15readCanMessagesP19__CAN_HandleTypeDef>:
		return -1;
	}
}

Z_CAN_Package readCanMessages(CAN_HandleTypeDef *hcan1)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	; 0x28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
	Z_CAN_Package package = NULL_MSG;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a11      	ldr	r2, [pc, #68]	; (80049b4 <_Z15readCanMessagesP19__CAN_HandleTypeDef+0x54>)
 800496e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004970:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t RxFifo = CAN_RX_FIFO0;
 8004974:	2300      	movs	r3, #0
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_RxHeaderTypeDef pRxHeader;

	if(HAL_CAN_GetRxFifoFillLevel(hcan1, RxFifo) != 0){
 8004978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800497a:	6838      	ldr	r0, [r7, #0]
 800497c:	f7fb ffd2 	bl	8000924 <HAL_CAN_GetRxFifoFillLevel>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	bf14      	ite	ne
 8004986:	2301      	movne	r3, #1
 8004988:	2300      	moveq	r3, #0
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00b      	beq.n	80049a8 <_Z15readCanMessagesP19__CAN_HandleTypeDef+0x48>
		HAL_CAN_GetRxMessage(hcan1, RxFifo, &pRxHeader, package.data);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	f107 0208 	add.w	r2, r7, #8
 8004998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800499a:	6838      	ldr	r0, [r7, #0]
 800499c:	f7fb feaf 	bl	80006fe <HAL_CAN_GetRxMessage>
		package.identifier = pRxHeader.StdId;
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	601a      	str	r2, [r3, #0]
	}
	return package;
 80049a6:	bf00      	nop
 80049a8:	bf00      	nop
}
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	3728      	adds	r7, #40	; 0x28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000038 	.word	0x20000038

080049b8 <_Z7isEqual13Z_CAN_PackageS_>:

uint8_t isEqual(Z_CAN_Package p1, Z_CAN_Package p2){
 80049b8:	b082      	sub	sp, #8
 80049ba:	b490      	push	{r4, r7}
 80049bc:	b086      	sub	sp, #24
 80049be:	af00      	add	r7, sp, #0
 80049c0:	1d3c      	adds	r4, r7, #4
 80049c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;

	if(p1.identifier != p2.identifier){
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <_Z7isEqual13Z_CAN_PackageS_+0x1c>
		return 0;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e018      	b.n	8004a06 <_Z7isEqual13Z_CAN_PackageS_+0x4e>
	}

	for(i = 0; i < 8; i++){
 80049d4:	2300      	movs	r3, #0
 80049d6:	75fb      	strb	r3, [r7, #23]
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	2b07      	cmp	r3, #7
 80049dc:	d812      	bhi.n	8004a04 <_Z7isEqual13Z_CAN_PackageS_+0x4c>
		if(p1.data[i] != p2.data[i]){
 80049de:	7dfb      	ldrb	r3, [r7, #23]
 80049e0:	f107 0218 	add.w	r2, r7, #24
 80049e4:	4413      	add	r3, r2
 80049e6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
 80049ec:	f107 0120 	add.w	r1, r7, #32
 80049f0:	440b      	add	r3, r1
 80049f2:	7a1b      	ldrb	r3, [r3, #8]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d001      	beq.n	80049fc <_Z7isEqual13Z_CAN_PackageS_+0x44>
			return 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	e004      	b.n	8004a06 <_Z7isEqual13Z_CAN_PackageS_+0x4e>
	for(i = 0; i < 8; i++){
 80049fc:	7dfb      	ldrb	r3, [r7, #23]
 80049fe:	3301      	adds	r3, #1
 8004a00:	75fb      	strb	r3, [r7, #23]
 8004a02:	e7e9      	b.n	80049d8 <_Z7isEqual13Z_CAN_PackageS_+0x20>
		}
	}

	return 1;
 8004a04:	2301      	movs	r3, #1
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc90      	pop	{r4, r7}
 8004a0e:	b002      	add	sp, #8
 8004a10:	4770      	bx	lr
	...

08004a14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a4c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004a18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004a1a:	e003      	b.n	8004a24 <LoopCopyDataInit>

08004a1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004a1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004a20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004a22:	3104      	adds	r1, #4

08004a24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004a24:	480b      	ldr	r0, [pc, #44]	; (8004a54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004a26:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004a28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004a2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004a2c:	d3f6      	bcc.n	8004a1c <CopyDataInit>
	ldr	r2, =_sbss
 8004a2e:	4a0b      	ldr	r2, [pc, #44]	; (8004a5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004a30:	e002      	b.n	8004a38 <LoopFillZerobss>

08004a32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004a32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004a34:	f842 3b04 	str.w	r3, [r2], #4

08004a38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004a38:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <LoopForever+0x16>)
	cmp	r2, r3
 8004a3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004a3c:	d3f9      	bcc.n	8004a32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a3e:	f7ff ff39 	bl	80048b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a42:	f000 f811 	bl	8004a68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a46:	f7fe ffc1 	bl	80039cc <main>

08004a4a <LoopForever>:

LoopForever:
    b LoopForever
 8004a4a:	e7fe      	b.n	8004a4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004a4c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004a50:	08004b20 	.word	0x08004b20
	ldr	r0, =_sdata
 8004a54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004a58:	20000044 	.word	0x20000044
	ldr	r2, =_sbss
 8004a5c:	20000044 	.word	0x20000044
	ldr	r3, = _ebss
 8004a60:	2000022c 	.word	0x2000022c

08004a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a64:	e7fe      	b.n	8004a64 <ADC1_2_IRQHandler>
	...

08004a68 <__libc_init_array>:
 8004a68:	b570      	push	{r4, r5, r6, lr}
 8004a6a:	4e0d      	ldr	r6, [pc, #52]	; (8004aa0 <__libc_init_array+0x38>)
 8004a6c:	4c0d      	ldr	r4, [pc, #52]	; (8004aa4 <__libc_init_array+0x3c>)
 8004a6e:	1ba4      	subs	r4, r4, r6
 8004a70:	10a4      	asrs	r4, r4, #2
 8004a72:	2500      	movs	r5, #0
 8004a74:	42a5      	cmp	r5, r4
 8004a76:	d109      	bne.n	8004a8c <__libc_init_array+0x24>
 8004a78:	4e0b      	ldr	r6, [pc, #44]	; (8004aa8 <__libc_init_array+0x40>)
 8004a7a:	4c0c      	ldr	r4, [pc, #48]	; (8004aac <__libc_init_array+0x44>)
 8004a7c:	f000 f820 	bl	8004ac0 <_init>
 8004a80:	1ba4      	subs	r4, r4, r6
 8004a82:	10a4      	asrs	r4, r4, #2
 8004a84:	2500      	movs	r5, #0
 8004a86:	42a5      	cmp	r5, r4
 8004a88:	d105      	bne.n	8004a96 <__libc_init_array+0x2e>
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
 8004a8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a90:	4798      	blx	r3
 8004a92:	3501      	adds	r5, #1
 8004a94:	e7ee      	b.n	8004a74 <__libc_init_array+0xc>
 8004a96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a9a:	4798      	blx	r3
 8004a9c:	3501      	adds	r5, #1
 8004a9e:	e7f2      	b.n	8004a86 <__libc_init_array+0x1e>
 8004aa0:	08004b18 	.word	0x08004b18
 8004aa4:	08004b18 	.word	0x08004b18
 8004aa8:	08004b18 	.word	0x08004b18
 8004aac:	08004b1c 	.word	0x08004b1c

08004ab0 <memset>:
 8004ab0:	4402      	add	r2, r0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d100      	bne.n	8004aba <memset+0xa>
 8004ab8:	4770      	bx	lr
 8004aba:	f803 1b01 	strb.w	r1, [r3], #1
 8004abe:	e7f9      	b.n	8004ab4 <memset+0x4>

08004ac0 <_init>:
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac2:	bf00      	nop
 8004ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac6:	bc08      	pop	{r3}
 8004ac8:	469e      	mov	lr, r3
 8004aca:	4770      	bx	lr

08004acc <_fini>:
 8004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ace:	bf00      	nop
 8004ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad2:	bc08      	pop	{r3}
 8004ad4:	469e      	mov	lr, r3
 8004ad6:	4770      	bx	lr
